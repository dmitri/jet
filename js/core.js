var Templates = {}; 

Templates["./views/partials/search/result.ejs"] = function anonymous(locals, filters, escape) {
    escape = escape || function(html) {
        return String(html).replace(/&(?!\w+;)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    };
    var __stack = {
        lineno: 1,
        input: '<%\nvar hideRates = (result.type == \'voucher\') || (result.type == \'travelPlanningVoucher\') || (result.type == \'tour\') || (result.type == \'journey\');\n%>\n\n<%\nvar isHybridProperty = (typeof isHybridProperty != \'undefined\') ? isHybridProperty : false;\n\nvar hasRateSummary = (\'rateSummary\' in result);\n%>\n\n<li class="<%= isHybridProperty ? \'is-hybrid\' : \'\' %> <%= hasRateSummary ? \'has-rate-summary\' : \'no-rate-summary\' %> result <%= result.type %> <%= (index + 1) % 2 === 0 ? \'even\' : \'\' %> <%= isDatedSearch ? \'dated\' : \'dateless\' %>" itemscope itemtype="http://schema.org/Product" data-property-type="<%= result.type %>"  data-property-id="<%= result.id %>" data-property-channel="<%= result.channel %>">\n	<a href="<%= propertyUrl %>" class="tenor result <%= result.type.toLowerCase() %> <%= result.event ? \'flash\' : \'retail\' %> clearfix" itemprop="url">\n	<span class="ff3-wrap">\n		<%  \n			var galImgs = result.editorialReview.galleryImages;\n			var firstImage = result.image;\n			var galleryImages = firstImage ? [firstImage] : [];\n\n            _.each(galImgs, function(img) {\n                if (img.type == \'image\') {\n                    galleryImages.push(img);\n                }\n            });\n\n            galleryImages = galleryImages.slice(0,3);\n\n		%>\n		<% if(result.rateSummary && result.rateSummary.rate && result.rateSummary.rate.promoLabel) { %>\n			<div class="promotion">\n				<div class="promotion-star"></div>\n				<div class="promotion-star-message">Special Promotion</div>\n				<div class="promotion-message"><%= result.rateSummary.rate.promoLabel %></div>\n			</div>\n		<% } %>\n\n        <% if(result.event && result.event) { %>\n            <div class="hybrid-flash-banner">\n                <span class="icon"></span> Flash Sale: <span class="time"><%= Jetsetter.Utilities.String.getFlashBanner(result.event.dateRange.end) %></span>\n                <% if(result.rateSummary && result.rateSummary.rate && result.rateSummary.rate.promoLabel) { %>\n                    &mdash; <%= result.rateSummary.rate.promoLabel %>\n                <% } %>\n            </div>\n        <% } %>\n\n		<div class="search-result">\n			<div class="gallery">\n				<ul class="slides">\n					<% _.each(galleryImages, function(image, i) { %>\n						<li class="slide <%= i == 0 ? \'first\' : \'\' %>">\n							<%\n                            var width = 350;\n                            var height = 250;\n                            if (isHybridProperty) {\n                                width = 496;\n                                height = 285;\n                            }\n                            %>\n							<img alt="<%= _.escapeHTML(result.title) %>" width="<%=width%>" height="<%=height%>" data-path="<%= image.path %>" <%= i == 0 ? "itemprop=\'image\'" : "" %> />\n						</li>\n					<% }); %>\n					<% if(result.rating && (result.rating.percent >= 85)) { %>\n						<li class="slide rating">\n							<div class="text" itemprop="rating" itemscope itemtype="http://data-vocabulary.org/Review-aggregate">\n								<meta itemprop="best" content="100" />\n								<meta itemprop="worst" content="1" />\n								<div class="icon"><%= result.rating.percent %><span class="percent">%</span></div>\n								<p>Recommended by <span itemprop="value"><%= result.rating.percent %></span>% of <span itemprop="count"><%= result.rating.count %></span> member<%= result.rating.count > 1 ? \'s\' : \'\' %>.</p>\n							</div>\n						</li>\n					<% } %>\n				</ul>\n				<div class="gallery-dots"></div>\n			</div>\n\n            <%\n\n            var hasJsReviews = (result.rating && result.rating.percent > 0);\n            var hasTaReviews = result.details.taRating;\n\n            %>\n\n			<div class="info <%= (!hasJsReviews && !hasTaReviews) ? \'no-reviews\' : \'\' %>">\n				<h2 class="name"><span class="icon" title="<%= result.type %>"></span> <span itemprop="name"><%= _.truncate(result.name, isHybridProperty ? 48 : 24) %></span></h2>\n				<% if(result.description) { %>\n					<div class="location">\n						<span class="icon"></span>\n						<span><%= _.truncate(result.description, 35) %></span>\n					</div>\n				<% } %>\n\n				<% if(result.details && result.details.numBedrooms > 0 &&\n                    result.details.numBathrooms > 0) { %>\n					<div class="room-info"><span class="icon"></span> <span><%= (result.details.numBedrooms != \'N/A\' ? result.details.numBedrooms + \' BR, \' : \'\') + (result.details.numBathrooms != \'N/A\' ? result.details.numBathrooms + \' BA\' : \'\') %></span></div>\n				<% } %>\n\n				<div class="wrapper">\n					<p class="description" itemprop="description"><%= _.truncate(_.stripTags(result.editorialReview.shortIntroduction || result.editorialReview.introduction), isHybridProperty ? 115 : 85) %></p>\n				</div>\n\n                <div class="reviews-section <%= hasJsReviews ? \'has-js-reviews\' : \'\' %> <%= hasTaReviews ? \'has-ta-reviews\' : \'\' %> clearfix">\n                    <% if (hasJsReviews) { %>\n                        <div class="js-reviews">\n                            <span class="percent"><%= result.rating.percent %>%</span> <span><%= isHybridProperty ? \'Members Recommend\' : \'Recommend\' %></span>\n                        </div>\n                    <% } %>\n\n                    <% if (hasTaReviews) { %>\n                        <div class="ta-reviews">\n                            <% if (isHybridProperty) { %>\n                                <div class="trip-owl-icon"></div>\n                            <% } %>\n                            <%\n                            switch (result.details.taRating * 10) {\n                                case 50:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span> <%\n                                    break;\n                                case 45:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span> <%\n                                    break;\n                                case 40:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 35:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 30:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 25:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 20:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 15:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 10:\n                                    %> <span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 5:\n                                    %> <span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                                case 0:\n                                    %> <span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> <%\n                                    break;\n                            }\n                            %>\n                            <span class="rating-num"><%= _.numberFormat(result.details.taRating,1) %></span>\n                            <span class="rating-text"><%= Jetsetter.JetsetUtil.TripAdvisor.ratingToText(result.details.taRating) %></span>\n                        </div>\n                    <% } %>\n                </div>\n\n\n                <% if (isHybridProperty && !result.rateSummary) { %>\n\n                    <div class="sold-out-banner tenor">\n                        <div class="sold-out-head">SOLD OUT!</div>\n                        <div class="sold-out-message">\n                            Sorry, this hotel is no longer available for your dates.<br />\n                            You can choose new dates or select another hotel below.\n                        </div>\n                    </div>\n\n                <% } else { %>\n\n                    <div class="prices clearfix" itemprop="offers" itemscope itemtype="http://schema.org/Offer">\n                        <% if(result.channel == \'retail\' || !isPublic) { %>\n                            <% if (hideRates) { %>\n                                <div class="price-type">Read for more rates</div>\n                            <% } else if(result.rateSummary && result.rateSummary.isAvailable) { %>\n                                <% if(result.rateSummary.rate.bestAvailableRate) { %>\n                                    <meta itemprop="priceCurrency" content="<%= isUk ? \'GBP\' : \'USD\' %>" />\n                                    <div class="price-type <%= isDatedSearch ? \'avg-night\' : \'per-night\' %>">\n                                        <%= isDatedSearch ? \'\' : \'From\' %>\n                                        <% if (result.rateSummary.rate.marketRate && (result.rateSummary.rate.marketRate > result.rateSummary.rate.bestAvailableRate)) { %>\n                                            <span class="market"><%= currencySymbol %><%= _.numberFormat(result.rateSummary.rate.marketRate, 0) %></span>\n                                        <% } %>\n                                        <span class="price" itemprop="price">\n                                            <%= currencySymbol %><%= _.numberFormat(result.rateSummary.rate.bestAvailableRate, 0) %>\n                                        </span>\n                                        <%= isDatedSearch ? \'avg\' : \'\' %> / night\n                                    </div>\n                                <% } else { %>\n                                    <div class="price-type">Read more for rates</div>\n                                <% } %>\n                            <% } else { %>\n                                <div class="price-type">\n                                    <% if (!result.rateSummary) { %>\n                                        Read more for rates\n                                    <% } else if(result.rateSummary.availabilityMessage == \'Occupancy\') { %>\n                                        Cannot accomodate <%= guests %> guests\n                                    <% } else if(result.rateSummary.availabilityMessage == \'Availability\') { %>\n                                        Not enough available rooms\n                                    <% } else { %>\n                                    <% } %>\n                                </div>\n                            <% } %>\n                        <% } %>\n                        <div class="more">\n                            <span class="ab20381_B_show-dated"><%= result.channel == \'flash\' ? \'View Sale\' : \'Get Rates\' %> <span class="arrow">&rarr;</span></span>\n                            <span class="ab20381_B_show-dateless"><%= result.channel == \'flash\' ? \'View Sale\' : \'Check Availability\' %> <span class="arrow">&rarr;</span></span>\n                            <span class="ab20381_B_hide"><%= result.channel == \'flash\' ? \'View Sale\' : \'View Details\' %> <span class="arrow">&rarr;</span></span>\n                        </div>\n                    </div>\n\n                <% } %>\n\n                <div class="quickview-tab-container">\n                    <div class="tab overview">Overview</div>\n                    <% if (!(result.channel == \'flash\' && isPublic)) { %>\n                        <div class="tab rooms"><span class="txt-rooms">Rooms</span> <span class="txt-rates">Rates</span></div>\n                    <% } %>\n                </div>\n			</div>\n			<% if(result.event && result.event) { %>\n				<div class="flash-banner"><span class="icon"></span> <span class="time"><%= Jetsetter.Utilities.String.getFlashBanner(result.event.dateRange.end) %></span></div>\n			<% } %>\n		</div>\n	</span>\n	</a>\n\n    <div class="quickview-container tenor">\n        <div class="tab-content overview clearfix" style="">\n            <div class="image-area">\n                <div class="clearfix images-container">\n                </div>\n\n                <% if (!isHybridProperty) { %>\n                    <div class="jetsetter-verified badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Verified</h4>\n                            <p>Our editors have been here and it has met our standards</p>\n                        </div>\n                    </div>\n\n                    <div class="jetsetter-approved badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Approved</h4>\n                            <p>This hotel meets our standards, but we haven\'t stayed yet</p>\n                        </div>\n                    </div>\n                <% } %>\n\n            </div>\n            <div class="property-info">\n                <div class="box">\n                    <div class="good">\n                        <div class="hd">What we love</div>\n                        <ul>\n                        <% _.each(result.editorialReview.whatWeLove, function(item) { %>\n                            <li><%- item %></li>\n                        <% }) %>\n                        </ul>\n                    </div>\n                    <div class="bad">\n                        <div class="hd">What to know</div>\n                        <ul>\n                            <% _.each(result.editorialReview.whatToKnow, function(item) { %>\n                                <li><%- item %></li>\n                            <% }) %>\n                        </ul>\n                    </div>\n                    <div class="amenities keywords clearfix" style="display:none">\n\n                    </div>\n                </div>\n\n                <% if (isHybridProperty) { %>\n                    <div class="jetsetter-verified badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Verified</h4>\n                            <p>Our editors have been here and it has met our standards</p>\n                        </div>\n                    </div>\n\n                    <div class="jetsetter-approved badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Approved</h4>\n                            <p>This hotel meets our standards, but we haven\'t stayed yet</p>\n                        </div>\n                    </div>\n                <% } %>\n\n                <a class="see-details" href="<%= propertyUrl.replace(\'serplist\',\'SERPQuickView\') %>">See all Details</a>\n            </div>\n        </div>\n\n\n\n        <div class="tab-content rooms">\n\n            <div class="tab-content-loading">Loading . . .</div>\n\n            <div class="jetsetter-rooms" style="display:none">\n                <div class="loading">Loading...</div>\n\n                <div class="room-selector">\n                    <div class="room-list">\n                        <div class="rates-loading-message">Getting Rates . . .</div>\n                        <div class="table-container"><!-- jetsetter rates --></div>\n                        <div class="meta-container"><!-- ta meta rates --></div>\n                        <div class="meta-loading-message">Getting More Rates . . .</div>\n                    </div>\n                </div>\n\n                <!--<div class="rates-unavailable-message">There is no availability for your search. Please adjust your dates, number of rooms, or guests.</div>-->\n\n                <!--<div class="rates-container" style="display:none">-->\n                    <!--<table class="room-rates-table" cellspacing="0" cellpadding="0" border="0">-->\n                        <!--<tr class="headings">-->\n                            <!--<th class="room-image"></th>-->\n                            <!--<th class="room-desc">Room type</th>-->\n                            <!--<th class="room-avg-price">Avg price/night</th>-->\n                            <!--<th class="room-total-price">Total</th>-->\n                            <!--<th class="cta-container"></th>-->\n                        <!--</tr>-->\n                    <!--</table>-->\n                <!--</div>-->\n\n                <div class="no-availability">\n                    We\'re sorry, there is no availability for this hotel on the dates selected. Please try other dates.\n                </div>\n\n                <div class="go-to-details" style="display:none">\n                    <a href="<%= propertyUrl %>">Click to view details of this sale.</a>\n                </div>\n\n                <div class="search-form">\n                    <div class="title">Enter Dates to See Prices</div>\n                    <div class="input-wrapper">\n                        <input class="checkin-calendar-input" value="" />\n                    </div>\n                    <div class="input-wrapper">\n                        <input class="checkout-calendar-input" value="" />\n                    </div>\n\n                    <% if (isHybridProperty) { %>\n                        <%\n                        // get max num guests\n                        var maxGuests = Math.min(_.map(result.roomTypes, function(roomType) {\n                        return roomType.restrictions.maxOccupancy || 4;\n                        })) || 4;\n\n                        %>\n                        <div class="input-wrapper input-guests white">\n                            <select name="guests">\n                                <% for(var i = 1; i <= maxGuests; i++) { %>\n                                <option value="<%=i%>"><%=i%> Guest<%=i > 1 ? \'s\' : \'\'%></option>\n                                <% } %>\n                            </select>\n                        </div>\n\n                        <div class="input-wrapper input-rooms white">\n                            <select name="rooms">\n                                <option value="1">1 Room</option>\n                                <option value="2">2 Rooms</option>\n                                <option value="3">3 Rooms</option>\n                                <option value="4">4 Rooms</option>\n                            </select>\n                        </div>\n                    <% } %>\n                    <button class="cta-button search">Show Prices</button>\n                </div>\n\n                <div class="room-type-container clearfix"></div>\n            </div>\n\n            <div class="rates-with-meta" style="display:none">\n                <div class="loading">Loading...</div>\n\n                <div class="rates-container" style="display:none">\n                    <table class="room-rates-table" cellspacing="0" cellpadding="0" border="0">\n                        <tr class="headings">\n                            <th class="room-image"></th>\n                            <th class="room-desc">Room type</th>\n                            <th class="room-avg-price">Avg price/night</th>\n                            <th class="room-total-price">Total</th>\n                            <th class="cta-container"></th>\n                        </tr>\n                    </table>\n                </div>\n\n                <div class="no-availability" style="display:none">\n                    We\'re sorry, there is no availability for this hotel on the dates selected. Please try other dates.\n                </div>\n\n                <div class="go-to-details" style="display:none">\n                    <a href="<%= propertyUrl %>">Click to view details of this sale.</a>\n                </div>\n\n                <div class="search-form">\n                    <div class="title">Enter Dates to See Prices</div>\n                    <div class="input-wrapper">\n                        <input class="checkin-calendar-input" value="" />\n                    </div>\n                    <div class="input-wrapper">\n                        <input class="checkout-calendar-input" value="" />\n                    </div>\n                    <% if (isHybridProperty) { %>\n                        <%\n                        // get max num guests\n                        var maxGuests = Math.min(_.map(result.roomTypes, function(roomType) {\n                            return roomType.restrictions.maxOccupancy || 4;\n                        })) || 4;\n\n                        %>\n                        <div class="input-wrapper input-guests white">\n                            <select name="guests">\n                                <% for(var i = 1; i <= maxGuests; i++) { %>\n                                    <option value="<%=i%>"><%=i%> Guest<%=i > 1 ? \'s\' : \'\'%></option>\n                                <% } %>\n                            </select>\n                        </div>\n\n                        <div class="input-wrapper input-rooms white">\n                            <select name="rooms">\n                                <option value="1">1 Room</option>\n                                <option value="2">2 Rooms</option>\n                                <option value="3">3 Rooms</option>\n                                <option value="4">4 Rooms</option>\n                            </select>\n                        </div>\n                    <% } %>\n                    <button class="cta-button search">Show Prices</button>\n                </div>\n\n                <div class="room-selector">\n                    <div class="room-list">\n                        <div class="rates-loading-message">Getting Rates . . .</div>\n                        <div class="table-container"><!-- jetsetter rates --></div>\n                        <div class="meta-container"><!-- ta meta rates --></div>\n                        <div class="meta-loading-message">Getting More Rates . . .</div>\n                    </div>\n                </div>\n\n                <div class="room-type-container clearfix"></div>\n\n            </div>\n\n        </div>\n\n        <div class="close">close x</div>\n    </div>\n</li>\n',
        filename: undefined
    };
    function rethrow(err, str, filename, lineno) {
        var lines = str.split("\n"), start = Math.max(lineno - 3, 0), end = Math.min(lines.length, lineno + 3);
        var context = lines.slice(start, end).map(function(line, i) {
            var curr = i + start + 1;
            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
        }).join("\n");
        err.path = filename;
        err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
        throw err;
    }
    try {
        var buf = [];
        with (locals || {}) {
            buf.push("");
            __stack.lineno = 1;
            var hideRates = result.type == "voucher" || result.type == "travelPlanningVoucher" || result.type == "tour" || result.type == "journey";
            buf.push("\n\n");
            __stack.lineno = 5;
            var isHybridProperty = typeof isHybridProperty != "undefined" ? isHybridProperty : false;
            var hasRateSummary = "rateSummary" in result;
            buf.push('\n\n<li class="', escape((__stack.lineno = 11, isHybridProperty ? "is-hybrid" : "")), " ", escape((__stack.lineno = 11, hasRateSummary ? "has-rate-summary" : "no-rate-summary")), " result ", escape((__stack.lineno = 11, result.type)), " ", escape((__stack.lineno = 11, (index + 1) % 2 === 0 ? "even" : "")), " ", escape((__stack.lineno = 11, isDatedSearch ? "dated" : "dateless")), '" itemscope itemtype="http://schema.org/Product" data-property-type="', escape((__stack.lineno = 11, result.type)), '"  data-property-id="', escape((__stack.lineno = 11, result.id)), '" data-property-channel="', escape((__stack.lineno = 11, result.channel)), '">\n	<a href="', escape((__stack.lineno = 12, propertyUrl)), '" class="tenor result ', escape((__stack.lineno = 12, result.type.toLowerCase())), " ", escape((__stack.lineno = 12, result.event ? "flash" : "retail")), ' clearfix" itemprop="url">\n	<span class="ff3-wrap">\n		');
            __stack.lineno = 14;
            var galImgs = result.editorialReview.galleryImages;
            var firstImage = result.image;
            var galleryImages = firstImage ? [ firstImage ] : [];
            _.each(galImgs, function(img) {
                if (img.type == "image") {
                    galleryImages.push(img);
                }
            });
            galleryImages = galleryImages.slice(0, 3);
            buf.push("\n		");
            __stack.lineno = 28;
            if (result.rateSummary && result.rateSummary.rate && result.rateSummary.rate.promoLabel) {
                buf.push('\n			<div class="promotion">\n				<div class="promotion-star"></div>\n				<div class="promotion-star-message">Special Promotion</div>\n				<div class="promotion-message">', escape((__stack.lineno = 32, result.rateSummary.rate.promoLabel)), "</div>\n			</div>\n		");
                __stack.lineno = 34;
            }
            buf.push("\n\n        ");
            __stack.lineno = 36;
            if (result.event && result.event) {
                buf.push('\n            <div class="hybrid-flash-banner">\n                <span class="icon"></span> Flash Sale: <span class="time">', escape((__stack.lineno = 38, Jetsetter.Utilities.String.getFlashBanner(result.event.dateRange.end))), "</span>\n                ");
                __stack.lineno = 39;
                if (result.rateSummary && result.rateSummary.rate && result.rateSummary.rate.promoLabel) {
                    buf.push("\n                    &mdash; ", escape((__stack.lineno = 40, result.rateSummary.rate.promoLabel)), "\n                ");
                    __stack.lineno = 41;
                }
                buf.push("\n            </div>\n        ");
                __stack.lineno = 43;
            }
            buf.push('\n\n		<div class="search-result">\n			<div class="gallery">\n				<ul class="slides">\n					');
            __stack.lineno = 48;
            _.each(galleryImages, function(image, i) {
                buf.push('\n						<li class="slide ', escape((__stack.lineno = 49, i == 0 ? "first" : "")), '">\n							');
                __stack.lineno = 50;
                var width = 350;
                var height = 250;
                if (isHybridProperty) {
                    width = 496;
                    height = 285;
                }
                buf.push('\n							<img alt="', escape((__stack.lineno = 58, _.escapeHTML(result.title))), '" width="', escape((__stack.lineno = 58, width)), '" height="', escape((__stack.lineno = 58, height)), '" data-path="', escape((__stack.lineno = 58, image.path)), '" ', escape((__stack.lineno = 58, i == 0 ? "itemprop='image'" : "")), " />\n						</li>\n					");
                __stack.lineno = 60;
            });
            buf.push("\n					");
            __stack.lineno = 61;
            if (result.rating && result.rating.percent >= 85) {
                buf.push('\n						<li class="slide rating">\n							<div class="text" itemprop="rating" itemscope itemtype="http://data-vocabulary.org/Review-aggregate">\n								<meta itemprop="best" content="100" />\n								<meta itemprop="worst" content="1" />\n								<div class="icon">', escape((__stack.lineno = 66, result.rating.percent)), '<span class="percent">%</span></div>\n								<p>Recommended by <span itemprop="value">', escape((__stack.lineno = 67, result.rating.percent)), '</span>% of <span itemprop="count">', escape((__stack.lineno = 67, result.rating.count)), "</span> member", escape((__stack.lineno = 67, result.rating.count > 1 ? "s" : "")), ".</p>\n							</div>\n						</li>\n					");
                __stack.lineno = 70;
            }
            buf.push('\n				</ul>\n				<div class="gallery-dots"></div>\n			</div>\n\n            ');
            __stack.lineno = 75;
            var hasJsReviews = result.rating && result.rating.percent > 0;
            var hasTaReviews = result.details.taRating;
            buf.push('\n\n			<div class="info ', escape((__stack.lineno = 82, !hasJsReviews && !hasTaReviews ? "no-reviews" : "")), '">\n				<h2 class="name"><span class="icon" title="', escape((__stack.lineno = 83, result.type)), '"></span> <span itemprop="name">', escape((__stack.lineno = 83, _.truncate(result.name, isHybridProperty ? 48 : 24))), "</span></h2>\n				");
            __stack.lineno = 84;
            if (result.description) {
                buf.push('\n					<div class="location">\n						<span class="icon"></span>\n						<span>', escape((__stack.lineno = 87, _.truncate(result.description, 35))), "</span>\n					</div>\n				");
                __stack.lineno = 89;
            }
            buf.push("\n\n				");
            __stack.lineno = 91;
            if (result.details && result.details.numBedrooms > 0 && result.details.numBathrooms > 0) {
                buf.push('\n					<div class="room-info"><span class="icon"></span> <span>', escape((__stack.lineno = 93, (result.details.numBedrooms != "N/A" ? result.details.numBedrooms + " BR, " : "") + (result.details.numBathrooms != "N/A" ? result.details.numBathrooms + " BA" : ""))), "</span></div>\n				");
                __stack.lineno = 94;
            }
            buf.push('\n\n				<div class="wrapper">\n					<p class="description" itemprop="description">', escape((__stack.lineno = 97, _.truncate(_.stripTags(result.editorialReview.shortIntroduction || result.editorialReview.introduction), isHybridProperty ? 115 : 85))), '</p>\n				</div>\n\n                <div class="reviews-section ', escape((__stack.lineno = 100, hasJsReviews ? "has-js-reviews" : "")), " ", escape((__stack.lineno = 100, hasTaReviews ? "has-ta-reviews" : "")), ' clearfix">\n                    ');
            __stack.lineno = 101;
            if (hasJsReviews) {
                buf.push('\n                        <div class="js-reviews">\n                            <span class="percent">', escape((__stack.lineno = 103, result.rating.percent)), "%</span> <span>", escape((__stack.lineno = 103, isHybridProperty ? "Members Recommend" : "Recommend")), "</span>\n                        </div>\n                    ");
                __stack.lineno = 105;
            }
            buf.push("\n\n                    ");
            __stack.lineno = 107;
            if (hasTaReviews) {
                buf.push('\n                        <div class="ta-reviews">\n                            ');
                __stack.lineno = 109;
                if (isHybridProperty) {
                    buf.push('\n                                <div class="trip-owl-icon"></div>\n                            ');
                    __stack.lineno = 111;
                }
                buf.push("\n                            ");
                __stack.lineno = 112;
                switch (result.details.taRating * 10) {
                  case 50:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span> ');
                    __stack.lineno = 115;
                    break;
                  case 45:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span> ');
                    __stack.lineno = 118;
                    break;
                  case 40:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 121;
                    break;
                  case 35:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 124;
                    break;
                  case 30:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 127;
                    break;
                  case 25:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 130;
                    break;
                  case 20:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 133;
                    break;
                  case 15:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 136;
                    break;
                  case 10:
                    buf.push(' <span class="ta-rating-full"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 139;
                    break;
                  case 5:
                    buf.push(' <span class="ta-rating-half"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 142;
                    break;
                  case 0:
                    buf.push(' <span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span><span class="ta-rating-void"></span> ');
                    __stack.lineno = 145;
                    break;
                }
                buf.push('\n                            <span class="rating-num">', escape((__stack.lineno = 149, _.numberFormat(result.details.taRating, 1))), '</span>\n                            <span class="rating-text">', escape((__stack.lineno = 150, Jetsetter.JetsetUtil.TripAdvisor.ratingToText(result.details.taRating))), "</span>\n                        </div>\n                    ");
                __stack.lineno = 152;
            }
            buf.push("\n                </div>\n\n\n                ");
            __stack.lineno = 156;
            if (isHybridProperty && !result.rateSummary) {
                buf.push('\n\n                    <div class="sold-out-banner tenor">\n                        <div class="sold-out-head">SOLD OUT!</div>\n                        <div class="sold-out-message">\n                            Sorry, this hotel is no longer available for your dates.<br />\n                            You can choose new dates or select another hotel below.\n                        </div>\n                    </div>\n\n                ');
                __stack.lineno = 166;
            } else {
                buf.push('\n\n                    <div class="prices clearfix" itemprop="offers" itemscope itemtype="http://schema.org/Offer">\n                        ');
                __stack.lineno = 169;
                if (result.channel == "retail" || !isPublic) {
                    buf.push("\n                            ");
                    __stack.lineno = 170;
                    if (hideRates) {
                        buf.push('\n                                <div class="price-type">Read for more rates</div>\n                            ');
                        __stack.lineno = 172;
                    } else if (result.rateSummary && result.rateSummary.isAvailable) {
                        buf.push("\n                                ");
                        __stack.lineno = 173;
                        if (result.rateSummary.rate.bestAvailableRate) {
                            buf.push('\n                                    <meta itemprop="priceCurrency" content="', escape((__stack.lineno = 174, isUk ? "GBP" : "USD")), '" />\n                                    <div class="price-type ', escape((__stack.lineno = 175, isDatedSearch ? "avg-night" : "per-night")), '">\n                                        ', escape((__stack.lineno = 176, isDatedSearch ? "" : "From")), "\n                                        ");
                            __stack.lineno = 177;
                            if (result.rateSummary.rate.marketRate && result.rateSummary.rate.marketRate > result.rateSummary.rate.bestAvailableRate) {
                                buf.push('\n                                            <span class="market">', escape((__stack.lineno = 178, currencySymbol)), "", escape((__stack.lineno = 178, _.numberFormat(result.rateSummary.rate.marketRate, 0))), "</span>\n                                        ");
                                __stack.lineno = 179;
                            }
                            buf.push('\n                                        <span class="price" itemprop="price">\n                                            ', escape((__stack.lineno = 181, currencySymbol)), "", escape((__stack.lineno = 181, _.numberFormat(result.rateSummary.rate.bestAvailableRate, 0))), "\n                                        </span>\n                                        ", escape((__stack.lineno = 183, isDatedSearch ? "avg" : "")), " / night\n                                    </div>\n                                ");
                            __stack.lineno = 185;
                        } else {
                            buf.push('\n                                    <div class="price-type">Read more for rates</div>\n                                ');
                            __stack.lineno = 187;
                        }
                        buf.push("\n                            ");
                        __stack.lineno = 188;
                    } else {
                        buf.push('\n                                <div class="price-type">\n                                    ');
                        __stack.lineno = 190;
                        if (!result.rateSummary) {
                            buf.push("\n                                        Read more for rates\n                                    ");
                            __stack.lineno = 192;
                        } else if (result.rateSummary.availabilityMessage == "Occupancy") {
                            buf.push("\n                                        Cannot accomodate ", escape((__stack.lineno = 193, guests)), " guests\n                                    ");
                            __stack.lineno = 194;
                        } else if (result.rateSummary.availabilityMessage == "Availability") {
                            buf.push("\n                                        Not enough available rooms\n                                    ");
                            __stack.lineno = 196;
                        } else {
                            buf.push("\n                                    ");
                            __stack.lineno = 197;
                        }
                        buf.push("\n                                </div>\n                            ");
                        __stack.lineno = 199;
                    }
                    buf.push("\n                        ");
                    __stack.lineno = 200;
                }
                buf.push('\n                        <div class="more">\n                            <span class="ab20381_B_show-dated">', escape((__stack.lineno = 202, result.channel == "flash" ? "View Sale" : "Get Rates")), ' <span class="arrow">&rarr;</span></span>\n                            <span class="ab20381_B_show-dateless">', escape((__stack.lineno = 203, result.channel == "flash" ? "View Sale" : "Check Availability")), ' <span class="arrow">&rarr;</span></span>\n                            <span class="ab20381_B_hide">', escape((__stack.lineno = 204, result.channel == "flash" ? "View Sale" : "View Details")), ' <span class="arrow">&rarr;</span></span>\n                        </div>\n                    </div>\n\n                ');
                __stack.lineno = 208;
            }
            buf.push('\n\n                <div class="quickview-tab-container">\n                    <div class="tab overview">Overview</div>\n                    ');
            __stack.lineno = 212;
            if (!(result.channel == "flash" && isPublic)) {
                buf.push('\n                        <div class="tab rooms"><span class="txt-rooms">Rooms</span> <span class="txt-rates">Rates</span></div>\n                    ');
                __stack.lineno = 214;
            }
            buf.push("\n                </div>\n			</div>\n			");
            __stack.lineno = 217;
            if (result.event && result.event) {
                buf.push('\n				<div class="flash-banner"><span class="icon"></span> <span class="time">', escape((__stack.lineno = 218, Jetsetter.Utilities.String.getFlashBanner(result.event.dateRange.end))), "</span></div>\n			");
                __stack.lineno = 219;
            }
            buf.push('\n		</div>\n	</span>\n	</a>\n\n    <div class="quickview-container tenor">\n        <div class="tab-content overview clearfix" style="">\n            <div class="image-area">\n                <div class="clearfix images-container">\n                </div>\n\n                ');
            __stack.lineno = 230;
            if (!isHybridProperty) {
                buf.push('\n                    <div class="jetsetter-verified badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Verified</h4>\n                            <p>Our editors have been here and it has met our standards</p>\n                        </div>\n                    </div>\n\n                    <div class="jetsetter-approved badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Approved</h4>\n                            <p>This hotel meets our standards, but we haven\'t stayed yet</p>\n                        </div>\n                    </div>\n                ');
                __stack.lineno = 246;
            }
            buf.push('\n\n            </div>\n            <div class="property-info">\n                <div class="box">\n                    <div class="good">\n                        <div class="hd">What we love</div>\n                        <ul>\n                        ');
            __stack.lineno = 254;
            _.each(result.editorialReview.whatWeLove, function(item) {
                buf.push("\n                            <li>", (__stack.lineno = 255, item), "</li>\n                        ");
                __stack.lineno = 256;
            });
            buf.push('\n                        </ul>\n                    </div>\n                    <div class="bad">\n                        <div class="hd">What to know</div>\n                        <ul>\n                            ');
            __stack.lineno = 262;
            _.each(result.editorialReview.whatToKnow, function(item) {
                buf.push("\n                                <li>", (__stack.lineno = 263, item), "</li>\n                            ");
                __stack.lineno = 264;
            });
            buf.push('\n                        </ul>\n                    </div>\n                    <div class="amenities keywords clearfix" style="display:none">\n\n                    </div>\n                </div>\n\n                ');
            __stack.lineno = 272;
            if (isHybridProperty) {
                buf.push('\n                    <div class="jetsetter-verified badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Verified</h4>\n                            <p>Our editors have been here and it has met our standards</p>\n                        </div>\n                    </div>\n\n                    <div class="jetsetter-approved badge clearfix" style="display:none">\n                        <span class="icon"></span>\n                        <div class="desc">\n                            <h4>Jetsetter Approved</h4>\n                            <p>This hotel meets our standards, but we haven\'t stayed yet</p>\n                        </div>\n                    </div>\n                ');
                __stack.lineno = 288;
            }
            buf.push('\n\n                <a class="see-details" href="', escape((__stack.lineno = 290, propertyUrl.replace("serplist", "SERPQuickView"))), '">See all Details</a>\n            </div>\n        </div>\n\n\n\n        <div class="tab-content rooms">\n\n            <div class="tab-content-loading">Loading . . .</div>\n\n            <div class="jetsetter-rooms" style="display:none">\n                <div class="loading">Loading...</div>\n\n                <div class="room-selector">\n                    <div class="room-list">\n                        <div class="rates-loading-message">Getting Rates . . .</div>\n                        <div class="table-container"><!-- jetsetter rates --></div>\n                        <div class="meta-container"><!-- ta meta rates --></div>\n                        <div class="meta-loading-message">Getting More Rates . . .</div>\n                    </div>\n                </div>\n\n                <!--<div class="rates-unavailable-message">There is no availability for your search. Please adjust your dates, number of rooms, or guests.</div>-->\n\n                <!--<div class="rates-container" style="display:none">-->\n                    <!--<table class="room-rates-table" cellspacing="0" cellpadding="0" border="0">-->\n                        <!--<tr class="headings">-->\n                            <!--<th class="room-image"></th>-->\n                            <!--<th class="room-desc">Room type</th>-->\n                            <!--<th class="room-avg-price">Avg price/night</th>-->\n                            <!--<th class="room-total-price">Total</th>-->\n                            <!--<th class="cta-container"></th>-->\n                        <!--</tr>-->\n                    <!--</table>-->\n                <!--</div>-->\n\n                <div class="no-availability">\n                    We\'re sorry, there is no availability for this hotel on the dates selected. Please try other dates.\n                </div>\n\n                <div class="go-to-details" style="display:none">\n                    <a href="', escape((__stack.lineno = 331, propertyUrl)), '">Click to view details of this sale.</a>\n                </div>\n\n                <div class="search-form">\n                    <div class="title">Enter Dates to See Prices</div>\n                    <div class="input-wrapper">\n                        <input class="checkin-calendar-input" value="" />\n                    </div>\n                    <div class="input-wrapper">\n                        <input class="checkout-calendar-input" value="" />\n                    </div>\n\n                    ');
            __stack.lineno = 343;
            if (isHybridProperty) {
                buf.push("\n                        ");
                __stack.lineno = 344;
                var maxGuests = Math.min(_.map(result.roomTypes, function(roomType) {
                    return roomType.restrictions.maxOccupancy || 4;
                })) || 4;
                buf.push('\n                        <div class="input-wrapper input-guests white">\n                            <select name="guests">\n                                ');
                __stack.lineno = 353;
                for (var i = 1; i <= maxGuests; i++) {
                    buf.push('\n                                <option value="', escape((__stack.lineno = 354, i)), '">', escape((__stack.lineno = 354, i)), " Guest", escape((__stack.lineno = 354, i > 1 ? "s" : "")), "</option>\n                                ");
                    __stack.lineno = 355;
                }
                buf.push('\n                            </select>\n                        </div>\n\n                        <div class="input-wrapper input-rooms white">\n                            <select name="rooms">\n                                <option value="1">1 Room</option>\n                                <option value="2">2 Rooms</option>\n                                <option value="3">3 Rooms</option>\n                                <option value="4">4 Rooms</option>\n                            </select>\n                        </div>\n                    ');
                __stack.lineno = 367;
            }
            buf.push('\n                    <button class="cta-button search">Show Prices</button>\n                </div>\n\n                <div class="room-type-container clearfix"></div>\n            </div>\n\n            <div class="rates-with-meta" style="display:none">\n                <div class="loading">Loading...</div>\n\n                <div class="rates-container" style="display:none">\n                    <table class="room-rates-table" cellspacing="0" cellpadding="0" border="0">\n                        <tr class="headings">\n                            <th class="room-image"></th>\n                            <th class="room-desc">Room type</th>\n                            <th class="room-avg-price">Avg price/night</th>\n                            <th class="room-total-price">Total</th>\n                            <th class="cta-container"></th>\n                        </tr>\n                    </table>\n                </div>\n\n                <div class="no-availability" style="display:none">\n                    We\'re sorry, there is no availability for this hotel on the dates selected. Please try other dates.\n                </div>\n\n                <div class="go-to-details" style="display:none">\n                    <a href="', escape((__stack.lineno = 394, propertyUrl)), '">Click to view details of this sale.</a>\n                </div>\n\n                <div class="search-form">\n                    <div class="title">Enter Dates to See Prices</div>\n                    <div class="input-wrapper">\n                        <input class="checkin-calendar-input" value="" />\n                    </div>\n                    <div class="input-wrapper">\n                        <input class="checkout-calendar-input" value="" />\n                    </div>\n                    ');
            __stack.lineno = 405;
            if (isHybridProperty) {
                buf.push("\n                        ");
                __stack.lineno = 406;
                var maxGuests = Math.min(_.map(result.roomTypes, function(roomType) {
                    return roomType.restrictions.maxOccupancy || 4;
                })) || 4;
                buf.push('\n                        <div class="input-wrapper input-guests white">\n                            <select name="guests">\n                                ');
                __stack.lineno = 415;
                for (var i = 1; i <= maxGuests; i++) {
                    buf.push('\n                                    <option value="', escape((__stack.lineno = 416, i)), '">', escape((__stack.lineno = 416, i)), " Guest", escape((__stack.lineno = 416, i > 1 ? "s" : "")), "</option>\n                                ");
                    __stack.lineno = 417;
                }
                buf.push('\n                            </select>\n                        </div>\n\n                        <div class="input-wrapper input-rooms white">\n                            <select name="rooms">\n                                <option value="1">1 Room</option>\n                                <option value="2">2 Rooms</option>\n                                <option value="3">3 Rooms</option>\n                                <option value="4">4 Rooms</option>\n                            </select>\n                        </div>\n                    ');
                __stack.lineno = 429;
            }
            buf.push('\n                    <button class="cta-button search">Show Prices</button>\n                </div>\n\n                <div class="room-selector">\n                    <div class="room-list">\n                        <div class="rates-loading-message">Getting Rates . . .</div>\n                        <div class="table-container"><!-- jetsetter rates --></div>\n                        <div class="meta-container"><!-- ta meta rates --></div>\n                        <div class="meta-loading-message">Getting More Rates . . .</div>\n                    </div>\n                </div>\n\n                <div class="room-type-container clearfix"></div>\n\n            </div>\n\n        </div>\n\n        <div class="close">close x</div>\n    </div>\n</li>\n');
        }
        return buf.join("");
    } catch (err) {
        rethrow(err, __stack.input, __stack.filename, __stack.lineno);
    }
}; 

/**
 * This file will be shared by server-side and client-side javascript both. Don't add any functions here that can not be run by
 * both node and client-side js
 * @type {Jetsetter|*|{}}
 */

var Jetsetter = Jetsetter || {};
Jetsetter.JetsetUtil = {};

Jetsetter.JetsetUtil.TripAdvisor = {
    ratingToText: function(rating) {
        var howGood;
        if (rating < 2) {
            howGood = 'Terrible';
        } else if (rating < 3) {
            howGood = 'Poor';
        } else if (rating < 4) {
            howGood = 'Average';
        } else if (rating < 5) {
            howGood = 'Very Good';
        } else if (rating) {
            howGood = 'Excellent';
        }
        return howGood;
    }
};

Jetsetter.JetsetUtil.rot13 = function(str) {
    return str.replace(/[a-zA-Z]/g, function(c) {
        return String.fromCharCode((c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
    });
};

Jetsetter.JetsetUtil.getDynamicCropUrl = function(path, w, h, devicePixelRatio, extra) {

        var size = {};
        if (w) {
            size.width = w;
        }
        if (h) {
            size.height = h;
        }

        var version = '';

        var urlJunk = path && path.match(/\?.*|\#.*/); // url junk is anything part of the url starting with '?' or '#'
        if (urlJunk) {
            version = urlJunk.join('|');
            path = path.replace(urlJunk[0], '');
        }

        var cropParams = {
            metadata         : { size : size },
            path             : path,
            version          : version // for cache busting
        };

        if (devicePixelRatio && (devicePixelRatio > 1)) {
            cropParams.devicePixelRatio = devicePixelRatio;
        }

        if (extra && extra.offsetX) {
            cropParams.metadata.centerOffsetX = extra.offsetX;
        }

        if (extra && extra.offsetY) {
            cropParams.metadata.centerOffsetY = extra.offsetY;
        }

        var buffer;
        if (typeof Base64 != 'undefined') {
            buffer = Base64.encode(JSON.stringify(cropParams)).replace(/=/g, '');
        } else if (typeof Buffer != 'undefined') {
            buffer = new Buffer(JSON.stringify(cropParams)).toString('base64').replace(/=/g, '');
        }

        return 'dimg/' + Jetsetter.JetsetUtil.rot13(buffer);

};

Jetsetter.JetsetUtil.generateUuid = function() {
    return 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });
};

// CommonJs wrapper to allow usage of this module in node
if (typeof module !== 'undefined') {
    module.exports = Jetsetter.JetsetUtil;
}
/**
* @preserve HTML5 Shiv 3.7.2 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
*/
!function(a,b){function c(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function d(){var a=y.elements;return"string"==typeof a?a.split(" "):a}function e(a,b){var c=y.elements;"string"!=typeof c&&(c=c.join(" ")),"string"!=typeof a&&(a=a.join(" ")),y.elements=c+" "+a,j(b)}function f(a){var b=x[a[v]];return b||(b={},w++,a[v]=w,x[w]=b),b}function g(a,c,d){if(c||(c=b),q)return c.createElement(a);d||(d=f(c));var e;return e=d.cache[a]?d.cache[a].cloneNode():u.test(a)?(d.cache[a]=d.createElem(a)).cloneNode():d.createElem(a),!e.canHaveChildren||t.test(a)||e.tagUrn?e:d.frag.appendChild(e)}function h(a,c){if(a||(a=b),q)return a.createDocumentFragment();c=c||f(a);for(var e=c.frag.cloneNode(),g=0,h=d(),i=h.length;i>g;g++)e.createElement(h[g]);return e}function i(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return y.shivMethods?g(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+d().join().replace(/[\w\-:]+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(y,b.frag)}function j(a){a||(a=b);var d=f(a);return!y.shivCSS||p||d.hasCSS||(d.hasCSS=!!c(a,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),q||i(a,d),a}function k(a){for(var b,c=a.getElementsByTagName("*"),e=c.length,f=RegExp("^(?:"+d().join("|")+")$","i"),g=[];e--;)b=c[e],f.test(b.nodeName)&&g.push(b.applyElement(l(b)));return g}function l(a){for(var b,c=a.attributes,d=c.length,e=a.ownerDocument.createElement(A+":"+a.nodeName);d--;)b=c[d],b.specified&&e.setAttribute(b.nodeName,b.nodeValue);return e.style.cssText=a.style.cssText,e}function m(a){for(var b,c=a.split("{"),e=c.length,f=RegExp("(^|[\\s,>+~])("+d().join("|")+")(?=[[\\s,>+~#.:]|$)","gi"),g="$1"+A+"\\:$2";e--;)b=c[e]=c[e].split("}"),b[b.length-1]=b[b.length-1].replace(f,g),c[e]=b.join("}");return c.join("{")}function n(a){for(var b=a.length;b--;)a[b].removeNode()}function o(a){function b(){clearTimeout(g._removeSheetTimer),d&&d.removeNode(!0),d=null}var d,e,g=f(a),h=a.namespaces,i=a.parentWindow;return!B||a.printShived?a:("undefined"==typeof h[A]&&h.add(A),i.attachEvent("onbeforeprint",function(){b();for(var f,g,h,i=a.styleSheets,j=[],l=i.length,n=Array(l);l--;)n[l]=i[l];for(;h=n.pop();)if(!h.disabled&&z.test(h.media)){try{f=h.imports,g=f.length}catch(o){g=0}for(l=0;g>l;l++)n.push(f[l]);try{j.push(h.cssText)}catch(o){}}j=m(j.reverse().join("")),e=k(a),d=c(a,j)}),i.attachEvent("onafterprint",function(){n(e),clearTimeout(g._removeSheetTimer),g._removeSheetTimer=setTimeout(b,500)}),a.printShived=!0,a)}var p,q,r="3.7.2",s=a.html5||{},t=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,u=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,v="_html5shiv",w=0,x={};!function(){try{var a=b.createElement("a");a.innerHTML="<xyz></xyz>",p="hidden"in a,q=1==a.childNodes.length||function(){b.createElement("a");var a=b.createDocumentFragment();return"undefined"==typeof a.cloneNode||"undefined"==typeof a.createDocumentFragment||"undefined"==typeof a.createElement}()}catch(c){p=!0,q=!0}}();var y={elements:s.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",version:r,shivCSS:s.shivCSS!==!1,supportsUnknownElements:q,shivMethods:s.shivMethods!==!1,type:"default",shivDocument:j,createElement:g,createDocumentFragment:h,addElements:e};a.html5=y,j(b);var z=/^$|\b(?:all|print)\b/,A="html5shiv",B=!q&&function(){var c=b.documentElement;return!("undefined"==typeof b.namespaces||"undefined"==typeof b.parentWindow||"undefined"==typeof c.applyElement||"undefined"==typeof c.removeNode||"undefined"==typeof a.attachEvent)}();y.type+=" print",y.shivPrint=o,o(b)}(this,document);
//     Underscore.js 1.4.4
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.4';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? null : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    var args = slice.call(arguments, 2);
    return function() {
      return func.apply(context, args.concat(slice.call(arguments)));
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);
//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.0'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    apos: "'",
    amp: '&'
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;
      return String(str).split(substr).length - 1;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      return String(str).replace(/(?:^|\s)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/_/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (str == null || str == '') return 0;
      str = String(str);
      var num = parseNumber(parseNumber(str).toFixed(~~decimals));
      return num === 0 && !str.match(/^0+$/) ? Number.NaN : num;
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = tsep || ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', '
      lastSeparator = lastSeparator || ' and '
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "Ä…Ã Ã¡Ã¤Ã¢Ã£Ã¥Ã¦Ä‡Ä™Ã¨Ã©Ã«ÃªÃ¬Ã­Ã¯Ã®Å‚Å„Ã²Ã³Ã¶Ã´ÃµÃ¸Ã¹ÃºÃ¼Ã»Ã±Ã§Å¼Åº",
          to    = "aaaaaaaaceeeeeiiiilnoooooouuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str) {
      return _s.surround(str, '"');
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      // Export module
      module.exports = _s;
    }
    exports._s = _s;

  } else if (typeof define === 'function' && define.amd) {
    // Register as a named module with AMD.
    define('underscore.string', [], function() {
      return _s;
    });

  } else {
    // Integrate with Underscore.js if defined
    // or create our own underscore object.
    root._ = root._ || {};
    root._.string = root._.str = _s;
  }

}(this, String);
//! moment.js
//! version : 2.5.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {

    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = "2.5.1",
        global = this,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for language config files
        languages = {},

        // moment internal properties
        momentProperties = {
            _isAMomentObject: null,
            _i : null,
            _f : null,
            _l : null,
            _strict : null,
            _isUTC : null,
            _offset : null,  // optional. Combine with _isUTC
            _pf : null,
            _lang : null  // optional
        },

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports && typeof require !== 'undefined'),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d{1,3}/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.lang().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.lang().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.lang().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.lang().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.lang().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.lang().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Language() {

    }

    // Moment prototype object
    function Moment(config) {
        checkOverflow(config);
        extend(this, config);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            years * 12;

        this._data = {};

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty("toString")) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty("valueOf")) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function cloneMoment(m) {
        var result = {}, i;
        for (i in m) {
            if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
                result[i] = m[i];
            }
        }

        return result;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    // helper function for _.addTime and _.subtractTime
    function addOrSubtractDurationFromMoment(mom, duration, isAdding, ignoreUpdateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months,
            minutes,
            hours;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        // store the minutes and hours so we can restore them
        if (days || months) {
            minutes = mom.minute();
            hours = mom.hour();
        }
        if (days) {
            mom.date(mom.date() + days * isAdding);
        }
        if (months) {
            mom.month(mom.month() + months * isAdding);
        }
        if (milliseconds && !ignoreUpdateOffset) {
            moment.updateOffset(mom, days || months);
        }
        // restore the minutes and hours after possibly changing dst
        if (days || months) {
            mom.minute(minutes);
            mom.hour(hours);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return  Object.prototype.toString.call(input) === '[object Date]' ||
                input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment.fn._lang[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment.fn._lang, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLanguage(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Languages
    ************************************/


    extend(Language.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : "h:mm A",
            L : "MM/DD/YYYY",
            LL : "MMMM D YYYY",
            LLL : "MMMM D YYYY LT",
            LLLL : "dddd, MMMM D YYYY LT"
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },
        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace("%d", number);
        },
        _ordinal : "%d",

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    // Loads a language definition into the `languages` cache.  The function
    // takes a key and optionally values.  If not in the browser and no values
    // are provided, it will load the language file module.  As a convenience,
    // this function also returns the language values.
    function loadLang(key, values) {
        values.abbr = key;
        if (!languages[key]) {
            languages[key] = new Language();
        }
        languages[key].set(values);
        return languages[key];
    }

    // Remove a language from the `languages` cache. Mostly useful in tests.
    function unloadLang(key) {
        delete languages[key];
    }

    // Determines which language definition to use and returns it.
    //
    // With no parameters, it will return the global language.  If you
    // pass in a language key, such as 'en', it will return the
    // definition for 'en', so long as 'en' has already been loaded using
    // moment.lang.
    function getLangDefinition(key) {
        var i = 0, j, lang, next, split,
            get = function (k) {
                if (!languages[k] && hasModule) {
                    try {
                        require('./lang/' + k);
                    } catch (e) { }
                }
                return languages[k];
            };

        if (!key) {
            return moment.fn._lang;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            lang = get(key);
            if (lang) {
                return lang;
            }
            key = [key];
        }

        //pick the language from the array
        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        while (i < key.length) {
            split = normalizeLanguage(key[i]).split('-');
            j = split.length;
            next = normalizeLanguage(key[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                lang = get(split.slice(0, j).join('-'));
                if (lang) {
                    return lang;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return moment.fn._lang;
    }

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = "";
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {

        if (!m.isValid()) {
            return m.lang().invalidDate();
        }

        format = expandFormat(format, m.lang());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, lang) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return lang.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) { return parseTokenOneDigit; }
            /* falls through */
        case 'SS':
            if (strict) { return parseTokenTwoDigits; }
            /* falls through */
        case 'SSS':
            if (strict) { return parseTokenThreeDigits; }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return getLangDefinition(config._l)._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return parseTokenOrdinal;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || "";
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = getLangDefinition(config._l).monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(input, 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = getLangDefinition(config._l).isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'dd':
        case 'ddd':
        case 'dddd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gg':
        case 'gggg':
        case 'GG':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = input;
            }
            break;
        }
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate,
            yearToUse, fixYear, w, temp, lang, weekday, week;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            fixYear = function (val) {
                var int_val = parseInt(val, 10);
                return val ?
                  (val.length < 3 ? (int_val > 68 ? 1900 + int_val : 2000 + int_val) : int_val) :
                  (config._a[YEAR] == null ? moment().weekYear() : config._a[YEAR]);
            };

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                temp = dayOfYearFromWeeks(fixYear(w.GG), w.W || 1, w.E, 4, 1);
            }
            else {
                lang = getLangDefinition(config._l);
                weekday = w.d != null ?  parseWeekday(w.d, lang) :
                  (w.e != null ?  parseInt(w.e, 10) + lang._week.dow : 0);

                week = parseInt(w.w, 10) || 1;

                //if we're parsing 'd', then the low day numbers may be next week
                if (w.d != null && weekday < lang._week.dow) {
                    week++;
                }

                temp = dayOfYearFromWeeks(fixYear(w.gg), week, weekday, lang._week.doy, lang._week.dow);
            }

            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = config._a[YEAR] == null ? currentDate[YEAR] : config._a[YEAR];

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // add the offsets to the time to be parsed so that we can have a clean array for checking isValid
        input[HOUR] += toInt((config._tzm || 0) / 60);
        input[MINUTE] += toInt((config._tzm || 0) % 60);

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var lang = getLangDefinition(config._l),
            string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = extend({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function makeDateFromString(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || " ");
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += "Z";
            }
            makeDateFromStringAndFormat(config);
        }
        else {
            config._d = new Date(string);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched = aspNetJsonRegex.exec(input);

        if (input === undefined) {
            config._d = new Date();
        } else if (matched) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else {
            config._d = new Date(input);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, language) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = language.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(milliseconds, withoutSuffix, lang) {
        var seconds = round(Math.abs(milliseconds) / 1000),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < 45 && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < 45 && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < 22 && ['hh', hours] ||
                days === 1 && ['d'] ||
                days <= 25 && ['dd', days] ||
                days <= 45 && ['M'] ||
                days < 345 && ['MM', round(days / 30)] ||
                years === 1 && ['y'] || ['yy', years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        args[4] = lang;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        if (input === null) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = getLangDefinition().preparse(input);
        }

        if (moment.isMoment(input)) {
            config = cloneMoment(input);

            config._d = new Date(+input._d);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = lang;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    // creating with utc
    moment.utc = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = lang;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
            ret._lang = input._lang;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    moment.lang = function (key, values) {
        var r;
        if (!key) {
            return moment.fn._lang._abbr;
        }
        if (values) {
            loadLang(normalizeLanguage(key), values);
        } else if (values === null) {
            unloadLang(key);
            key = 'en';
        } else if (!languages[key]) {
            getLangDefinition(key);
        }
        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
        return r._abbr;
    };

    // returns language data
    moment.langData = function (key) {
        if (key && key._lang && key._lang._abbr) {
            key = key._lang._abbr;
        }
        return getLangDefinition(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {

            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function () {
            return this.zone(0);
        },

        local : function () {
            this.zone(0);
            this._isUTC = false;
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.lang().postformat(output);
        },

        add : function (input, val) {
            var dur;
            // switch args to support add('s', 1) and add(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this;
        },

        subtract : function (input, val) {
            var dur;
            // switch args to support subtract('s', 1) and subtract(1, 's')
            if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, -1);
            return this;
        },

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function () {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var sod = makeAs(moment(), this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.lang().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.lang());
                return this.add({ d : input - day });
            } else {
                return day;
            }
        },

        month : function (input) {
            var utc = this._isUTC ? 'UTC' : '',
                dayOfMonth;

            if (input != null) {
                if (typeof input === 'string') {
                    input = this.lang().monthsParse(input);
                    if (typeof input !== 'number') {
                        return this;
                    }
                }

                dayOfMonth = Math.min(this.date(),
                        daysInMonth(this.year(), input));
                this._d['set' + utc + 'Month'](input, dayOfMonth);
                moment.updateOffset(this, true);
                return this;
            } else {
                return this._d['get' + utc + 'Month']();
            }
        },

        startOf: function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: function (other) {
            other = moment.apply(null, arguments);
            return other < this ? this : other;
        },

        max: function (other) {
            other = moment.apply(null, arguments);
            return other > this ? this : other;
        },

        zone : function (input, adjust) {
            adjust = (adjust == null ? true : false);
            var offset = this._offset || 0;
            if (input != null) {
                if (typeof input === "string") {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                this._offset = input;
                this._isUTC = true;
                if (offset !== input && adjust) {
                    addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, true);
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? "UTC" : "";
        },

        zoneName : function () {
            return this._isUTC ? "Coordinated Universal Time" : "";
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
        },

        quarter : function () {
            return Math.ceil((this.month() + 1.0) / 3.0);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return input == null ? year : this.add("y", (input - year));
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add("y", (input - year));
        },

        week : function (input) {
            var week = this.lang().week(this);
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
            return input == null ? weekday : this.add("d", input - weekday);
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this._lang._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a language key, it will set the language for this
        // instance.  Otherwise, it will return the language configuration
        // variables for this instance.
        lang : function (key) {
            if (key === undefined) {
                return this._lang;
            } else {
                this._lang = getLangDefinition(key);
                return this;
            }
        }
    });

    // helper for adding shortcuts
    function makeGetterAndSetter(name, key) {
        // ignoreOffsetTransitions provides a hint to updateOffset to not
        // change hours/minutes when crossing a tz boundary.  This is frequently
        // desirable when modifying part of an existing moment object directly.
        var defaultIgnoreOffsetTransitions = key === 'date' || key === 'month' || key === 'year';
        moment.fn[name] = moment.fn[name + 's'] = function (input, ignoreOffsetTransitions) {
            var utc = this._isUTC ? 'UTC' : '';
            if (ignoreOffsetTransitions == null) {
                ignoreOffsetTransitions = defaultIgnoreOffsetTransitions;
            }
            if (input != null) {
                this._d['set' + utc + key](input);
                moment.updateOffset(this, ignoreOffsetTransitions);
                return this;
            } else {
                return this._d['get' + utc + key]();
            }
        };
    }

    // loop through and add shortcuts (Date, Hours, Minutes, Seconds, Milliseconds)
    // Month has a custom getter/setter.
    for (i = 0; i < proxyGettersAndSetters.length; i ++) {
        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase().replace(/s$/, ''), proxyGettersAndSetters[i]);
    }

    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')
    makeGetterAndSetter('year', 'FullYear');

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);
            data.days = days % 30;

            months += absRound(days / 30);
            data.months = months % 12;

            years = absRound(months / 12);
            data.years = years;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var difference = +this,
                output = relativeTime(difference, !withSuffix, this.lang());

            if (withSuffix) {
                output = this.lang().pastFuture(difference, output);
            }

            return this.lang().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            units = normalizeUnits(units);
            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
        },

        lang : moment.fn.lang,

        toIsoString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn['as' + name] = function () {
            return +this / factor;
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase());
        }
    }

    makeDurationAsGetter('Weeks', 6048e5);
    moment.duration.fn.asMonths = function () {
        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
    };


    /************************************
        Default Lang
    ************************************/


    // Set default language, other languages will inherit from English.
    moment.lang('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LANGUAGES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(deprecate) {
        var warned = false, local_moment = moment;
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        // here, `this` means `window` in the browser, or `global` on the server
        // add `moment` as a global object via a string identifier,
        // for Closure Compiler "advanced" mode
        if (deprecate) {
            global.moment = function () {
                if (!warned && console && console.warn) {
                    warned = true;
                    console.warn(
                            "Accessing Moment through the global scope is " +
                            "deprecated, and will be removed in an upcoming " +
                            "release.");
                }
                return local_moment.apply(null, arguments);
            };
            extend(global.moment, local_moment);
        } else {
            global['moment'] = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
        makeGlobal(true);
    } else if (typeof define === "function" && define.amd) {
        define("moment", function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal !== true) {
                // If user provided noGlobal, he is aware of global
                makeGlobal(module.config().noGlobal === undefined);
            }

            return moment;
        });
    } else {
        makeGlobal();
    }
}).call(this);

/* Modernizr 2.8.3 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-boxshadow-opacity-rgba-canvas-audio-video-localstorage-inlinesvg-svg-svgclippaths-cssclasses-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes
 */
;window.Modernizr=function(a,b,c){function B(a){j.cssText=a}function C(a,b){return B(m.join(a+";")+(b||""))}function D(a,b){return typeof a===b}function E(a,b){return!!~(""+a).indexOf(b)}function F(a,b){for(var d in a){var e=a[d];if(!E(e,"-")&&j[e]!==c)return b=="pfx"?e:!0}return!1}function G(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:D(f,"function")?f.bind(d||b):f}return!1}function H(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+o.join(d+" ")+d).split(" ");return D(b,"string")||D(b,"undefined")?F(e,b):(e=(a+" "+p.join(d+" ")+d).split(" "),G(e,b,c))}var d="2.8.3",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k,l={}.toString,m=" -webkit- -moz- -o- -ms- ".split(" "),n="Webkit Moz O ms",o=n.split(" "),p=n.toLowerCase().split(" "),q={svg:"http://www.w3.org/2000/svg"},r={},s={},t={},u=[],v=u.slice,w,x=function(a,c,d,e){var f,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),l.appendChild(j);return f=["&#173;",'<style id="s',h,'">',a,"</style>"].join(""),l.id=h,(m?l:n).innerHTML+=f,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=g.style.overflow,g.style.overflow="hidden",g.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),g.style.overflow=k),!!i},y=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;return f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&&e.removeAttribute&&(e.setAttribute(d,""),f=D(e[d],"function"),D(e[d],"undefined")||(e[d]=c),e.removeAttribute(d))),e=null,f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),z={}.hasOwnProperty,A;!D(z,"undefined")&&!D(z.call,"undefined")?A=function(a,b){return z.call(a,b)}:A=function(a,b){return b in a&&D(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=v.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(v.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(v.call(arguments)))};return e}),r.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&&!!a.getContext("2d")},r.rgba=function(){return B("background-color:rgba(150,255,150,.5)"),E(j.backgroundColor,"rgba")},r.backgroundsize=function(){return H("backgroundSize")},r.boxshadow=function(){return H("boxShadow")},r.opacity=function(){return C("opacity:.55"),/^0.55$/.test(j.opacity)},r.fontface=function(){var a;return x('@font-face {font-family:"font";src:url("https://")}',function(c,d){var e=b.getElementById("smodernizr"),f=e.sheet||e.styleSheet,g=f?f.cssRules&&f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"";a=/src/i.test(g)&&g.indexOf(d.split(" ")[0])===0}),a},r.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),c.h264=a.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,"")}catch(d){}return c},r.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),c.mp3=a.canPlayType("audio/mpeg;").replace(/^no$/,""),c.wav=a.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),c.m4a=(a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")).replace(/^no$/,"")}catch(d){}return c},r.localstorage=function(){try{return localStorage.setItem(h,h),localStorage.removeItem(h),!0}catch(a){return!1}},r.svg=function(){return!!b.createElementNS&&!!b.createElementNS(q.svg,"svg").createSVGRect},r.inlinesvg=function(){var a=b.createElement("div");return a.innerHTML="<svg/>",(a.firstChild&&a.firstChild.namespaceURI)==q.svg},r.svgclippaths=function(){return!!b.createElementNS&&/SVGClipPath/.test(l.call(b.createElementNS(q.svg,"clipPath")))};for(var I in r)A(r,I)&&(w=I.toLowerCase(),e[w]=r[I](),u.push((e[w]?"":"no-")+w));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)A(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof f!="undefined"&&f&&(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},B(""),i=k=null,e._version=d,e._prefixes=m,e._domPrefixes=p,e._cssomPrefixes=o,e.hasEvent=y,e.testProp=function(a){return F([a])},e.testAllProps=H,e.testStyles=x,e.prefixed=function(a,b,c){return b?H(a,b,c):H(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+u.join(" "):""),e}(this,this.document);
/*
---
MooTools: the javascript framework

web build:
 - http://mootools.net/core/8423c12ffd6a6bfcde9ea22554aec795

packager build:
 - packager build Core/Core Core/Array Core/String Core/Number Core/Function Core/Object Core/Event Core/Browser Core/Class Core/Class.Extras Core/Slick.Parser Core/Slick.Finder Core/Element Core/Element.Style Core/Element.Event Core/Element.Delegation Core/Element.Dimensions Core/Fx Core/Fx.CSS Core/Fx.Tween Core/Fx.Morph Core/Fx.Transitions Core/Request Core/Request.HTML Core/Request.JSON Core/Cookie Core/JSON Core/DOMReady

copyrights:
  - [MooTools](http://mootools.net)

licenses:
  - [MIT License](http://mootools.net/license.txt)
...
*/

(function(){this.MooTools={version:"1.5.0",build:"0f7b690afee9349b15909f33016a25d2e4d9f4e3"};var e=this.typeOf=function(i){if(i==null){return"null";}if(i.$family!=null){return i.$family();
}if(i.nodeName){if(i.nodeType==1){return"element";}if(i.nodeType==3){return(/\S/).test(i.nodeValue)?"textnode":"whitespace";}}else{if(typeof i.length=="number"){if("callee" in i){return"arguments";
}if("item" in i){return"collection";}}}return typeof i;};var u=this.instanceOf=function(w,i){if(w==null){return false;}var v=w.$constructor||w.constructor;
while(v){if(v===i){return true;}v=v.parent;}if(!w.hasOwnProperty){return false;}return w instanceof i;};var f=this.Function;var r=true;for(var q in {toString:1}){r=null;
}if(r){r=["hasOwnProperty","valueOf","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","constructor"];}f.prototype.overloadSetter=function(v){var i=this;
return function(x,w){if(x==null){return this;}if(v||typeof x!="string"){for(var y in x){i.call(this,y,x[y]);}if(r){for(var z=r.length;z--;){y=r[z];if(x.hasOwnProperty(y)){i.call(this,y,x[y]);
}}}}else{i.call(this,x,w);}return this;};};f.prototype.overloadGetter=function(v){var i=this;return function(x){var y,w;if(typeof x!="string"){y=x;}else{if(arguments.length>1){y=arguments;
}else{if(v){y=[x];}}}if(y){w={};for(var z=0;z<y.length;z++){w[y[z]]=i.call(this,y[z]);}}else{w=i.call(this,x);}return w;};};f.prototype.extend=function(i,v){this[i]=v;
}.overloadSetter();f.prototype.implement=function(i,v){this.prototype[i]=v;}.overloadSetter();var o=Array.prototype.slice;f.from=function(i){return(e(i)=="function")?i:function(){return i;
};};Array.from=function(i){if(i==null){return[];}return(k.isEnumerable(i)&&typeof i!="string")?(e(i)=="array")?i:o.call(i):[i];};Number.from=function(v){var i=parseFloat(v);
return isFinite(i)?i:null;};String.from=function(i){return i+"";};f.implement({hide:function(){this.$hidden=true;return this;},protect:function(){this.$protected=true;
return this;}});var k=this.Type=function(x,w){if(x){var v=x.toLowerCase();var i=function(y){return(e(y)==v);};k["is"+x]=i;if(w!=null){w.prototype.$family=(function(){return v;
}).hide();w.type=i;}}if(w==null){return null;}w.extend(this);w.$constructor=k;w.prototype.$constructor=w;return w;};var p=Object.prototype.toString;k.isEnumerable=function(i){return(i!=null&&typeof i.length=="number"&&p.call(i)!="[object Function]");
};var b={};var d=function(i){var v=e(i.prototype);return b[v]||(b[v]=[]);};var h=function(w,A){if(A&&A.$hidden){return;}var v=d(this);for(var x=0;x<v.length;
x++){var z=v[x];if(e(z)=="type"){h.call(z,w,A);}else{z.call(this,w,A);}}var y=this.prototype[w];if(y==null||!y.$protected){this.prototype[w]=A;}if(this[w]==null&&e(A)=="function"){t.call(this,w,function(i){return A.apply(i,o.call(arguments,1));
});}};var t=function(i,w){if(w&&w.$hidden){return;}var v=this[i];if(v==null||!v.$protected){this[i]=w;}};k.implement({implement:h.overloadSetter(),extend:t.overloadSetter(),alias:function(i,v){h.call(this,i,this.prototype[v]);
}.overloadSetter(),mirror:function(i){d(this).push(i);return this;}});new k("Type",k);var c=function(v,A,y){var x=(A!=Object),E=A.prototype;if(x){A=new k(v,A);
}for(var B=0,z=y.length;B<z;B++){var F=y[B],D=A[F],C=E[F];if(D){D.protect();}if(x&&C){A.implement(F,C.protect());}}if(x){var w=E.propertyIsEnumerable(y[0]);
A.forEachMethod=function(J){if(!w){for(var I=0,G=y.length;I<G;I++){J.call(E,E[y[I]],y[I]);}}for(var H in E){J.call(E,E[H],H);}};}return c;};c("String",String,["charAt","charCodeAt","concat","contains","indexOf","lastIndexOf","match","quote","replace","search","slice","split","substr","substring","trim","toLowerCase","toUpperCase"])("Array",Array,["pop","push","reverse","shift","sort","splice","unshift","concat","join","slice","indexOf","lastIndexOf","filter","forEach","every","map","some","reduce","reduceRight"])("Number",Number,["toExponential","toFixed","toLocaleString","toPrecision"])("Function",f,["apply","call","bind"])("RegExp",RegExp,["exec","test"])("Object",Object,["create","defineProperty","defineProperties","keys","getPrototypeOf","getOwnPropertyDescriptor","getOwnPropertyNames","preventExtensions","isExtensible","seal","isSealed","freeze","isFrozen"])("Date",Date,["now"]);
Object.extend=t.overloadSetter();Date.extend("now",function(){return +(new Date);});new k("Boolean",Boolean);Number.prototype.$family=function(){return isFinite(this)?"number":"null";
}.hide();Number.extend("random",function(v,i){return Math.floor(Math.random()*(i-v+1)+v);});var l=Object.prototype.hasOwnProperty;Object.extend("forEach",function(i,w,x){for(var v in i){if(l.call(i,v)){w.call(x,i[v],v,i);
}}});Object.each=Object.forEach;Array.implement({forEach:function(x,y){for(var w=0,v=this.length;w<v;w++){if(w in this){x.call(y,this[w],w,this);}}},each:function(i,v){Array.forEach(this,i,v);
return this;}});var s=function(i){switch(e(i)){case"array":return i.clone();case"object":return Object.clone(i);default:return i;}};Array.implement("clone",function(){var v=this.length,w=new Array(v);
while(v--){w[v]=s(this[v]);}return w;});var a=function(v,i,w){switch(e(w)){case"object":if(e(v[i])=="object"){Object.merge(v[i],w);}else{v[i]=Object.clone(w);
}break;case"array":v[i]=w.clone();break;default:v[i]=w;}return v;};Object.extend({merge:function(C,y,x){if(e(y)=="string"){return a(C,y,x);}for(var B=1,w=arguments.length;
B<w;B++){var z=arguments[B];for(var A in z){a(C,A,z[A]);}}return C;},clone:function(i){var w={};for(var v in i){w[v]=s(i[v]);}return w;},append:function(z){for(var y=1,w=arguments.length;
y<w;y++){var v=arguments[y]||{};for(var x in v){z[x]=v[x];}}return z;}});["Object","WhiteSpace","TextNode","Collection","Arguments"].each(function(i){new k(i);
});var j=Date.now();String.extend("uniqueID",function(){return(j++).toString(36);});var g=this.Hash=new k("Hash",function(i){if(e(i)=="hash"){i=Object.clone(i.getClean());
}for(var v in i){this[v]=i[v];}return this;});g.implement({forEach:function(i,v){Object.forEach(this,i,v);},getClean:function(){var v={};for(var i in this){if(this.hasOwnProperty(i)){v[i]=this[i];
}}return v;},getLength:function(){var v=0;for(var i in this){if(this.hasOwnProperty(i)){v++;}}return v;}});g.alias("each","forEach");Object.type=k.isObject;
var n=this.Native=function(i){return new k(i.name,i.initialize);};n.type=k.type;n.implement=function(x,v){for(var w=0;w<x.length;w++){x[w].implement(v);
}return n;};var m=Array.type;Array.type=function(i){return u(i,Array)||m(i);};this.$A=function(i){return Array.from(i).slice();};this.$arguments=function(v){return function(){return arguments[v];
};};this.$chk=function(i){return !!(i||i===0);};this.$clear=function(i){clearTimeout(i);clearInterval(i);return null;};this.$defined=function(i){return(i!=null);
};this.$each=function(w,v,x){var i=e(w);((i=="arguments"||i=="collection"||i=="array"||i=="elements")?Array:Object).each(w,v,x);};this.$empty=function(){};
this.$extend=function(v,i){return Object.append(v,i);};this.$H=function(i){return new g(i);};this.$merge=function(){var i=Array.slice(arguments);i.unshift({});
return Object.merge.apply(null,i);};this.$lambda=f.from;this.$mixin=Object.merge;this.$random=Number.random;this.$splat=Array.from;this.$time=Date.now;
this.$type=function(i){var v=e(i);if(v=="elements"){return"array";}return(v=="null")?false:v;};this.$unlink=function(i){switch(e(i)){case"object":return Object.clone(i);
case"array":return Array.clone(i);case"hash":return new g(i);default:return i;}};})();Array.implement({every:function(c,d){for(var b=0,a=this.length>>>0;
b<a;b++){if((b in this)&&!c.call(d,this[b],b,this)){return false;}}return true;},filter:function(d,f){var c=[];for(var e,b=0,a=this.length>>>0;b<a;b++){if(b in this){e=this[b];
if(d.call(f,e,b,this)){c.push(e);}}}return c;},indexOf:function(c,d){var b=this.length>>>0;for(var a=(d<0)?Math.max(0,b+d):d||0;a<b;a++){if(this[a]===c){return a;
}}return -1;},map:function(c,e){var d=this.length>>>0,b=Array(d);for(var a=0;a<d;a++){if(a in this){b[a]=c.call(e,this[a],a,this);}}return b;},some:function(c,d){for(var b=0,a=this.length>>>0;
b<a;b++){if((b in this)&&c.call(d,this[b],b,this)){return true;}}return false;},clean:function(){return this.filter(function(a){return a!=null;});},invoke:function(a){var b=Array.slice(arguments,1);
return this.map(function(c){return c[a].apply(c,b);});},associate:function(c){var d={},b=Math.min(this.length,c.length);for(var a=0;a<b;a++){d[c[a]]=this[a];
}return d;},link:function(c){var a={};for(var e=0,b=this.length;e<b;e++){for(var d in c){if(c[d](this[e])){a[d]=this[e];delete c[d];break;}}}return a;},contains:function(a,b){return this.indexOf(a,b)!=-1;
},append:function(a){this.push.apply(this,a);return this;},getLast:function(){return(this.length)?this[this.length-1]:null;},getRandom:function(){return(this.length)?this[Number.random(0,this.length-1)]:null;
},include:function(a){if(!this.contains(a)){this.push(a);}return this;},combine:function(c){for(var b=0,a=c.length;b<a;b++){this.include(c[b]);}return this;
},erase:function(b){for(var a=this.length;a--;){if(this[a]===b){this.splice(a,1);}}return this;},empty:function(){this.length=0;return this;},flatten:function(){var d=[];
for(var b=0,a=this.length;b<a;b++){var c=typeOf(this[b]);if(c=="null"){continue;}d=d.concat((c=="array"||c=="collection"||c=="arguments"||instanceOf(this[b],Array))?Array.flatten(this[b]):this[b]);
}return d;},pick:function(){for(var b=0,a=this.length;b<a;b++){if(this[b]!=null){return this[b];}}return null;},hexToRgb:function(b){if(this.length!=3){return null;
}var a=this.map(function(c){if(c.length==1){c+=c;}return parseInt(c,16);});return(b)?a:"rgb("+a+")";},rgbToHex:function(d){if(this.length<3){return null;
}if(this.length==4&&this[3]==0&&!d){return"transparent";}var b=[];for(var a=0;a<3;a++){var c=(this[a]-0).toString(16);b.push((c.length==1)?"0"+c:c);}return(d)?b:"#"+b.join("");
}});Array.alias("extend","append");var $pick=function(){return Array.from(arguments).pick();};String.implement({contains:function(b,a){return(a?String(this).slice(a):String(this)).indexOf(b)>-1;
},test:function(a,b){return((typeOf(a)=="regexp")?a:new RegExp(""+a,b)).test(this);},trim:function(){return String(this).replace(/^\s+|\s+$/g,"");},clean:function(){return String(this).replace(/\s+/g," ").trim();
},camelCase:function(){return String(this).replace(/-\D/g,function(a){return a.charAt(1).toUpperCase();});},hyphenate:function(){return String(this).replace(/[A-Z]/g,function(a){return("-"+a.charAt(0).toLowerCase());
});},capitalize:function(){return String(this).replace(/\b[a-z]/g,function(a){return a.toUpperCase();});},escapeRegExp:function(){return String(this).replace(/([-.*+?^${}()|[\]\/\\])/g,"\\$1");
},toInt:function(a){return parseInt(this,a||10);},toFloat:function(){return parseFloat(this);},hexToRgb:function(b){var a=String(this).match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
return(a)?a.slice(1).hexToRgb(b):null;},rgbToHex:function(b){var a=String(this).match(/\d{1,3}/g);return(a)?a.rgbToHex(b):null;},substitute:function(a,b){return String(this).replace(b||(/\\?\{([^{}]+)\}/g),function(d,c){if(d.charAt(0)=="\\"){return d.slice(1);
}return(a[c]!=null)?a[c]:"";});}});String.prototype.contains=function(a,b){return(b)?(b+this+b).indexOf(b+a+b)>-1:String(this).indexOf(a)>-1;};Number.implement({limit:function(b,a){return Math.min(a,Math.max(b,this));
},round:function(a){a=Math.pow(10,a||0).toFixed(a<0?-a:0);return Math.round(this*a)/a;},times:function(b,c){for(var a=0;a<this;a++){b.call(c,a,this);}},toFloat:function(){return parseFloat(this);
},toInt:function(a){return parseInt(this,a||10);}});Number.alias("each","times");(function(b){var a={};b.each(function(c){if(!Number[c]){a[c]=function(){return Math[c].apply(null,[this].concat(Array.from(arguments)));
};}});Number.implement(a);})(["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","sin","sqrt","tan"]);Function.extend({attempt:function(){for(var b=0,a=arguments.length;
b<a;b++){try{return arguments[b]();}catch(c){}}return null;}});Function.implement({attempt:function(a,c){try{return this.apply(c,Array.from(a));}catch(b){}return null;
},bind:function(e){var a=this,b=arguments.length>1?Array.slice(arguments,1):null,d=function(){};var c=function(){var g=e,h=arguments.length;if(this instanceof c){d.prototype=a.prototype;
g=new d;}var f=(!b&&!h)?a.call(g):a.apply(g,b&&h?b.concat(Array.slice(arguments)):b||arguments);return g==e?f:g;};return c;},pass:function(b,c){var a=this;
if(b!=null){b=Array.from(b);}return function(){return a.apply(c,b||arguments);};},delay:function(b,c,a){return setTimeout(this.pass((a==null?[]:a),c),b);
},periodical:function(c,b,a){return setInterval(this.pass((a==null?[]:a),b),c);}});delete Function.prototype.bind;Function.implement({create:function(b){var a=this;
b=b||{};return function(d){var c=b.arguments;c=(c!=null)?Array.from(c):Array.slice(arguments,(b.event)?1:0);if(b.event){c=[d||window.event].extend(c);}var e=function(){return a.apply(b.bind||null,c);
};if(b.delay){return setTimeout(e,b.delay);}if(b.periodical){return setInterval(e,b.periodical);}if(b.attempt){return Function.attempt(e);}return e();};
},bind:function(c,b){var a=this;if(b!=null){b=Array.from(b);}return function(){return a.apply(c,b||arguments);};},bindWithEvent:function(c,b){var a=this;
if(b!=null){b=Array.from(b);}return function(d){return a.apply(c,(b==null)?arguments:[d].concat(b));};},run:function(a,b){return this.apply(b,Array.from(a));
}});if(Object.create==Function.prototype.create){Object.create=null;}var $try=Function.attempt;(function(){var a=Object.prototype.hasOwnProperty;Object.extend({subset:function(d,g){var f={};
for(var e=0,b=g.length;e<b;e++){var c=g[e];if(c in d){f[c]=d[c];}}return f;},map:function(b,e,f){var d={};for(var c in b){if(a.call(b,c)){d[c]=e.call(f,b[c],c,b);
}}return d;},filter:function(b,e,g){var d={};for(var c in b){var f=b[c];if(a.call(b,c)&&e.call(g,f,c,b)){d[c]=f;}}return d;},every:function(b,d,e){for(var c in b){if(a.call(b,c)&&!d.call(e,b[c],c)){return false;
}}return true;},some:function(b,d,e){for(var c in b){if(a.call(b,c)&&d.call(e,b[c],c)){return true;}}return false;},keys:function(b){var d=[];for(var c in b){if(a.call(b,c)){d.push(c);
}}return d;},values:function(c){var b=[];for(var d in c){if(a.call(c,d)){b.push(c[d]);}}return b;},getLength:function(b){return Object.keys(b).length;},keyOf:function(b,d){for(var c in b){if(a.call(b,c)&&b[c]===d){return c;
}}return null;},contains:function(b,c){return Object.keyOf(b,c)!=null;},toQueryString:function(b,c){var d=[];Object.each(b,function(h,g){if(c){g=c+"["+g+"]";
}var f;switch(typeOf(h)){case"object":f=Object.toQueryString(h,g);break;case"array":var e={};h.each(function(k,j){e[j]=k;});f=Object.toQueryString(e,g);
break;default:f=g+"="+encodeURIComponent(h);}if(h!=null){d.push(f);}});return d.join("&");}});})();Hash.implement({has:Object.prototype.hasOwnProperty,keyOf:function(a){return Object.keyOf(this,a);
},hasValue:function(a){return Object.contains(this,a);},extend:function(a){Hash.each(a||{},function(c,b){Hash.set(this,b,c);},this);return this;},combine:function(a){Hash.each(a||{},function(c,b){Hash.include(this,b,c);
},this);return this;},erase:function(a){if(this.hasOwnProperty(a)){delete this[a];}return this;},get:function(a){return(this.hasOwnProperty(a))?this[a]:null;
},set:function(a,b){if(!this[a]||this.hasOwnProperty(a)){this[a]=b;}return this;},empty:function(){Hash.each(this,function(b,a){delete this[a];},this);
return this;},include:function(a,b){if(this[a]==null){this[a]=b;}return this;},map:function(a,b){return new Hash(Object.map(this,a,b));},filter:function(a,b){return new Hash(Object.filter(this,a,b));
},every:function(a,b){return Object.every(this,a,b);},some:function(a,b){return Object.some(this,a,b);},getKeys:function(){return Object.keys(this);},getValues:function(){return Object.values(this);
},toQueryString:function(a){return Object.toQueryString(this,a);}});Hash.extend=Object.append;Hash.alias({indexOf:"keyOf",contains:"hasValue"});(function(){var i=this.document;
var g=i.window=this;var b=function(n,e){n=n.toLowerCase();e=(e?e.toLowerCase():"");var o=n.match(/(opera|ie|firefox|chrome|trident|crios|version)[\s\/:]([\w\d\.]+)?.*?(safari|(?:rv[\s\/:]|version[\s\/:])([\w\d\.]+)|$)/)||[null,"unknown",0];
if(o[1]=="trident"){o[1]="ie";if(o[4]){o[2]=o[4];}}else{if(o[1]=="crios"){o[1]="chrome";}}var e=n.match(/ip(?:ad|od|hone)/)?"ios":(n.match(/(?:webos|android)/)||e.match(/mac|win|linux/)||["other"])[0];
if(e=="win"){e="windows";}return{extend:Function.prototype.extend,name:(o[1]=="version")?o[3]:o[1],version:parseFloat((o[1]=="opera"&&o[4])?o[4]:o[2]),platform:e};
};var m=this.Browser=b(navigator.userAgent,navigator.platform);if(m.ie){m.version=i.documentMode;}m.extend({Features:{xpath:!!(i.evaluate),air:!!(g.runtime),query:!!(i.querySelector),json:!!(g.JSON)},parseUA:b});
m[m.name]=true;m[m.name+parseInt(m.version,10)]=true;if(m.name=="ie"&&m.version>="11"){delete m.ie;}var a=m.platform;if(a=="windows"){a="win";}m.Platform={name:a};
m.Platform[a]=true;m.Request=(function(){var o=function(){return new XMLHttpRequest();};var n=function(){return new ActiveXObject("MSXML2.XMLHTTP");};var e=function(){return new ActiveXObject("Microsoft.XMLHTTP");
};return Function.attempt(function(){o();return o;},function(){n();return n;},function(){e();return e;});})();m.Features.xhr=!!(m.Request);var h=(Function.attempt(function(){return navigator.plugins["Shockwave Flash"].description;
},function(){return new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version");})||"0 r0").match(/\d+/g);m.Plugins={Flash:{version:Number(h[0]||"0."+h[1])||0,build:Number(h[2])||0}};
m.exec=function(n){if(!n){return n;}if(g.execScript){g.execScript(n);}else{var e=i.createElement("script");e.setAttribute("type","text/javascript");e.text=n;
i.head.appendChild(e);i.head.removeChild(e);}return n;};String.implement("stripScripts",function(n){var e="";var o=this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi,function(p,q){e+=q+"\n";
return"";});if(n===true){m.exec(e);}else{if(typeOf(n)=="function"){n(e,o);}}return o;});m.extend({Document:this.Document,Window:this.Window,Element:this.Element,Event:this.Event});
this.Window=this.$constructor=new Type("Window",function(){});this.$family=Function.from("window").hide();Window.mirror(function(e,n){g[e]=n;});this.Document=i.$constructor=new Type("Document",function(){});
i.$family=Function.from("document").hide();Document.mirror(function(e,n){i[e]=n;});i.html=i.documentElement;if(!i.head){i.head=i.getElementsByTagName("head")[0];
}if(i.execCommand){try{i.execCommand("BackgroundImageCache",false,true);}catch(f){}}if(this.attachEvent&&!this.addEventListener){var c=function(){this.detachEvent("onunload",c);
i.head=i.html=i.window=null;};this.attachEvent("onunload",c);}var k=Array.from;try{k(i.html.childNodes);}catch(f){Array.from=function(n){if(typeof n!="string"&&Type.isEnumerable(n)&&typeOf(n)!="array"){var e=n.length,o=new Array(e);
while(e--){o[e]=n[e];}return o;}return k(n);};var j=Array.prototype,l=j.slice;["pop","push","reverse","shift","sort","splice","unshift","concat","join","slice"].each(function(e){var n=j[e];
Array[e]=function(o){return n.apply(Array.from(o),l.call(arguments,1));};});}if(m.Platform.ios){m.Platform.ipod=true;}m.Engine={};var d=function(n,e){m.Engine.name=n;
m.Engine[n+e]=true;m.Engine.version=e;};if(m.ie){m.Engine.trident=true;switch(m.version){case 6:d("trident",4);break;case 7:d("trident",5);break;case 8:d("trident",6);
}}if(m.firefox){m.Engine.gecko=true;if(m.version>=3){d("gecko",19);}else{d("gecko",18);}}if(m.safari||m.chrome){m.Engine.webkit=true;switch(m.version){case 2:d("webkit",419);
break;case 3:d("webkit",420);break;case 4:d("webkit",525);}}if(m.opera){m.Engine.presto=true;if(m.version>=9.6){d("presto",960);}else{if(m.version>=9.5){d("presto",950);
}else{d("presto",925);}}}if(m.name=="unknown"){switch((navigator.userAgent.toLowerCase().match(/(?:webkit|khtml|gecko)/)||[])[0]){case"webkit":case"khtml":m.Engine.webkit=true;
break;case"gecko":m.Engine.gecko=true;}}this.$exec=m.exec;})();(function(){var b={};var a=this.DOMEvent=new Type("DOMEvent",function(c,g){if(!g){g=window;
}c=c||g.event;if(c.$extended){return c;}this.event=c;this.$extended=true;this.shift=c.shiftKey;this.control=c.ctrlKey;this.alt=c.altKey;this.meta=c.metaKey;
var i=this.type=c.type;var h=c.target||c.srcElement;while(h&&h.nodeType==3){h=h.parentNode;}this.target=document.id(h);if(i.indexOf("key")==0){var d=this.code=(c.which||c.keyCode);
this.key=b[d]||Object.keyOf(Event.Keys,d);if(i=="keydown"||i=="keyup"){if(d>111&&d<124){this.key="f"+(d-111);}else{if(d>95&&d<106){this.key=d-96;}}}if(this.key==null){this.key=String.fromCharCode(d).toLowerCase();
}}else{if(i=="click"||i=="dblclick"||i=="contextmenu"||i=="DOMMouseScroll"||i.indexOf("mouse")==0){var j=g.document;j=(!j.compatMode||j.compatMode=="CSS1Compat")?j.html:j.body;
this.page={x:(c.pageX!=null)?c.pageX:c.clientX+j.scrollLeft,y:(c.pageY!=null)?c.pageY:c.clientY+j.scrollTop};this.client={x:(c.pageX!=null)?c.pageX-g.pageXOffset:c.clientX,y:(c.pageY!=null)?c.pageY-g.pageYOffset:c.clientY};
if(i=="DOMMouseScroll"||i=="mousewheel"){this.wheel=(c.wheelDelta)?c.wheelDelta/120:-(c.detail||0)/3;}this.rightClick=(c.which==3||c.button==2);if(i=="mouseover"||i=="mouseout"){var k=c.relatedTarget||c[(i=="mouseover"?"from":"to")+"Element"];
while(k&&k.nodeType==3){k=k.parentNode;}this.relatedTarget=document.id(k);}}else{if(i.indexOf("touch")==0||i.indexOf("gesture")==0){this.rotation=c.rotation;
this.scale=c.scale;this.targetTouches=c.targetTouches;this.changedTouches=c.changedTouches;var f=this.touches=c.touches;if(f&&f[0]){var e=f[0];this.page={x:e.pageX,y:e.pageY};
this.client={x:e.clientX,y:e.clientY};}}}}if(!this.client){this.client={};}if(!this.page){this.page={};}});a.implement({stop:function(){return this.preventDefault().stopPropagation();
},stopPropagation:function(){if(this.event.stopPropagation){this.event.stopPropagation();}else{this.event.cancelBubble=true;}return this;},preventDefault:function(){if(this.event.preventDefault){this.event.preventDefault();
}else{this.event.returnValue=false;}return this;}});a.defineKey=function(d,c){b[d]=c;return this;};a.defineKeys=a.defineKey.overloadSetter(true);a.defineKeys({"38":"up","40":"down","37":"left","39":"right","27":"esc","32":"space","8":"backspace","9":"tab","46":"delete","13":"enter"});
})();var Event=DOMEvent;Event.Keys={};Event.Keys=new Hash(Event.Keys);(function(){var a=this.Class=new Type("Class",function(h){if(instanceOf(h,Function)){h={initialize:h};
}var g=function(){e(this);if(g.$prototyping){return this;}this.$caller=null;var i=(this.initialize)?this.initialize.apply(this,arguments):this;this.$caller=this.caller=null;
return i;}.extend(this).implement(h);g.$constructor=a;g.prototype.$constructor=g;g.prototype.parent=c;return g;});var c=function(){if(!this.$caller){throw new Error('The method "parent" cannot be called.');
}var g=this.$caller.$name,h=this.$caller.$owner.parent,i=(h)?h.prototype[g]:null;if(!i){throw new Error('The method "'+g+'" has no parent.');}return i.apply(this,arguments);
};var e=function(g){for(var h in g){var j=g[h];switch(typeOf(j)){case"object":var i=function(){};i.prototype=j;g[h]=e(new i);break;case"array":g[h]=j.clone();
break;}}return g;};var b=function(g,h,j){if(j.$origin){j=j.$origin;}var i=function(){if(j.$protected&&this.$caller==null){throw new Error('The method "'+h+'" cannot be called.');
}var l=this.caller,m=this.$caller;this.caller=m;this.$caller=i;var k=j.apply(this,arguments);this.$caller=m;this.caller=l;return k;}.extend({$owner:g,$origin:j,$name:h});
return i;};var f=function(h,i,g){if(a.Mutators.hasOwnProperty(h)){i=a.Mutators[h].call(this,i);if(i==null){return this;}}if(typeOf(i)=="function"){if(i.$hidden){return this;
}this.prototype[h]=(g)?i:b(this,h,i);}else{Object.merge(this.prototype,h,i);}return this;};var d=function(g){g.$prototyping=true;var h=new g;delete g.$prototyping;
return h;};a.implement("implement",f.overloadSetter());a.Mutators={Extends:function(g){this.parent=g;this.prototype=d(g);},Implements:function(g){Array.from(g).each(function(j){var h=new j;
for(var i in h){f.call(this,i,h[i],true);}},this);}};})();(function(){this.Chain=new Class({$chain:[],chain:function(){this.$chain.append(Array.flatten(arguments));
return this;},callChain:function(){return(this.$chain.length)?this.$chain.shift().apply(this,arguments):false;},clearChain:function(){this.$chain.empty();
return this;}});var a=function(b){return b.replace(/^on([A-Z])/,function(c,d){return d.toLowerCase();});};this.Events=new Class({$events:{},addEvent:function(d,c,b){d=a(d);
if(c==$empty){return this;}this.$events[d]=(this.$events[d]||[]).include(c);if(b){c.internal=true;}return this;},addEvents:function(b){for(var c in b){this.addEvent(c,b[c]);
}return this;},fireEvent:function(e,c,b){e=a(e);var d=this.$events[e];if(!d){return this;}c=Array.from(c);d.each(function(f){if(b){f.delay(b,this,c);}else{f.apply(this,c);
}},this);return this;},removeEvent:function(e,d){e=a(e);var c=this.$events[e];if(c&&!d.internal){var b=c.indexOf(d);if(b!=-1){delete c[b];}}return this;
},removeEvents:function(d){var e;if(typeOf(d)=="object"){for(e in d){this.removeEvent(e,d[e]);}return this;}if(d){d=a(d);}for(e in this.$events){if(d&&d!=e){continue;
}var c=this.$events[e];for(var b=c.length;b--;){if(b in c){this.removeEvent(e,c[b]);}}}return this;}});this.Options=new Class({setOptions:function(){var b=this.options=Object.merge.apply(null,[{},this.options].append(arguments));
if(this.addEvent){for(var c in b){if(typeOf(b[c])!="function"||!(/^on[A-Z]/).test(c)){continue;}this.addEvent(c,b[c]);delete b[c];}}return this;}});})();
(function(){var k,n,l,g,a={},c={},m=/\\/g;var e=function(q,p){if(q==null){return null;}if(q.Slick===true){return q;}q=(""+q).replace(/^\s+|\s+$/g,"");g=!!p;
var o=(g)?c:a;if(o[q]){return o[q];}k={Slick:true,expressions:[],raw:q,reverse:function(){return e(this.raw,true);}};n=-1;while(q!=(q=q.replace(j,b))){}k.length=k.expressions.length;
return o[k.raw]=(g)?h(k):k;};var i=function(o){if(o==="!"){return" ";}else{if(o===" "){return"!";}else{if((/^!/).test(o)){return o.replace(/^!/,"");}else{return"!"+o;
}}}};var h=function(u){var r=u.expressions;for(var p=0;p<r.length;p++){var t=r[p];var q={parts:[],tag:"*",combinator:i(t[0].combinator)};for(var o=0;o<t.length;
o++){var s=t[o];if(!s.reverseCombinator){s.reverseCombinator=" ";}s.combinator=s.reverseCombinator;delete s.reverseCombinator;}t.reverse().push(q);}return u;
};var f=function(o){return o.replace(/[-[\]{}()*+?.\\^$|,#\s]/g,function(p){return"\\"+p;});};var j=new RegExp("^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)".replace(/<combinator>/,"["+f(">+~`!@$%^&={}\\;</")+"]").replace(/<unicode>/g,"(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])").replace(/<unicode1>/g,"(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])"));
function b(x,s,D,z,r,C,q,B,A,y,u,F,G,v,p,w){if(s||n===-1){k.expressions[++n]=[];l=-1;if(s){return"";}}if(D||z||l===-1){D=D||" ";var t=k.expressions[n];
if(g&&t[l]){t[l].reverseCombinator=i(D);}t[++l]={combinator:D,tag:"*"};}var o=k.expressions[n][l];if(r){o.tag=r.replace(m,"");}else{if(C){o.id=C.replace(m,"");
}else{if(q){q=q.replace(m,"");if(!o.classList){o.classList=[];}if(!o.classes){o.classes=[];}o.classList.push(q);o.classes.push({value:q,regexp:new RegExp("(^|\\s)"+f(q)+"(\\s|$)")});
}else{if(G){w=w||p;w=w?w.replace(m,""):null;if(!o.pseudos){o.pseudos=[];}o.pseudos.push({key:G.replace(m,""),value:w,type:F.length==1?"class":"element"});
}else{if(B){B=B.replace(m,"");u=(u||"").replace(m,"");var E,H;switch(A){case"^=":H=new RegExp("^"+f(u));break;case"$=":H=new RegExp(f(u)+"$");break;case"~=":H=new RegExp("(^|\\s)"+f(u)+"(\\s|$)");
break;case"|=":H=new RegExp("^"+f(u)+"(-|$)");break;case"=":E=function(I){return u==I;};break;case"*=":E=function(I){return I&&I.indexOf(u)>-1;};break;
case"!=":E=function(I){return u!=I;};break;default:E=function(I){return !!I;};}if(u==""&&(/^[*$^]=$/).test(A)){E=function(){return false;};}if(!E){E=function(I){return I&&H.test(I);
};}if(!o.attributes){o.attributes=[];}o.attributes.push({key:B,operator:A,value:u,test:E});}}}}}return"";}var d=(this.Slick||{});d.parse=function(o){return e(o);
};d.escapeRegExp=f;if(!this.Slick){this.Slick=d;}}).apply((typeof exports!="undefined")?exports:this);(function(){var k={},m={},d=Object.prototype.toString;
k.isNativeCode=function(c){return(/\{\s*\[native code\]\s*\}/).test(""+c);};k.isXML=function(c){return(!!c.xmlVersion)||(!!c.xml)||(d.call(c)=="[object XMLDocument]")||(c.nodeType==9&&c.documentElement.nodeName!="HTML");
};k.setDocument=function(w){var p=w.nodeType;if(p==9){}else{if(p){w=w.ownerDocument;}else{if(w.navigator){w=w.document;}else{return;}}}if(this.document===w){return;
}this.document=w;var A=w.documentElement,o=this.getUIDXML(A),s=m[o],r;if(s){for(r in s){this[r]=s[r];}return;}s=m[o]={};s.root=A;s.isXMLDocument=this.isXML(w);
s.brokenStarGEBTN=s.starSelectsClosedQSA=s.idGetsName=s.brokenMixedCaseQSA=s.brokenGEBCN=s.brokenCheckedQSA=s.brokenEmptyAttributeQSA=s.isHTMLDocument=s.nativeMatchesSelector=false;
var q,u,y,z,t;var x,v="slick_uniqueid";var c=w.createElement("div");var n=w.body||w.getElementsByTagName("body")[0]||A;n.appendChild(c);try{c.innerHTML='<a id="'+v+'"></a>';
s.isHTMLDocument=!!w.getElementById(v);}catch(C){}if(s.isHTMLDocument){c.style.display="none";c.appendChild(w.createComment(""));u=(c.getElementsByTagName("*").length>1);
try{c.innerHTML="foo</foo>";x=c.getElementsByTagName("*");q=(x&&!!x.length&&x[0].nodeName.charAt(0)=="/");}catch(C){}s.brokenStarGEBTN=u||q;try{c.innerHTML='<a name="'+v+'"></a><b id="'+v+'"></b>';
s.idGetsName=w.getElementById(v)===c.firstChild;}catch(C){}if(c.getElementsByClassName){try{c.innerHTML='<a class="f"></a><a class="b"></a>';c.getElementsByClassName("b").length;
c.firstChild.className="b";z=(c.getElementsByClassName("b").length!=2);}catch(C){}try{c.innerHTML='<a class="a"></a><a class="f b a"></a>';y=(c.getElementsByClassName("a").length!=2);
}catch(C){}s.brokenGEBCN=z||y;}if(c.querySelectorAll){try{c.innerHTML="foo</foo>";x=c.querySelectorAll("*");s.starSelectsClosedQSA=(x&&!!x.length&&x[0].nodeName.charAt(0)=="/");
}catch(C){}try{c.innerHTML='<a class="MiX"></a>';s.brokenMixedCaseQSA=!c.querySelectorAll(".MiX").length;}catch(C){}try{c.innerHTML='<select><option selected="selected">a</option></select>';
s.brokenCheckedQSA=(c.querySelectorAll(":checked").length==0);}catch(C){}try{c.innerHTML='<a class=""></a>';s.brokenEmptyAttributeQSA=(c.querySelectorAll('[class*=""]').length!=0);
}catch(C){}}try{c.innerHTML='<form action="s"><input id="action"/></form>';t=(c.firstChild.getAttribute("action")!="s");}catch(C){}s.nativeMatchesSelector=A.matches||A.mozMatchesSelector||A.webkitMatchesSelector;
if(s.nativeMatchesSelector){try{s.nativeMatchesSelector.call(A,":slick");s.nativeMatchesSelector=null;}catch(C){}}}try{A.slick_expando=1;delete A.slick_expando;
s.getUID=this.getUIDHTML;}catch(C){s.getUID=this.getUIDXML;}n.removeChild(c);c=x=n=null;s.getAttribute=(s.isHTMLDocument&&t)?function(G,E){var H=this.attributeGetters[E];
if(H){return H.call(G);}var F=G.getAttributeNode(E);return(F)?F.nodeValue:null;}:function(F,E){var G=this.attributeGetters[E];return(G)?G.call(F):F.getAttribute(E);
};s.hasAttribute=(A&&this.isNativeCode(A.hasAttribute))?function(F,E){return F.hasAttribute(E);}:function(F,E){F=F.getAttributeNode(E);return !!(F&&(F.specified||F.nodeValue));
};var D=A&&this.isNativeCode(A.contains),B=w&&this.isNativeCode(w.contains);s.contains=(D&&B)?function(E,F){return E.contains(F);}:(D&&!B)?function(E,F){return E===F||((E===w)?w.documentElement:E).contains(F);
}:(A&&A.compareDocumentPosition)?function(E,F){return E===F||!!(E.compareDocumentPosition(F)&16);}:function(E,F){if(F){do{if(F===E){return true;}}while((F=F.parentNode));
}return false;};s.documentSorter=(A.compareDocumentPosition)?function(F,E){if(!F.compareDocumentPosition||!E.compareDocumentPosition){return 0;}return F.compareDocumentPosition(E)&4?-1:F===E?0:1;
}:("sourceIndex" in A)?function(F,E){if(!F.sourceIndex||!E.sourceIndex){return 0;}return F.sourceIndex-E.sourceIndex;}:(w.createRange)?function(H,F){if(!H.ownerDocument||!F.ownerDocument){return 0;
}var G=H.ownerDocument.createRange(),E=F.ownerDocument.createRange();G.setStart(H,0);G.setEnd(H,0);E.setStart(F,0);E.setEnd(F,0);return G.compareBoundaryPoints(Range.START_TO_END,E);
}:null;A=null;for(r in s){this[r]=s[r];}};var f=/^([#.]?)((?:[\w-]+|\*))$/,h=/\[.+[*$^]=(?:""|'')?\]/,g={};k.search=function(U,z,H,s){var p=this.found=(s)?null:(H||[]);
if(!U){return p;}else{if(U.navigator){U=U.document;}else{if(!U.nodeType){return p;}}}var F,O,V=this.uniques={},I=!!(H&&H.length),y=(U.nodeType==9);if(this.document!==(y?U:U.ownerDocument)){this.setDocument(U);
}if(I){for(O=p.length;O--;){V[this.getUID(p[O])]=true;}}if(typeof z=="string"){var r=z.match(f);simpleSelectors:if(r){var u=r[1],v=r[2],A,E;if(!u){if(v=="*"&&this.brokenStarGEBTN){break simpleSelectors;
}E=U.getElementsByTagName(v);if(s){return E[0]||null;}for(O=0;A=E[O++];){if(!(I&&V[this.getUID(A)])){p.push(A);}}}else{if(u=="#"){if(!this.isHTMLDocument||!y){break simpleSelectors;
}A=U.getElementById(v);if(!A){return p;}if(this.idGetsName&&A.getAttributeNode("id").nodeValue!=v){break simpleSelectors;}if(s){return A||null;}if(!(I&&V[this.getUID(A)])){p.push(A);
}}else{if(u=="."){if(!this.isHTMLDocument||((!U.getElementsByClassName||this.brokenGEBCN)&&U.querySelectorAll)){break simpleSelectors;}if(U.getElementsByClassName&&!this.brokenGEBCN){E=U.getElementsByClassName(v);
if(s){return E[0]||null;}for(O=0;A=E[O++];){if(!(I&&V[this.getUID(A)])){p.push(A);}}}else{var T=new RegExp("(^|\\s)"+e.escapeRegExp(v)+"(\\s|$)");E=U.getElementsByTagName("*");
for(O=0;A=E[O++];){className=A.className;if(!(className&&T.test(className))){continue;}if(s){return A;}if(!(I&&V[this.getUID(A)])){p.push(A);}}}}}}if(I){this.sort(p);
}return(s)?null:p;}querySelector:if(U.querySelectorAll){if(!this.isHTMLDocument||g[z]||this.brokenMixedCaseQSA||(this.brokenCheckedQSA&&z.indexOf(":checked")>-1)||(this.brokenEmptyAttributeQSA&&h.test(z))||(!y&&z.indexOf(",")>-1)||e.disableQSA){break querySelector;
}var S=z,x=U;if(!y){var C=x.getAttribute("id"),t="slickid__";x.setAttribute("id",t);S="#"+t+" "+S;U=x.parentNode;}try{if(s){return U.querySelector(S)||null;
}else{E=U.querySelectorAll(S);}}catch(Q){g[z]=1;break querySelector;}finally{if(!y){if(C){x.setAttribute("id",C);}else{x.removeAttribute("id");}U=x;}}if(this.starSelectsClosedQSA){for(O=0;
A=E[O++];){if(A.nodeName>"@"&&!(I&&V[this.getUID(A)])){p.push(A);}}}else{for(O=0;A=E[O++];){if(!(I&&V[this.getUID(A)])){p.push(A);}}}if(I){this.sort(p);
}return p;}F=this.Slick.parse(z);if(!F.length){return p;}}else{if(z==null){return p;}else{if(z.Slick){F=z;}else{if(this.contains(U.documentElement||U,z)){(p)?p.push(z):p=z;
return p;}else{return p;}}}}this.posNTH={};this.posNTHLast={};this.posNTHType={};this.posNTHTypeLast={};this.push=(!I&&(s||(F.length==1&&F.expressions[0].length==1)))?this.pushArray:this.pushUID;
if(p==null){p=[];}var M,L,K;var B,J,D,c,q,G,W;var N,P,o,w,R=F.expressions;search:for(O=0;(P=R[O]);O++){for(M=0;(o=P[M]);M++){B="combinator:"+o.combinator;
if(!this[B]){continue search;}J=(this.isXMLDocument)?o.tag:o.tag.toUpperCase();D=o.id;c=o.classList;q=o.classes;G=o.attributes;W=o.pseudos;w=(M===(P.length-1));
this.bitUniques={};if(w){this.uniques=V;this.found=p;}else{this.uniques={};this.found=[];}if(M===0){this[B](U,J,D,q,G,W,c);if(s&&w&&p.length){break search;
}}else{if(s&&w){for(L=0,K=N.length;L<K;L++){this[B](N[L],J,D,q,G,W,c);if(p.length){break search;}}}else{for(L=0,K=N.length;L<K;L++){this[B](N[L],J,D,q,G,W,c);
}}}N=this.found;}}if(I||(F.expressions.length>1)){this.sort(p);}return(s)?(p[0]||null):p;};k.uidx=1;k.uidk="slick-uniqueid";k.getUIDXML=function(n){var c=n.getAttribute(this.uidk);
if(!c){c=this.uidx++;n.setAttribute(this.uidk,c);}return c;};k.getUIDHTML=function(c){return c.uniqueNumber||(c.uniqueNumber=this.uidx++);};k.sort=function(c){if(!this.documentSorter){return c;
}c.sort(this.documentSorter);return c;};k.cacheNTH={};k.matchNTH=/^([+-]?\d*)?([a-z]+)?([+-]\d+)?$/;k.parseNTHArgument=function(q){var o=q.match(this.matchNTH);
if(!o){return false;}var p=o[2]||false;var n=o[1]||1;if(n=="-"){n=-1;}var c=+o[3]||0;o=(p=="n")?{a:n,b:c}:(p=="odd")?{a:2,b:1}:(p=="even")?{a:2,b:0}:{a:0,b:n};
return(this.cacheNTH[q]=o);};k.createNTHPseudo=function(p,n,c,o){return function(s,q){var u=this.getUID(s);if(!this[c][u]){var A=s.parentNode;if(!A){return false;
}var r=A[p],t=1;if(o){var z=s.nodeName;do{if(r.nodeName!=z){continue;}this[c][this.getUID(r)]=t++;}while((r=r[n]));}else{do{if(r.nodeType!=1){continue;
}this[c][this.getUID(r)]=t++;}while((r=r[n]));}}q=q||"n";var v=this.cacheNTH[q]||this.parseNTHArgument(q);if(!v){return false;}var y=v.a,x=v.b,w=this[c][u];
if(y==0){return x==w;}if(y>0){if(w<x){return false;}}else{if(x<w){return false;}}return((w-x)%y)==0;};};k.pushArray=function(p,c,r,o,n,q){if(this.matchSelector(p,c,r,o,n,q)){this.found.push(p);
}};k.pushUID=function(q,c,s,p,n,r){var o=this.getUID(q);if(!this.uniques[o]&&this.matchSelector(q,c,s,p,n,r)){this.uniques[o]=true;this.found.push(q);}};
k.matchNode=function(n,o){if(this.isHTMLDocument&&this.nativeMatchesSelector){try{return this.nativeMatchesSelector.call(n,o.replace(/\[([^=]+)=\s*([^'"\]]+?)\s*\]/g,'[$1="$2"]'));
}catch(u){}}var t=this.Slick.parse(o);if(!t){return true;}var r=t.expressions,s=0,q;for(q=0;(currentExpression=r[q]);q++){if(currentExpression.length==1){var p=currentExpression[0];
if(this.matchSelector(n,(this.isXMLDocument)?p.tag:p.tag.toUpperCase(),p.id,p.classes,p.attributes,p.pseudos)){return true;}s++;}}if(s==t.length){return false;
}var c=this.search(this.document,t),v;for(q=0;v=c[q++];){if(v===n){return true;}}return false;};k.matchPseudo=function(q,c,p){var n="pseudo:"+c;if(this[n]){return this[n](q,p);
}var o=this.getAttribute(q,c);return(p)?p==o:!!o;};k.matchSelector=function(o,v,c,p,q,s){if(v){var t=(this.isXMLDocument)?o.nodeName:o.nodeName.toUpperCase();
if(v=="*"){if(t<"@"){return false;}}else{if(t!=v){return false;}}}if(c&&o.getAttribute("id")!=c){return false;}var r,n,u;if(p){for(r=p.length;r--;){u=this.getAttribute(o,"class");
if(!(u&&p[r].regexp.test(u))){return false;}}}if(q){for(r=q.length;r--;){n=q[r];if(n.operator?!n.test(this.getAttribute(o,n.key)):!this.hasAttribute(o,n.key)){return false;
}}}if(s){for(r=s.length;r--;){n=s[r];if(!this.matchPseudo(o,n.key,n.value)){return false;}}}return true;};var j={" ":function(q,w,n,r,s,u,p){var t,v,o;
if(this.isHTMLDocument){getById:if(n){v=this.document.getElementById(n);if((!v&&q.all)||(this.idGetsName&&v&&v.getAttributeNode("id").nodeValue!=n)){o=q.all[n];
if(!o){return;}if(!o[0]){o=[o];}for(t=0;v=o[t++];){var c=v.getAttributeNode("id");if(c&&c.nodeValue==n){this.push(v,w,null,r,s,u);break;}}return;}if(!v){if(this.contains(this.root,q)){return;
}else{break getById;}}else{if(this.document!==q&&!this.contains(q,v)){return;}}this.push(v,w,null,r,s,u);return;}getByClass:if(r&&q.getElementsByClassName&&!this.brokenGEBCN){o=q.getElementsByClassName(p.join(" "));
if(!(o&&o.length)){break getByClass;}for(t=0;v=o[t++];){this.push(v,w,n,null,s,u);}return;}}getByTag:{o=q.getElementsByTagName(w);if(!(o&&o.length)){break getByTag;
}if(!this.brokenStarGEBTN){w=null;}for(t=0;v=o[t++];){this.push(v,w,n,r,s,u);}}},">":function(p,c,r,o,n,q){if((p=p.firstChild)){do{if(p.nodeType==1){this.push(p,c,r,o,n,q);
}}while((p=p.nextSibling));}},"+":function(p,c,r,o,n,q){while((p=p.nextSibling)){if(p.nodeType==1){this.push(p,c,r,o,n,q);break;}}},"^":function(p,c,r,o,n,q){p=p.firstChild;
if(p){if(p.nodeType==1){this.push(p,c,r,o,n,q);}else{this["combinator:+"](p,c,r,o,n,q);}}},"~":function(q,c,s,p,n,r){while((q=q.nextSibling)){if(q.nodeType!=1){continue;
}var o=this.getUID(q);if(this.bitUniques[o]){break;}this.bitUniques[o]=true;this.push(q,c,s,p,n,r);}},"++":function(p,c,r,o,n,q){this["combinator:+"](p,c,r,o,n,q);
this["combinator:!+"](p,c,r,o,n,q);},"~~":function(p,c,r,o,n,q){this["combinator:~"](p,c,r,o,n,q);this["combinator:!~"](p,c,r,o,n,q);},"!":function(p,c,r,o,n,q){while((p=p.parentNode)){if(p!==this.document){this.push(p,c,r,o,n,q);
}}},"!>":function(p,c,r,o,n,q){p=p.parentNode;if(p!==this.document){this.push(p,c,r,o,n,q);}},"!+":function(p,c,r,o,n,q){while((p=p.previousSibling)){if(p.nodeType==1){this.push(p,c,r,o,n,q);
break;}}},"!^":function(p,c,r,o,n,q){p=p.lastChild;if(p){if(p.nodeType==1){this.push(p,c,r,o,n,q);}else{this["combinator:!+"](p,c,r,o,n,q);}}},"!~":function(q,c,s,p,n,r){while((q=q.previousSibling)){if(q.nodeType!=1){continue;
}var o=this.getUID(q);if(this.bitUniques[o]){break;}this.bitUniques[o]=true;this.push(q,c,s,p,n,r);}}};for(var i in j){k["combinator:"+i]=j[i];}var l={empty:function(c){var n=c.firstChild;
return !(n&&n.nodeType==1)&&!(c.innerText||c.textContent||"").length;},not:function(c,n){return !this.matchNode(c,n);},contains:function(c,n){return(c.innerText||c.textContent||"").indexOf(n)>-1;
},"first-child":function(c){while((c=c.previousSibling)){if(c.nodeType==1){return false;}}return true;},"last-child":function(c){while((c=c.nextSibling)){if(c.nodeType==1){return false;
}}return true;},"only-child":function(o){var n=o;while((n=n.previousSibling)){if(n.nodeType==1){return false;}}var c=o;while((c=c.nextSibling)){if(c.nodeType==1){return false;
}}return true;},"nth-child":k.createNTHPseudo("firstChild","nextSibling","posNTH"),"nth-last-child":k.createNTHPseudo("lastChild","previousSibling","posNTHLast"),"nth-of-type":k.createNTHPseudo("firstChild","nextSibling","posNTHType",true),"nth-last-of-type":k.createNTHPseudo("lastChild","previousSibling","posNTHTypeLast",true),index:function(n,c){return this["pseudo:nth-child"](n,""+(c+1));
},even:function(c){return this["pseudo:nth-child"](c,"2n");},odd:function(c){return this["pseudo:nth-child"](c,"2n+1");},"first-of-type":function(c){var n=c.nodeName;
while((c=c.previousSibling)){if(c.nodeName==n){return false;}}return true;},"last-of-type":function(c){var n=c.nodeName;while((c=c.nextSibling)){if(c.nodeName==n){return false;
}}return true;},"only-of-type":function(o){var n=o,p=o.nodeName;while((n=n.previousSibling)){if(n.nodeName==p){return false;}}var c=o;while((c=c.nextSibling)){if(c.nodeName==p){return false;
}}return true;},enabled:function(c){return !c.disabled;},disabled:function(c){return c.disabled;},checked:function(c){return c.checked||c.selected;},focus:function(c){return this.isHTMLDocument&&this.document.activeElement===c&&(c.href||c.type||this.hasAttribute(c,"tabindex"));
},root:function(c){return(c===this.root);},selected:function(c){return c.selected;}};for(var b in l){k["pseudo:"+b]=l[b];}var a=k.attributeGetters={"for":function(){return("htmlFor" in this)?this.htmlFor:this.getAttribute("for");
},href:function(){return("href" in this)?this.getAttribute("href",2):this.getAttribute("href");},style:function(){return(this.style)?this.style.cssText:this.getAttribute("style");
},tabindex:function(){var c=this.getAttributeNode("tabindex");return(c&&c.specified)?c.nodeValue:null;},type:function(){return this.getAttribute("type");
},maxlength:function(){var c=this.getAttributeNode("maxLength");return(c&&c.specified)?c.nodeValue:null;}};a.MAXLENGTH=a.maxLength=a.maxlength;var e=k.Slick=(this.Slick||{});
e.version="1.1.7";e.search=function(n,o,c){return k.search(n,o,c);};e.find=function(c,n){return k.search(c,n,null,true);};e.contains=function(c,n){k.setDocument(c);
return k.contains(c,n);};e.getAttribute=function(n,c){k.setDocument(n);return k.getAttribute(n,c);};e.hasAttribute=function(n,c){k.setDocument(n);return k.hasAttribute(n,c);
};e.match=function(n,c){if(!(n&&c)){return false;}if(!c||c===n){return true;}k.setDocument(n);return k.matchNode(n,c);};e.defineAttributeGetter=function(c,n){k.attributeGetters[c]=n;
return this;};e.lookupAttributeGetter=function(c){return k.attributeGetters[c];};e.definePseudo=function(c,n){k["pseudo:"+c]=function(p,o){return n.call(p,o);
};return this;};e.lookupPseudo=function(c){var n=k["pseudo:"+c];if(n){return function(o){return n.call(this,o);};}return null;};e.override=function(n,c){k.override(n,c);
return this;};e.isXML=k.isXML;e.uidOf=function(c){return k.getUIDHTML(c);};if(!this.Slick){this.Slick=e;}}).apply((typeof exports!="undefined")?exports:this);
var Element=this.Element=function(b,g){var h=Element.Constructors[b];if(h){return h(g);}if(typeof b!="string"){return document.id(b).set(g);}if(!g){g={};
}if(!(/^[\w-]+$/).test(b)){var e=Slick.parse(b).expressions[0][0];b=(e.tag=="*")?"div":e.tag;if(e.id&&g.id==null){g.id=e.id;}var d=e.attributes;if(d){for(var a,f=0,c=d.length;
f<c;f++){a=d[f];if(g[a.key]!=null){continue;}if(a.value!=null&&a.operator=="="){g[a.key]=a.value;}else{if(!a.value&&!a.operator){g[a.key]=true;}}}}if(e.classList&&g["class"]==null){g["class"]=e.classList.join(" ");
}}return document.newElement(b,g);};if(Browser.Element){Element.prototype=Browser.Element.prototype;Element.prototype._fireEvent=(function(a){return function(b,c){return a.call(this,b,c);
};})(Element.prototype.fireEvent);}new Type("Element",Element).mirror(function(a){if(Array.prototype[a]){return;}var b={};b[a]=function(){var h=[],e=arguments,j=true;
for(var g=0,d=this.length;g<d;g++){var f=this[g],c=h[g]=f[a].apply(f,e);j=(j&&typeOf(c)=="element");}return(j)?new Elements(h):h;};Elements.implement(b);
});if(!Browser.Element){Element.parent=Object;Element.Prototype={"$constructor":Element,"$family":Function.from("element").hide()};Element.mirror(function(a,b){Element.Prototype[a]=b;
});}Element.Constructors={};Element.Constructors=new Hash;var IFrame=new Type("IFrame",function(){var e=Array.link(arguments,{properties:Type.isObject,iframe:function(f){return(f!=null);
}});var c=e.properties||{},b;if(e.iframe){b=document.id(e.iframe);}var d=c.onload||function(){};delete c.onload;c.id=c.name=[c.id,c.name,b?(b.id||b.name):"IFrame_"+String.uniqueID()].pick();
b=new Element(b||"iframe",c);var a=function(){d.call(b.contentWindow);};if(window.frames[c.id]){a();}else{b.addListener("load",a);}return b;});var Elements=this.Elements=function(a){if(a&&a.length){var e={},d;
for(var c=0;d=a[c++];){var b=Slick.uidOf(d);if(!e[b]){e[b]=true;this.push(d);}}}};Elements.prototype={length:0};Elements.parent=Array;new Type("Elements",Elements).implement({filter:function(a,b){if(!a){return this;
}return new Elements(Array.filter(this,(typeOf(a)=="string")?function(c){return c.match(a);}:a,b));}.protect(),push:function(){var d=this.length;for(var b=0,a=arguments.length;
b<a;b++){var c=document.id(arguments[b]);if(c){this[d++]=c;}}return(this.length=d);}.protect(),unshift:function(){var b=[];for(var c=0,a=arguments.length;
c<a;c++){var d=document.id(arguments[c]);if(d){b.push(d);}}return Array.prototype.unshift.apply(this,b);}.protect(),concat:function(){var b=new Elements(this);
for(var c=0,a=arguments.length;c<a;c++){var d=arguments[c];if(Type.isEnumerable(d)){b.append(d);}else{b.push(d);}}return b;}.protect(),append:function(c){for(var b=0,a=c.length;
b<a;b++){this.push(c[b]);}return this;}.protect(),empty:function(){while(this.length){delete this[--this.length];}return this;}.protect()});Elements.alias("extend","append");
(function(){var f=Array.prototype.splice,a={"0":0,"1":1,length:2};f.call(a,1,1);if(a[1]==1){Elements.implement("splice",function(){var g=this.length;var e=f.apply(this,arguments);
while(g>=this.length){delete this[g--];}return e;}.protect());}Array.forEachMethod(function(g,e){Elements.implement(e,g);});Array.mirror(Elements);var d;
try{d=(document.createElement("<input name=x>").name=="x");}catch(b){}var c=function(e){return(""+e).replace(/&/g,"&amp;").replace(/"/g,"&quot;");};Document.implement({newElement:function(e,g){if(g&&g.checked!=null){g.defaultChecked=g.checked;
}if(d&&g){e="<"+e;if(g.name){e+=' name="'+c(g.name)+'"';}if(g.type){e+=' type="'+c(g.type)+'"';}e+=">";delete g.name;delete g.type;}return this.id(this.createElement(e)).set(g);
}});})();(function(){Slick.uidOf(window);Slick.uidOf(document);Document.implement({newTextNode:function(e){return this.createTextNode(e);},getDocument:function(){return this;
},getWindow:function(){return this.window;},id:(function(){var e={string:function(L,K,l){L=Slick.find(l,"#"+L.replace(/(\W)/g,"\\$1"));return(L)?e.element(L,K):null;
},element:function(K,L){Slick.uidOf(K);if(!L&&!K.$family&&!(/^(?:object|embed)$/i).test(K.tagName)){var l=K.fireEvent;K._fireEvent=function(M,N){return l(M,N);
};Object.append(K,Element.Prototype);}return K;},object:function(K,L,l){if(K.toElement){return e.element(K.toElement(l),L);}return null;}};e.textnode=e.whitespace=e.window=e.document=function(l){return l;
};return function(K,M,L){if(K&&K.$family&&K.uniqueNumber){return K;}var l=typeOf(K);return(e[l])?e[l](K,M,L||document):null;};})()});if(window.$==null){Window.implement("$",function(e,l){return document.id(e,l,this.document);
});}Window.implement({getDocument:function(){return this.document;},getWindow:function(){return this;}});[Document,Element].invoke("implement",{getElements:function(e){return Slick.search(this,e,new Elements);
},getElement:function(e){return document.id(Slick.find(this,e));}});var p={contains:function(e){return Slick.contains(this,e);}};if(!document.contains){Document.implement(p);
}if(!document.createElement("div").contains){Element.implement(p);}Element.implement("hasChild",function(e){return this!==e&&this.contains(e);});(function(l,L,e){this.Selectors={};
var M=this.Selectors.Pseudo=new Hash();var K=function(){for(var N in M){if(M.hasOwnProperty(N)){Slick.definePseudo(N,M[N]);delete M[N];}}};Slick.search=function(O,P,N){K();
return l.call(this,O,P,N);};Slick.find=function(N,O){K();return L.call(this,N,O);};Slick.match=function(O,N){K();return e.call(this,O,N);};})(Slick.search,Slick.find,Slick.match);
var v=function(L,K){if(!L){return K;}L=Object.clone(Slick.parse(L));var l=L.expressions;for(var e=l.length;e--;){l[e][0].combinator=K;}return L;};Object.forEach({getNext:"~",getPrevious:"!~",getParent:"!"},function(e,l){Element.implement(l,function(K){return this.getElement(v(K,e));
});});Object.forEach({getAllNext:"~",getAllPrevious:"!~",getSiblings:"~~",getChildren:">",getParents:"!"},function(e,l){Element.implement(l,function(K){return this.getElements(v(K,e));
});});Element.implement({getFirst:function(e){return document.id(Slick.search(this,v(e,">"))[0]);},getLast:function(e){return document.id(Slick.search(this,v(e,">")).getLast());
},getWindow:function(){return this.ownerDocument.window;},getDocument:function(){return this.ownerDocument;},getElementById:function(e){return document.id(Slick.find(this,"#"+(""+e).replace(/(\W)/g,"\\$1")));
},match:function(e){return !e||Slick.match(this,e);}});if(window.$$==null){Window.implement("$$",function(e){var O=new Elements;if(arguments.length==1&&typeof e=="string"){return Slick.search(this.document,e,O);
}var L=Array.flatten(arguments);for(var M=0,K=L.length;M<K;M++){var N=L[M];switch(typeOf(N)){case"element":O.push(N);break;case"string":Slick.search(this.document,N,O);
}}return O;});}if(window.$$==null){Window.implement("$$",function(e){if(arguments.length==1){if(typeof e=="string"){return Slick.search(this.document,e,new Elements);
}else{if(Type.isEnumerable(e)){return new Elements(e);}}}return new Elements(arguments);});}var A={before:function(l,e){var K=e.parentNode;if(K){K.insertBefore(l,e);
}},after:function(l,e){var K=e.parentNode;if(K){K.insertBefore(l,e.nextSibling);}},bottom:function(l,e){e.appendChild(l);},top:function(l,e){e.insertBefore(l,e.firstChild);
}};A.inside=A.bottom;Object.each(A,function(l,K){K=K.capitalize();var e={};e["inject"+K]=function(L){l(this,document.id(L,true));return this;};e["grab"+K]=function(L){l(document.id(L,true),this);
return this;};Element.implement(e);});var n={},d={};var o={};Array.forEach(["type","value","defaultValue","accessKey","cellPadding","cellSpacing","colSpan","frameBorder","rowSpan","tabIndex","useMap"],function(e){o[e.toLowerCase()]=e;
});o.html="innerHTML";o.text=(document.createElement("div").textContent==null)?"innerText":"textContent";Object.forEach(o,function(l,e){d[e]=function(K,L){K[l]=L;
};n[e]=function(K){return K[l];};});var B=["compact","nowrap","ismap","declare","noshade","checked","disabled","readOnly","multiple","selected","noresize","defer","defaultChecked","autofocus","controls","autoplay","loop"];
var k={};Array.forEach(B,function(e){var l=e.toLowerCase();k[l]=e;d[l]=function(K,L){K[e]=!!L;};n[l]=function(K){return !!K[e];};});Object.append(d,{"class":function(e,l){("className" in e)?e.className=(l||""):e.setAttribute("class",l);
},"for":function(e,l){("htmlFor" in e)?e.htmlFor=l:e.setAttribute("for",l);},style:function(e,l){(e.style)?e.style.cssText=l:e.setAttribute("style",l);
},value:function(e,l){e.value=(l!=null)?l:"";}});n["class"]=function(e){return("className" in e)?e.className||null:e.getAttribute("class");};var f=document.createElement("button");
try{f.type="button";}catch(E){}if(f.type!="button"){d.type=function(e,l){e.setAttribute("type",l);};}f=null;var s=document.createElement("input");s.value="t";
s.type="submit";if(s.value!="t"){d.type=function(l,e){var K=l.value;l.type=e;l.value=K;};}s=null;var u=(function(e){e.random="attribute";return(e.getAttribute("random")=="attribute");
})(document.createElement("div"));var i=(function(e){e.innerHTML='<object><param name="should_fix" value="the unknown"></object>';return e.cloneNode(true).firstChild.childNodes.length!=1;
})(document.createElement("div"));var j=!!document.createElement("div").classList;var F=function(e){var l=(e||"").clean().split(" "),K={};return l.filter(function(L){if(L!==""&&!K[L]){return K[L]=L;
}});};var t=function(e){this.classList.add(e);};var g=function(e){this.classList.remove(e);};Element.implement({setProperty:function(l,K){var L=d[l.toLowerCase()];
if(L){L(this,K);}else{var e;if(u){e=this.retrieve("$attributeWhiteList",{});}if(K==null){this.removeAttribute(l);if(u){delete e[l];}}else{this.setAttribute(l,""+K);
if(u){e[l]=true;}}}return this;},setProperties:function(e){for(var l in e){this.setProperty(l,e[l]);}return this;},getProperty:function(M){var K=n[M.toLowerCase()];
if(K){return K(this);}if(u){var l=this.getAttributeNode(M),L=this.retrieve("$attributeWhiteList",{});if(!l){return null;}if(l.expando&&!L[M]){var N=this.outerHTML;
if(N.substr(0,N.search(/\/?['"]?>(?![^<]*<['"])/)).indexOf(M)<0){return null;}L[M]=true;}}var e=Slick.getAttribute(this,M);return(!e&&!Slick.hasAttribute(this,M))?null:e;
},getProperties:function(){var e=Array.from(arguments);return e.map(this.getProperty,this).associate(e);},removeProperty:function(e){return this.setProperty(e,null);
},removeProperties:function(){Array.each(arguments,this.removeProperty,this);return this;},set:function(K,l){var e=Element.Properties[K];(e&&e.set)?e.set.call(this,l):this.setProperty(K,l);
}.overloadSetter(),get:function(l){var e=Element.Properties[l];return(e&&e.get)?e.get.apply(this):this.getProperty(l);}.overloadGetter(),erase:function(l){var e=Element.Properties[l];
(e&&e.erase)?e.erase.apply(this):this.removeProperty(l);return this;},hasClass:j?function(e){return this.classList.contains(e);}:function(e){return this.className.clean().contains(e," ");
},addClass:j?function(e){F(e).forEach(t,this);return this;}:function(e){this.className=F(e+" "+this.className).join(" ");return this;},removeClass:j?function(e){F(e).forEach(g,this);
return this;}:function(e){var l=F(this.className);F(e).forEach(l.erase,l);this.className=l.join(" ");return this;},toggleClass:function(e,l){if(l==null){l=!this.hasClass(e);
}return(l)?this.addClass(e):this.removeClass(e);},adopt:function(){var L=this,e,N=Array.flatten(arguments),M=N.length;if(M>1){L=e=document.createDocumentFragment();
}for(var K=0;K<M;K++){var l=document.id(N[K],true);if(l){L.appendChild(l);}}if(e){this.appendChild(e);}return this;},appendText:function(l,e){return this.grab(this.getDocument().newTextNode(l),e);
},grab:function(l,e){A[e||"bottom"](document.id(l,true),this);return this;},inject:function(l,e){A[e||"bottom"](this,document.id(l,true));return this;},replaces:function(e){e=document.id(e,true);
e.parentNode.replaceChild(this,e);return this;},wraps:function(l,e){l=document.id(l,true);return this.replaces(l).grab(l,e);},getSelected:function(){this.selectedIndex;
return new Elements(Array.from(this.options).filter(function(e){return e.selected;}));},toQueryString:function(){var e=[];this.getElements("input, select, textarea").each(function(K){var l=K.type;
if(!K.name||K.disabled||l=="submit"||l=="reset"||l=="file"||l=="image"){return;}var L=(K.get("tag")=="select")?K.getSelected().map(function(M){return document.id(M).get("value");
}):((l=="radio"||l=="checkbox")&&!K.checked)?null:K.get("value");Array.from(L).each(function(M){if(typeof M!="undefined"){e.push(encodeURIComponent(K.name)+"="+encodeURIComponent(M));
}});});return e.join("&");}});var I={before:"beforeBegin",after:"afterEnd",bottom:"beforeEnd",top:"afterBegin",inside:"beforeEnd"};Element.implement("appendHTML",("insertAdjacentHTML" in document.createElement("div"))?function(l,e){this.insertAdjacentHTML(I[e||"bottom"],l);
return this;}:function(P,M){var K=new Element("div",{html:P}),O=K.childNodes,L=K.firstChild;if(!L){return this;}if(O.length>1){L=document.createDocumentFragment();
for(var N=0,e=O.length;N<e;N++){L.appendChild(O[N]);}}A[M||"bottom"](L,this);return this;});var m={},D={};var G=function(e){return(D[e]||(D[e]={}));};var z=function(l){var e=l.uniqueNumber;
if(l.removeEvents){l.removeEvents();}if(l.clearAttributes){l.clearAttributes();}if(e!=null){delete m[e];delete D[e];}return l;};var H={input:"checked",option:"selected",textarea:"value"};
Element.implement({destroy:function(){var e=z(this).getElementsByTagName("*");Array.each(e,z);Element.dispose(this);return null;},empty:function(){Array.from(this.childNodes).each(Element.dispose);
return this;},dispose:function(){return(this.parentNode)?this.parentNode.removeChild(this):this;},clone:function(N,L){N=N!==false;var S=this.cloneNode(N),K=[S],M=[this],Q;
if(N){K.append(Array.from(S.getElementsByTagName("*")));M.append(Array.from(this.getElementsByTagName("*")));}for(Q=K.length;Q--;){var O=K[Q],R=M[Q];if(!L){O.removeAttribute("id");
}if(O.clearAttributes){O.clearAttributes();O.mergeAttributes(R);O.removeAttribute("uniqueNumber");if(O.options){var V=O.options,e=R.options;for(var P=V.length;
P--;){V[P].selected=e[P].selected;}}}var l=H[R.tagName.toLowerCase()];if(l&&R[l]){O[l]=R[l];}}if(i){var T=S.getElementsByTagName("object"),U=this.getElementsByTagName("object");
for(Q=T.length;Q--;){T[Q].outerHTML=U[Q].outerHTML;}}return document.id(S);}});[Element,Window,Document].invoke("implement",{addListener:function(l,e){if(window.attachEvent&&!window.addEventListener){m[Slick.uidOf(this)]=this;
}if(this.addEventListener){this.addEventListener(l,e,!!arguments[2]);}else{this.attachEvent("on"+l,e);}return this;},removeListener:function(l,e){if(this.removeEventListener){this.removeEventListener(l,e,!!arguments[2]);
}else{this.detachEvent("on"+l,e);}return this;},retrieve:function(l,e){var L=G(Slick.uidOf(this)),K=L[l];if(e!=null&&K==null){K=L[l]=e;}return K!=null?K:null;
},store:function(l,e){var K=G(Slick.uidOf(this));K[l]=e;return this;},eliminate:function(e){var l=G(Slick.uidOf(this));delete l[e];return this;}});if(window.attachEvent&&!window.addEventListener){var J=function(){Object.each(m,z);
if(window.CollectGarbage){CollectGarbage();}window.removeListener("unload",J);};window.addListener("unload",J);}Element.Properties={};Element.Properties=new Hash;
Element.Properties.style={set:function(e){this.style.cssText=e;},get:function(){return this.style.cssText;},erase:function(){this.style.cssText="";}};Element.Properties.tag={get:function(){return this.tagName.toLowerCase();
}};Element.Properties.html={set:function(e){if(e==null){e="";}else{if(typeOf(e)=="array"){e=e.join("");}}this.innerHTML=e;},erase:function(){this.innerHTML="";
}};var a=true,h=true,C=true;var x=document.createElement("div");x.innerHTML="<nav></nav>";a=(x.childNodes.length==1);if(!a){var w="abbr article aside audio canvas datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video".split(" "),b=document.createDocumentFragment(),y=w.length;
while(y--){b.createElement(w[y]);}}x=null;h=Function.attempt(function(){var e=document.createElement("table");e.innerHTML="<tr><td></td></tr>";return true;
});var c=document.createElement("tr"),r="<td></td>";c.innerHTML=r;C=(c.innerHTML==r);c=null;if(!h||!C||!a){Element.Properties.html.set=(function(l){var e={table:[1,"<table>","</table>"],select:[1,"<select>","</select>"],tbody:[2,"<table><tbody>","</tbody></table>"],tr:[3,"<table><tbody><tr>","</tr></tbody></table>"]};
e.thead=e.tfoot=e.tbody;return function(K){var L=e[this.get("tag")];if(!L&&!a){L=[0,"",""];}if(!L){return l.call(this,K);}var O=L[0],N=document.createElement("div"),M=N;
if(!a){b.appendChild(N);}N.innerHTML=[L[1],K,L[2]].flatten().join("");while(O--){M=M.firstChild;}this.empty().adopt(M.childNodes);if(!a){b.removeChild(N);
}N=null;};})(Element.Properties.html.set);}var q=document.createElement("form");q.innerHTML="<select><option>s</option></select>";if(q.firstChild.value!="s"){Element.Properties.value={set:function(N){var l=this.get("tag");
if(l!="select"){return this.setProperty("value",N);}var K=this.getElements("option");N=String(N);for(var L=0;L<K.length;L++){var M=K[L],e=M.getAttributeNode("value"),O=(e&&e.specified)?M.value:M.get("text");
if(O===N){return M.selected=true;}}},get:function(){var K=this,l=K.get("tag");if(l!="select"&&l!="option"){return this.getProperty("value");}if(l=="select"&&!(K=K.getSelected()[0])){return"";
}var e=K.getAttributeNode("value");return(e&&e.specified)?K.value:K.get("text");}};}q=null;if(document.createElement("div").getAttributeNode("id")){Element.Properties.id={set:function(e){this.id=this.getAttributeNode("id").value=e;
},get:function(){return this.id||null;},erase:function(){this.id=this.getAttributeNode("id").value="";}};}})();(function(){var l=document.html,f;f=document.createElement("div");
f.style.color="red";f.style.color=null;var e=f.style.color=="red";var k="1px solid #123abc";f.style.border=k;var o=f.style.border!=k;f=null;var n=!!window.getComputedStyle;
Element.Properties.styles={set:function(r){this.setStyles(r);}};var j=(l.style.opacity!=null),g=(l.style.filter!=null),q=/alpha\(opacity=([\d.]+)\)/i;var b=function(s,r){s.store("$opacity",r);
s.style.visibility=r>0||r==null?"visible":"hidden";};var p=function(r,v,u){var t=r.style,s=t.filter||r.getComputedStyle("filter")||"";t.filter=(v.test(s)?s.replace(v,u):s+" "+u).trim();
if(!t.filter){t.removeAttribute("filter");}};var h=(j?function(s,r){s.style.opacity=r;}:(g?function(s,r){if(!s.currentStyle||!s.currentStyle.hasLayout){s.style.zoom=1;
}if(r==null||r==1){p(s,q,"");if(r==1&&i(s)!=1){p(s,q,"alpha(opacity=100)");}}else{p(s,q,"alpha(opacity="+(r*100).limit(0,100).round()+")");}}:b));var i=(j?function(s){var r=s.style.opacity||s.getComputedStyle("opacity");
return(r=="")?1:r.toFloat();}:(g?function(s){var t=(s.style.filter||s.getComputedStyle("filter")),r;if(t){r=t.match(q);}return(r==null||t==null)?1:(r[1]/100);
}:function(s){var r=s.retrieve("$opacity");if(r==null){r=(s.style.visibility=="hidden"?0:1);}return r;}));var d=(l.style.cssFloat==null)?"styleFloat":"cssFloat",a={left:"0%",top:"0%",center:"50%",right:"100%",bottom:"100%"},c=(l.style.backgroundPositionX!=null);
var m=function(r,s){if(s=="backgroundPosition"){r.removeAttribute(s+"X");s+="Y";}r.removeAttribute(s);};Element.implement({getComputedStyle:function(t){if(!n&&this.currentStyle){return this.currentStyle[t.camelCase()];
}var s=Element.getDocument(this).defaultView,r=s?s.getComputedStyle(this,null):null;return(r)?r.getPropertyValue((t==d)?"float":t.hyphenate()):"";},setStyle:function(s,r){if(s=="opacity"){if(r!=null){r=parseFloat(r);
}h(this,r);return this;}s=(s=="float"?d:s).camelCase();if(typeOf(r)!="string"){var t=(Element.Styles[s]||"@").split(" ");r=Array.from(r).map(function(v,u){if(!t[u]){return"";
}return(typeOf(v)=="number")?t[u].replace("@",Math.round(v)):v;}).join(" ");}else{if(r==String(Number(r))){r=Math.round(r);}}this.style[s]=r;if((r==""||r==null)&&e&&this.style.removeAttribute){m(this.style,s);
}return this;},getStyle:function(x){if(x=="opacity"){return i(this);}x=(x=="float"?d:x).camelCase();var r=this.style[x];if(!r||x=="zIndex"){if(Element.ShortStyles.hasOwnProperty(x)){r=[];
for(var w in Element.ShortStyles[x]){r.push(this.getStyle(w));}return r.join(" ");}r=this.getComputedStyle(x);}if(c&&/^backgroundPosition[XY]?$/.test(x)){return r.replace(/(top|right|bottom|left)/g,function(s){return a[s];
})||"0px";}if(!r&&x=="backgroundPosition"){return"0px 0px";}if(r){r=String(r);var u=r.match(/rgba?\([\d\s,]+\)/);if(u){r=r.replace(u[0],u[0].rgbToHex());
}}if(!n&&!this.style[x]){if((/^(height|width)$/).test(x)&&!(/px$/.test(r))){var t=(x=="width")?["left","right"]:["top","bottom"],v=0;t.each(function(s){v+=this.getStyle("border-"+s+"-width").toInt()+this.getStyle("padding-"+s).toInt();
},this);return this["offset"+x.capitalize()]-v+"px";}if((/^border(.+)Width|margin|padding/).test(x)&&isNaN(parseFloat(r))){return"0px";}}if(o&&/^border(Top|Right|Bottom|Left)?$/.test(x)&&/^#/.test(r)){return r.replace(/^(.+)\s(.+)\s(.+)$/,"$2 $3 $1");
}return r;},setStyles:function(s){for(var r in s){this.setStyle(r,s[r]);}return this;},getStyles:function(){var r={};Array.flatten(arguments).each(function(s){r[s]=this.getStyle(s);
},this);return r;}});Element.Styles={left:"@px",top:"@px",bottom:"@px",right:"@px",width:"@px",height:"@px",maxWidth:"@px",maxHeight:"@px",minWidth:"@px",minHeight:"@px",backgroundColor:"rgb(@, @, @)",backgroundSize:"@px",backgroundPosition:"@px @px",color:"rgb(@, @, @)",fontSize:"@px",letterSpacing:"@px",lineHeight:"@px",clip:"rect(@px @px @px @px)",margin:"@px @px @px @px",padding:"@px @px @px @px",border:"@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)",borderWidth:"@px @px @px @px",borderStyle:"@ @ @ @",borderColor:"rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)",zIndex:"@",zoom:"@",fontWeight:"@",textIndent:"@px",opacity:"@"};
Element.implement({setOpacity:function(r){h(this,r);return this;},getOpacity:function(){return i(this);}});Element.Properties.opacity={set:function(r){h(this,r);
b(this,r);},get:function(){return i(this);}};Element.Styles=new Hash(Element.Styles);Element.ShortStyles={margin:{},padding:{},border:{},borderWidth:{},borderStyle:{},borderColor:{}};
["Top","Right","Bottom","Left"].each(function(x){var w=Element.ShortStyles;var s=Element.Styles;["margin","padding"].each(function(y){var z=y+x;w[y][z]=s[z]="@px";
});var v="border"+x;w.border[v]=s[v]="@px @ rgb(@, @, @)";var u=v+"Width",r=v+"Style",t=v+"Color";w[v]={};w.borderWidth[u]=w[v][u]=s[u]="@px";w.borderStyle[r]=w[v][r]=s[r]="@";
w.borderColor[t]=w[v][t]=s[t]="rgb(@, @, @)";});if(c){Element.ShortStyles.backgroundPosition={backgroundPositionX:"@",backgroundPositionY:"@"};}})();(function(){Element.Properties.events={set:function(b){this.addEvents(b);
}};[Element,Window,Document].invoke("implement",{addEvent:function(f,h){var i=this.retrieve("events",{});if(!i[f]){i[f]={keys:[],values:[]};}if(i[f].keys.contains(h)){return this;
}i[f].keys.push(h);var g=f,b=Element.Events[f],d=h,j=this;if(b){if(b.onAdd){b.onAdd.call(this,h,f);}if(b.condition){d=function(k){if(b.condition.call(this,k,f)){return h.call(this,k);
}return true;};}if(b.base){g=Function.from(b.base).call(this,f);}}var e=function(){return h.call(j);};var c=Element.NativeEvents[g];if(c){if(c==2){e=function(k){k=new DOMEvent(k,j.getWindow());
if(d.call(j,k)===false){k.stop();}};}this.addListener(g,e,arguments[2]);}i[f].values.push(e);return this;},removeEvent:function(e,d){var c=this.retrieve("events");
if(!c||!c[e]){return this;}var h=c[e];var b=h.keys.indexOf(d);if(b==-1){return this;}var g=h.values[b];delete h.keys[b];delete h.values[b];var f=Element.Events[e];
if(f){if(f.onRemove){f.onRemove.call(this,d,e);}if(f.base){e=Function.from(f.base).call(this,e);}}return(Element.NativeEvents[e])?this.removeListener(e,g,arguments[2]):this;
},addEvents:function(b){for(var c in b){this.addEvent(c,b[c]);}return this;},removeEvents:function(b){var d;if(typeOf(b)=="object"){for(d in b){this.removeEvent(d,b[d]);
}return this;}var c=this.retrieve("events");if(!c){return this;}if(!b){for(d in c){this.removeEvents(d);}this.eliminate("events");}else{if(c[b]){c[b].keys.each(function(e){this.removeEvent(b,e);
},this);delete c[b];}}return this;},fireEvent:function(e,c,b){var d=this.retrieve("events");if(!d||!d[e]){return this;}c=Array.from(c);d[e].keys.each(function(f){if(b){f.delay(b,this,c);
}else{f.apply(this,c);}},this);return this;},cloneEvents:function(e,d){e=document.id(e);var c=e.retrieve("events");if(!c){return this;}if(!d){for(var b in c){this.cloneEvents(e,b);
}}else{if(c[d]){c[d].keys.each(function(f){this.addEvent(d,f);},this);}}return this;}});Element.NativeEvents={click:2,dblclick:2,mouseup:2,mousedown:2,contextmenu:2,mousewheel:2,DOMMouseScroll:2,mouseover:2,mouseout:2,mousemove:2,selectstart:2,selectend:2,keydown:2,keypress:2,keyup:2,orientationchange:2,touchstart:2,touchmove:2,touchend:2,touchcancel:2,gesturestart:2,gesturechange:2,gestureend:2,focus:2,blur:2,change:2,reset:2,select:2,submit:2,paste:2,input:2,load:2,unload:1,beforeunload:2,resize:1,move:1,DOMContentLoaded:1,readystatechange:1,hashchange:1,popstate:2,error:1,abort:1,scroll:1};
Element.Events={mousewheel:{base:"onwheel" in document?"wheel":"onmousewheel" in document?"mousewheel":"DOMMouseScroll"}};var a=function(b){var c=b.relatedTarget;
if(c==null){return true;}if(!c){return false;}return(c!=this&&c.prefix!="xul"&&typeOf(this)!="document"&&!this.contains(c));};if("onmouseenter" in document.documentElement){Element.NativeEvents.mouseenter=Element.NativeEvents.mouseleave=2;
Element.MouseenterCheck=a;}else{Element.Events.mouseenter={base:"mouseover",condition:a};Element.Events.mouseleave={base:"mouseout",condition:a};}if(!window.addEventListener){Element.NativeEvents.propertychange=2;
Element.Events.change={base:function(){var b=this.type;return(this.get("tag")=="input"&&(b=="radio"||b=="checkbox"))?"propertychange":"change";},condition:function(b){return b.type!="propertychange"||b.event.propertyName=="checked";
}};}Element.Events=new Hash(Element.Events);})();(function(){var c=!!window.addEventListener;Element.NativeEvents.focusin=Element.NativeEvents.focusout=2;
var k=function(l,m,n,o,p){while(p&&p!=l){if(m(p,o)){return n.call(p,o,p);}p=document.id(p.parentNode);}};var a={mouseenter:{base:"mouseover",condition:Element.MouseenterCheck},mouseleave:{base:"mouseout",condition:Element.MouseenterCheck},focus:{base:"focus"+(c?"":"in"),capture:true},blur:{base:c?"blur":"focusout",capture:true}};
var b="$delegation:";var i=function(l){return{base:"focusin",remove:function(m,o){var p=m.retrieve(b+l+"listeners",{})[o];if(p&&p.forms){for(var n=p.forms.length;
n--;){p.forms[n].removeEvent(l,p.fns[n]);}}},listen:function(x,r,v,n,t,s){var o=(t.get("tag")=="form")?t:n.target.getParent("form");if(!o){return;}var u=x.retrieve(b+l+"listeners",{}),p=u[s]||{forms:[],fns:[]},m=p.forms,w=p.fns;
if(m.indexOf(o)!=-1){return;}m.push(o);var q=function(y){k(x,r,v,y,t);};o.addEvent(l,q);w.push(q);u[s]=p;x.store(b+l+"listeners",u);}};};var d=function(l){return{base:"focusin",listen:function(m,n,p,q,r){var o={blur:function(){this.removeEvents(o);
}};o[l]=function(s){k(m,n,p,s,r);};q.target.addEvents(o);}};};if(!c){Object.append(a,{submit:i("submit"),reset:i("reset"),change:d("change"),select:d("select")});
}var h=Element.prototype,f=h.addEvent,j=h.removeEvent;var e=function(l,m){return function(r,q,n){if(r.indexOf(":relay")==-1){return l.call(this,r,q,n);
}var o=Slick.parse(r).expressions[0][0];if(o.pseudos[0].key!="relay"){return l.call(this,r,q,n);}var p=o.tag;o.pseudos.slice(1).each(function(s){p+=":"+s.key+(s.value?"("+s.value+")":"");
});l.call(this,r,q);return m.call(this,p,o.pseudos[0].value,q);};};var g={addEvent:function(v,q,x){var t=this.retrieve("$delegates",{}),r=t[v];if(r){for(var y in r){if(r[y].fn==x&&r[y].match==q){return this;
}}}var p=v,u=q,o=x,n=a[v]||{};v=n.base||p;q=function(B){return Slick.match(B,u);};var w=Element.Events[p];if(n.condition||w&&w.condition){var l=q,m=n.condition||w.condition;
q=function(C,B){return l(C,B)&&m.call(C,B,v);};}var z=this,s=String.uniqueID();var A=n.listen?function(B,C){if(!C&&B&&B.target){C=B.target;}if(C){n.listen(z,q,x,B,C,s);
}}:function(B,C){if(!C&&B&&B.target){C=B.target;}if(C){k(z,q,x,B,C);}};if(!r){r={};}r[s]={match:u,fn:o,delegator:A};t[p]=r;return f.call(this,v,A,n.capture);
},removeEvent:function(r,n,t,u){var q=this.retrieve("$delegates",{}),p=q[r];if(!p){return this;}if(u){var m=r,w=p[u].delegator,l=a[r]||{};r=l.base||m;if(l.remove){l.remove(this,u);
}delete p[u];q[m]=p;return j.call(this,r,w,l.capture);}var o,v;if(t){for(o in p){v=p[o];if(v.match==n&&v.fn==t){return g.removeEvent.call(this,r,n,t,o);
}}}else{for(o in p){v=p[o];if(v.match==n){g.removeEvent.call(this,r,n,v.fn,o);}}}return this;}};[Element,Window,Document].invoke("implement",{addEvent:e(f,g.addEvent),removeEvent:e(j,g.removeEvent)});
})();(function(){var h=document.createElement("div"),e=document.createElement("div");h.style.height="0";h.appendChild(e);var d=(e.offsetParent===h);h=e=null;
var l=function(m){return k(m,"position")!="static"||a(m);};var i=function(m){return l(m)||(/^(?:table|td|th)$/i).test(m.tagName);};Element.implement({scrollTo:function(m,n){if(a(this)){this.getWindow().scrollTo(m,n);
}else{this.scrollLeft=m;this.scrollTop=n;}return this;},getSize:function(){if(a(this)){return this.getWindow().getSize();}return{x:this.offsetWidth,y:this.offsetHeight};
},getScrollSize:function(){if(a(this)){return this.getWindow().getScrollSize();}return{x:this.scrollWidth,y:this.scrollHeight};},getScroll:function(){if(a(this)){return this.getWindow().getScroll();
}return{x:this.scrollLeft,y:this.scrollTop};},getScrolls:function(){var n=this.parentNode,m={x:0,y:0};while(n&&!a(n)){m.x+=n.scrollLeft;m.y+=n.scrollTop;
n=n.parentNode;}return m;},getOffsetParent:d?function(){var m=this;if(a(m)||k(m,"position")=="fixed"){return null;}var n=(k(m,"position")=="static")?i:l;
while((m=m.parentNode)){if(n(m)){return m;}}return null;}:function(){var m=this;if(a(m)||k(m,"position")=="fixed"){return null;}try{return m.offsetParent;
}catch(n){}return null;},getOffsets:function(){var t=this.getBoundingClientRect;t=t&&!Browser.Platform.ios;if(t){var n=this.getBoundingClientRect(),q=document.id(this.getDocument().documentElement),u=q.getScroll(),o=this.getScrolls(),m=(k(this,"position")=="fixed");
return{x:n.left.toInt()+o.x+((m)?0:u.x)-q.clientLeft,y:n.top.toInt()+o.y+((m)?0:u.y)-q.clientTop};}var p=this,r={x:0,y:0};if(a(this)){return r;}while(p&&!a(p)){r.x+=p.offsetLeft;
r.y+=p.offsetTop;if(Browser.firefox){if(!c(p)){r.x+=b(p);r.y+=g(p);}var s=p.parentNode;if(s&&k(s,"overflow")!="visible"){r.x+=b(s);r.y+=g(s);}}else{if(p!=this&&Browser.safari){r.x+=b(p);
r.y+=g(p);}}p=p.offsetParent;}if(Browser.firefox&&!c(this)){r.x-=b(this);r.y-=g(this);}return r;},getPosition:function(p){var q=this.getOffsets(),n=this.getScrolls();
var m={x:q.x-n.x,y:q.y-n.y};if(p&&(p=document.id(p))){var o=p.getPosition();return{x:m.x-o.x-b(p),y:m.y-o.y-g(p)};}return m;},getCoordinates:function(o){if(a(this)){return this.getWindow().getCoordinates();
}var m=this.getPosition(o),n=this.getSize();var p={left:m.x,top:m.y,width:n.x,height:n.y};p.right=p.left+p.width;p.bottom=p.top+p.height;return p;},computePosition:function(m){return{left:m.x-j(this,"margin-left"),top:m.y-j(this,"margin-top")};
},setPosition:function(m){return this.setStyles(this.computePosition(m));}});[Document,Window].invoke("implement",{getSize:function(){var m=f(this);return{x:m.clientWidth,y:m.clientHeight};
},getScroll:function(){var n=this.getWindow(),m=f(this);return{x:n.pageXOffset||m.scrollLeft,y:n.pageYOffset||m.scrollTop};},getScrollSize:function(){var o=f(this),n=this.getSize(),m=this.getDocument().body;
return{x:Math.max(o.scrollWidth,m.scrollWidth,n.x),y:Math.max(o.scrollHeight,m.scrollHeight,n.y)};},getPosition:function(){return{x:0,y:0};},getCoordinates:function(){var m=this.getSize();
return{top:0,left:0,bottom:m.y,right:m.x,height:m.y,width:m.x};}});var k=Element.getComputedStyle;function j(m,n){return k(m,n).toInt()||0;}function c(m){return k(m,"-moz-box-sizing")=="border-box";
}function g(m){return j(m,"border-top-width");}function b(m){return j(m,"border-left-width");}function a(m){return(/^(?:body|html)$/i).test(m.tagName);
}function f(m){var n=m.getDocument();return(!n.compatMode||n.compatMode=="CSS1Compat")?n.html:n.body;}})();Element.alias({position:"setPosition"});[Window,Document,Element].invoke("implement",{getHeight:function(){return this.getSize().y;
},getWidth:function(){return this.getSize().x;},getScrollTop:function(){return this.getScroll().y;},getScrollLeft:function(){return this.getScroll().x;
},getScrollHeight:function(){return this.getScrollSize().y;},getScrollWidth:function(){return this.getScrollSize().x;},getTop:function(){return this.getPosition().y;
},getLeft:function(){return this.getPosition().x;}});(function(){var f=this.Fx=new Class({Implements:[Chain,Events,Options],options:{fps:60,unit:false,duration:500,frames:null,frameSkip:true,link:"ignore"},initialize:function(g){this.subject=this.subject||this;
this.setOptions(g);},getTransition:function(){return function(g){return -(Math.cos(Math.PI*g)-1)/2;};},step:function(g){if(this.options.frameSkip){var h=(this.time!=null)?(g-this.time):0,i=h/this.frameInterval;
this.time=g;this.frame+=i;}else{this.frame++;}if(this.frame<this.frames){var j=this.transition(this.frame/this.frames);this.set(this.compute(this.from,this.to,j));
}else{this.frame=this.frames;this.set(this.compute(this.from,this.to,1));this.stop();}},set:function(g){return g;},compute:function(i,h,g){return f.compute(i,h,g);
},check:function(){if(!this.isRunning()){return true;}switch(this.options.link){case"cancel":this.cancel();return true;case"chain":this.chain(this.caller.pass(arguments,this));
return false;}return false;},start:function(k,j){if(!this.check(k,j)){return this;}this.from=k;this.to=j;this.frame=(this.options.frameSkip)?0:-1;this.time=null;
this.transition=this.getTransition();var i=this.options.frames,h=this.options.fps,g=this.options.duration;this.duration=f.Durations[g]||g.toInt();this.frameInterval=1000/h;
this.frames=i||Math.round(this.duration/this.frameInterval);this.fireEvent("start",this.subject);b.call(this,h);return this;},stop:function(){if(this.isRunning()){this.time=null;
d.call(this,this.options.fps);if(this.frames==this.frame){this.fireEvent("complete",this.subject);if(!this.callChain()){this.fireEvent("chainComplete",this.subject);
}}else{this.fireEvent("stop",this.subject);}}return this;},cancel:function(){if(this.isRunning()){this.time=null;d.call(this,this.options.fps);this.frame=this.frames;
this.fireEvent("cancel",this.subject).clearChain();}return this;},pause:function(){if(this.isRunning()){this.time=null;d.call(this,this.options.fps);}return this;
},resume:function(){if(this.isPaused()){b.call(this,this.options.fps);}return this;},isRunning:function(){var g=e[this.options.fps];return g&&g.contains(this);
},isPaused:function(){return(this.frame<this.frames)&&!this.isRunning();}});f.compute=function(i,h,g){return(h-i)*g+i;};f.Durations={"short":250,normal:500,"long":1000};
var e={},c={};var a=function(){var h=Date.now();for(var j=this.length;j--;){var g=this[j];if(g){g.step(h);}}};var b=function(h){var g=e[h]||(e[h]=[]);g.push(this);
if(!c[h]){c[h]=a.periodical(Math.round(1000/h),g);}};var d=function(h){var g=e[h];if(g){g.erase(this);if(!g.length&&c[h]){delete e[h];c[h]=clearInterval(c[h]);
}}};})();Fx.CSS=new Class({Extends:Fx,prepare:function(b,e,a){a=Array.from(a);var h=a[0],g=a[1];if(g==null){g=h;h=b.getStyle(e);var c=this.options.unit;
if(c&&h&&typeof h=="string"&&h.slice(-c.length)!=c&&parseFloat(h)!=0){b.setStyle(e,g+c);var d=b.getComputedStyle(e);if(!(/px$/.test(d))){d=b.style[("pixel-"+e).camelCase()];
if(d==null){var f=b.style.left;b.style.left=g+c;d=b.style.pixelLeft;b.style.left=f;}}h=(g||1)/(parseFloat(d)||1)*(parseFloat(h)||0);b.setStyle(e,h+c);}}return{from:this.parse(h),to:this.parse(g)};
},parse:function(a){a=Function.from(a)();a=(typeof a=="string")?a.split(" "):Array.from(a);return a.map(function(c){c=String(c);var b=false;Object.each(Fx.CSS.Parsers,function(f,e){if(b){return;
}var d=f.parse(c);if(d||d===0){b={value:d,parser:f};}});b=b||{value:c,parser:Fx.CSS.Parsers.String};return b;});},compute:function(d,c,b){var a=[];(Math.min(d.length,c.length)).times(function(e){a.push({value:d[e].parser.compute(d[e].value,c[e].value,b),parser:d[e].parser});
});a.$family=Function.from("fx:css:value");return a;},serve:function(c,b){if(typeOf(c)!="fx:css:value"){c=this.parse(c);}var a=[];c.each(function(d){a=a.concat(d.parser.serve(d.value,b));
});return a;},render:function(a,d,c,b){a.setStyle(d,this.serve(c,b));},search:function(a){if(Fx.CSS.Cache[a]){return Fx.CSS.Cache[a];}var d={},c=new RegExp("^"+a.escapeRegExp()+"$");
var b=function(e){Array.each(e,function(h,f){if(h.media){b(h.rules||h.cssRules);return;}if(!h.style){return;}var g=(h.selectorText)?h.selectorText.replace(/^\w+/,function(i){return i.toLowerCase();
}):null;if(!g||!c.test(g)){return;}Object.each(Element.Styles,function(j,i){if(!h.style[i]||Element.ShortStyles[i]){return;}j=String(h.style[i]);d[i]=((/^rgb/).test(j))?j.rgbToHex():j;
});});};Array.each(document.styleSheets,function(g,f){var e=g.href;if(e&&e.indexOf("://")>-1&&e.indexOf(document.domain)==-1){return;}var h=g.rules||g.cssRules;
b(h);});return Fx.CSS.Cache[a]=d;}});Fx.CSS.Cache={};Fx.CSS.Parsers={Color:{parse:function(a){if(a.match(/^#[0-9a-f]{3,6}$/i)){return a.hexToRgb(true);
}return((a=a.match(/(\d+),\s*(\d+),\s*(\d+)/)))?[a[1],a[2],a[3]]:false;},compute:function(c,b,a){return c.map(function(e,d){return Math.round(Fx.compute(c[d],b[d],a));
});},serve:function(a){return a.map(Number);}},Number:{parse:parseFloat,compute:Fx.compute,serve:function(b,a){return(a)?b+a:b;}},String:{parse:Function.from(false),compute:function(b,a){return a;
},serve:function(a){return a;}}};Fx.CSS.Parsers=new Hash(Fx.CSS.Parsers);Fx.Tween=new Class({Extends:Fx.CSS,initialize:function(b,a){this.element=this.subject=document.id(b);
this.parent(a);},set:function(b,a){if(arguments.length==1){a=b;b=this.property||this.options.property;}this.render(this.element,b,a,this.options.unit);
return this;},start:function(c,e,d){if(!this.check(c,e,d)){return this;}var b=Array.flatten(arguments);this.property=this.options.property||b.shift();var a=this.prepare(this.element,this.property,b);
return this.parent(a.from,a.to);}});Element.Properties.tween={set:function(a){this.get("tween").cancel().setOptions(a);return this;},get:function(){var a=this.retrieve("tween");
if(!a){a=new Fx.Tween(this,{link:"cancel"});this.store("tween",a);}return a;}};Element.implement({tween:function(a,c,b){this.get("tween").start(a,c,b);
return this;},fade:function(d){var e=this.get("tween"),g,c=["opacity"].append(arguments),a;if(c[1]==null){c[1]="toggle";}switch(c[1]){case"in":g="start";
c[1]=1;break;case"out":g="start";c[1]=0;break;case"show":g="set";c[1]=1;break;case"hide":g="set";c[1]=0;break;case"toggle":var b=this.retrieve("fade:flag",this.getStyle("opacity")==1);
g="start";c[1]=b?0:1;this.store("fade:flag",!b);a=true;break;default:g="start";}if(!a){this.eliminate("fade:flag");}e[g].apply(e,c);var f=c[c.length-1];
if(g=="set"||f!=0){this.setStyle("visibility",f==0?"hidden":"visible");}else{e.chain(function(){this.element.setStyle("visibility","hidden");this.callChain();
});}return this;},highlight:function(c,a){if(!a){a=this.retrieve("highlight:original",this.getStyle("background-color"));a=(a=="transparent")?"#fff":a;
}var b=this.get("tween");b.start("background-color",c||"#ffff88",a).chain(function(){this.setStyle("background-color",this.retrieve("highlight:original"));
b.callChain();}.bind(this));return this;}});Fx.Morph=new Class({Extends:Fx.CSS,initialize:function(b,a){this.element=this.subject=document.id(b);this.parent(a);
},set:function(a){if(typeof a=="string"){a=this.search(a);}for(var b in a){this.render(this.element,b,a[b],this.options.unit);}return this;},compute:function(e,d,c){var a={};
for(var b in e){a[b]=this.parent(e[b],d[b],c);}return a;},start:function(b){if(!this.check(b)){return this;}if(typeof b=="string"){b=this.search(b);}var e={},d={};
for(var c in b){var a=this.prepare(this.element,c,b[c]);e[c]=a.from;d[c]=a.to;}return this.parent(e,d);}});Element.Properties.morph={set:function(a){this.get("morph").cancel().setOptions(a);
return this;},get:function(){var a=this.retrieve("morph");if(!a){a=new Fx.Morph(this,{link:"cancel"});this.store("morph",a);}return a;}};Element.implement({morph:function(a){this.get("morph").start(a);
return this;}});Fx.implement({getTransition:function(){var a=this.options.transition||Fx.Transitions.Sine.easeInOut;if(typeof a=="string"){var b=a.split(":");
a=Fx.Transitions;a=a[b[0]]||a[b[0].capitalize()];if(b[1]){a=a["ease"+b[1].capitalize()+(b[2]?b[2].capitalize():"")];}}return a;}});Fx.Transition=function(c,b){b=Array.from(b);
var a=function(d){return c(d,b);};return Object.append(a,{easeIn:a,easeOut:function(d){return 1-c(1-d,b);},easeInOut:function(d){return(d<=0.5?c(2*d,b):(2-c(2*(1-d),b)))/2;
}});};Fx.Transitions={linear:function(a){return a;}};Fx.Transitions=new Hash(Fx.Transitions);Fx.Transitions.extend=function(a){for(var b in a){Fx.Transitions[b]=new Fx.Transition(a[b]);
}};Fx.Transitions.extend({Pow:function(b,a){return Math.pow(b,a&&a[0]||6);},Expo:function(a){return Math.pow(2,8*(a-1));},Circ:function(a){return 1-Math.sin(Math.acos(a));
},Sine:function(a){return 1-Math.cos(a*Math.PI/2);},Back:function(b,a){a=a&&a[0]||1.618;return Math.pow(b,2)*((a+1)*b-a);},Bounce:function(f){var e;for(var d=0,c=1;
1;d+=c,c/=2){if(f>=(7-4*d)/11){e=c*c-Math.pow((11-6*d-11*f)/4,2);break;}}return e;},Elastic:function(b,a){return Math.pow(2,10*--b)*Math.cos(20*b*Math.PI*(a&&a[0]||1)/3);
}});["Quad","Cubic","Quart","Quint"].each(function(b,a){Fx.Transitions[b]=new Fx.Transition(function(c){return Math.pow(c,a+2);});});(function(){var d=function(){},a=("onprogress" in new Browser.Request);
var c=this.Request=new Class({Implements:[Chain,Events,Options],options:{url:"",data:"",headers:{"X-Requested-With":"XMLHttpRequest",Accept:"text/javascript, text/html, application/xml, text/xml, */*"},async:true,format:false,method:"post",link:"ignore",isSuccess:null,emulation:true,urlEncoded:true,encoding:"utf-8",evalScripts:false,evalResponse:false,timeout:0,noCache:false},initialize:function(e){this.xhr=new Browser.Request();
this.setOptions(e);this.headers=this.options.headers;},onStateChange:function(){var e=this.xhr;if(e.readyState!=4||!this.running){return;}this.running=false;
this.status=0;Function.attempt(function(){var f=e.status;this.status=(f==1223)?204:f;}.bind(this));e.onreadystatechange=d;if(a){e.onprogress=e.onloadstart=d;
}clearTimeout(this.timer);this.response={text:this.xhr.responseText||"",xml:this.xhr.responseXML};if(this.options.isSuccess.call(this,this.status)){this.success(this.response.text,this.response.xml);
}else{this.failure();}},isSuccess:function(){var e=this.status;return(e>=200&&e<300);},isRunning:function(){return !!this.running;},processScripts:function(e){if(this.options.evalResponse||(/(ecma|java)script/).test(this.getHeader("Content-type"))){return Browser.exec(e);
}return e.stripScripts(this.options.evalScripts);},success:function(f,e){this.onSuccess(this.processScripts(f),e);},onSuccess:function(){this.fireEvent("complete",arguments).fireEvent("success",arguments).callChain();
},failure:function(){this.onFailure();},onFailure:function(){this.fireEvent("complete").fireEvent("failure",this.xhr);},loadstart:function(e){this.fireEvent("loadstart",[e,this.xhr]);
},progress:function(e){this.fireEvent("progress",[e,this.xhr]);},timeout:function(){this.fireEvent("timeout",this.xhr);},setHeader:function(e,f){this.headers[e]=f;
return this;},getHeader:function(e){return Function.attempt(function(){return this.xhr.getResponseHeader(e);}.bind(this));},check:function(){if(!this.running){return true;
}switch(this.options.link){case"cancel":this.cancel();return true;case"chain":this.chain(this.caller.pass(arguments,this));return false;}return false;},send:function(o){if(!this.check(o)){return this;
}this.options.isSuccess=this.options.isSuccess||this.isSuccess;this.running=true;var l=typeOf(o);if(l=="string"||l=="element"){o={data:o};}var h=this.options;
o=Object.append({data:h.data,url:h.url,method:h.method},o);var j=o.data,f=String(o.url),e=o.method.toLowerCase();switch(typeOf(j)){case"element":j=document.id(j).toQueryString();
break;case"object":case"hash":j=Object.toQueryString(j);}if(this.options.format){var m="format="+this.options.format;j=(j)?m+"&"+j:m;}if(this.options.emulation&&!["get","post"].contains(e)){var k="_method="+e;
j=(j)?k+"&"+j:k;e="post";}if(this.options.urlEncoded&&["post","put"].contains(e)){var g=(this.options.encoding)?"; charset="+this.options.encoding:"";this.headers["Content-type"]="application/x-www-form-urlencoded"+g;
}if(!f){f=document.location.pathname;}var i=f.lastIndexOf("/");if(i>-1&&(i=f.indexOf("#"))>-1){f=f.substr(0,i);}if(this.options.noCache){f+=(f.indexOf("?")>-1?"&":"?")+String.uniqueID();
}if(j&&(e=="get"||e=="delete")){f+=(f.indexOf("?")>-1?"&":"?")+j;j=null;}var n=this.xhr;if(a){n.onloadstart=this.loadstart.bind(this);n.onprogress=this.progress.bind(this);
}n.open(e.toUpperCase(),f,this.options.async,this.options.user,this.options.password);if(this.options.user&&"withCredentials" in n){n.withCredentials=true;
}n.onreadystatechange=this.onStateChange.bind(this);Object.each(this.headers,function(q,p){try{n.setRequestHeader(p,q);}catch(r){this.fireEvent("exception",[p,q]);
}},this);this.fireEvent("request");n.send(j);if(!this.options.async){this.onStateChange();}else{if(this.options.timeout){this.timer=this.timeout.delay(this.options.timeout,this);
}}return this;},cancel:function(){if(!this.running){return this;}this.running=false;var e=this.xhr;e.abort();clearTimeout(this.timer);e.onreadystatechange=d;
if(a){e.onprogress=e.onloadstart=d;}this.xhr=new Browser.Request();this.fireEvent("cancel");return this;}});var b={};["get","post","put","delete","GET","POST","PUT","DELETE"].each(function(e){b[e]=function(g){var f={method:e};
if(g!=null){f.data=g;}return this.send(f);};});c.implement(b);Element.Properties.send={set:function(e){var f=this.get("send").cancel();f.setOptions(e);
return this;},get:function(){var e=this.retrieve("send");if(!e){e=new c({data:this,link:"cancel",method:this.get("method")||"post",url:this.get("action")});
this.store("send",e);}return e;}};Element.implement({send:function(e){var f=this.get("send");f.send({data:this,url:e||f.options.url});return this;}});})();
Request.HTML=new Class({Extends:Request,options:{update:false,append:false,evalScripts:true,filter:false,headers:{Accept:"text/html, application/xml, text/xml, */*"}},success:function(f){var e=this.options,c=this.response;
c.html=f.stripScripts(function(h){c.javascript=h;});var d=c.html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);if(d){c.html=d[1];}var b=new Element("div").set("html",c.html);
c.tree=b.childNodes;c.elements=b.getElements(e.filter||"*");if(e.filter){c.tree=c.elements;}if(e.update){var g=document.id(e.update).empty();if(e.filter){g.adopt(c.elements);
}else{g.set("html",c.html);}}else{if(e.append){var a=document.id(e.append);if(e.filter){c.elements.reverse().inject(a);}else{a.adopt(b.getChildren());}}}if(e.evalScripts){Browser.exec(c.javascript);
}this.onSuccess(c.tree,c.elements,c.html,c.javascript);}});Element.Properties.load={set:function(a){var b=this.get("load").cancel();b.setOptions(a);return this;
},get:function(){var a=this.retrieve("load");if(!a){a=new Request.HTML({data:this,link:"cancel",update:this,method:"get"});this.store("load",a);}return a;
}};Element.implement({load:function(){this.get("load").send(Array.link(arguments,{data:Type.isObject,url:Type.isString}));return this;}});if(typeof JSON=="undefined"){this.JSON={};
}JSON=new Hash({stringify:JSON.stringify,parse:JSON.parse});(function(){var special={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};
var escape=function(chr){return special[chr]||"\\u"+("0000"+chr.charCodeAt(0).toString(16)).slice(-4);};JSON.validate=function(string){string=string.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"");
return(/^[\],:{}\s]*$/).test(string);};JSON.encode=JSON.stringify?function(obj){return JSON.stringify(obj);}:function(obj){if(obj&&obj.toJSON){obj=obj.toJSON();
}switch(typeOf(obj)){case"string":return'"'+obj.replace(/[\x00-\x1f\\"]/g,escape)+'"';case"array":return"["+obj.map(JSON.encode).clean()+"]";case"object":case"hash":var string=[];
Object.each(obj,function(value,key){var json=JSON.encode(value);if(json){string.push(JSON.encode(key)+":"+json);}});return"{"+string+"}";case"number":case"boolean":return""+obj;
case"null":return"null";}return null;};JSON.secure=true;JSON.secure=false;JSON.decode=function(string,secure){if(!string||typeOf(string)!="string"){return null;
}if(secure==null){secure=JSON.secure;}if(secure){if(JSON.parse){return JSON.parse(string);}if(!JSON.validate(string)){throw new Error("JSON could not decode the input; security is enabled and the value is not secure.");
}}return eval("("+string+")");};})();Request.JSON=new Class({Extends:Request,options:{secure:true},initialize:function(a){this.parent(a);Object.append(this.headers,{Accept:"application/json","X-Request":"JSON"});
},success:function(c){var b;try{b=this.response.json=JSON.decode(c,this.options.secure);}catch(a){this.fireEvent("error",[c,a]);return;}if(b==null){this.onFailure();
}else{this.onSuccess(b,c);}}});var Cookie=new Class({Implements:Options,options:{path:"/",domain:false,duration:false,secure:false,document:document,encode:true},initialize:function(b,a){this.key=b;
this.setOptions(a);},write:function(b){if(this.options.encode){b=encodeURIComponent(b);}if(this.options.domain){b+="; domain="+this.options.domain;}if(this.options.path){b+="; path="+this.options.path;
}if(this.options.duration){var a=new Date();a.setTime(a.getTime()+this.options.duration*24*60*60*1000);b+="; expires="+a.toGMTString();}if(this.options.secure){b+="; secure";
}this.options.document.cookie=this.key+"="+b;return this;},read:function(){var a=this.options.document.cookie.match("(?:^|;)\\s*"+this.key.escapeRegExp()+"=([^;]*)");
return(a)?decodeURIComponent(a[1]):null;},dispose:function(){new Cookie(this.key,Object.merge({},this.options,{duration:-1})).write("");return this;}});
Cookie.write=function(b,c,a){return new Cookie(b,a).write(c);};Cookie.read=function(a){return new Cookie(a).read();};Cookie.dispose=function(b,a){return new Cookie(b,a).dispose();
};(function(i,k){var l,f,e=[],c,b,d=k.createElement("div");var g=function(){clearTimeout(b);if(l){return;}Browser.loaded=l=true;k.removeListener("DOMContentLoaded",g).removeListener("readystatechange",a);
k.fireEvent("domready");i.fireEvent("domready");};var a=function(){for(var m=e.length;m--;){if(e[m]()){g();return true;}}return false;};var j=function(){clearTimeout(b);
if(!a()){b=setTimeout(j,10);}};k.addListener("DOMContentLoaded",g);var h=function(){try{d.doScroll();return true;}catch(m){}return false;};if(d.doScroll&&!h()){e.push(h);
c=true;}if(k.readyState){e.push(function(){var m=k.readyState;return(m=="loaded"||m=="complete");});}if("onreadystatechange" in k){k.addListener("readystatechange",a);
}else{c=true;}if(c){j();}Element.Events.domready={onAdd:function(m){if(l){m.call(this);}}};Element.Events.load={base:"load",onAdd:function(m){if(f&&this==i){m.call(this);
}},condition:function(){if(this==i){g();delete Element.Events.load;}return true;}};i.addEvent("load",function(){f=true;});})(window,document);
/*
---
MooTools: the javascript framework

web build:
 - http://mootools.net/more/ace2807775df7dbcfa152f2910c76ec1

packager build:
 - packager build More/More More/Events.Pseudos More/Class.Refactor More/Chain.Wait More/Array.Extras More/Date More/Date.Extras More/Number.Format More/String.Extras More/String.QueryString More/URI More/URI.Relative More/Element.Event.Pseudos More/Element.Measure More/Element.Position More/Element.Shortcuts More/Fx.Accordion More/Fx.Reveal More/Fx.Scroll More/Fx.Slide More/Drag More/Drag.Move More/Request.JSONP More/Hash.Cookie More/IframeShim More/Swiff More/Locale More/Locale.en-US.Date More/Locale.en-US.Number

...
*/

/*
---

script: More.js

name: More

description: MooTools More

license: MIT-style license

authors:
  - Guillermo Rauch
  - Thomas Aylott
  - Scott Kyle
  - Arian Stolwijk
  - Tim Wienk
  - Christoph Pojer
  - Aaron Newton
  - Jacob Thornton

requires:
  - Core/MooTools

provides: [MooTools.More]

...
*/

MooTools.More = {
	version: '1.5.0',
	build: '73db5e24e6e9c5c87b3a27aebef2248053f7db37'
};


/*
---

name: Events.Pseudos

description: Adds the functionality to add pseudo events

license: MIT-style license

authors:
  - Arian Stolwijk

requires: [Core/Class.Extras, Core/Slick.Parser, MooTools.More]

provides: [Events.Pseudos]

...
*/

(function(){

Events.Pseudos = function(pseudos, addEvent, removeEvent){

	var storeKey = '_monitorEvents:';

	var storageOf = function(object){
		return {
			store: object.store ? function(key, value){
				object.store(storeKey + key, value);
			} : function(key, value){
				(object._monitorEvents || (object._monitorEvents = {}))[key] = value;
			},
			retrieve: object.retrieve ? function(key, dflt){
				return object.retrieve(storeKey + key, dflt);
			} : function(key, dflt){
				if (!object._monitorEvents) return dflt;
				return object._monitorEvents[key] || dflt;
			}
		};
	};

	var splitType = function(type){
		if (type.indexOf(':') == -1 || !pseudos) return null;

		var parsed = Slick.parse(type).expressions[0][0],
			parsedPseudos = parsed.pseudos,
			l = parsedPseudos.length,
			splits = [];

		while (l--){
			var pseudo = parsedPseudos[l].key,
				listener = pseudos[pseudo];
			if (listener != null) splits.push({
				event: parsed.tag,
				value: parsedPseudos[l].value,
				pseudo: pseudo,
				original: type,
				listener: listener
			});
		}
		return splits.length ? splits : null;
	};

	return {

		addEvent: function(type, fn, internal){
			var split = splitType(type);
			if (!split) return addEvent.call(this, type, fn, internal);

			var storage = storageOf(this),
				events = storage.retrieve(type, []),
				eventType = split[0].event,
				args = Array.slice(arguments, 2),
				stack = fn,
				self = this;

			split.each(function(item){
				var listener = item.listener,
					stackFn = stack;
				if (listener == false) eventType += ':' + item.pseudo + '(' + item.value + ')';
				else stack = function(){
					listener.call(self, item, stackFn, arguments, stack);
				};
			});

			events.include({type: eventType, event: fn, monitor: stack});
			storage.store(type, events);

			if (type != eventType) addEvent.apply(this, [type, fn].concat(args));
			return addEvent.apply(this, [eventType, stack].concat(args));
		},

		removeEvent: function(type, fn){
			var split = splitType(type);
			if (!split) return removeEvent.call(this, type, fn);

			var storage = storageOf(this),
				events = storage.retrieve(type);
			if (!events) return this;

			var args = Array.slice(arguments, 2);

			removeEvent.apply(this, [type, fn].concat(args));
			events.each(function(monitor, i){
				if (!fn || monitor.event == fn) removeEvent.apply(this, [monitor.type, monitor.monitor].concat(args));
				delete events[i];
			}, this);

			storage.store(type, events);
			return this;
		}

	};

};

var pseudos = {

	once: function(split, fn, args, monitor){
		fn.apply(this, args);
		this.removeEvent(split.event, monitor)
			.removeEvent(split.original, fn);
	},

	throttle: function(split, fn, args){
		if (!fn._throttled){
			fn.apply(this, args);
			fn._throttled = setTimeout(function(){
				fn._throttled = false;
			}, split.value || 250);
		}
	},

	pause: function(split, fn, args){
		clearTimeout(fn._pause);
		fn._pause = fn.delay(split.value || 250, this, args);
	}

};

Events.definePseudo = function(key, listener){
	pseudos[key] = listener;
	return this;
};

Events.lookupPseudo = function(key){
	return pseudos[key];
};

var proto = Events.prototype;
Events.implement(Events.Pseudos(pseudos, proto.addEvent, proto.removeEvent));

['Request', 'Fx'].each(function(klass){
	if (this[klass]) this[klass].implement(Events.prototype);
});

})();


/*
---

script: Class.Refactor.js

name: Class.Refactor

description: Extends a class onto itself with new property, preserving any items attached to the class's namespace.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Class
  - MooTools.More

# Some modules declare themselves dependent on Class.Refactor
provides: [Class.refactor, Class.Refactor]

...
*/

Class.refactor = function(original, refactors){

	Object.each(refactors, function(item, name){
		var origin = original.prototype[name];
		origin = (origin && origin.$origin) || origin || function(){};
		original.implement(name, (typeof item == 'function') ? function(){
			var old = this.previous;
			this.previous = origin;
			var value = item.apply(this, arguments);
			this.previous = old;
			return value;
		} : item);
	});

	return original;

};


/*
---

script: Chain.Wait.js

name: Chain.Wait

description: value, Adds a method to inject pauses between chained events.

license: MIT-style license.

authors:
  - Aaron Newton

requires:
  - Core/Chain
  - Core/Element
  - Core/Fx
  - MooTools.More

provides: [Chain.Wait]

...
*/

(function(){

	var wait = {
		wait: function(duration){
			return this.chain(function(){
				this.callChain.delay(duration == null ? 500 : duration, this);
				return this;
			}.bind(this));
		}
	};

	Chain.implement(wait);

	if (this.Fx) Fx.implement(wait);

	if (this.Element && Element.implement && this.Fx){
		Element.implement({

			chains: function(effects){
				Array.from(effects || ['tween', 'morph', 'reveal']).each(function(effect){
					effect = this.get(effect);
					if (!effect) return;
					effect.setOptions({
						link:'chain'
					});
				}, this);
				return this;
			},

			pauseFx: function(duration, effect){
				this.chains(effect).get(effect || 'tween').wait(duration);
				return this;
			}

		});
	}

})();


/*
---

script: Array.Extras.js

name: Array.Extras

description: Extends the Array native object to include useful methods to work with arrays.

license: MIT-style license

authors:
  - Christoph Pojer
  - Sebastian Markbåge

requires:
  - Core/Array
  - MooTools.More

provides: [Array.Extras]

...
*/

(function(nil){

Array.implement({

	min: function(){
		return Math.min.apply(null, this);
	},

	max: function(){
		return Math.max.apply(null, this);
	},

	average: function(){
		return this.length ? this.sum() / this.length : 0;
	},

	sum: function(){
		var result = 0, l = this.length;
		if (l){
			while (l--){
				if (this[l] != null) result += parseFloat(this[l]);
			}
		}
		return result;
	},

	unique: function(){
		return [].combine(this);
	},

	shuffle: function(){
		for (var i = this.length; i && --i;){
			var temp = this[i], r = Math.floor(Math.random() * ( i + 1 ));
			this[i] = this[r];
			this[r] = temp;
		}
		return this;
	},

	reduce: function(fn, value){
		for (var i = 0, l = this.length; i < l; i++){
			if (i in this) value = value === nil ? this[i] : fn.call(null, value, this[i], i, this);
		}
		return value;
	},

	reduceRight: function(fn, value){
		var i = this.length;
		while (i--){
			if (i in this) value = value === nil ? this[i] : fn.call(null, value, this[i], i, this);
		}
		return value;
	},

	pluck: function(prop){
		return this.map(function(item){
			return item[prop];
		});
	}

});

})();


/*
---

script: Object.Extras.js

name: Object.Extras

description: Extra Object generics, like getFromPath which allows a path notation to child elements.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Object
  - MooTools.More

provides: [Object.Extras]

...
*/

(function(){

var defined = function(value){
	return value != null;
};

var hasOwnProperty = Object.prototype.hasOwnProperty;

Object.extend({

	getFromPath: function(source, parts){
		if (typeof parts == 'string') parts = parts.split('.');
		for (var i = 0, l = parts.length; i < l; i++){
			if (hasOwnProperty.call(source, parts[i])) source = source[parts[i]];
			else return null;
		}
		return source;
	},

	cleanValues: function(object, method){
		method = method || defined;
		for (var key in object) if (!method(object[key])){
			delete object[key];
		}
		return object;
	},

	erase: function(object, key){
		if (hasOwnProperty.call(object, key)) delete object[key];
		return object;
	},

	run: function(object){
		var args = Array.slice(arguments, 1);
		for (var key in object) if (object[key].apply){
			object[key].apply(object, args);
		}
		return object;
	}

});

})();


/*
---

script: Locale.js

name: Locale

description: Provides methods for localization.

license: MIT-style license

authors:
  - Aaron Newton
  - Arian Stolwijk

requires:
  - Core/Events
  - Object.Extras
  - MooTools.More

provides: [Locale, Lang]

...
*/

(function(){

var current = null,
	locales = {},
	inherits = {};

var getSet = function(set){
	if (instanceOf(set, Locale.Set)) return set;
	else return locales[set];
};

var Locale = this.Locale = {

	define: function(locale, set, key, value){
		var name;
		if (instanceOf(locale, Locale.Set)){
			name = locale.name;
			if (name) locales[name] = locale;
		} else {
			name = locale;
			if (!locales[name]) locales[name] = new Locale.Set(name);
			locale = locales[name];
		}

		if (set) locale.define(set, key, value);

		/*<1.2compat>*/
		if (set == 'cascade') return Locale.inherit(name, key);
		/*</1.2compat>*/

		if (!current) current = locale;

		return locale;
	},

	use: function(locale){
		locale = getSet(locale);

		if (locale){
			current = locale;

			this.fireEvent('change', locale);

			/*<1.2compat>*/
			this.fireEvent('langChange', locale.name);
			/*</1.2compat>*/
		}

		return this;
	},

	getCurrent: function(){
		return current;
	},

	get: function(key, args){
		return (current) ? current.get(key, args) : '';
	},

	inherit: function(locale, inherits, set){
		locale = getSet(locale);

		if (locale) locale.inherit(inherits, set);
		return this;
	},

	list: function(){
		return Object.keys(locales);
	}

};

Object.append(Locale, new Events);

Locale.Set = new Class({

	sets: {},

	inherits: {
		locales: [],
		sets: {}
	},

	initialize: function(name){
		this.name = name || '';
	},

	define: function(set, key, value){
		var defineData = this.sets[set];
		if (!defineData) defineData = {};

		if (key){
			if (typeOf(key) == 'object') defineData = Object.merge(defineData, key);
			else defineData[key] = value;
		}
		this.sets[set] = defineData;

		return this;
	},

	get: function(key, args, _base){
		var value = Object.getFromPath(this.sets, key);
		if (value != null){
			var type = typeOf(value);
			if (type == 'function') value = value.apply(null, Array.from(args));
			else if (type == 'object') value = Object.clone(value);
			return value;
		}

		// get value of inherited locales
		var index = key.indexOf('.'),
			set = index < 0 ? key : key.substr(0, index),
			names = (this.inherits.sets[set] || []).combine(this.inherits.locales).include('en-US');
		if (!_base) _base = [];

		for (var i = 0, l = names.length; i < l; i++){
			if (_base.contains(names[i])) continue;
			_base.include(names[i]);

			var locale = locales[names[i]];
			if (!locale) continue;

			value = locale.get(key, args, _base);
			if (value != null) return value;
		}

		return '';
	},

	inherit: function(names, set){
		names = Array.from(names);

		if (set && !this.inherits.sets[set]) this.inherits.sets[set] = [];

		var l = names.length;
		while (l--) (set ? this.inherits.sets[set] : this.inherits.locales).unshift(names[l]);

		return this;
	}

});

/*<1.2compat>*/
var lang = MooTools.lang = {};

Object.append(lang, Locale, {
	setLanguage: Locale.use,
	getCurrentLanguage: function(){
		var current = Locale.getCurrent();
		return (current) ? current.name : null;
	},
	set: function(){
		Locale.define.apply(this, arguments);
		return this;
	},
	get: function(set, key, args){
		if (key) set += '.' + key;
		return Locale.get(set, args);
	}
});
/*</1.2compat>*/

})();


/*
---

name: Locale.en-US.Date

description: Date messages for US English.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Locale

provides: [Locale.en-US.Date]

...
*/

Locale.define('en-US', 'Date', {

	months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	months_abbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	days_abbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

	// Culture's date order: MM/DD/YYYY
	dateOrder: ['month', 'date', 'year'],
	shortDate: '%m/%d/%Y',
	shortTime: '%I:%M%p',
	AM: 'AM',
	PM: 'PM',
	firstDayOfWeek: 0,

	// Date.Extras
	ordinal: function(dayOfMonth){
		// 1st, 2nd, 3rd, etc.
		return (dayOfMonth > 3 && dayOfMonth < 21) ? 'th' : ['th', 'st', 'nd', 'rd', 'th'][Math.min(dayOfMonth % 10, 4)];
	},

	lessThanMinuteAgo: 'less than a minute ago',
	minuteAgo: 'about a minute ago',
	minutesAgo: '{delta} minutes ago',
	hourAgo: 'about an hour ago',
	hoursAgo: 'about {delta} hours ago',
	dayAgo: '1 day ago',
	daysAgo: '{delta} days ago',
	weekAgo: '1 week ago',
	weeksAgo: '{delta} weeks ago',
	monthAgo: '1 month ago',
	monthsAgo: '{delta} months ago',
	yearAgo: '1 year ago',
	yearsAgo: '{delta} years ago',

	lessThanMinuteUntil: 'less than a minute from now',
	minuteUntil: 'about a minute from now',
	minutesUntil: '{delta} minutes from now',
	hourUntil: 'about an hour from now',
	hoursUntil: 'about {delta} hours from now',
	dayUntil: '1 day from now',
	daysUntil: '{delta} days from now',
	weekUntil: '1 week from now',
	weeksUntil: '{delta} weeks from now',
	monthUntil: '1 month from now',
	monthsUntil: '{delta} months from now',
	yearUntil: '1 year from now',
	yearsUntil: '{delta} years from now'

});


/*
---

script: Date.js

name: Date

description: Extends the Date native object to include methods useful in managing dates.

license: MIT-style license

authors:
  - Aaron Newton
  - Nicholas Barthelemy - https://svn.nbarthelemy.com/date-js/
  - Harald Kirshner - mail [at] digitarald.de; http://digitarald.de
  - Scott Kyle - scott [at] appden.com; http://appden.com

requires:
  - Core/Array
  - Core/String
  - Core/Number
  - MooTools.More
  - Locale
  - Locale.en-US.Date

provides: [Date]

...
*/

(function(){

var Date = this.Date;

var DateMethods = Date.Methods = {
	ms: 'Milliseconds',
	year: 'FullYear',
	min: 'Minutes',
	mo: 'Month',
	sec: 'Seconds',
	hr: 'Hours'
};

['Date', 'Day', 'FullYear', 'Hours', 'Milliseconds', 'Minutes', 'Month', 'Seconds', 'Time', 'TimezoneOffset',
	'Week', 'Timezone', 'GMTOffset', 'DayOfYear', 'LastMonth', 'LastDayOfMonth', 'UTCDate', 'UTCDay', 'UTCFullYear',
	'AMPM', 'Ordinal', 'UTCHours', 'UTCMilliseconds', 'UTCMinutes', 'UTCMonth', 'UTCSeconds', 'UTCMilliseconds'].each(function(method){
	Date.Methods[method.toLowerCase()] = method;
});

var pad = function(n, digits, string){
	if (digits == 1) return n;
	return n < Math.pow(10, digits - 1) ? (string || '0') + pad(n, digits - 1, string) : n;
};

Date.implement({

	set: function(prop, value){
		prop = prop.toLowerCase();
		var method = DateMethods[prop] && 'set' + DateMethods[prop];
		if (method && this[method]) this[method](value);
		return this;
	}.overloadSetter(),

	get: function(prop){
		prop = prop.toLowerCase();
		var method = DateMethods[prop] && 'get' + DateMethods[prop];
		if (method && this[method]) return this[method]();
		return null;
	}.overloadGetter(),

	clone: function(){
		return new Date(this.get('time'));
	},

	increment: function(interval, times){
		interval = interval || 'day';
		times = times != null ? times : 1;

		switch (interval){
			case 'year':
				return this.increment('month', times * 12);
			case 'month':
				var d = this.get('date');
				this.set('date', 1).set('mo', this.get('mo') + times);
				return this.set('date', d.min(this.get('lastdayofmonth')));
			case 'week':
				return this.increment('day', times * 7);
			case 'day':
				return this.set('date', this.get('date') + times);
		}

		if (!Date.units[interval]) throw new Error(interval + ' is not a supported interval');

		return this.set('time', this.get('time') + times * Date.units[interval]());
	},

	decrement: function(interval, times){
		return this.increment(interval, -1 * (times != null ? times : 1));
	},

	isLeapYear: function(){
		return Date.isLeapYear(this.get('year'));
	},

	clearTime: function(){
		return this.set({hr: 0, min: 0, sec: 0, ms: 0});
	},

	diff: function(date, resolution){
		if (typeOf(date) == 'string') date = Date.parse(date);

		return ((date - this) / Date.units[resolution || 'day'](3, 3)).round(); // non-leap year, 30-day month
	},

	getLastDayOfMonth: function(){
		return Date.daysInMonth(this.get('mo'), this.get('year'));
	},

	getDayOfYear: function(){
		return (Date.UTC(this.get('year'), this.get('mo'), this.get('date') + 1)
			- Date.UTC(this.get('year'), 0, 1)) / Date.units.day();
	},

	setDay: function(day, firstDayOfWeek){
		if (firstDayOfWeek == null){
			firstDayOfWeek = Date.getMsg('firstDayOfWeek');
			if (firstDayOfWeek === '') firstDayOfWeek = 1;
		}

		day = (7 + Date.parseDay(day, true) - firstDayOfWeek) % 7;
		var currentDay = (7 + this.get('day') - firstDayOfWeek) % 7;

		return this.increment('day', day - currentDay);
	},

	getWeek: function(firstDayOfWeek){
		if (firstDayOfWeek == null){
			firstDayOfWeek = Date.getMsg('firstDayOfWeek');
			if (firstDayOfWeek === '') firstDayOfWeek = 1;
		}

		var date = this,
			dayOfWeek = (7 + date.get('day') - firstDayOfWeek) % 7,
			dividend = 0,
			firstDayOfYear;

		if (firstDayOfWeek == 1){
			// ISO-8601, week belongs to year that has the most days of the week (i.e. has the thursday of the week)
			var month = date.get('month'),
				startOfWeek = date.get('date') - dayOfWeek;

			if (month == 11 && startOfWeek > 28) return 1; // Week 1 of next year

			if (month == 0 && startOfWeek < -2){
				// Use a date from last year to determine the week
				date = new Date(date).decrement('day', dayOfWeek);
				dayOfWeek = 0;
			}

			firstDayOfYear = new Date(date.get('year'), 0, 1).get('day') || 7;
			if (firstDayOfYear > 4) dividend = -7; // First week of the year is not week 1
		} else {
			// In other cultures the first week of the year is always week 1 and the last week always 53 or 54.
			// Days in the same week can have a different weeknumber if the week spreads across two years.
			firstDayOfYear = new Date(date.get('year'), 0, 1).get('day');
		}

		dividend += date.get('dayofyear');
		dividend += 6 - dayOfWeek; // Add days so we calculate the current date's week as a full week
		dividend += (7 + firstDayOfYear - firstDayOfWeek) % 7; // Make up for first week of the year not being a full week

		return (dividend / 7);
	},

	getOrdinal: function(day){
		return Date.getMsg('ordinal', day || this.get('date'));
	},

	getTimezone: function(){
		return this.toString()
			.replace(/^.*? ([A-Z]{3}).[0-9]{4}.*$/, '$1')
			.replace(/^.*?\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\)$/, '$1$2$3');
	},

	getGMTOffset: function(){
		var off = this.get('timezoneOffset');
		return ((off > 0) ? '-' : '+') + pad((off.abs() / 60).floor(), 2) + pad(off % 60, 2);
	},

	setAMPM: function(ampm){
		ampm = ampm.toUpperCase();
		var hr = this.get('hr');
		if (hr > 11 && ampm == 'AM') return this.decrement('hour', 12);
		else if (hr < 12 && ampm == 'PM') return this.increment('hour', 12);
		return this;
	},

	getAMPM: function(){
		return (this.get('hr') < 12) ? 'AM' : 'PM';
	},

	parse: function(str){
		this.set('time', Date.parse(str));
		return this;
	},

	isValid: function(date){
		if (!date) date = this;
		return typeOf(date) == 'date' && !isNaN(date.valueOf());
	},

	format: function(format){
		if (!this.isValid()) return 'invalid date';

		if (!format) format = '%x %X';
		if (typeof format == 'string') format = formats[format.toLowerCase()] || format;
		if (typeof format == 'function') return format(this);

		var d = this;
		return format.replace(/%([a-z%])/gi,
			function($0, $1){
				switch ($1){
					case 'a': return Date.getMsg('days_abbr')[d.get('day')];
					case 'A': return Date.getMsg('days')[d.get('day')];
					case 'b': return Date.getMsg('months_abbr')[d.get('month')];
					case 'B': return Date.getMsg('months')[d.get('month')];
					case 'c': return d.format('%a %b %d %H:%M:%S %Y');
					case 'd': return pad(d.get('date'), 2);
					case 'e': return pad(d.get('date'), 2, ' ');
					case 'H': return pad(d.get('hr'), 2);
					case 'I': return pad((d.get('hr') % 12) || 12, 2);
					case 'j': return pad(d.get('dayofyear'), 3);
					case 'k': return pad(d.get('hr'), 2, ' ');
					case 'l': return pad((d.get('hr') % 12) || 12, 2, ' ');
					case 'L': return pad(d.get('ms'), 3);
					case 'm': return pad((d.get('mo') + 1), 2);
					case 'M': return pad(d.get('min'), 2);
					case 'o': return d.get('ordinal');
					case 'p': return Date.getMsg(d.get('ampm'));
					case 's': return Math.round(d / 1000);
					case 'S': return pad(d.get('seconds'), 2);
					case 'T': return d.format('%H:%M:%S');
					case 'U': return pad(d.get('week'), 2);
					case 'w': return d.get('day');
					case 'x': return d.format(Date.getMsg('shortDate'));
					case 'X': return d.format(Date.getMsg('shortTime'));
					case 'y': return d.get('year').toString().substr(2);
					case 'Y': return d.get('year');
					case 'z': return d.get('GMTOffset');
					case 'Z': return d.get('Timezone');
				}
				return $1;
			}
		);
	},

	toISOString: function(){
		return this.format('iso8601');
	}

}).alias({
	toJSON: 'toISOString',
	compare: 'diff',
	strftime: 'format'
});

// The day and month abbreviations are standardized, so we cannot use simply %a and %b because they will get localized
var rfcDayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	rfcMonthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

var formats = {
	db: '%Y-%m-%d %H:%M:%S',
	compact: '%Y%m%dT%H%M%S',
	'short': '%d %b %H:%M',
	'long': '%B %d, %Y %H:%M',
	rfc822: function(date){
		return rfcDayAbbr[date.get('day')] + date.format(', %d ') + rfcMonthAbbr[date.get('month')] + date.format(' %Y %H:%M:%S %Z');
	},
	rfc2822: function(date){
		return rfcDayAbbr[date.get('day')] + date.format(', %d ') + rfcMonthAbbr[date.get('month')] + date.format(' %Y %H:%M:%S %z');
	},
	iso8601: function(date){
		return (
			date.getUTCFullYear() + '-' +
			pad(date.getUTCMonth() + 1, 2) + '-' +
			pad(date.getUTCDate(), 2) + 'T' +
			pad(date.getUTCHours(), 2) + ':' +
			pad(date.getUTCMinutes(), 2) + ':' +
			pad(date.getUTCSeconds(), 2) + '.' +
			pad(date.getUTCMilliseconds(), 3) + 'Z'
		);
	}
};

var parsePatterns = [],
	nativeParse = Date.parse;

var parseWord = function(type, word, num){
	var ret = -1,
		translated = Date.getMsg(type + 's');
	switch (typeOf(word)){
		case 'object':
			ret = translated[word.get(type)];
			break;
		case 'number':
			ret = translated[word];
			if (!ret) throw new Error('Invalid ' + type + ' index: ' + word);
			break;
		case 'string':
			var match = translated.filter(function(name){
				return this.test(name);
			}, new RegExp('^' + word, 'i'));
			if (!match.length) throw new Error('Invalid ' + type + ' string');
			if (match.length > 1) throw new Error('Ambiguous ' + type);
			ret = match[0];
	}

	return (num) ? translated.indexOf(ret) : ret;
};

var startCentury = 1900,
	startYear = 70;

Date.extend({

	getMsg: function(key, args){
		return Locale.get('Date.' + key, args);
	},

	units: {
		ms: Function.from(1),
		second: Function.from(1000),
		minute: Function.from(60000),
		hour: Function.from(3600000),
		day: Function.from(86400000),
		week: Function.from(608400000),
		month: function(month, year){
			var d = new Date;
			return Date.daysInMonth(month != null ? month : d.get('mo'), year != null ? year : d.get('year')) * 86400000;
		},
		year: function(year){
			year = year || new Date().get('year');
			return Date.isLeapYear(year) ? 31622400000 : 31536000000;
		}
	},

	daysInMonth: function(month, year){
		return [31, Date.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	},

	isLeapYear: function(year){
		return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
	},

	parse: function(from){
		var t = typeOf(from);
		if (t == 'number') return new Date(from);
		if (t != 'string') return from;
		from = from.clean();
		if (!from.length) return null;

		var parsed;
		parsePatterns.some(function(pattern){
			var bits = pattern.re.exec(from);
			return (bits) ? (parsed = pattern.handler(bits)) : false;
		});

		if (!(parsed && parsed.isValid())){
			parsed = new Date(nativeParse(from));
			if (!(parsed && parsed.isValid())) parsed = new Date(from.toInt());
		}
		return parsed;
	},

	parseDay: function(day, num){
		return parseWord('day', day, num);
	},

	parseMonth: function(month, num){
		return parseWord('month', month, num);
	},

	parseUTC: function(value){
		var localDate = new Date(value);
		var utcSeconds = Date.UTC(
			localDate.get('year'),
			localDate.get('mo'),
			localDate.get('date'),
			localDate.get('hr'),
			localDate.get('min'),
			localDate.get('sec'),
			localDate.get('ms')
		);
		return new Date(utcSeconds);
	},

	orderIndex: function(unit){
		return Date.getMsg('dateOrder').indexOf(unit) + 1;
	},

	defineFormat: function(name, format){
		formats[name] = format;
		return this;
	},

	//<1.2compat>
	parsePatterns: parsePatterns,
	//</1.2compat>

	defineParser: function(pattern){
		parsePatterns.push((pattern.re && pattern.handler) ? pattern : build(pattern));
		return this;
	},

	defineParsers: function(){
		Array.flatten(arguments).each(Date.defineParser);
		return this;
	},

	define2DigitYearStart: function(year){
		startYear = year % 100;
		startCentury = year - startYear;
		return this;
	}

}).extend({
	defineFormats: Date.defineFormat.overloadSetter()
});

var regexOf = function(type){
	return new RegExp('(?:' + Date.getMsg(type).map(function(name){
		return name.substr(0, 3);
	}).join('|') + ')[a-z]*');
};

var replacers = function(key){
	switch (key){
		case 'T':
			return '%H:%M:%S';
		case 'x': // iso8601 covers yyyy-mm-dd, so just check if month is first
			return ((Date.orderIndex('month') == 1) ? '%m[-./]%d' : '%d[-./]%m') + '([-./]%y)?';
		case 'X':
			return '%H([.:]%M)?([.:]%S([.:]%s)?)? ?%p? ?%z?';
	}
	return null;
};

var keys = {
	d: /[0-2]?[0-9]|3[01]/,
	H: /[01]?[0-9]|2[0-3]/,
	I: /0?[1-9]|1[0-2]/,
	M: /[0-5]?\d/,
	s: /\d+/,
	o: /[a-z]*/,
	p: /[ap]\.?m\.?/,
	y: /\d{2}|\d{4}/,
	Y: /\d{4}/,
	z: /Z|[+-]\d{2}(?::?\d{2})?/
};

keys.m = keys.I;
keys.S = keys.M;

var currentLanguage;

var recompile = function(language){
	currentLanguage = language;

	keys.a = keys.A = regexOf('days');
	keys.b = keys.B = regexOf('months');

	parsePatterns.each(function(pattern, i){
		if (pattern.format) parsePatterns[i] = build(pattern.format);
	});
};

var build = function(format){
	if (!currentLanguage) return {format: format};

	var parsed = [];
	var re = (format.source || format) // allow format to be regex
	 .replace(/%([a-z])/gi,
		function($0, $1){
			return replacers($1) || $0;
		}
	).replace(/\((?!\?)/g, '(?:') // make all groups non-capturing
	 .replace(/ (?!\?|\*)/g, ',? ') // be forgiving with spaces and commas
	 .replace(/%([a-z%])/gi,
		function($0, $1){
			var p = keys[$1];
			if (!p) return $1;
			parsed.push($1);
			return '(' + p.source + ')';
		}
	).replace(/\[a-z\]/gi, '[a-z\\u00c0-\\uffff;\&]'); // handle unicode words

	return {
		format: format,
		re: new RegExp('^' + re + '$', 'i'),
		handler: function(bits){
			bits = bits.slice(1).associate(parsed);
			var date = new Date().clearTime(),
				year = bits.y || bits.Y;

			if (year != null) handle.call(date, 'y', year); // need to start in the right year
			if ('d' in bits) handle.call(date, 'd', 1);
			if ('m' in bits || bits.b || bits.B) handle.call(date, 'm', 1);

			for (var key in bits) handle.call(date, key, bits[key]);
			return date;
		}
	};
};

var handle = function(key, value){
	if (!value) return this;

	switch (key){
		case 'a': case 'A': return this.set('day', Date.parseDay(value, true));
		case 'b': case 'B': return this.set('mo', Date.parseMonth(value, true));
		case 'd': return this.set('date', value);
		case 'H': case 'I': return this.set('hr', value);
		case 'm': return this.set('mo', value - 1);
		case 'M': return this.set('min', value);
		case 'p': return this.set('ampm', value.replace(/\./g, ''));
		case 'S': return this.set('sec', value);
		case 's': return this.set('ms', ('0.' + value) * 1000);
		case 'w': return this.set('day', value);
		case 'Y': return this.set('year', value);
		case 'y':
			value = +value;
			if (value < 100) value += startCentury + (value < startYear ? 100 : 0);
			return this.set('year', value);
		case 'z':
			if (value == 'Z') value = '+00';
			var offset = value.match(/([+-])(\d{2}):?(\d{2})?/);
			offset = (offset[1] + '1') * (offset[2] * 60 + (+offset[3] || 0)) + this.getTimezoneOffset();
			return this.set('time', this - offset * 60000);
	}

	return this;
};

Date.defineParsers(
	'%Y([-./]%m([-./]%d((T| )%X)?)?)?', // "1999-12-31", "1999-12-31 11:59pm", "1999-12-31 23:59:59", ISO8601
	'%Y%m%d(T%H(%M%S?)?)?', // "19991231", "19991231T1159", compact
	'%x( %X)?', // "12/31", "12.31.99", "12-31-1999", "12/31/2008 11:59 PM"
	'%d%o( %b( %Y)?)?( %X)?', // "31st", "31st December", "31 Dec 1999", "31 Dec 1999 11:59pm"
	'%b( %d%o)?( %Y)?( %X)?', // Same as above with month and day switched
	'%Y %b( %d%o( %X)?)?', // Same as above with year coming first
	'%o %b %d %X %z %Y', // "Thu Oct 22 08:11:23 +0000 2009"
	'%T', // %H:%M:%S
	'%H:%M( ?%p)?' // "11:05pm", "11:05 am" and "11:05"
);

Locale.addEvent('change', function(language){
	if (Locale.get('Date')) recompile(language);
}).fireEvent('change', Locale.getCurrent());

})();


/*
---

script: Date.Extras.js

name: Date.Extras

description: Extends the Date native object to include extra methods (on top of those in Date.js).

license: MIT-style license

authors:
  - Aaron Newton
  - Scott Kyle

requires:
  - Date

provides: [Date.Extras]

...
*/

Date.implement({

	timeDiffInWords: function(to){
		return Date.distanceOfTimeInWords(this, to || new Date);
	},

	timeDiff: function(to, separator){
		if (to == null) to = new Date;
		var delta = ((to - this) / 1000).floor().abs();

		var vals = [],
			durations = [60, 60, 24, 365, 0],
			names = ['s', 'm', 'h', 'd', 'y'],
			value, duration;

		for (var item = 0; item < durations.length; item++){
			if (item && !delta) break;
			value = delta;
			if ((duration = durations[item])){
				value = (delta % duration);
				delta = (delta / duration).floor();
			}
			vals.unshift(value + (names[item] || ''));
		}

		return vals.join(separator || ':');
	}

}).extend({

	distanceOfTimeInWords: function(from, to){
		return Date.getTimePhrase(((to - from) / 1000).toInt());
	},

	getTimePhrase: function(delta){
		var suffix = (delta < 0) ? 'Until' : 'Ago';
		if (delta < 0) delta *= -1;

		var units = {
			minute: 60,
			hour: 60,
			day: 24,
			week: 7,
			month: 52 / 12,
			year: 12,
			eon: Infinity
		};

		var msg = 'lessThanMinute';

		for (var unit in units){
			var interval = units[unit];
			if (delta < 1.5 * interval){
				if (delta > 0.75 * interval) msg = unit;
				break;
			}
			delta /= interval;
			msg = unit + 's';
		}

		delta = delta.round();
		return Date.getMsg(msg + suffix, delta).substitute({delta: delta});
	}

}).defineParsers(

	{
		// "today", "tomorrow", "yesterday"
		re: /^(?:tod|tom|yes)/i,
		handler: function(bits){
			var d = new Date().clearTime();
			switch (bits[0]){
				case 'tom': return d.increment();
				case 'yes': return d.decrement();
				default: return d;
			}
		}
	},

	{
		// "next Wednesday", "last Thursday"
		re: /^(next|last) ([a-z]+)$/i,
		handler: function(bits){
			var d = new Date().clearTime();
			var day = d.getDay();
			var newDay = Date.parseDay(bits[2], true);
			var addDays = newDay - day;
			if (newDay <= day) addDays += 7;
			if (bits[1] == 'last') addDays -= 7;
			return d.set('date', d.getDate() + addDays);
		}
	}

).alias('timeAgoInWords', 'timeDiffInWords');


/*
---

name: Locale.en-US.Number

description: Number messages for US English.

license: MIT-style license

authors:
  - Arian Stolwijk

requires:
  - Locale

provides: [Locale.en-US.Number]

...
*/

Locale.define('en-US', 'Number', {

	decimal: '.',
	group: ',',

/* 	Commented properties are the defaults for Number.format
	decimals: 0,
	precision: 0,
	scientific: null,

	prefix: null,
	suffic: null,

	// Negative/Currency/percentage will mixin Number
	negative: {
		prefix: '-'
	},*/

	currency: {
//		decimals: 2,
		prefix: '$ '
	}/*,

	percentage: {
		decimals: 2,
		suffix: '%'
	}*/

});




/*
---
name: Number.Format
description: Extends the Number Type object to include a number formatting method.
license: MIT-style license
authors: [Arian Stolwijk]
requires: [Core/Number, Locale.en-US.Number]
# Number.Extras is for compatibility
provides: [Number.Format, Number.Extras]
...
*/


Number.implement({

	format: function(options){
		// Thanks dojo and YUI for some inspiration
		var value = this;
		options = options ? Object.clone(options) : {};
		var getOption = function(key){
			if (options[key] != null) return options[key];
			return Locale.get('Number.' + key);
		};

		var negative = value < 0,
			decimal = getOption('decimal'),
			precision = getOption('precision'),
			group = getOption('group'),
			decimals = getOption('decimals');

		if (negative){
			var negativeLocale = getOption('negative') || {};
			if (negativeLocale.prefix == null && negativeLocale.suffix == null) negativeLocale.prefix = '-';
			['prefix', 'suffix'].each(function(key){
				if (negativeLocale[key]) options[key] = getOption(key) + negativeLocale[key];
			});

			value = -value;
		}

		var prefix = getOption('prefix'),
			suffix = getOption('suffix');

		if (decimals !== '' && decimals >= 0 && decimals <= 20) value = value.toFixed(decimals);
		if (precision >= 1 && precision <= 21) value = (+value).toPrecision(precision);

		value += '';
		var index;
		if (getOption('scientific') === false && value.indexOf('e') > -1){
			var match = value.split('e'),
				zeros = +match[1];
			value = match[0].replace('.', '');

			if (zeros < 0){
				zeros = -zeros - 1;
				index = match[0].indexOf('.');
				if (index > -1) zeros -= index - 1;
				while (zeros--) value = '0' + value;
				value = '0.' + value;
			} else {
				index = match[0].lastIndexOf('.');
				if (index > -1) zeros -= match[0].length - index - 1;
				while (zeros--) value += '0';
			}
		}

		if (decimal != '.') value = value.replace('.', decimal);

		if (group){
			index = value.lastIndexOf(decimal);
			index = (index > -1) ? index : value.length;
			var newOutput = value.substring(index),
				i = index;

			while (i--){
				if ((index - i - 1) % 3 == 0 && i != (index - 1)) newOutput = group + newOutput;
				newOutput = value.charAt(i) + newOutput;
			}

			value = newOutput;
		}

		if (prefix) value = prefix + value;
		if (suffix) value += suffix;

		return value;
	},

	formatCurrency: function(decimals){
		var locale = Locale.get('Number.currency') || {};
		if (locale.scientific == null) locale.scientific = false;
		locale.decimals = decimals != null ? decimals
			: (locale.decimals == null ? 2 : locale.decimals);

		return this.format(locale);
	},

	formatPercentage: function(decimals){
		var locale = Locale.get('Number.percentage') || {};
		if (locale.suffix == null) locale.suffix = '%';
		locale.decimals = decimals != null ? decimals
			: (locale.decimals == null ? 2 : locale.decimals);

		return this.format(locale);
	}

});


/*
---

script: String.Extras.js

name: String.Extras

description: Extends the String native object to include methods useful in managing various kinds of strings (query strings, urls, html, etc).

license: MIT-style license

authors:
  - Aaron Newton
  - Guillermo Rauch
  - Christopher Pitt

requires:
  - Core/String
  - Core/Array
  - MooTools.More

provides: [String.Extras]

...
*/

(function(){

var special = {
	'a': /[àáâãäåăą]/g,
	'A': /[ÀÁÂÃÄÅĂĄ]/g,
	'c': /[ćčç]/g,
	'C': /[ĆČÇ]/g,
	'd': /[ďđ]/g,
	'D': /[ĎÐ]/g,
	'e': /[èéêëěę]/g,
	'E': /[ÈÉÊËĚĘ]/g,
	'g': /[ğ]/g,
	'G': /[Ğ]/g,
	'i': /[ìíîï]/g,
	'I': /[ÌÍÎÏ]/g,
	'l': /[ĺľł]/g,
	'L': /[ĹĽŁ]/g,
	'n': /[ñňń]/g,
	'N': /[ÑŇŃ]/g,
	'o': /[òóôõöøő]/g,
	'O': /[ÒÓÔÕÖØ]/g,
	'r': /[řŕ]/g,
	'R': /[ŘŔ]/g,
	's': /[ššş]/g,
	'S': /[ŠŞŚ]/g,
	't': /[ťţ]/g,
	'T': /[ŤŢ]/g,
	'u': /[ùúûůüµ]/g,
	'U': /[ÙÚÛŮÜ]/g,
	'y': /[ÿý]/g,
	'Y': /[ŸÝ]/g,
	'z': /[žźż]/g,
	'Z': /[ŽŹŻ]/g,
	'th': /[þ]/g,
	'TH': /[Þ]/g,
	'dh': /[ð]/g,
	'DH': /[Ð]/g,
	'ss': /[ß]/g,
	'oe': /[œ]/g,
	'OE': /[Œ]/g,
	'ae': /[æ]/g,
	'AE': /[Æ]/g
},

tidy = {
	' ': /[\xa0\u2002\u2003\u2009]/g,
	'*': /[\xb7]/g,
	'\'': /[\u2018\u2019]/g,
	'"': /[\u201c\u201d]/g,
	'...': /[\u2026]/g,
	'-': /[\u2013]/g,
//	'--': /[\u2014]/g,
	'&raquo;': /[\uFFFD]/g
},

conversions = {
	ms: 1,
	s: 1000,
	m: 6e4,
	h: 36e5
},

findUnits = /(\d*.?\d+)([msh]+)/;

var walk = function(string, replacements){
	var result = string, key;
	for (key in replacements) result = result.replace(replacements[key], key);
	return result;
};

var getRegexForTag = function(tag, contents){
	tag = tag || '';
	var regstr = contents ? "<" + tag + "(?!\\w)[^>]*>([\\s\\S]*?)<\/" + tag + "(?!\\w)>" : "<\/?" + tag + "([^>]+)?>",
		reg = new RegExp(regstr, "gi");
	return reg;
};

String.implement({

	standardize: function(){
		return walk(this, special);
	},

	repeat: function(times){
		return new Array(times + 1).join(this);
	},

	pad: function(length, str, direction){
		if (this.length >= length) return this;

		var pad = (str == null ? ' ' : '' + str)
			.repeat(length - this.length)
			.substr(0, length - this.length);

		if (!direction || direction == 'right') return this + pad;
		if (direction == 'left') return pad + this;

		return pad.substr(0, (pad.length / 2).floor()) + this + pad.substr(0, (pad.length / 2).ceil());
	},

	getTags: function(tag, contents){
		return this.match(getRegexForTag(tag, contents)) || [];
	},

	stripTags: function(tag, contents){
		return this.replace(getRegexForTag(tag, contents), '');
	},

	tidy: function(){
		return walk(this, tidy);
	},

	truncate: function(max, trail, atChar){
		var string = this;
		if (trail == null && arguments.length == 1) trail = '…';
		if (string.length > max){
			string = string.substring(0, max);
			if (atChar){
				var index = string.lastIndexOf(atChar);
				if (index != -1) string = string.substr(0, index);
			}
			if (trail) string += trail;
		}
		return string;
	},

	ms: function(){
	  // "Borrowed" from https://gist.github.com/1503944
		var units = findUnits.exec(this);
		if (units == null) return Number(this);
		return Number(units[1]) * conversions[units[2]];
	}

});

})();


/*
---

script: String.QueryString.js

name: String.QueryString

description: Methods for dealing with URI query strings.

license: MIT-style license

authors:
  - Sebastian Markbåge
  - Aaron Newton
  - Lennart Pilon
  - Valerio Proietti

requires:
  - Core/Array
  - Core/String
  - MooTools.More

provides: [String.QueryString]

...
*/

String.implement({

	parseQueryString: function(decodeKeys, decodeValues){
		if (decodeKeys == null) decodeKeys = true;
		if (decodeValues == null) decodeValues = true;

		var vars = this.split(/[&;]/),
			object = {};
		if (!vars.length) return object;

		vars.each(function(val){
			var index = val.indexOf('=') + 1,
				value = index ? val.substr(index) : '',
				keys = index ? val.substr(0, index - 1).match(/([^\]\[]+|(\B)(?=\]))/g) : [val],
				obj = object;
			if (!keys) return;
			if (decodeValues) value = decodeURIComponent(value);
			keys.each(function(key, i){
				if (decodeKeys) key = decodeURIComponent(key);
				var current = obj[key];

				if (i < keys.length - 1) obj = obj[key] = current || {};
				else if (typeOf(current) == 'array') current.push(value);
				else obj[key] = current != null ? [current, value] : value;
			});
		});

		return object;
	},

	cleanQueryString: function(method){
		return this.split('&').filter(function(val){
			var index = val.indexOf('='),
				key = index < 0 ? '' : val.substr(0, index),
				value = val.substr(index + 1);

			return method ? method.call(null, key, value) : (value || value === 0);
		}).join('&');
	}

});


/*
---

script: URI.js

name: URI

description: Provides methods useful in managing the window location and uris.

license: MIT-style license

authors:
  - Sebastian Markbåge
  - Aaron Newton

requires:
  - Core/Object
  - Core/Class
  - Core/Class.Extras
  - Core/Element
  - String.QueryString

provides: [URI]

...
*/

(function(){

var toString = function(){
	return this.get('value');
};

var URI = this.URI = new Class({

	Implements: Options,

	options: {
		/*base: false*/
	},

	regex: /^(?:(\w+):)?(?:\/\/(?:(?:([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?)?(\.\.?$|(?:[^?#\/]*\/)*)([^?#]*)(?:\?([^#]*))?(?:#(.*))?/,
	parts: ['scheme', 'user', 'password', 'host', 'port', 'directory', 'file', 'query', 'fragment'],
	schemes: {http: 80, https: 443, ftp: 21, rtsp: 554, mms: 1755, file: 0},

	initialize: function(uri, options){
		this.setOptions(options);
		var base = this.options.base || URI.base;
		if (!uri) uri = base;

		if (uri && uri.parsed) this.parsed = Object.clone(uri.parsed);
		else this.set('value', uri.href || uri.toString(), base ? new URI(base) : false);
	},

	parse: function(value, base){
		var bits = value.match(this.regex);
		if (!bits) return false;
		bits.shift();
		return this.merge(bits.associate(this.parts), base);
	},

	merge: function(bits, base){
		if ((!bits || !bits.scheme) && (!base || !base.scheme)) return false;
		if (base){
			this.parts.every(function(part){
				if (bits[part]) return false;
				bits[part] = base[part] || '';
				return true;
			});
		}
		bits.port = bits.port || this.schemes[bits.scheme.toLowerCase()];
		bits.directory = bits.directory ? this.parseDirectory(bits.directory, base ? base.directory : '') : '/';
		return bits;
	},

	parseDirectory: function(directory, baseDirectory){
		directory = (directory.substr(0, 1) == '/' ? '' : (baseDirectory || '/')) + directory;
		if (!directory.test(URI.regs.directoryDot)) return directory;
		var result = [];
		directory.replace(URI.regs.endSlash, '').split('/').each(function(dir){
			if (dir == '..' && result.length > 0) result.pop();
			else if (dir != '.') result.push(dir);
		});
		return result.join('/') + '/';
	},

	combine: function(bits){
		return bits.value || bits.scheme + '://' +
			(bits.user ? bits.user + (bits.password ? ':' + bits.password : '') + '@' : '') +
			(bits.host || '') + (bits.port && bits.port != this.schemes[bits.scheme] ? ':' + bits.port : '') +
			(bits.directory || '/') + (bits.file || '') +
			(bits.query ? '?' + bits.query : '') +
			(bits.fragment ? '#' + bits.fragment : '');
	},

	set: function(part, value, base){
		if (part == 'value'){
			var scheme = value.match(URI.regs.scheme);
			if (scheme) scheme = scheme[1];
			if (scheme && this.schemes[scheme.toLowerCase()] == null) this.parsed = { scheme: scheme, value: value };
			else this.parsed = this.parse(value, (base || this).parsed) || (scheme ? { scheme: scheme, value: value } : { value: value });
		} else if (part == 'data'){
			this.setData(value);
		} else {
			this.parsed[part] = value;
		}
		return this;
	},

	get: function(part, base){
		switch (part){
			case 'value': return this.combine(this.parsed, base ? base.parsed : false);
			case 'data' : return this.getData();
		}
		return this.parsed[part] || '';
	},

	go: function(){
		document.location.href = this.toString();
	},

	toURI: function(){
		return this;
	},

	getData: function(key, part){
		var qs = this.get(part || 'query');
		if (!(qs || qs === 0)) return key ? null : {};
		var obj = qs.parseQueryString();
		return key ? obj[key] : obj;
	},

	setData: function(values, merge, part){
		if (typeof values == 'string'){
			var data = this.getData();
			data[arguments[0]] = arguments[1];
			values = data;
		} else if (merge){
			values = Object.merge(this.getData(null, part), values);
		}
		return this.set(part || 'query', Object.toQueryString(values));
	},

	clearData: function(part){
		return this.set(part || 'query', '');
	},

	toString: toString,
	valueOf: toString

});

URI.regs = {
	endSlash: /\/$/,
	scheme: /^(\w+):/,
	directoryDot: /\.\/|\.$/
};

URI.base = new URI(Array.from(document.getElements('base[href]', true)).getLast(), {base: document.location});

String.implement({

	toURI: function(options){
		return new URI(this, options);
	}

});

})();


/*
---

script: URI.Relative.js

name: URI.Relative

description: Extends the URI class to add methods for computing relative and absolute urls.

license: MIT-style license

authors:
  - Sebastian Markbåge


requires:
  - Class.refactor
  - URI

provides: [URI.Relative]

...
*/

URI = Class.refactor(URI, {

	combine: function(bits, base){
		if (!base || bits.scheme != base.scheme || bits.host != base.host || bits.port != base.port)
			return this.previous.apply(this, arguments);
		var end = bits.file + (bits.query ? '?' + bits.query : '') + (bits.fragment ? '#' + bits.fragment : '');

		if (!base.directory) return (bits.directory || (bits.file ? '' : './')) + end;

		var baseDir = base.directory.split('/'),
			relDir = bits.directory.split('/'),
			path = '',
			offset;

		var i = 0;
		for (offset = 0; offset < baseDir.length && offset < relDir.length && baseDir[offset] == relDir[offset]; offset++);
		for (i = 0; i < baseDir.length - offset - 1; i++) path += '../';
		for (i = offset; i < relDir.length - 1; i++) path += relDir[i] + '/';

		return (path || (bits.file ? '' : './')) + end;
	},

	toAbsolute: function(base){
		base = new URI(base);
		if (base) base.set('directory', '').set('file', '');
		return this.toRelative(base);
	},

	toRelative: function(base){
		return this.get('value', new URI(base));
	}

});


/*
---

name: Element.Event.Pseudos

description: Adds the functionality to add pseudo events for Elements

license: MIT-style license

authors:
  - Arian Stolwijk

requires: [Core/Element.Event, Core/Element.Delegation, Events.Pseudos]

provides: [Element.Event.Pseudos, Element.Delegation.Pseudo]

...
*/

(function(){

var pseudos = {relay: false},
	copyFromEvents = ['once', 'throttle', 'pause'],
	count = copyFromEvents.length;

while (count--) pseudos[copyFromEvents[count]] = Events.lookupPseudo(copyFromEvents[count]);

DOMEvent.definePseudo = function(key, listener){
	pseudos[key] = listener;
	return this;
};

var proto = Element.prototype;
[Element, Window, Document].invoke('implement', Events.Pseudos(pseudos, proto.addEvent, proto.removeEvent));

})();


/*
---

script: Element.Measure.js

name: Element.Measure

description: Extends the Element native object to include methods useful in measuring dimensions.

credits: "Element.measure / .expose methods by Daniel Steigerwald License: MIT-style license. Copyright: Copyright (c) 2008 Daniel Steigerwald, daniel.steigerwald.cz"

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Element.Style
  - Core/Element.Dimensions
  - MooTools.More

provides: [Element.Measure]

...
*/

(function(){

var getStylesList = function(styles, planes){
	var list = [];
	Object.each(planes, function(directions){
		Object.each(directions, function(edge){
			styles.each(function(style){
				list.push(style + '-' + edge + (style == 'border' ? '-width' : ''));
			});
		});
	});
	return list;
};

var calculateEdgeSize = function(edge, styles){
	var total = 0;
	Object.each(styles, function(value, style){
		if (style.test(edge)) total = total + value.toInt();
	});
	return total;
};

var isVisible = function(el){
	return !!(!el || el.offsetHeight || el.offsetWidth);
};


Element.implement({

	measure: function(fn){
		if (isVisible(this)) return fn.call(this);
		var parent = this.getParent(),
			toMeasure = [];
		while (!isVisible(parent) && parent != document.body){
			toMeasure.push(parent.expose());
			parent = parent.getParent();
		}
		var restore = this.expose(),
			result = fn.call(this);
		restore();
		toMeasure.each(function(restore){
			restore();
		});
		return result;
	},

	expose: function(){
		if (this.getStyle('display') != 'none') return function(){};
		var before = this.style.cssText;
		this.setStyles({
			display: 'block',
			position: 'absolute',
			visibility: 'hidden'
		});
		return function(){
			this.style.cssText = before;
		}.bind(this);
	},

	getDimensions: function(options){
		options = Object.merge({computeSize: false}, options);
		var dim = {x: 0, y: 0};

		var getSize = function(el, options){
			return (options.computeSize) ? el.getComputedSize(options) : el.getSize();
		};

		var parent = this.getParent('body');

		if (parent && this.getStyle('display') == 'none'){
			dim = this.measure(function(){
				return getSize(this, options);
			});
		} else if (parent){
			try { //safari sometimes crashes here, so catch it
				dim = getSize(this, options);
			}catch(e){}
		}

		return Object.append(dim, (dim.x || dim.x === 0) ? {
				width: dim.x,
				height: dim.y
			} : {
				x: dim.width,
				y: dim.height
			}
		);
	},

	getComputedSize: function(options){
		//<1.2compat>
		//legacy support for my stupid spelling error
		if (options && options.plains) options.planes = options.plains;
		//</1.2compat>

		options = Object.merge({
			styles: ['padding','border'],
			planes: {
				height: ['top','bottom'],
				width: ['left','right']
			},
			mode: 'both'
		}, options);

		var styles = {},
			size = {width: 0, height: 0},
			dimensions;

		if (options.mode == 'vertical'){
			delete size.width;
			delete options.planes.width;
		} else if (options.mode == 'horizontal'){
			delete size.height;
			delete options.planes.height;
		}

		getStylesList(options.styles, options.planes).each(function(style){
			styles[style] = this.getStyle(style).toInt();
		}, this);

		Object.each(options.planes, function(edges, plane){

			var capitalized = plane.capitalize(),
				style = this.getStyle(plane);

			if (style == 'auto' && !dimensions) dimensions = this.getDimensions();

			style = styles[plane] = (style == 'auto') ? dimensions[plane] : style.toInt();
			size['total' + capitalized] = style;

			edges.each(function(edge){
				var edgesize = calculateEdgeSize(edge, styles);
				size['computed' + edge.capitalize()] = edgesize;
				size['total' + capitalized] += edgesize;
			});

		}, this);

		return Object.append(size, styles);
	}

});

})();


/*
---

script: Element.Position.js

name: Element.Position

description: Extends the Element native object to include methods useful positioning elements relative to others.

license: MIT-style license

authors:
  - Aaron Newton
  - Jacob Thornton

requires:
  - Core/Options
  - Core/Element.Dimensions
  - Element.Measure

provides: [Element.Position]

...
*/

(function(original){

var local = Element.Position = {

	options: {/*
		edge: false,
		returnPos: false,
		minimum: {x: 0, y: 0},
		maximum: {x: 0, y: 0},
		relFixedPosition: false,
		ignoreMargins: false,
		ignoreScroll: false,
		allowNegative: false,*/
		relativeTo: document.body,
		position: {
			x: 'center', //left, center, right
			y: 'center' //top, center, bottom
		},
		offset: {x: 0, y: 0}
	},

	getOptions: function(element, options){
		options = Object.merge({}, local.options, options);
		local.setPositionOption(options);
		local.setEdgeOption(options);
		local.setOffsetOption(element, options);
		local.setDimensionsOption(element, options);
		return options;
	},

	setPositionOption: function(options){
		options.position = local.getCoordinateFromValue(options.position);
	},

	setEdgeOption: function(options){
		var edgeOption = local.getCoordinateFromValue(options.edge);
		options.edge = edgeOption ? edgeOption :
			(options.position.x == 'center' && options.position.y == 'center') ? {x: 'center', y: 'center'} :
			{x: 'left', y: 'top'};
	},

	setOffsetOption: function(element, options){
		var parentOffset = {x: 0, y: 0};
		var parentScroll = {x: 0, y: 0};
		var offsetParent = element.measure(function(){
			return document.id(this.getOffsetParent());
		});

		if (!offsetParent || offsetParent == element.getDocument().body) return;

		parentScroll = offsetParent.getScroll();
		parentOffset = offsetParent.measure(function(){
			var position = this.getPosition();
			if (this.getStyle('position') == 'fixed'){
				var scroll = window.getScroll();
				position.x += scroll.x;
				position.y += scroll.y;
			}
			return position;
		});

		options.offset = {
			parentPositioned: offsetParent != document.id(options.relativeTo),
			x: options.offset.x - parentOffset.x + parentScroll.x,
			y: options.offset.y - parentOffset.y + parentScroll.y
		};
	},

	setDimensionsOption: function(element, options){
		options.dimensions = element.getDimensions({
			computeSize: true,
			styles: ['padding', 'border', 'margin']
		});
	},

	getPosition: function(element, options){
		var position = {};
		options = local.getOptions(element, options);
		var relativeTo = document.id(options.relativeTo) || document.body;

		local.setPositionCoordinates(options, position, relativeTo);
		if (options.edge) local.toEdge(position, options);

		var offset = options.offset;
		position.left = ((position.x >= 0 || offset.parentPositioned || options.allowNegative) ? position.x : 0).toInt();
		position.top = ((position.y >= 0 || offset.parentPositioned || options.allowNegative) ? position.y : 0).toInt();

		local.toMinMax(position, options);

		if (options.relFixedPosition || relativeTo.getStyle('position') == 'fixed') local.toRelFixedPosition(relativeTo, position);
		if (options.ignoreScroll) local.toIgnoreScroll(relativeTo, position);
		if (options.ignoreMargins) local.toIgnoreMargins(position, options);

		position.left = Math.ceil(position.left);
		position.top = Math.ceil(position.top);
		delete position.x;
		delete position.y;

		return position;
	},

	setPositionCoordinates: function(options, position, relativeTo){
		var offsetY = options.offset.y,
			offsetX = options.offset.x,
			calc = (relativeTo == document.body) ? window.getScroll() : relativeTo.getPosition(),
			top = calc.y,
			left = calc.x,
			winSize = window.getSize();

		switch(options.position.x){
			case 'left': position.x = left + offsetX; break;
			case 'right': position.x = left + offsetX + relativeTo.offsetWidth; break;
			default: position.x = left + ((relativeTo == document.body ? winSize.x : relativeTo.offsetWidth) / 2) + offsetX; break;
		}

		switch(options.position.y){
			case 'top': position.y = top + offsetY; break;
			case 'bottom': position.y = top + offsetY + relativeTo.offsetHeight; break;
			default: position.y = top + ((relativeTo == document.body ? winSize.y : relativeTo.offsetHeight) / 2) + offsetY; break;
		}
	},

	toMinMax: function(position, options){
		var xy = {left: 'x', top: 'y'}, value;
		['minimum', 'maximum'].each(function(minmax){
			['left', 'top'].each(function(lr){
				value = options[minmax] ? options[minmax][xy[lr]] : null;
				if (value != null && ((minmax == 'minimum') ? position[lr] < value : position[lr] > value)) position[lr] = value;
			});
		});
	},

	toRelFixedPosition: function(relativeTo, position){
		var winScroll = window.getScroll();
		position.top += winScroll.y;
		position.left += winScroll.x;
	},

	toIgnoreScroll: function(relativeTo, position){
		var relScroll = relativeTo.getScroll();
		position.top -= relScroll.y;
		position.left -= relScroll.x;
	},

	toIgnoreMargins: function(position, options){
		position.left += options.edge.x == 'right'
			? options.dimensions['margin-right']
			: (options.edge.x != 'center'
				? -options.dimensions['margin-left']
				: -options.dimensions['margin-left'] + ((options.dimensions['margin-right'] + options.dimensions['margin-left']) / 2));

		position.top += options.edge.y == 'bottom'
			? options.dimensions['margin-bottom']
			: (options.edge.y != 'center'
				? -options.dimensions['margin-top']
				: -options.dimensions['margin-top'] + ((options.dimensions['margin-bottom'] + options.dimensions['margin-top']) / 2));
	},

	toEdge: function(position, options){
		var edgeOffset = {},
			dimensions = options.dimensions,
			edge = options.edge;

		switch(edge.x){
			case 'left': edgeOffset.x = 0; break;
			case 'right': edgeOffset.x = -dimensions.x - dimensions.computedRight - dimensions.computedLeft; break;
			// center
			default: edgeOffset.x = -(Math.round(dimensions.totalWidth / 2)); break;
		}

		switch(edge.y){
			case 'top': edgeOffset.y = 0; break;
			case 'bottom': edgeOffset.y = -dimensions.y - dimensions.computedTop - dimensions.computedBottom; break;
			// center
			default: edgeOffset.y = -(Math.round(dimensions.totalHeight / 2)); break;
		}

		position.x += edgeOffset.x;
		position.y += edgeOffset.y;
	},

	getCoordinateFromValue: function(option){
		if (typeOf(option) != 'string') return option;
		option = option.toLowerCase();

		return {
			x: option.test('left') ? 'left'
				: (option.test('right') ? 'right' : 'center'),
			y: option.test(/upper|top/) ? 'top'
				: (option.test('bottom') ? 'bottom' : 'center')
		};
	}

};

Element.implement({

	position: function(options){
		if (options && (options.x != null || options.y != null)){
			return (original ? original.apply(this, arguments) : this);
		}
		var position = this.setStyle('position', 'absolute').calculatePosition(options);
		return (options && options.returnPos) ? position : this.setStyles(position);
	},

	calculatePosition: function(options){
		return local.getPosition(this, options);
	}

});

})(Element.prototype.position);


/*
---

script: Element.Shortcuts.js

name: Element.Shortcuts

description: Extends the Element native object to include some shortcut methods.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Element.Style
  - MooTools.More

provides: [Element.Shortcuts]

...
*/

Element.implement({

	isDisplayed: function(){
		return this.getStyle('display') != 'none';
	},

	isVisible: function(){
		var w = this.offsetWidth,
			h = this.offsetHeight;
		return (w == 0 && h == 0) ? false : (w > 0 && h > 0) ? true : this.style.display != 'none';
	},

	toggle: function(){
		return this[this.isDisplayed() ? 'hide' : 'show']();
	},

	hide: function(){
		var d;
		try {
			//IE fails here if the element is not in the dom
			d = this.getStyle('display');
		} catch(e){}
		if (d == 'none') return this;
		return this.store('element:_originalDisplay', d || '').setStyle('display', 'none');
	},

	show: function(display){
		if (!display && this.isDisplayed()) return this;
		display = display || this.retrieve('element:_originalDisplay') || 'block';
		return this.setStyle('display', (display == 'none') ? 'block' : display);
	},

	swapClass: function(remove, add){
		return this.removeClass(remove).addClass(add);
	}

});

Document.implement({

	clearSelection: function(){
		if (window.getSelection){
			var selection = window.getSelection();
			if (selection && selection.removeAllRanges) selection.removeAllRanges();
		} else if (document.selection && document.selection.empty){
			try {
				//IE fails here if selected element is not in dom
				document.selection.empty();
			} catch(e){}
		}
	}

});


/*
---

script: Fx.Elements.js

name: Fx.Elements

description: Effect to change any number of CSS properties of any number of Elements.

license: MIT-style license

authors:
  - Valerio Proietti

requires:
  - Core/Fx.CSS
  - MooTools.More

provides: [Fx.Elements]

...
*/

Fx.Elements = new Class({

	Extends: Fx.CSS,

	initialize: function(elements, options){
		this.elements = this.subject = $$(elements);
		this.parent(options);
	},

	compute: function(from, to, delta){
		var now = {};

		for (var i in from){
			var iFrom = from[i], iTo = to[i], iNow = now[i] = {};
			for (var p in iFrom) iNow[p] = this.parent(iFrom[p], iTo[p], delta);
		}

		return now;
	},

	set: function(now){
		for (var i in now){
			if (!this.elements[i]) continue;

			var iNow = now[i];
			for (var p in iNow) this.render(this.elements[i], p, iNow[p], this.options.unit);
		}

		return this;
	},

	start: function(obj){
		if (!this.check(obj)) return this;
		var from = {}, to = {};

		for (var i in obj){
			if (!this.elements[i]) continue;

			var iProps = obj[i], iFrom = from[i] = {}, iTo = to[i] = {};

			for (var p in iProps){
				var parsed = this.prepare(this.elements[i], p, iProps[p]);
				iFrom[p] = parsed.from;
				iTo[p] = parsed.to;
			}
		}

		return this.parent(from, to);
	}

});


/*
---

script: Fx.Accordion.js

name: Fx.Accordion

description: An Fx.Elements extension which allows you to easily create accordion type controls.

license: MIT-style license

authors:
  - Valerio Proietti

requires:
  - Core/Element.Event
  - Fx.Elements

provides: [Fx.Accordion]

...
*/

Fx.Accordion = new Class({

	Extends: Fx.Elements,

	options: {/*
		onActive: function(toggler, section){},
		onBackground: function(toggler, section){},*/
		fixedHeight: false,
		fixedWidth: false,
		display: 0,
		show: false,
		height: true,
		width: false,
		opacity: true,
		alwaysHide: false,
		trigger: 'click',
		initialDisplayFx: true,
		resetHeight: true
	},

	initialize: function(){
		var defined = function(obj){
			return obj != null;
		};

		var params = Array.link(arguments, {
			'container': Type.isElement, //deprecated
			'options': Type.isObject,
			'togglers': defined,
			'elements': defined
		});
		this.parent(params.elements, params.options);

		var options = this.options,
			togglers = this.togglers = $$(params.togglers);

		this.previous = -1;
		this.internalChain = new Chain();

		if (options.alwaysHide) this.options.link = 'chain';

		if (options.show || this.options.show === 0){
			options.display = false;
			this.previous = options.show;
		}

		if (options.start){
			options.display = false;
			options.show = false;
		}

		var effects = this.effects = {};

		if (options.opacity) effects.opacity = 'fullOpacity';
		if (options.width) effects.width = options.fixedWidth ? 'fullWidth' : 'offsetWidth';
		if (options.height) effects.height = options.fixedHeight ? 'fullHeight' : 'scrollHeight';

		for (var i = 0, l = togglers.length; i < l; i++) this.addSection(togglers[i], this.elements[i]);

		this.elements.each(function(el, i){
			if (options.show === i){
				this.fireEvent('active', [togglers[i], el]);
			} else {
				for (var fx in effects) el.setStyle(fx, 0);
			}
		}, this);

		if (options.display || options.display === 0 || options.initialDisplayFx === false){
			this.display(options.display, options.initialDisplayFx);
		}

		if (options.fixedHeight !== false) options.resetHeight = false;
		this.addEvent('complete', this.internalChain.callChain.bind(this.internalChain));
	},

	addSection: function(toggler, element){
		toggler = document.id(toggler);
		element = document.id(element);
		this.togglers.include(toggler);
		this.elements.include(element);

		var togglers = this.togglers,
			options = this.options,
			test = togglers.contains(toggler),
			idx = togglers.indexOf(toggler),
			displayer = this.display.pass(idx, this);

		toggler.store('accordion:display', displayer)
			.addEvent(options.trigger, displayer);

		if (options.height) element.setStyles({'padding-top': 0, 'border-top': 'none', 'padding-bottom': 0, 'border-bottom': 'none'});
		if (options.width) element.setStyles({'padding-left': 0, 'border-left': 'none', 'padding-right': 0, 'border-right': 'none'});

		element.fullOpacity = 1;
		if (options.fixedWidth) element.fullWidth = options.fixedWidth;
		if (options.fixedHeight) element.fullHeight = options.fixedHeight;
		element.setStyle('overflow', 'hidden');

		if (!test) for (var fx in this.effects){
			element.setStyle(fx, 0);
		}
		return this;
	},

	removeSection: function(toggler, displayIndex){
		var togglers = this.togglers,
			idx = togglers.indexOf(toggler),
			element = this.elements[idx];

		var remover = function(){
			togglers.erase(toggler);
			this.elements.erase(element);
			this.detach(toggler);
		}.bind(this);

		if (this.now == idx || displayIndex != null){
			this.display(displayIndex != null ? displayIndex : (idx - 1 >= 0 ? idx - 1 : 0)).chain(remover);
		} else {
			remover();
		}
		return this;
	},

	detach: function(toggler){
		var remove = function(toggler){
			toggler.removeEvent(this.options.trigger, toggler.retrieve('accordion:display'));
		}.bind(this);

		if (!toggler) this.togglers.each(remove);
		else remove(toggler);
		return this;
	},

	display: function(index, useFx){
		if (!this.check(index, useFx)) return this;

		var obj = {},
			elements = this.elements,
			options = this.options,
			effects = this.effects;

		if (useFx == null) useFx = true;
		if (typeOf(index) == 'element') index = elements.indexOf(index);
		if (index == this.current && !options.alwaysHide) return this;

		if (options.resetHeight){
			var prev = elements[this.current];
			if (prev && !this.selfHidden){
				for (var fx in effects) prev.setStyle(fx, prev[effects[fx]]);
			}
		}

		if ((this.timer && options.link == 'chain') || (index === this.current && !options.alwaysHide)) return this;

		if (this.current != null) this.previous = this.current;
		this.current = index;
		this.selfHidden = false;

		elements.each(function(el, i){
			obj[i] = {};
			var hide;
			if (i != index){
				hide = true;
			} else if (options.alwaysHide && ((el.offsetHeight > 0 && options.height) || el.offsetWidth > 0 && options.width)){
				hide = true;
				this.selfHidden = true;
			}
			this.fireEvent(hide ? 'background' : 'active', [this.togglers[i], el]);
			for (var fx in effects) obj[i][fx] = hide ? 0 : el[effects[fx]];
			if (!useFx && !hide && options.resetHeight) obj[i].height = 'auto';
		}, this);

		this.internalChain.clearChain();
		this.internalChain.chain(function(){
			if (options.resetHeight && !this.selfHidden){
				var el = elements[index];
				if (el) el.setStyle('height', 'auto');
			}
		}.bind(this));

		return useFx ? this.start(obj) : this.set(obj).internalChain.callChain();
	}

});

/*<1.2compat>*/
/*
	Compatibility with 1.2.0
*/
var Accordion = new Class({

	Extends: Fx.Accordion,

	initialize: function(){
		this.parent.apply(this, arguments);
		var params = Array.link(arguments, {'container': Type.isElement});
		this.container = params.container;
	},

	addSection: function(toggler, element, pos){
		toggler = document.id(toggler);
		element = document.id(element);

		var test = this.togglers.contains(toggler);
		var len = this.togglers.length;
		if (len && (!test || pos)){
			pos = pos != null ? pos : len - 1;
			toggler.inject(this.togglers[pos], 'before');
			element.inject(toggler, 'after');
		} else if (this.container && !test){
			toggler.inject(this.container);
			element.inject(this.container);
		}
		return this.parent.apply(this, arguments);
	}

});
/*</1.2compat>*/


/*
---

script: Fx.Reveal.js

name: Fx.Reveal

description: Defines Fx.Reveal, a class that shows and hides elements with a transition.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Fx.Morph
  - Element.Shortcuts
  - Element.Measure

provides: [Fx.Reveal]

...
*/

(function(){


var hideTheseOf = function(object){
	var hideThese = object.options.hideInputs;
	if (window.OverText){
		var otClasses = [null];
		OverText.each(function(ot){
			otClasses.include('.' + ot.options.labelClass);
		});
		if (otClasses) hideThese += otClasses.join(', ');
	}
	return (hideThese) ? object.element.getElements(hideThese) : null;
};


Fx.Reveal = new Class({

	Extends: Fx.Morph,

	options: {/*
		onShow: function(thisElement){},
		onHide: function(thisElement){},
		onComplete: function(thisElement){},
		heightOverride: null,
		widthOverride: null,*/
		link: 'cancel',
		styles: ['padding', 'border', 'margin'],
		transitionOpacity: 'opacity' in document.documentElement,
		mode: 'vertical',
		display: function(){
			return this.element.get('tag') != 'tr' ? 'block' : 'table-row';
		},
		opacity: 1,
		hideInputs: !('opacity' in document.documentElement) ? 'select, input, textarea, object, embed' : null
	},

	dissolve: function(){
		if (!this.hiding && !this.showing){
			if (this.element.getStyle('display') != 'none'){
				this.hiding = true;
				this.showing = false;
				this.hidden = true;
				this.cssText = this.element.style.cssText;

				var startStyles = this.element.getComputedSize({
					styles: this.options.styles,
					mode: this.options.mode
				});
				if (this.options.transitionOpacity) startStyles.opacity = this.options.opacity;

				var zero = {};
				Object.each(startStyles, function(style, name){
					zero[name] = [style, 0];
				});

				this.element.setStyles({
					display: Function.from(this.options.display).call(this),
					overflow: 'hidden'
				});

				var hideThese = hideTheseOf(this);
				if (hideThese) hideThese.setStyle('visibility', 'hidden');

				this.$chain.unshift(function(){
					if (this.hidden){
						this.hiding = false;
						this.element.style.cssText = this.cssText;
						this.element.setStyle('display', 'none');
						if (hideThese) hideThese.setStyle('visibility', 'visible');
					}
					this.fireEvent('hide', this.element);
					this.callChain();
				}.bind(this));

				this.start(zero);
			} else {
				this.callChain.delay(10, this);
				this.fireEvent('complete', this.element);
				this.fireEvent('hide', this.element);
			}
		} else if (this.options.link == 'chain'){
			this.chain(this.dissolve.bind(this));
		} else if (this.options.link == 'cancel' && !this.hiding){
			this.cancel();
			this.dissolve();
		}
		return this;
	},

	reveal: function(){
		if (!this.showing && !this.hiding){
			if (this.element.getStyle('display') == 'none'){
				this.hiding = false;
				this.showing = true;
				this.hidden = false;
				this.cssText = this.element.style.cssText;

				var startStyles;
				this.element.measure(function(){
					startStyles = this.element.getComputedSize({
						styles: this.options.styles,
						mode: this.options.mode
					});
				}.bind(this));
				if (this.options.heightOverride != null) startStyles.height = this.options.heightOverride.toInt();
				if (this.options.widthOverride != null) startStyles.width = this.options.widthOverride.toInt();
				if (this.options.transitionOpacity){
					this.element.setStyle('opacity', 0);
					startStyles.opacity = this.options.opacity;
				}

				var zero = {
					height: 0,
					display: Function.from(this.options.display).call(this)
				};
				Object.each(startStyles, function(style, name){
					zero[name] = 0;
				});
				zero.overflow = 'hidden';

				this.element.setStyles(zero);

				var hideThese = hideTheseOf(this);
				if (hideThese) hideThese.setStyle('visibility', 'hidden');

				this.$chain.unshift(function(){
					this.element.style.cssText = this.cssText;
					this.element.setStyle('display', Function.from(this.options.display).call(this));
					if (!this.hidden) this.showing = false;
					if (hideThese) hideThese.setStyle('visibility', 'visible');
					this.callChain();
					this.fireEvent('show', this.element);
				}.bind(this));

				this.start(startStyles);
			} else {
				this.callChain();
				this.fireEvent('complete', this.element);
				this.fireEvent('show', this.element);
			}
		} else if (this.options.link == 'chain'){
			this.chain(this.reveal.bind(this));
		} else if (this.options.link == 'cancel' && !this.showing){
			this.cancel();
			this.reveal();
		}
		return this;
	},

	toggle: function(){
		if (this.element.getStyle('display') == 'none'){
			this.reveal();
		} else {
			this.dissolve();
		}
		return this;
	},

	cancel: function(){
		this.parent.apply(this, arguments);
		if (this.cssText != null) this.element.style.cssText = this.cssText;
		this.hiding = false;
		this.showing = false;
		return this;
	}

});

Element.Properties.reveal = {

	set: function(options){
		this.get('reveal').cancel().setOptions(options);
		return this;
	},

	get: function(){
		var reveal = this.retrieve('reveal');
		if (!reveal){
			reveal = new Fx.Reveal(this);
			this.store('reveal', reveal);
		}
		return reveal;
	}

};

Element.Properties.dissolve = Element.Properties.reveal;

Element.implement({

	reveal: function(options){
		this.get('reveal').setOptions(options).reveal();
		return this;
	},

	dissolve: function(options){
		this.get('reveal').setOptions(options).dissolve();
		return this;
	},

	nix: function(options){
		var params = Array.link(arguments, {destroy: Type.isBoolean, options: Type.isObject});
		this.get('reveal').setOptions(options).dissolve().chain(function(){
			this[params.destroy ? 'destroy' : 'dispose']();
		}.bind(this));
		return this;
	},

	wink: function(){
		var params = Array.link(arguments, {duration: Type.isNumber, options: Type.isObject});
		var reveal = this.get('reveal').setOptions(params.options);
		reveal.reveal().chain(function(){
			(function(){
				reveal.dissolve();
			}).delay(params.duration || 2000);
		});
	}

});

})();


/*
---

script: Fx.Scroll.js

name: Fx.Scroll

description: Effect to smoothly scroll any element, including the window.

license: MIT-style license

authors:
  - Valerio Proietti

requires:
  - Core/Fx
  - Core/Element.Event
  - Core/Element.Dimensions
  - MooTools.More

provides: [Fx.Scroll]

...
*/

(function(){

Fx.Scroll = new Class({

	Extends: Fx,

	options: {
		offset: {x: 0, y: 0},
		wheelStops: true
	},

	initialize: function(element, options){
		this.element = this.subject = document.id(element);
		this.parent(options);

		if (typeOf(this.element) != 'element') this.element = document.id(this.element.getDocument().body);

		if (this.options.wheelStops){
			var stopper = this.element,
				cancel = this.cancel.pass(false, this);
			this.addEvent('start', function(){
				stopper.addEvent('mousewheel', cancel);
			}, true);
			this.addEvent('complete', function(){
				stopper.removeEvent('mousewheel', cancel);
			}, true);
		}
	},

	set: function(){
		var now = Array.flatten(arguments);
		this.element.scrollTo(now[0], now[1]);
		return this;
	},

	compute: function(from, to, delta){
		return [0, 1].map(function(i){
			return Fx.compute(from[i], to[i], delta);
		});
	},

	start: function(x, y){
		if (!this.check(x, y)) return this;
		var scroll = this.element.getScroll();
		return this.parent([scroll.x, scroll.y], [x, y]);
	},

	calculateScroll: function(x, y){
		var element = this.element,
			scrollSize = element.getScrollSize(),
			scroll = element.getScroll(),
			size = element.getSize(),
			offset = this.options.offset,
			values = {x: x, y: y};

		for (var z in values){
			if (!values[z] && values[z] !== 0) values[z] = scroll[z];
			if (typeOf(values[z]) != 'number') values[z] = scrollSize[z] - size[z];
			values[z] += offset[z];
		}

		return [values.x, values.y];
	},

	toTop: function(){
		return this.start.apply(this, this.calculateScroll(false, 0));
	},

	toLeft: function(){
		return this.start.apply(this, this.calculateScroll(0, false));
	},

	toRight: function(){
		return this.start.apply(this, this.calculateScroll('right', false));
	},

	toBottom: function(){
		return this.start.apply(this, this.calculateScroll(false, 'bottom'));
	},

	toElement: function(el, axes){
		axes = axes ? Array.from(axes) : ['x', 'y'];
		var scroll = isBody(this.element) ? {x: 0, y: 0} : this.element.getScroll();
		var position = Object.map(document.id(el).getPosition(this.element), function(value, axis){
			return axes.contains(axis) ? value + scroll[axis] : false;
		});
		return this.start.apply(this, this.calculateScroll(position.x, position.y));
	},

	toElementEdge: function(el, axes, offset){
		axes = axes ? Array.from(axes) : ['x', 'y'];
		el = document.id(el);
		var to = {},
			position = el.getPosition(this.element),
			size = el.getSize(),
			scroll = this.element.getScroll(),
			containerSize = this.element.getSize(),
			edge = {
				x: position.x + size.x,
				y: position.y + size.y
			};

		['x', 'y'].each(function(axis){
			if (axes.contains(axis)){
				if (edge[axis] > scroll[axis] + containerSize[axis]) to[axis] = edge[axis] - containerSize[axis];
				if (position[axis] < scroll[axis]) to[axis] = position[axis];
			}
			if (to[axis] == null) to[axis] = scroll[axis];
			if (offset && offset[axis]) to[axis] = to[axis] + offset[axis];
		}, this);

		if (to.x != scroll.x || to.y != scroll.y) this.start(to.x, to.y);
		return this;
	},

	toElementCenter: function(el, axes, offset){
		axes = axes ? Array.from(axes) : ['x', 'y'];
		el = document.id(el);
		var to = {},
			position = el.getPosition(this.element),
			size = el.getSize(),
			scroll = this.element.getScroll(),
			containerSize = this.element.getSize();

		['x', 'y'].each(function(axis){
			if (axes.contains(axis)){
				to[axis] = position[axis] - (containerSize[axis] - size[axis]) / 2;
			}
			if (to[axis] == null) to[axis] = scroll[axis];
			if (offset && offset[axis]) to[axis] = to[axis] + offset[axis];
		}, this);

		if (to.x != scroll.x || to.y != scroll.y) this.start(to.x, to.y);
		return this;
	}

});

//<1.2compat>
Fx.Scroll.implement({
	scrollToCenter: function(){
		return this.toElementCenter.apply(this, arguments);
	},
	scrollIntoView: function(){
		return this.toElementEdge.apply(this, arguments);
	}
});
//</1.2compat>

function isBody(element){
	return (/^(?:body|html)$/i).test(element.tagName);
}

})();


/*
---

script: Fx.Slide.js

name: Fx.Slide

description: Effect to slide an element in and out of view.

license: MIT-style license

authors:
  - Valerio Proietti

requires:
  - Core/Fx
  - Core/Element.Style
  - MooTools.More

provides: [Fx.Slide]

...
*/

Fx.Slide = new Class({

	Extends: Fx,

	options: {
		mode: 'vertical',
		wrapper: false,
		hideOverflow: true,
		resetHeight: false
	},

	initialize: function(element, options){
		element = this.element = this.subject = document.id(element);
		this.parent(options);
		options = this.options;

		var wrapper = element.retrieve('wrapper'),
			styles = element.getStyles('margin', 'position', 'overflow');

		if (options.hideOverflow) styles = Object.append(styles, {overflow: 'hidden'});
		if (options.wrapper) wrapper = document.id(options.wrapper).setStyles(styles);

		if (!wrapper) wrapper = new Element('div', {
			styles: styles
		}).wraps(element);

		element.store('wrapper', wrapper).setStyle('margin', 0);
		if (element.getStyle('overflow') == 'visible') element.setStyle('overflow', 'hidden');

		this.now = [];
		this.open = true;
		this.wrapper = wrapper;

		this.addEvent('complete', function(){
			this.open = (wrapper['offset' + this.layout.capitalize()] != 0);
			if (this.open && this.options.resetHeight) wrapper.setStyle('height', '');
		}, true);
	},

	vertical: function(){
		this.margin = 'margin-top';
		this.layout = 'height';
		this.offset = this.element.offsetHeight;
	},

	horizontal: function(){
		this.margin = 'margin-left';
		this.layout = 'width';
		this.offset = this.element.offsetWidth;
	},

	set: function(now){
		this.element.setStyle(this.margin, now[0]);
		this.wrapper.setStyle(this.layout, now[1]);
		return this;
	},

	compute: function(from, to, delta){
		return [0, 1].map(function(i){
			return Fx.compute(from[i], to[i], delta);
		});
	},

	start: function(how, mode){
		if (!this.check(how, mode)) return this;
		this[mode || this.options.mode]();

		var margin = this.element.getStyle(this.margin).toInt(),
			layout = this.wrapper.getStyle(this.layout).toInt(),
			caseIn = [[margin, layout], [0, this.offset]],
			caseOut = [[margin, layout], [-this.offset, 0]],
			start;

		switch (how){
			case 'in': start = caseIn; break;
			case 'out': start = caseOut; break;
			case 'toggle': start = (layout == 0) ? caseIn : caseOut;
		}
		return this.parent(start[0], start[1]);
	},

	slideIn: function(mode){
		return this.start('in', mode);
	},

	slideOut: function(mode){
		return this.start('out', mode);
	},

	hide: function(mode){
		this[mode || this.options.mode]();
		this.open = false;
		return this.set([-this.offset, 0]);
	},

	show: function(mode){
		this[mode || this.options.mode]();
		this.open = true;
		return this.set([0, this.offset]);
	},

	toggle: function(mode){
		return this.start('toggle', mode);
	}

});

Element.Properties.slide = {

	set: function(options){
		this.get('slide').cancel().setOptions(options);
		return this;
	},

	get: function(){
		var slide = this.retrieve('slide');
		if (!slide){
			slide = new Fx.Slide(this, {link: 'cancel'});
			this.store('slide', slide);
		}
		return slide;
	}

};

Element.implement({

	slide: function(how, mode){
		how = how || 'toggle';
		var slide = this.get('slide'), toggle;
		switch (how){
			case 'hide': slide.hide(mode); break;
			case 'show': slide.show(mode); break;
			case 'toggle':
				var flag = this.retrieve('slide:flag', slide.open);
				slide[flag ? 'slideOut' : 'slideIn'](mode);
				this.store('slide:flag', !flag);
				toggle = true;
			break;
			default: slide.start(how, mode);
		}
		if (!toggle) this.eliminate('slide:flag');
		return this;
	}

});


/*
---

script: Drag.js

name: Drag

description: The base Drag Class. Can be used to drag and resize Elements using mouse events.

license: MIT-style license

authors:
  - Valerio Proietti
  - Tom Occhinno
  - Jan Kassens

requires:
  - Core/Events
  - Core/Options
  - Core/Element.Event
  - Core/Element.Style
  - Core/Element.Dimensions
  - MooTools.More

provides: [Drag]
...

*/

var Drag = new Class({

	Implements: [Events, Options],

	options: {/*
		onBeforeStart: function(thisElement){},
		onStart: function(thisElement, event){},
		onSnap: function(thisElement){},
		onDrag: function(thisElement, event){},
		onCancel: function(thisElement){},
		onComplete: function(thisElement, event){},*/
		snap: 6,
		unit: 'px',
		grid: false,
		style: true,
		limit: false,
		handle: false,
		invert: false,
		preventDefault: false,
		stopPropagation: false,
		modifiers: {x: 'left', y: 'top'}
	},

	initialize: function(){
		var params = Array.link(arguments, {
			'options': Type.isObject,
			'element': function(obj){
				return obj != null;
			}
		});

		this.element = document.id(params.element);
		this.document = this.element.getDocument();
		this.setOptions(params.options || {});
		var htype = typeOf(this.options.handle);
		this.handles = ((htype == 'array' || htype == 'collection') ? $$(this.options.handle) : document.id(this.options.handle)) || this.element;
		this.mouse = {'now': {}, 'pos': {}};
		this.value = {'start': {}, 'now': {}};

		this.selection = 'selectstart' in document ? 'selectstart' : 'mousedown';


		if ('ondragstart' in document && !('FileReader' in window) && !Drag.ondragstartFixed){
			document.ondragstart = Function.from(false);
			Drag.ondragstartFixed = true;
		}

		this.bound = {
			start: this.start.bind(this),
			check: this.check.bind(this),
			drag: this.drag.bind(this),
			stop: this.stop.bind(this),
			cancel: this.cancel.bind(this),
			eventStop: Function.from(false)
		};
		this.attach();
	},

	attach: function(){
		this.handles.addEvent('mousedown', this.bound.start);
		return this;
	},

	detach: function(){
		this.handles.removeEvent('mousedown', this.bound.start);
		return this;
	},

	start: function(event){
		var options = this.options;

		if (event.rightClick) return;

		if (options.preventDefault) event.preventDefault();
		if (options.stopPropagation) event.stopPropagation();
		this.mouse.start = event.page;

		this.fireEvent('beforeStart', this.element);

		var limit = options.limit;
		this.limit = {x: [], y: []};

		var z, coordinates;
		for (z in options.modifiers){
			if (!options.modifiers[z]) continue;

			var style = this.element.getStyle(options.modifiers[z]);

			// Some browsers (IE and Opera) don't always return pixels.
			if (style && !style.match(/px$/)){
				if (!coordinates) coordinates = this.element.getCoordinates(this.element.getOffsetParent());
				style = coordinates[options.modifiers[z]];
			}

			if (options.style) this.value.now[z] = (style || 0).toInt();
			else this.value.now[z] = this.element[options.modifiers[z]];

			if (options.invert) this.value.now[z] *= -1;

			this.mouse.pos[z] = event.page[z] - this.value.now[z];

			if (limit && limit[z]){
				var i = 2;
				while (i--){
					var limitZI = limit[z][i];
					if (limitZI || limitZI === 0) this.limit[z][i] = (typeof limitZI == 'function') ? limitZI() : limitZI;
				}
			}
		}

		if (typeOf(this.options.grid) == 'number') this.options.grid = {
			x: this.options.grid,
			y: this.options.grid
		};

		var events = {
			mousemove: this.bound.check,
			mouseup: this.bound.cancel
		};
		events[this.selection] = this.bound.eventStop;
		this.document.addEvents(events);
	},

	check: function(event){
		if (this.options.preventDefault) event.preventDefault();
		var distance = Math.round(Math.sqrt(Math.pow(event.page.x - this.mouse.start.x, 2) + Math.pow(event.page.y - this.mouse.start.y, 2)));
		if (distance > this.options.snap){
			this.cancel();
			this.document.addEvents({
				mousemove: this.bound.drag,
				mouseup: this.bound.stop
			});
			this.fireEvent('start', [this.element, event]).fireEvent('snap', this.element);
		}
	},

	drag: function(event){
		var options = this.options;

		if (options.preventDefault) event.preventDefault();
		this.mouse.now = event.page;

		for (var z in options.modifiers){
			if (!options.modifiers[z]) continue;
			this.value.now[z] = this.mouse.now[z] - this.mouse.pos[z];

			if (options.invert) this.value.now[z] *= -1;

			if (options.limit && this.limit[z]){
				if ((this.limit[z][1] || this.limit[z][1] === 0) && (this.value.now[z] > this.limit[z][1])){
					this.value.now[z] = this.limit[z][1];
				} else if ((this.limit[z][0] || this.limit[z][0] === 0) && (this.value.now[z] < this.limit[z][0])){
					this.value.now[z] = this.limit[z][0];
				}
			}

			if (options.grid[z]) this.value.now[z] -= ((this.value.now[z] - (this.limit[z][0]||0)) % options.grid[z]);

			if (options.style) this.element.setStyle(options.modifiers[z], this.value.now[z] + options.unit);
			else this.element[options.modifiers[z]] = this.value.now[z];
		}

		this.fireEvent('drag', [this.element, event]);
	},

	cancel: function(event){
		this.document.removeEvents({
			mousemove: this.bound.check,
			mouseup: this.bound.cancel
		});
		if (event){
			this.document.removeEvent(this.selection, this.bound.eventStop);
			this.fireEvent('cancel', this.element);
		}
	},

	stop: function(event){
		var events = {
			mousemove: this.bound.drag,
			mouseup: this.bound.stop
		};
		events[this.selection] = this.bound.eventStop;
		this.document.removeEvents(events);
		if (event) this.fireEvent('complete', [this.element, event]);
	}

});

Element.implement({

	makeResizable: function(options){
		var drag = new Drag(this, Object.merge({
			modifiers: {
				x: 'width',
				y: 'height'
			}
		}, options));

		this.store('resizer', drag);
		return drag.addEvent('drag', function(){
			this.fireEvent('resize', drag);
		}.bind(this));
	}

});


/*
---

script: Drag.Move.js

name: Drag.Move

description: A Drag extension that provides support for the constraining of draggables to containers and droppables.

license: MIT-style license

authors:
  - Valerio Proietti
  - Tom Occhinno
  - Jan Kassens
  - Aaron Newton
  - Scott Kyle

requires:
  - Core/Element.Dimensions
  - Drag

provides: [Drag.Move]

...
*/

Drag.Move = new Class({

	Extends: Drag,

	options: {/*
		onEnter: function(thisElement, overed){},
		onLeave: function(thisElement, overed){},
		onDrop: function(thisElement, overed, event){},*/
		droppables: [],
		container: false,
		precalculate: false,
		includeMargins: true,
		checkDroppables: true
	},

	initialize: function(element, options){
		this.parent(element, options);
		element = this.element;

		this.droppables = $$(this.options.droppables);
		this.setContainer(this.options.container);

		if (this.options.style){
			if (this.options.modifiers.x == 'left' && this.options.modifiers.y == 'top'){
				var parent = element.getOffsetParent(),
					styles = element.getStyles('left', 'top');
				if (parent && (styles.left == 'auto' || styles.top == 'auto')){
					element.setPosition(element.getPosition(parent));
				}
			}

			if (element.getStyle('position') == 'static') element.setStyle('position', 'absolute');
		}

		this.addEvent('start', this.checkDroppables, true);
		this.overed = null;
	},
	
	setContainer: function(container) {
		this.container = document.id(container);
		if (this.container && typeOf(this.container) != 'element'){
			this.container = document.id(this.container.getDocument().body);
		}
	},

	start: function(event){
		if (this.container) this.options.limit = this.calculateLimit();

		if (this.options.precalculate){
			this.positions = this.droppables.map(function(el){
				return el.getCoordinates();
			});
		}

		this.parent(event);
	},

	calculateLimit: function(){
		var element = this.element,
			container = this.container,

			offsetParent = document.id(element.getOffsetParent()) || document.body,
			containerCoordinates = container.getCoordinates(offsetParent),
			elementMargin = {},
			elementBorder = {},
			containerMargin = {},
			containerBorder = {},
			offsetParentPadding = {};

		['top', 'right', 'bottom', 'left'].each(function(pad){
			elementMargin[pad] = element.getStyle('margin-' + pad).toInt();
			elementBorder[pad] = element.getStyle('border-' + pad).toInt();
			containerMargin[pad] = container.getStyle('margin-' + pad).toInt();
			containerBorder[pad] = container.getStyle('border-' + pad).toInt();
			offsetParentPadding[pad] = offsetParent.getStyle('padding-' + pad).toInt();
		}, this);

		var width = element.offsetWidth + elementMargin.left + elementMargin.right,
			height = element.offsetHeight + elementMargin.top + elementMargin.bottom,
			left = 0,
			top = 0,
			right = containerCoordinates.right - containerBorder.right - width,
			bottom = containerCoordinates.bottom - containerBorder.bottom - height;

		if (this.options.includeMargins){
			left += elementMargin.left;
			top += elementMargin.top;
		} else {
			right += elementMargin.right;
			bottom += elementMargin.bottom;
		}

		if (element.getStyle('position') == 'relative'){
			var coords = element.getCoordinates(offsetParent);
			coords.left -= element.getStyle('left').toInt();
			coords.top -= element.getStyle('top').toInt();

			left -= coords.left;
			top -= coords.top;
			if (container.getStyle('position') != 'relative'){
				left += containerBorder.left;
				top += containerBorder.top;
			}
			right += elementMargin.left - coords.left;
			bottom += elementMargin.top - coords.top;

			if (container != offsetParent){
				left += containerMargin.left + offsetParentPadding.left;
				if (!offsetParentPadding.left && left < 0) left = 0;
				top += offsetParent == document.body ? 0 : containerMargin.top + offsetParentPadding.top;
				if (!offsetParentPadding.top && top < 0) top = 0;
			}
		} else {
			left -= elementMargin.left;
			top -= elementMargin.top;
			if (container != offsetParent){
				left += containerCoordinates.left + containerBorder.left;
				top += containerCoordinates.top + containerBorder.top;
			}
		}

		return {
			x: [left, right],
			y: [top, bottom]
		};
	},

	getDroppableCoordinates: function(element){
		var position = element.getCoordinates();
		if (element.getStyle('position') == 'fixed'){
			var scroll = window.getScroll();
			position.left += scroll.x;
			position.right += scroll.x;
			position.top += scroll.y;
			position.bottom += scroll.y;
		}
		return position;
	},

	checkDroppables: function(){
		var overed = this.droppables.filter(function(el, i){
			el = this.positions ? this.positions[i] : this.getDroppableCoordinates(el);
			var now = this.mouse.now;
			return (now.x > el.left && now.x < el.right && now.y < el.bottom && now.y > el.top);
		}, this).getLast();

		if (this.overed != overed){
			if (this.overed) this.fireEvent('leave', [this.element, this.overed]);
			if (overed) this.fireEvent('enter', [this.element, overed]);
			this.overed = overed;
		}
	},

	drag: function(event){
		this.parent(event);
		if (this.options.checkDroppables && this.droppables.length) this.checkDroppables();
	},

	stop: function(event){
		this.checkDroppables();
		this.fireEvent('drop', [this.element, this.overed, event]);
		this.overed = null;
		return this.parent(event);
	}

});

Element.implement({

	makeDraggable: function(options){
		var drag = new Drag.Move(this, options);
		this.store('dragger', drag);
		return drag;
	}

});


/*
---

script: Request.JSONP.js

name: Request.JSONP

description: Defines Request.JSONP, a class for cross domain javascript via script injection.

license: MIT-style license

authors:
  - Aaron Newton
  - Guillermo Rauch
  - Arian Stolwijk

requires:
  - Core/Element
  - Core/Request
  - MooTools.More

provides: [Request.JSONP]

...
*/

Request.JSONP = new Class({

	Implements: [Chain, Events, Options],

	options: {/*
		onRequest: function(src, scriptElement){},
		onComplete: function(data){},
		onSuccess: function(data){},
		onCancel: function(){},
		onTimeout: function(){},
		onError: function(){}, */
		onRequest: function(src){
			if (this.options.log && window.console && console.log){
				console.log('JSONP retrieving script with url:' + src);
			}
		},
		onError: function(src){
			if (this.options.log && window.console && console.warn){
				console.warn('JSONP '+ src +' will fail in Internet Explorer, which enforces a 2083 bytes length limit on URIs');
			}
		},
		url: '',
		callbackKey: 'callback',
		injectScript: document.head,
		data: '',
		link: 'ignore',
		timeout: 0,
		log: false
	},

	initialize: function(options){
		this.setOptions(options);
	},

	send: function(options){
		if (!Request.prototype.check.call(this, options)) return this;
		this.running = true;

		var type = typeOf(options);
		if (type == 'string' || type == 'element') options = {data: options};
		options = Object.merge(this.options, options || {});

		var data = options.data;
		switch (typeOf(data)){
			case 'element': data = document.id(data).toQueryString(); break;
			case 'object': case 'hash': data = Object.toQueryString(data);
		}

		var index = this.index = Request.JSONP.counter++;

		var src = options.url +
			(options.url.test('\\?') ? '&' :'?') +
			(options.callbackKey) +
			'=Request.JSONP.request_map.request_'+ index +
			(data ? '&' + data : '');

		if (src.length > 2083) this.fireEvent('error', src);

		Request.JSONP.request_map['request_' + index] = function(){
			this.success(arguments, index);
		}.bind(this);

		var script = this.getScript(src).inject(options.injectScript);
		this.fireEvent('request', [src, script]);

		if (options.timeout) this.timeout.delay(options.timeout, this);

		return this;
	},

	getScript: function(src){
		if (!this.script) this.script = new Element('script', {
			type: 'text/javascript',
			async: true,
			src: src
		});
		return this.script;
	},

	success: function(args, index){
		if (!this.running) return;
		this.clear()
			.fireEvent('complete', args).fireEvent('success', args)
			.callChain();
	},

	cancel: function(){
		if (this.running) this.clear().fireEvent('cancel');
		return this;
	},

	isRunning: function(){
		return !!this.running;
	},

	clear: function(){
		this.running = false;
		if (this.script){
			this.script.destroy();
			this.script = null;
		}
		return this;
	},

	timeout: function(){
		if (this.running){
			this.running = false;
			this.fireEvent('timeout', [this.script.get('src'), this.script]).fireEvent('failure').cancel();
		}
		return this;
	}

});

Request.JSONP.counter = 0;
Request.JSONP.request_map = {};


/*
---

name: Hash

description: Contains Hash Prototypes. Provides a means for overcoming the JavaScript practical impossibility of extending native Objects.

license: MIT-style license.

requires:
  - Core/Object
  - MooTools.More

provides: [Hash]

...
*/

(function(){

if (this.Hash) return;

var Hash = this.Hash = new Type('Hash', function(object){
	if (typeOf(object) == 'hash') object = Object.clone(object.getClean());
	for (var key in object) this[key] = object[key];
	return this;
});

this.$H = function(object){
	return new Hash(object);
};

Hash.implement({

	forEach: function(fn, bind){
		Object.forEach(this, fn, bind);
	},

	getClean: function(){
		var clean = {};
		for (var key in this){
			if (this.hasOwnProperty(key)) clean[key] = this[key];
		}
		return clean;
	},

	getLength: function(){
		var length = 0;
		for (var key in this){
			if (this.hasOwnProperty(key)) length++;
		}
		return length;
	}

});

Hash.alias('each', 'forEach');

Hash.implement({

	has: Object.prototype.hasOwnProperty,

	keyOf: function(value){
		return Object.keyOf(this, value);
	},

	hasValue: function(value){
		return Object.contains(this, value);
	},

	extend: function(properties){
		Hash.each(properties || {}, function(value, key){
			Hash.set(this, key, value);
		}, this);
		return this;
	},

	combine: function(properties){
		Hash.each(properties || {}, function(value, key){
			Hash.include(this, key, value);
		}, this);
		return this;
	},

	erase: function(key){
		if (this.hasOwnProperty(key)) delete this[key];
		return this;
	},

	get: function(key){
		return (this.hasOwnProperty(key)) ? this[key] : null;
	},

	set: function(key, value){
		if (!this[key] || this.hasOwnProperty(key)) this[key] = value;
		return this;
	},

	empty: function(){
		Hash.each(this, function(value, key){
			delete this[key];
		}, this);
		return this;
	},

	include: function(key, value){
		if (this[key] == undefined) this[key] = value;
		return this;
	},

	map: function(fn, bind){
		return new Hash(Object.map(this, fn, bind));
	},

	filter: function(fn, bind){
		return new Hash(Object.filter(this, fn, bind));
	},

	every: function(fn, bind){
		return Object.every(this, fn, bind);
	},

	some: function(fn, bind){
		return Object.some(this, fn, bind);
	},

	getKeys: function(){
		return Object.keys(this);
	},

	getValues: function(){
		return Object.values(this);
	},

	toQueryString: function(base){
		return Object.toQueryString(this, base);
	}

});

Hash.alias({indexOf: 'keyOf', contains: 'hasValue'});


})();



/*
---

script: Hash.Cookie.js

name: Hash.Cookie

description: Class for creating, reading, and deleting Cookies in JSON format.

license: MIT-style license

authors:
  - Valerio Proietti
  - Aaron Newton

requires:
  - Core/Cookie
  - Core/JSON
  - MooTools.More
  - Hash

provides: [Hash.Cookie]

...
*/

Hash.Cookie = new Class({

	Extends: Cookie,

	options: {
		autoSave: true
	},

	initialize: function(name, options){
		this.parent(name, options);
		this.load();
	},

	save: function(){
		var value = JSON.encode(this.hash);
		if (!value || value.length > 4096) return false; //cookie would be truncated!
		if (value == '{}') this.dispose();
		else this.write(value);
		return true;
	},

	load: function(){
		this.hash = new Hash(JSON.decode(this.read(), true));
		return this;
	}

});

Hash.each(Hash.prototype, function(method, name){
	if (typeof method == 'function') Hash.Cookie.implement(name, function(){
		var value = method.apply(this.hash, arguments);
		if (this.options.autoSave) this.save();
		return value;
	});
});


/*
---

script: Class.Occlude.js

name: Class.Occlude

description: Prevents a class from being applied to a DOM element twice.

license: MIT-style license.

authors:
  - Aaron Newton

requires:
  - Core/Class
  - Core/Element
  - MooTools.More

provides: [Class.Occlude]

...
*/

Class.Occlude = new Class({

	occlude: function(property, element){
		element = document.id(element || this.element);
		var instance = element.retrieve(property || this.property);
		if (instance && !this.occluded)
			return (this.occluded = instance);

		this.occluded = false;
		element.store(property || this.property, this);
		return this.occluded;
	}

});


/*
---

script: IframeShim.js

name: IframeShim

description: Defines IframeShim, a class for obscuring select lists and flash objects in IE.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/Element.Event
  - Core/Element.Style
  - Core/Options
  - Core/Events
  - Element.Position
  - Class.Occlude

provides: [IframeShim]

...
*/

(function(){

var browsers = false;
//<1.4compat>
browsers = Browser.ie6 || (Browser.firefox && Browser.version < 3 && Browser.Platform.mac);
//</1.4compat>

this.IframeShim = new Class({

	Implements: [Options, Events, Class.Occlude],

	options: {
		className: 'iframeShim',
		src: 'javascript:false;document.write("");',
		display: false,
		zIndex: null,
		margin: 0,
		offset: {x: 0, y: 0},
		browsers: browsers
	},

	property: 'IframeShim',

	initialize: function(element, options){
		this.element = document.id(element);
		if (this.occlude()) return this.occluded;
		this.setOptions(options);
		this.makeShim();
		return this;
	},

	makeShim: function(){
		if (this.options.browsers){
			var zIndex = this.element.getStyle('zIndex').toInt();

			if (!zIndex){
				zIndex = 1;
				var pos = this.element.getStyle('position');
				if (pos == 'static' || !pos) this.element.setStyle('position', 'relative');
				this.element.setStyle('zIndex', zIndex);
			}
			zIndex = ((this.options.zIndex != null || this.options.zIndex === 0) && zIndex > this.options.zIndex) ? this.options.zIndex : zIndex - 1;
			if (zIndex < 0) zIndex = 1;
			this.shim = new Element('iframe', {
				src: this.options.src,
				scrolling: 'no',
				frameborder: 0,
				styles: {
					zIndex: zIndex,
					position: 'absolute',
					border: 'none',
					filter: 'progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)'
				},
				'class': this.options.className
			}).store('IframeShim', this);
			var inject = (function(){
				this.shim.inject(this.element, 'after');
				this[this.options.display ? 'show' : 'hide']();
				this.fireEvent('inject');
			}).bind(this);
			if (!IframeShim.ready) window.addEvent('load', inject);
			else inject();
		} else {
			this.position = this.hide = this.show = this.dispose = Function.from(this);
		}
	},

	position: function(){
		if (!IframeShim.ready || !this.shim) return this;
		var size = this.element.measure(function(){
			return this.getSize();
		});
		if (this.options.margin != undefined){
			size.x = size.x - (this.options.margin * 2);
			size.y = size.y - (this.options.margin * 2);
			this.options.offset.x += this.options.margin;
			this.options.offset.y += this.options.margin;
		}
		this.shim.set({width: size.x, height: size.y}).position({
			relativeTo: this.element,
			offset: this.options.offset
		});
		return this;
	},

	hide: function(){
		if (this.shim) this.shim.setStyle('display', 'none');
		return this;
	},

	show: function(){
		if (this.shim) this.shim.setStyle('display', 'block');
		return this.position();
	},

	dispose: function(){
		if (this.shim) this.shim.dispose();
		return this;
	},

	destroy: function(){
		if (this.shim) this.shim.destroy();
		return this;
	}

});

})();

window.addEvent('load', function(){
	IframeShim.ready = true;
});


/*
---

name: Swiff

description: Wrapper for embedding SWF movies. Supports External Interface Communication.

license: MIT-style license.

credits:
  - Flash detection & Internet Explorer + Flash Player 9 fix inspired by SWFObject.

requires: [Core/Options, Core/Object, Core/Element]

provides: Swiff

...
*/

(function(){

var Swiff = this.Swiff = new Class({

	Implements: Options,

	options: {
		id: null,
		height: 1,
		width: 1,
		container: null,
		properties: {},
		params: {
			quality: 'high',
			allowScriptAccess: 'always',
			wMode: 'window',
			swLiveConnect: true
		},
		callBacks: {},
		vars: {}
	},

	toElement: function(){
		return this.object;
	},

	initialize: function(path, options){
		this.instance = 'Swiff_' + String.uniqueID();

		this.setOptions(options);
		options = this.options;
		var id = this.id = options.id || this.instance;
		var container = document.id(options.container);

		Swiff.CallBacks[this.instance] = {};

		var params = options.params, vars = options.vars, callBacks = options.callBacks;
		var properties = Object.append({height: options.height, width: options.width}, options.properties);

		var self = this;

		for (var callBack in callBacks){
			Swiff.CallBacks[this.instance][callBack] = (function(option){
				return function(){
					return option.apply(self.object, arguments);
				};
			})(callBacks[callBack]);
			vars[callBack] = 'Swiff.CallBacks.' + this.instance + '.' + callBack;
		}

		params.flashVars = Object.toQueryString(vars);
		if ('ActiveXObject' in window){
			properties.classid = 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000';
			params.movie = path;
		} else {
			properties.type = 'application/x-shockwave-flash';
		}
		properties.data = path;

		var build = '<object id="' + id + '"';
		for (var property in properties) build += ' ' + property + '="' + properties[property] + '"';
		build += '>';
		for (var param in params){
			if (params[param]) build += '<param name="' + param + '" value="' + params[param] + '" />';
		}
		build += '</object>';
		this.object = ((container) ? container.empty() : new Element('div')).set('html', build).firstChild;
	},

	replaces: function(element){
		element = document.id(element, true);
		element.parentNode.replaceChild(this.toElement(), element);
		return this;
	},

	inject: function(element){
		document.id(element, true).appendChild(this.toElement());
		return this;
	},

	remote: function(){
		return Swiff.remote.apply(Swiff, [this.toElement()].append(arguments));
	}

});

Swiff.CallBacks = {};

Swiff.remote = function(obj, fn){
	var rs = obj.CallFunction('<invoke name="' + fn + '" returntype="javascript">' + __flash__argumentsToXML(arguments, 2) + '</invoke>');
	return eval(rs);
};

})();


/**
 * Composer.js is an MVC framework for creating and organizing javascript
 * applications. For documentation, please visit:
 *
 *     http://lyonbros.github.com/composer.js/
 *
 * -----------------------------------------------------------------------------
 *
 * Copyright (c) 2011, Lyon Bros Enterprises, LLC. (http://www.lyonbros.com)
 *
 * Licensed under The MIT License.
 * Redistributions of files must retain the above copyright notice.
 */
(function() {
    "use strict";
    var Composer	=	{};
    var global	=	typeof(global) != 'undefined' ? global :
        typeof(window) != 'undefined' ? window : this;

    /**
     * You must override this function in your app.
     */
    Composer.sync	=	function(method, model, options) { return options.success(); };

    // an option to suppress those annoying warnings when overriding initialize and extend methods
    Composer.suppress_warnings = false;

    // a closure that returns incrementing integers. these will be unique across
    // the entire app since only one counter is instantiated
    Composer.cid	=	(function() {
        var counter	=	1;
        return function(inc) { return 'c'+counter++; };
    })();

    /**
     * The events class provides bindings to objects (Models and Collections,
     * mainly) and allows triggering of those events. For instance, a controller
     * can bind its "removeItemFromView" function to its model's "destroy" event.
     * Now when that model is destroyed, the destroyer doesn't have to remember to
     * also trigger the "removeItemFromView" function, but it will happen
     * automatically as a result of the binding.
     *
     * Note that this class is meant to be extended and doesn't provide much use on
     * its own.
     *
     * Certain events are used by the framework itself:
     *   Models:
     *     "change" - called when a model's values are changed vie its set()
     *       function.
     *     "change:[key]" - called when [key] is changed under model's data. For
     *       instance, if you did :
     *         model.bind("change:name", myfn);
     *         model.set({name: 'leonard'});    // <-- this will trigger the event
     *     "destroy" - called when model.destroy() is called.
     *     "error" - triggered when an error happens saving/reading/validating the
     *       model
     *   Collections:
     *     "add" - Called when a model is added to a collection via
     *       collection.add()
     *     "clear" - Called when all models are cleared out of a via
     *       collection.clear()
     *     "reset" - Called when collection is reset with new model data via
     *       collection.reset()
     *     "remove" - Called when collection.remove() is used to remove a model
     *       from the collection
     *   Controllers:
     *     "release" - Called when controller.release() is called to remove the
     *       controller from the view.
     *
     * Note that the "all" event will bubble up from model to collection...when a
     * model is added to a collection via collection.add(), the collection binds
     * an 'all' event to that model so that any events that happen on that model
     * will be triggered in the collection as well. This makes it easy for a
     * controller to monitor changes on collections of items instead of each item
     * individually.
     */
    var Events	=	new Class({
        _events: {},
        _named_events: {},

        /**
         * Bind a callback to a specific event for this object. Adds the callback to
         * an array instead of replacing other callbacks, so many callbacks can exist
         * under the same event for this object.
         *
         * Example: mymodel.bind("change", this.render.bind(this));
         *
         * Whenever mymodel is changed in any way, the "render" function for the
         * current object (probably a controller in this instance) will be called.
         */
        bind: function(ev, callback, callback_name)
        {
            if(typeof(ev) == 'object' && ev.length)
            {
                // it's an array, process each binding separately
                return ev.each(function(evname) {
                    this.bind(evname, callback, callback_name);
                }, this);
            }
            callback_name || (callback_name = null);

            if(callback_name)
            {
                // prepend event type to callback name
                callback_name	=	ev+':'+callback_name;

                if(!this._named_events[callback_name])
                {
                    // assign the callback into the named collection so it can be retrieved
                    // later by name if required.
                    this._named_events[callback_name]	=	callback;
                }
                else
                {
                    // don't bother with duplicate event names
                    return false;
                }
            }

            this._events[ev] || (this._events[ev] = []);
            if(!this._events[ev].contains(callback))
            {
                this._events[ev].push(callback);
            }

            return this;
        },

        /**
         * Like bind(), but clears out the binding after one use.
         */
        bind_once: function(ev, callback, callback_name)
        {
            var wrapped;
            wrapped = function() {
                this.unbind(ev, wrapped);
                callback.apply(this, arguments);
            }.bind(this);
            this.bind(ev, wrapped, callback_name);
        },

        /**
         * Trigger an event for this object, which in turn runs all callbacks for that
         * event WITH all parameters passed in to this function.
         *
         * For instance, you could do:
         * mymodel.bind("destroy", this.removeFromView.bind(this));
         * mymodel.trigger("destroy", "omg", "lol", "wtf");
         *
         * this.removeFromView will be called with the arguments "omg", "lol", "wtf".
         *
         * Note that any trigger event will also trigger the "all" event. the idea
         * being that you can subscribe to anything happening on an object.
         */
        trigger: function(ev)
        {
            var args	=	Array.prototype.slice.call(arguments, 0);
            [ev, 'all'].each(function(type) {
                if(!this._events[type]) return;
                Array.clone(this._events[type]).each(function(callback) {
                    callback.apply(this, (type == 'all') ? args : args.slice(1));
                }, this);
            }, this);

            return this;
        },

        /**
         * Unbinds an event from the current object.
         */
        unbind: function(ev, callback)
        {
            if(typeof(ev) == 'object' && ev.length)
            {
                // it's an array, process each item individually
                return ev.each(function(evname) {
                    this.unbind(evname, callback);
                }, this);
            }

            if(typeof(ev) == 'undefined')
            {
                // no event passed, unbind everything
                this._events		=	{};
                this._named_events	=	{};
                return this;
            }

            if(typeof(this._events[ev]) == 'undefined' || this._events[ev].length == 0)
            {
                // event isn't bound
                return this;
            }

            if(typeof(callback) == 'undefined')
            {
                // no callback specified, remove all events of the given type
                Object.each(this._named_events, function(cb, ev_key) {
                    // clear out all named events for this event type
                    var match	=	ev_key.substr(0, ev.length + 1);
                    if(ev+':' != match) return;
                    delete this._named_events[ev_key];
                }, this);
                // empty out the event type
                this._events[ev].empty();
            }
            else
            {
                if(typeof(callback) == 'string')
                {
                    // load the function we assigned the name to and assign it to "callback",
                    // also removing the named reference after we're done.
                    callback	=	ev+':'+callback;
                    var fn		=	this._named_events[callback];
                    delete this._named_events[callback];
                    var callback	=	fn;
                }

                // remove all callback matches for the event type ev
                this._events[ev].erase(callback);
            }

            return this;
        }
    });

    /**
     * The base class is inherited by models, collections, and controllers. It
     * provides some nice common functionality.
     */
    var Base	=	new Class({
        /**
         * Track this object's type. Useful for debugging, mainly
         */
        __composer_type: 'base',

        /**
         * Every Composer object has an assigned unique id (regardless of the
         * object's actual app ID). It is stored here.
         */
        _cid: false,

        /**
         * Pull out the object's unique Composer ID
         */
        cid: function()
        {
            return this._cid;
        },

        /**
         * fire_event dtermines whether or not an event should fire. given an event
         * name, the passed-in options, and any arbitrary number of arguments,
         * determine whether or not the given event should be triggered.
         */
        fire_event: function()
        {
            var args	=	Array.prototype.slice.call(arguments, 0);
            var evname	=	args.shift();
            var options	=	args.shift();

            options || (options = {});

            // add event name back into the beginning of args
            args.unshift(evname);
            if(!options.silent && !options.not_silent)
            {
                // not silent, fire the event
                return this.trigger.apply(this, args);
            }
            else if(
                options.not_silent &&
                    (options.not_silent == evname ||
                        (options.not_silent.contains && options.not_silent.contains(evname)))
                )
            {
                // silent, BUT the given event is allowed. fire it.
                return this.trigger.apply(this, args);
            }
            else if(
                options.silent &&
                    ((typeof(options.silent) == 'string' && options.silent != evname) ||
                        (options.silent.contains && !options.silent.contains(evname)))
                )
            {
                // the current event is not marked to be silent, fire it
                return this.trigger.apply(this, args);
            }
            return this;
        }
    });
    /**
     * allows one object to extend another. since controllers, models, and
     * collections all do this differently, it is up to each to have their own
     * extend function and call this one for validation.
     */
    Base.extend	=	function(obj, base)
    {
        obj || (obj = {});
        base || (base = null);
        if(obj.initialize && !Composer.suppress_warnings)
        {
            var str	=	'You are creating a Composer object with an "initialize" method/' +
                'parameter, which is reserved. Unless you know what you\'re doing ' +
                '(and call this.parent.apply(this, arguments)), please rename ' +
                'your parameter to something other than "initialize"! Perhaps you' +
                'were thinking of init()?';
            console.log('----------WARNING----------');
            console.log(str);
            console.log('---------------------------');
        }

        if(obj.extend && !Composer.suppress_warnings)
        {
            var str	=	'You are creating a Composer object with an "extend" method/' +
                'parameter, which is reserved. Unless you know what you\'re doing ' +
                '(and call this.parent.apply(this, arguments)), please rename ' +
                'your parameter to something other than "extend"!';
            console.log('----------WARNING----------');
            console.log(str);
            console.log('---------------------------');
        }

        return obj;
    };


    /**
     * Models are the data class. They deal with loading and manipulating data from
     * various sources (ajax, local storage, etc). They make wrapping your actual
     * data easy, and tie in well with collections/controllers via events to allow
     * for easy updating and rendering.
     *
     * They also tie in with the Composer.sync function to provide a central place
     * for saving/updating information with a server.
     */
    var Model	=	new Class({
        Extends: Base,
        Implements: [Events],

        /**
         * Track this object's type. Useful for debugging, mainly
         */
        __composer_type: 'model',

        // for internal object testing
        // NOTE: deprecated in favor of __composer_type
        __is_model: true,

        options: {},

        // default values for the model, merged with the data passed in on CTOR
        defaults: {},

        // holds the model's data
        data: {},

        // whether or not the model has changed since the last save/update via sync
        _changed: false,

        // reference to the collections the model is in (yes, multiple). urls are
        // pulled from the collection via a "priority" parameter. the highest
        // priority collection will have its url passed to the model's sync function.
        collections: [],

        // what key to look under the data for the primary id for the object
        id_key: 'id',

        // can be used to overwrite all url generation for syncing (if you have a url
        // that doesn't fit into the "/[collection url]/[model id]" scheme.
        url: false,

        // can be used to manually set a base url for this model (in the case it
        // doesn't have a collection or the url needs to change manually).
        base_url: false,

        /**
         * CTOR, allows passing in of data to set that data into the model.
         */
        initialize: function(data, options)
        {
            data || (data = {});
            var _data	=	{};

            // merge in the defaults/data
            var merge_fn = function(v, k) { _data[k] = v; };
            Object.each(Object.clone(this.defaults), merge_fn);
            Object.each(data, merge_fn);

            // assign the unique app id
            this._cid	=	Composer.cid();

            // set the data into the model (but don't trigger any events)
            this.set(_data, options);

            // call the init fn
            this.init(options);
        },

        /**
         * override me, if needed
         */
        init: function() {},

        /**
         * wrapper to get data out of the model. it's bad form to access model.data
         * directly, you must always go through model.get('mykey')
         */
        get: function(key, def)
        {
            if(typeof(def) == 'undefined') def	=	null;
            if(typeof(this.data[key]) == 'undefined')
            {
                return def;
            }
            return this.data[key];
        },

        /**
         * like Model.get(), but if the data is a string, escape it for HTML output.
         */
        escape: function(key)
        {
            var data	=	this.get(key);
            if(data == null || typeof(data) != 'string')
            {
                return data;
            }

            // taken directly from backbone.js's escapeHTML() function... thanks!
            return data
                .replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#x27;')
                .replace(/\//g,'&#x2F;');
        },

        /**
         * whether or not a key exists in this.data
         */
        has: function(key)
        {
            return this.data[key] != null;
        },

        /**
         * set data into the model. triggers change events for individual attributes
         * that change, and also a general change event if the model has changed. it
         * only triggers these events if the model has indeed changed, setting an
         * attribute to the same value it currently is will not trigger events:
         *
         *   model.set({name: "fisty", age: 21});
         *
         * this will trigger the events:
         *   "change:name"
         *   "change:age"
         *   "change"
         *
         * if the model belongs to a collection, the events will bubble up to that
         * collection as well, so as to notify the collection of any display changes
         * needed.
         */
        set: function(data, options)
        {
            options || (options = {});

            if(!options.silent && !this.perform_validation(data, options)) return false;

            var already_changing	=	this.changing;
            this.changing			=	true;
            Object.each(data, function(val, key) {
                if(!Composer.eq(val, this.data[key]))
                {
                    this.data[key]	=	val;
                    this._changed	=	true;
                    this.fire_event('change:'+key, options, this, val, options);
                }
            }.bind(this));

            if(!already_changing && this._changed)
            {
                this.fire_event('change', options, this, options, data);
                this._changed	=	false;
            }

            this.changing	=	false;
            return this;
        },

        /**
         * unset a key from the model's data, triggering change events if needed.
         */
        unset: function(key, options)
        {
            if(!(key in this.data)) return this;
            options || (options = {});

            var obj		=	{};
            obj[key]	=	void(0);
            if(!options.silent && !this.perform_validation(obj, options)) return false;

            delete this.data[key];
            this._changed	=	true;
            this.fire_event('change:'+key, options, this, void 0, options);
            this.fire_event('change', options, this, options);
            this._changed	=	false;
            return this;
        },

        /**
         * clear all data out of a model, triggering change events if needed.
         */
        clear: function(options)
        {
            options || (options = {});

            var old		=	this.data;
            var obj		=	{};
            for(var key in old) obj[key] = void(0);
            if(!options.silent && !this.perform_validation(obj, options)) return false;

            this.data	=	{};
            if(!options.silent)
            {
                for(var key in old)
                {
                    this._changed	=	true;
                    this.fire_event('change'+key, options, this, void 0, options);
                }

                if(this._changed)
                {
                    this.fire_event('change', options, this, options);
                    this._changed	=	false;
                }
            }
            return this;
        },

        /**
         * fetch this model from the server, via its id.
         */
        fetch: function(options)
        {
            options || (options = {});

            var success	=	options.success;
            options.success	=	function(res)
            {
                this.set(this.parse(res), options);
                if(success) success(this, res);
            }.bind(this);
            options.error	=	wrap_error(options.error ? options.error.bind(this) : null, this, options).bind(this);
            return (this.sync || Composer.sync).call(this, 'read', this, options);
        },

        /**
         * save this model to the server (update if exists, add if doesn't exist (uses
         * id to detemrine if exists or note).
         */
        save: function(options)
        {
            options || (options = {});

            if(!this.perform_validation(this.data, options)) return false;

            var success	=	options.success;
            options.success	=	function(res)
            {
                if(!this.set(this.parse(res), options)) return false;
                if(success) success(this, res);
            }.bind(this);
            options.error	=	wrap_error(options.error ? options.error.bind(this) : null, this, options).bind(this);
            return (this.sync || Composer.sync).call(this, (this.is_new() ? 'create' : 'update'), this, options);
        },

        /**
         * delete this item from the server
         */
        destroy: function(options)
        {
            options || (options = {});

            var success	=	options.success;
            options.success	=	function(res)
            {
                this.fire_event('destroy', options, this, this.collections, options);
                if(success) success(this, res);
            }.bind(this);

            // if the model isn't saved yet, just mark it a success
            if(this.is_new() && !options.force) return options.success();

            options.error	=	wrap_error(options.error ? options.error.bind(this) : null, this, options).bind(this);
            return (this.sync || Composer.sync).call(this, 'delete', this, options);
        },

        /**
         * overridable function that gets called when model data comes back from the
         * server. use it to perform any needed transformations before setting data
         * into the model.
         */
        parse: function(data)
        {
            return data;
        },

        /**
         * get this model's id. if it doesn't exist, return the cid instead.
         */
        id: function(no_cid)
        {
            if(typeof(no_cid) != 'boolean') no_cid = false;

            var id	=	this.get(this.id_key);
            if(id) return id;
            if(no_cid) return false;
            return this.cid();
        },

        /**
         * test whether or not the model is new (checks if it has an id)
         */
        is_new: function()
        {
            return !this.id(true);
        },

        /**
         * create a new model with this models data and return it
         */
        clone: function()
        {
            return new this.$constructor(this.toJSON());
        },

        /**
         * return the raw data for this model (cloned, not referenced).
         */
        toJSON: function()
        {
            return Object.clone(this.data);
        },

        /**
         * generally called by Collection.toJSONAsync. just wraps Model.toJSON,
         * async, but can be extended.
         */
        toJSONAsync: function(finish_cb)
        {
            (function() {
                finish_cb(this.toJSON());
            }).delay(0, this);
        },

        /**
         * validate the model using its validation function (if it exists)
         */
        perform_validation: function(data, options)
        {
            if(typeof(this.validate) != 'function') return true;

            var error	=	this.validate(data, options);
            if(error)
            {
                if(options.error)
                {
                    options.error(this, error, options);
                }
                else
                {
                    this.fire_event('error', options, this, error, options);
                }
                return false;
            }
            return true;
        },

        /**
         * loops over the collections this model belongs to and gets the highest
         * priority one. makes for easier url extraction during syncing.
         */
        highest_priority_collection: function()
        {
            var collections	=	shallow_array_clone(this.collections);
            collections.sort( function(a, b) { return b.priority - a.priority; } );
            return collections.length ? collections[0] : false;
        },

        /**
         * get the endpoint url for this model.
         */
        get_url: function()
        {
            if(this.url)
            // we are overriding the url generation.
                return this.url;

            // pull from either overridden "base_url" param, or just use the highest
            // priority collection's url for the base.
            if (this.base_url)
                var base_url = this.base_url;
            else
            {
                var collection = this.highest_priority_collection();

                // We need to check that there actually IS a collection...
                if (collection)
                    var base_url	=	collection.get_url();
                else
                    var base_url	=	'';
            }

            // create a /[base url]/[model id] url.
            var id	=	this.id(true);
            if(id) id = '/'+id;
            else id = '';
            var url	=	base_url ? '/' + base_url.replace(/^\/+/, '').replace(/\/+$/, '') + id : id;
            return url;

        }
    });
    Model.extend	=	function(obj, base)
    {
        obj || (obj = {});
        base || (base = this);
        obj	=	Base.extend.call(this, obj, base);
        return this._do_extend(obj, base);
    };


    /**
     * Collections hold lists of models and contain various helper functions for
     * finding and selecting subsets of model data. They are basically a wrapper
     * around an array, thats function is dealing with large amounts of model data.
     *
     * Collections can also sync with the server like models. They tie into model
     * events in such a way that if a model's data changes, the collection will be
     * notified, and anybody listinging to the collection (ie, a controller) can
     * react to that event (re-display the view, for instance).
     */
    var Collection	=	new Class({
        Extends: Base,
        Implements: [Events],

        /**
         * Track this object's type. Useful for debugging, mainly
         */
        __composer_type: 'collection',

        // the TYPE of model in this collection
        model: Model,

        // "private" array holding all the models in this collection
        _models: [],

        // function used for sorting. override to sort on a criteria besides order of
        // addition to collection
        sortfn: null,

        // the base url for this collection. if you update a model, the default url
        // sent to the sync function would be PUT /[collection url]/[model id].
        url: '/mycollection',

        // when a model belongs to many collections, it will generate its url from the
        // collection having the highest priority. if all have the same priority, then
        // the first collection from the list will have its url used for the model's
        // sync operation.
        priority: 1,

        /**
         * allow the passing in of an array of data to instantiate a collection with a
         * pre-set number of models. models will be created via this.model.
         */
        initialize: function(models, params, options)
        {
            params || (params = {});
            for(var x in params)
            {
                this[x]	=	params[x];
            }

            // assign the unique app id
            this._cid	=	Composer.cid();

            // allow Collection.model to be a string so load-order dependencies can be
            // kept to a minimum. here, we convert the string to an object on collection
            // instantiation and store it back into Collection.model.
            //
            // NOTE: this happens before the initial reset =]
            this.model	=	typeof(this.model) == 'string' ? global[this.model] : this.model;

            if(models)
            {
                this.reset(models, options);
            }

            this.init();
        },

        /**
         * override me
         */
        init: function() {},

        /**
         * for each model in this collection, get its raw data, then return all of the
         * raw data in an array
         */
        toJSON: function()
        {
            return this.models().map( function(model) { return model.toJSON(); } );
        },

        /**
         * clone each model in this collection aynchronously, passing the final
         * result to the given finish cb.
         */
        toJSONAsync: function(finish_cb)
        {
            // clone models
            var models	=	this.models().slice(0);
            var results	=	[];
            var local_finish_cb	=	function(obj)
            {
                results.push(obj);
                if(results.length >= models.length)
                {
                    finish_cb(results);
                }
            };

            // do it!
            if(models.length > 0)
            {
                models.each(function(model) {
                    model.toJSONAsync(local_finish_cb);
                });
            }
            else
            {
                finish_cb([]);
            }
        },

        /**
         * wrapper to get the models under this collection for direct selection (often
         * via MooTools' array helper/selection functions)
         */
        models: function()
        {
            return this._models;
        },

        /**
         * add a model to this collection, and hook up the correct wire in doing so
         * (events and setting the model's collection).
         */
        add: function(data, options)
        {
            if (data instanceof Array)
            {
                return Object.each(data, function(model) { this.add(model, options); }, this);
            }

            options || (options = {});

            // if we are passing raw data, create a new model from data
            var model	=	data.__composer_type == 'model' ? data : new this.model(data, options);

            // reference this collection to the model
            if(!model.collections.contains(this))
            {
                model.collections.push(this);
                options.is_new	=	true;
            }

            if(this.sortfn)
            {
                // if we have a sorting function, get the index the model should exist at
                // and add it to that position
                var index	=	options.at ? parseInt(options.at) : this.sort_index(model);
                this._models.splice(index, 0, model);
            }
            else
            {
                if (typeof(options.at) == 'number')
                    this._models.splice(options.at, 0, model);
                else
                    this._models.push(model);
            }

            // listen to the model's events so we can propogate them
            model.bind('all', this._model_event.bind(this), 'collection:'+this.cid()+':listen:model:all');

            this.fire_event('add', options, model, this, options);

            return model;
        },

        /**
         * remove a model(s) from the collection, unhooking all necessary wires (events, etc)
         */
        remove: function(model, options)
        {
            if (model instanceof Array)
            {
                return Object.each(model, function(m) { this.remove(m); }, this);
            }

            options || (options = {});

            // remove this collection's reference(s) from the model
            model.collections.erase(this);

            // save to trigger change event if needed
            var num_rec	=	this._models.length;

            // remove hte model
            this._models.erase(model);

            // if the number actually change, trigger our change event
            if(this._models.length != num_rec)
            {
                this.fire_event('remove', options, model);
            }

            // remove the model from the collection
            this._remove_reference(model);
        },

        /**
         * given a model, check if its ID is already in this collection. if so,
         * replace is with the given model, otherwise add the model to the collection.
         */
        upsert: function(model, options)
        {
            options || (options = {});

            var existing	=	this.find_by_id(model.id(), options);
            if(existing)
            {
                // reposition the model if necessary
                var existing_idx	=	this.index_of(existing);
                if(typeof(options.at) == 'number' && existing_idx != options.at)
                {
                    this._models.splice(existing_idx, 1);
                    this._models.splice(options.at, 0, existing);
                    this.fire_event('sort', options);
                }

                // replace the data in the existing model with the new model's
                existing.set(model.toJSON(), Object.merge({}, {silent: true, upsert: true}, options));
                this.fire_event('upsert', options, existing, options);

                return existing;
            }

            // model is not in this collection, add it
            this.add(model, options);
            return model;
        },

        /**
         * remove all the models from the collection
         */
        clear: function(options)
        {
            options || (options = {});

            // save to trigger change event if needed
            var num_rec	=	this._models.length;

            /*
             * AL - What was I thinking?
             *  1. collection.remove can work on an array of items already
             *  2. it's stupid to call _remove_reference instead of remove...why
             *     not use existing remove code??
             *  3. it's stupid to fire the remove event *on the model*
             *
             * I'm leaving this here in case there's *actually* a reason for
             * what I did.
             this._models.each(function(model) {
             this._remove_reference(model);
             if(options.fire_remove_events) model.trigger('remove');
             }, this);
             */

            this.remove(this._models, options);
            this._models	=	[];

            // if the number actually change, trigger our change event
            if(this._models.length != num_rec)
            {
                this.fire_event('clear', options);
            }
        },

        /**
         * reset the collection with all new data. it can also be appended to the
         * current set of models if specified in the options (via "append").
         */
        reset: function(data, options)
        {
            options || (options = {});

            if(!options.append) this.clear(options);
            this.add(data, options);

            this.fire_event('reset', options, options);
        },

        /**
         * reset the collection with all new data. it does this asynchronously
         * for each item in the data array passed. this is good for setting
         * large amounts of data into a collection whose models may do heavy
         * processing. this way, the browser is able to process other events (ie
         * not freeze) while adding the models to the collection.
         *
         * data can be appended by setting the {append: true} flag in the
         * options.
         *
         * when ALL models have been added, this function calls the
         * options.complete callback.
         */
        reset_async: function(data, options)
        {
            options || (options = {});

            if(data == undefined) return;
            if(typeOf(data) != 'array') data = [data];

            data = shallow_array_clone(data);

            if(!options.append) this.clear();
            if(data.length > 0)
            {
                this.add(data[0], options);
                data.shift();
            }
            if(data.length == 0)
            {
                this.fire_event('reset', options, options);
                if(options.complete) options.complete()
                return;
            }
            (function() {
                this.reset_async(data, Object.merge({append: true}, options));
            }).delay(0 ,this);
        },

        /**
         * not normally necessary to call this, unless collection.sortfn changes after
         * instantiation of the data. sort order is normall maintained upon adding of
         * data viw Collection.add().
         *
         * However, since the sorting criteria for the models can be modified manually
         * and it's not always desired to sort automatically, you can call this method
         * to re-sort the data in the collection via the bubble-up eventing:
         *
         * mycollection.bind('change:sort_order', mycollection.sort.bind(mycollection))
         */
        sort: function(options)
        {
            if(!this.sortfn) return false;

            this._models.sort(this.sortfn);
            this.fire_event('reset', options, this, options);
        },

        /**
         * given the current for function and a model passecd in, determine the index
         * the model should exist at in the colleciton's model list.
         */
        sort_index: function(model)
        {
            if(!this.sortfn) return false;

            if(this._models.length == 0) return 0;

            for(var i = 0; i < this._models.length; i++)
            {
                if(this.sortfn(this._models[i], model) > 0)
                {
                    return i;
                }
            }
            var index = this._models.indexOf(model);
            if(index == this._models.length - 1) return index;
            return this._models.length;
        },

        /**
         * overridable function called when the collection is synced with the server
         */
        parse: function(data)
        {
            return data;
        },

        /**
         * convenience function to loop over collection's models
         */
        each: function(cb, bind)
        {
            if(bind)
            {
                this.models().each(cb, bind);
            }
            else
            {
                this.models().each(cb);
            }
        },

        /**
         * convenience function to execute a function on a collection's models
         */
        map: function(cb, bind)
        {
            if(bind)
            {
                return this.models().map(cb, bind);
            }
            else
            {
                return this.models().map(cb);
            }
        },

        /**
         * Find the first model that satisfies the callback. An optional sort function
         * can be passed in to order the results of the find, which uses the usual
         * fn(a,b){return (-1|0|1);} syntax.
         */
        find: function(callback, sortfn)
        {
            if(sortfn)
            {
                var models	=	shallow_array_clone(this.models()).sort(sortfn);
            }
            else
            {
                var models	=	this.models();
            }

            for(var i = 0; i < models.length; i++)
            {
                var rec	=	models[i];
                if(callback(rec))
                {
                    return rec;
                }
            }
            return false;
        },

        /**
         * given a callback, returns whether or not at least one of the models
         * satisfies that callback.
         */
        exists: function(callback)
        {
            return this.models().some(callback);
        },

        /**
         * convenience function to find a model by id
         */
        find_by_id: function(id, options)
        {
            options || (options = {});
            return this.find(function(model) {
                if(model.id(options.strict) == id)
                {
                    return true;
                }
                if(options.allow_cid && model.cid() == id)
                {
                    return true;
                }
            });
        },

        /**
         * convenience function to find a model by cid
         */
        find_by_cid: function(cid)
        {
            return this.find(function(model) {
                if(model.cid() == cid)
                {
                    return true;
                }
            });
        },

        /**
         * get the index of an item in the list of models. useful for sorting items.
         */
        index_of: function(model_or_id)
        {
            var id	=	model_or_id.__composer_type == 'model' ? model_or_id.id() : model_or_id;
            for(var i = 0; i < this._models.length; i++)
            {
                if(this._models[i].id() == id)
                {
                    return i;
                }
            }
            return false;
        },

        /**
         * Filter this collection's models by the given callback. Works just
         * like Array.filter in JS.
         */
        filter: function(callback, bind)
        {
            if(bind)
            {
                return this._models.filter(callback, bind);
            }
            else
            {
                return this._models.filter(callback);
            }
        },

        /**
         * query the models in the collection with a callback and return ALL that
         * match. takes either a function OR a key-value object for matching:
         *
         * mycol.select(function(data) {
		 *		if(data.get('name') == 'andrew' && data.get('age') == 24)
		 *		{
		 *			return true
		 *		}
		 * });
         *
         * is the same as:
         *
         * mycol.select({
		 *		name: andrew,
		 *		age: 24
		 * });
         *
         * in other words, it's a very simple version of MongoDB's selection syntax,
         * but with a lot less functionality. the only selection is direct value
         * matching. still nice, though.
         */
        select: function(selector)
        {
            if(typeof(selector) == 'object')
            {
                var qry	=	[];
                for(var key in selector)
                {
                    var val	=	selector[key];
                    if(typeof(val) == 'string') val = '"'+val+'"';
                    qry.push('data.get("'+key+'") == ' + val);
                }
                var fnstr	=	'if(' + qry.join('&&') + ') { return true; }';
                selector	=	new Function('data', fnstr);
            }
            return this._models.filter(selector);
        },

        /**
         *	Convenience functon to just select one model from a collection
         */
        select_one: function(selector)
        {
            var result = this.select(selector);

            if (result.length)
                return result[0];

            return null;
        },

        /**
         * return the first model in the collection. if n is specified, return the
         * first n models.
         */
        first: function(n)
        {
            var models	=	this.models();
            return (typeof(n) != 'undefined' && parseInt(n) != 0) ? models.slice(0, n) : models[0];
        },

        /**
         * returns the last model in the collection. if n is specified, returns the
         * last n models.
         */
        last: function(n)
        {
            var models	=	this.models();
            return (typeof(n) != 'undefined' && parseInt(n) != 0) ? models.slice(models.length - n) : models[models.length - 1];
        },

        /**
         * returns the model at the specified index. if there is no model there,
         * return false
         */
        at: function(n)
        {
            var model	=	this._models[n];
            return (model || false);
        },

        /**
         * sync the collection with the server.
         */
        fetch: function(options)
        {
            options || (options = {});

            var success	=	options.success;
            options.success	=	function(res)
            {
                this.reset(this.parse(res), options);
                if(success) success(this, res);
            }.bind(this);
            options.error	=	wrap_error(options.error ? options.error.bind(this) : null, this, options).bind(this);
            return (this.sync || Composer.sync).call(this, 'read', this, options);
        },

        /**
         * simple wrapper to get the collection's url
         */
        get_url: function()
        {
            return this.url;
        },

        /**
         * remove all ties between this colleciton and a model
         */
        _remove_reference: function(model)
        {
            model.collections.erase(this);

            // don't listen to this model anymore
            model.unbind('all', 'collection:'+this.cid()+':listen:model:all');
        },

        /**
         * bound to every model's "all" event, propagates or reacts to certain events.
         */
        _model_event: function(ev, model, collections, options)
        {
            if((ev == 'add' || ev == 'remove') && !collections.contains(this)) return;
            if(ev == 'destroy')
            {
                this.remove(model, options);
            }
            this.trigger.apply(this, arguments);
        }
    });
    Collection.extend	=	function(obj, base)
    {
        obj || (obj = {});
        base || (base = this);
        obj	=	Base.extend.call(this, obj, base);
        return this._do_extend(obj, base);
    };


    /**
     * The controller class sits between views and your models/collections.
     * Controllers bind events to your data objects and update views when the data
     * changes. Controllers are also responsible for rendering views.
     */
    var Controller	=	new Class({
        Extends: Base,
        Implements: [Events],

        /**
         * Track this object's type. Useful for debugging, mainly
         */
        __composer_type: 'controller',

        // the DOM element to tie this controller to (a container element)
        el: false,

        // if this is set to a DOM *selector*, then this.el will be ignored and
        // instantiated as a new Element(this.tag), then injected into the element
        // referened by the this.inject selector. this allows you to inject
        // controllers into the DOM
        inject: false,

        // don't worry about it
        event_splitter:	/^(\w+)\s*(.*)$/,

        // if tihs.el is empty, create a new element of this type as the container
        tag: 'div',

        // elements to assign to this controller
        elements: {},

        // events to bind to this controllers sub-items.
        events: {},

        /**
         * CTOR. instantiate main container element (this.el), setup events and
         * elements, and call init()
         */
        initialize: function(params, options)
        {
            options || (options = {});

            for(var x in params)
            {
                this[x]	=	params[x];
            }

            // assign the unique app id
            this._cid	=	Composer.cid();

            // make sure we have an el
            this._ensure_el();

            if(this.inject)
            {
                this.attach(options);
            }

            if(this.className)
            {
                this.el.addClass(this.className);
            }

            this.refresh_elements();
            this.delegate_events();

            this.init();
        },

        /**
         * override
         */
        init: function() {},		// lol

        /**
         * override. not OFFICIALLY used by the framework, but it's good to use it AND
         * return "this" when you're done with it.
         */
        render: function() { return this; },

        /**
         * replace this.el's html with the given test, also refresh the controllers
         * elements.
         */
        html: function(obj)
        {
            if(!this.el)
            {
                this._ensure_el();
            }

            if(typeOf(obj) == 'element')
            {
                this.el.set('html', '');
                obj.inject(this.el);
            }
            else
            {
                this.el.set('html', obj);
            }
            this.refresh_elements();
        },

        /**
         * injects to controller's element into the DOM.
         */
        attach: function(options)
        {
            options || (options = {});

            // make sure we have an el
            this._ensure_el();

            var container	=	typeof(this.inject) == 'string' ?
                document.getElement(this.inject):
                $(this.inject);
            if(!container)
            {
                return false;
            }

            if(options.clean_injection) container.set('html', '');
            this.el.inject(container);
        },

        /**
         * make sure el is defined as an HTML element
         */
        _ensure_el: function() {
            // allow this.el to be a string selector (selecting a single element) instad
            // of a DOM object. this allows the defining of a controller before the DOM
            // element the selector refers to exists, but this.el will be updated upon
            // instantiation of the controller (presumably when the DOM object DOES
            // exist).
            if(typeof(this.el) == 'string')
            {
                this.el = document.getElement(this.el);
            }

            // if this.el is null (bad selector or no item given), create a new DOM
            // object from this.tag
            this.el || (this.el = new Element(this.tag));
        },

        /**
         * remove the controller from the DOM and trigger its release event
         */
        release: function(options)
        {
            options || (options = {});
            if(this.el && this.el.destroy)
            {
                if(options.dispose)
                {
                    this.el.dispose();
                }
                else
                {
                    this.el.destroy();
                }
            }

            this.el	=	false;
            this.fire_event('release', options, this);

            // remove all events from controller
            if(!options.keep_events) this.unbind();
        },

        /**
         * replace this controller's container element (this.el) with another element.
         * also refreshes the events/elements associated with the controller
         */
        replace: function(element)
        {
            if(this.el.parentNode)
            {
                element.replaces(this.el);
            }
            this.el	=	element;

            this.refresh_elements();
            this.delegate_events();

            return element;
        },

        /**
         * set up the events (by delegation) to this controller (events are stored
         * under this.events).
         */
        delegate_events: function()
        {
            // setup the events given
            for(var ev in this.events)
            {
                var fn			=	this[this.events[ev]];
                if(typeof(fn) != 'function')
                {
                    // easy, easy, whoa, you gotta calm down there, chuck
                    continue;
                }
                fn	=	fn.bind(this);

                var match		=	ev.match(this.event_splitter);
                var evname		=	match[1].trim();
                var selector	=	match[2].trim();

                if(selector == '')
                {
                    this.el.removeEvent(evname, fn);
                    this.el.addEvent(evname, fn);
                }
                else
                {
                    this.el.addEvent(evname+':relay('+selector+')', fn);
                }
            }
        },

        /**
         * re-init the elements into the scope of the controller (uses this.elements)
         */
        refresh_elements: function()
        {
            // setup given elements as instance variables
            for(var selector in this.elements)
            {
                var iname	=	this.elements[selector];
                this[iname]	=	this.el.getElement(selector);
            }
        }
    });
    Controller.extend	=	function(obj, base)
    {
        obj || (obj = {});
        base || (base = this);
        obj	=	Base.extend.call(this, obj, base);

        // have to do some annoying trickery here to get the actual events/elements
        var base_events		=	base.events || {};
        var base_elements	=	base.elements || {};

        // extend the base object's events and elements
        // NOTE: the first {} in the object is there because the merge is destructive
        //       to the first argument (we don't want that).
        obj.events		=	Object.merge({}, base_events, obj.events);
        obj.elements	=	Object.merge({}, base_elements, obj.elements);

        var cls			=	this._do_extend(obj, base);
        cls.events		=	obj.events;
        cls.elements	=	obj.elements;
        return cls;
    };


    /**
     * The Router class is a utility that helps in the routing of requests to
     * certain parts of your application. It works either by history.pushState
     * (which is highly recommended) or by falling back onto hashbang url
     * support (not recommended).
     *
     * Note that if you do want to use pushState, you have to include History.js
     * before instantiating the Router class:
     *
     *   https://github.com/balupton/History.js/
     */
    var Router	=	new Class({
        Implements: [Options, Events],

        /**
         * Track this object's type. Useful for debugging, mainly
         */
        __composer_type: 'router',

        last_path:	false,
        _last_url:	null,
        routes:		{},

        options: {
            redirect_initial: true,
            suppress_initial_route: false,
            enable_cb: function() { return true; },
            on_failure: function() {},
            hash_fallback: true,
            process_querystring: false
        },

        /**
         * initialize the routes your app uses. this is really the only public
         * function that exists in the router, since it takes care of everything for
         * you after instantiation.
         */
        initialize: function(routes, options)
        {
            this.setOptions(options);

            this.routes	=	routes;
            this.register_callback(this._do_route.bind(this));

            // in case History.js isn't loaded
            if(!global.History) global.History = {enabled: false};

            if(History.enabled)
            {
                // bind our pushstate event
                History.Adapter.bind(global, 'statechange', this.state_change.bind(this));

                if(!this.options.suppress_initial_route)
                {
                    // run the initial route
                    History.Adapter.trigger(global, 'statechange', [global.location.pathname]);
                }
            }
            else if(this.options.hash_fallback)
            {
                // load the initial hash value
                var path	=	window.location.pathname;
                var hash	=	path == '' || path == '/' ? this.cur_path() : path;

                // if redirect_initial is true, then whatever page a user lands on, redirect
                // them to the hash version, ie
                //
                // gonorrhea.com/users/display/42
                // becomes:
                // gonorrhea.com/#!/users/display/42
                //
                // the routing system will pick this new hash up after the redirect and route
                // it normally
                if(this.options.redirect_initial && !(hash == '/' || hash == ''))
                {
                    global.location	=	'/#!' + hash;
                }

                // SUCK ON THAT, HISTORY.JS!!!!
                // NOTE: this fixes a hashchange double-firing in IE, which
                // causes some terrible, horrible, no-good, very bad issues in
                // more complex controllers.
                delete Element.NativeEvents.hashchange;

                // set up the hashchange event
                global.addEvent('hashchange', this.state_change.bind(this));

                if(!this.options.suppress_initial_route)
                {
                    // run the initial route
                    global.fireEvent('hashchange', [hash]);
                }
            }
            else if(!this.options.suppress_initial_route)
            {
                this._do_route(new String(global.location.pathname).toString());
            }
        },

        /**
         * add a callback that runs whenever the router "routes"
         */
        register_callback: function(cb, name)
        {
            name || (name = null);
            return this.bind('route', cb, name);
        },

        /**
         * remove a router callback
         */
        unregister_callback: function(cb)
        {
            return this.unbind('route', cb);
        },

        /**
         * get the current url path
         */
        cur_path: function()
        {
            if(!History.enabled)
            {
                return '/' + new String(global.location.hash).toString().replace(/^[#!\/]+/, '');
            }
            else
            {
                return new String(global.location.pathname+global.location.search).toString();
            }
        },

        /**
         * Get a value (by key) out of the current query string
         */
        get_param: function(key)
        {
            key			=	key.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regex	=	new RegExp("[\\?&]" + key + "=([^&#]*)");
            var results	=	regex.exec(location.search);
            return results == null ? null : decodeURIComponent(results[1].replace(/\+/g, " "));
        },

        /**
         * wrapper around the routing functionality. basically, instead of doing a
         *   window.location = '/my/route';
         * you can do
         *   router.route('/my/route');
         *
         * Note that the latter isn't necessary, but it provides a useful abstraction.
         */
        route: function(url, options)
        {
            url || (url = this.cur_path());
            options || (options = {});
            options.state || (options.state = {});

            var href	=	'/' + url.trim().replace(/^[a-z]+:\/\/.*?\//, '').replace(/^[#!\/]+/, '');
            var old		=	this.cur_path();
            if(old == href)
            {
                if(History.enabled)
                {
                    History.Adapter.trigger(global, 'statechange', [href, true]);
                }
                else if(this.options.hash_fallback)
                {
                    global.fireEvent('hashchange', [href, true]);
                }
            }
            else
            {
                if(History.enabled)
                {
                    if(options.replace_state)
                    {
                        History.replaceState(options.state, '', href);
                    }
                    else
                    {
                        History.pushState(options.state, '', href);
                    }
                }
                else if(this.options.hash_fallback)
                {
                    global.location	=	'/#!'+href;
                }
                else
                {
                    global.location	=	href;
                }
            }
        },

        /**
         * given a url, route it within the given routes the router was instantiated
         * with. if none fit, do nothing =]
         *
         * *internal only* =]
         */
        _do_route: function(url, routes)
        {
            if(!this.options.enable_cb(url))
            {
                return false;
            }

            // allow passing in of routes manually, otherwise default to internal route table
            routes || (routes = this.routes);

            var routematch	=	this.find_matching_route(url, routes);
            if(!routematch) return this.options.on_failure({url: url, route: false, handler_exists: false, action_exists: false});

            var route	=	routematch.route;
            var match	=	routematch.args;

            var obj	=	route[0];
            var action	=	route[1];
            if (typeof(obj) != 'object') {
                if(!global[obj]) return this.options.on_failure({url: url, route: route, handler_exists: false, action_exists: false});
                var obj		=	global[obj];
            }
            if(!obj[action] || typeof(obj[action]) != 'function') return this.options.on_failure({url: url, route: route, handler_exists: true, action_exists: false});
            var args	=	match;
            args.shift();
            this._last_url	=	url;	// save the last successfully routed url
            obj[action].apply(obj, args);
        },

        /**
         * Stateless function for finding the best matching route for a URL and given
         * set of routes.
         */
        find_matching_route: function(url, routes)
        {
            var url		=	'/' + url.replace(/^!?\//g, '');
            var route	=	false;
            var match	=	[];
            var regex	=	null;
            for(var re in routes)
            {
                regex	=	new RegExp('^' + re.replace(/\//g, '\\\/') + '$');
                match	=	regex.exec(url);
                if(match)
                {
                    route	=	routes[re];
                    break;
                }
            }
            if(!route) return false;

            return {route: route, args: match, regex: regex};
        },

        /**
         * stupid function, not worth the space it takes up. oh well.
         */
        setup_routes: function(routes)
        {
            this.routes	=	routes;
        },

        /**
         * attached to the pushState event. runs all the callback assigned with
         * register_callback().
         */
        state_change: function(path, force)
        {
            if(path && path.stop != undefined) path = false;
            path || (path = this.cur_path());
            force	=	!!force;

            // check if we are routing to the same exact page. if we are, return
            // (unless we force the route)
            if(this.last_path == path && !force)
            {
                // no need to reload
                return false;
            }

            this.last_path	=	path;

            // remove querystring from the url if we have set the Router to
            // ignore it. Note that this happens after the same-page check since
            // we still want to take QS into account when comparing URLs.
            if(!this.options.process_querystring) path = path.replace(/\?.*/, '');

            // allow URL to be modifyable within the "preroute" callback, ie
            // mimick mutable strings, kind of. this affords an opportunity for
            // a preroute callback to "rewrite" the URL such that the address
            // bar stays the same, but the actual route loaded is for the
            // new, rewritten URL.
            path			=	new String(path);
            path.rewrite	=	function(str) {
                this._string_value	=	str;
            }.bind(path);
            path.rewrite(null);
            this.trigger('preroute', path);
            // grab rewritten url, if any
            if(path._string_value) path = path._string_value;

            this.trigger('route', path.toString());
        },

        /**
         * Returns the full, last successfully routed URL that the Router found
         * a match for.
         */
        last_url: function()
        {
            return this._last_url;
        },

        /**
         * Bind the pushState to any links that don't have the options.exclude_class
         * className in them.
         */
        bind_links: function(options)
        {
            options || (options = {});

            // build a selector that work for YOU.
            if(options.selector)
            {
                // specific selector......specified. use it.
                var selector	=	options.selector;
            }
            else
            {
                // create a CUSTOM selector tailored to your INDIVIDUAL needs.
                if(options.exclude_class)
                {
                    // exclusion classname exists, make sure to not listen to <a>
                    // tags with that class
                    var selector	=	'a:not([class~="'+options.exclude_class+'"])';
                }
                else
                {
                    // bind all <a>'s
                    var selector	=	'a';
                }
            }

            // convenience function, recursively searches up the DOM tree until
            // it finds an element with tagname ==  tag.
            var next_tag_up = function(tag, element)
            {
                return element.get('tag') == tag ? element : next_tag_up(tag, element.getParent());
            };

            // bind our heroic pushState to the <a> tags we specified. this
            // hopefully be that LAST event called for any <a> tag because it's
            // so high up the DOM chain. this means if a composer event wants to
            // override this action, it can just call event.stop().
            $(document.body).addEvent('click:relay('+selector+')', function(e) {
                if(e.control || e.shift || e.alt) return;

                var a		=	next_tag_up('a', e.target);
                var button	=	typeof(e.button) != 'undefined' ? e.button : e.event.button;

                // don't trap links that are meant to open new windows, and don't
                // trap middle mouse clicks (or anything more than left click)
                if(a.target == '_blank' || button > 0) return;

                var curhost		=	new String(global.location).replace(/[a-z]+:\/\/(.*?)\/.*/i, '$1');
                var linkhost	=	a.href.match(/^[a-z]+:\/\//) ? a.href.replace(/[a-z]+:\/\/(.*?)\/.*/i, '$1') : curhost;
                if(
                    curhost != linkhost ||
                        (typeof(options.do_state_change) == 'function' && !options.do_state_change(a))
                    )
                {
                    return;
                }

                if(e) e.stop();

                if(History.enabled)
                {
                    var href	=	a.href.replace(/^[a-z]+:\/\/.*?\//, '').replace(/^[#!\/]+/, '');
                    if(options.filter_trailing_slash) href = href.replace(/\/$/, '');
                    href	=	'/'+href;

                    History.pushState(options.global_state, '', href);
                    return false;
                }
                else
                {
                    var href	=	a.href.replace(/^[a-z]+:\/\/.*?\//, '');
                    if(options.filter_trailing_slash) href = href.replace(/\/$/, '');
                    href	=	'/#!/'+href;

                    global.location	=	href;
                }
            });
        }
    });

    /*
     ---
     description: Added the onhashchange event

     license: MIT-style

     authors:
     - sdf1981cgn
     - Greggory Hernandez

     requires:
     - core/1.2.4: '*'

     provides: [Element.Events.hashchange]

     ...
     */
    Element.Events.hashchange = {
        onAdd: function() {
            var hash = self.location.hash;

            var hashchange = function(){
                if (hash == self.location.hash) return;
                else hash = self.location.hash;

                var value = (hash.indexOf('#') == 0 ? hash.substr(1) : hash);
                global.fireEvent('hashchange', value);
                document.fireEvent('hashchange', value);
            };

            if ("onhashchange" in global && !(Browser.ie && Browser.version < 8)){
                global.onhashchange = hashchange;
            } else {
                hashchange.periodical(50);
            }
        }
    };

    // wraps error callbacks for syncing functions
    var wrap_error	=	function(callback, model, options)
    {
        return function(resp)
        {
            if(callback)
            {
                callback(model, resp, options);
            }
            else
            {
                this.fire_event('error', options, model, resp, options);
            }
        };
    };

    // do a shallow clone of an array
    var shallow_array_clone	=	function(from)
    {
        return from.slice(0);
    };

    // Composer equality function. It replaces _.eq, which wasn't able to tell
    // non-equality between {key1: 3} and {key1: 3, key2: 5} (said they were
    // equal). This was causing some events to not fire in Composer, prompting
    // me to write our own equality function. It might have just been the release
    // we were using, but I'm too lazy to go in and re-update _.eq to not have
    // other _ dependencies. Writing our own is a bit easier.
    //
    // This is a work in progress.
    var eq	=	function(a, b)
    {
        if ( a === b ) return true;
        if(a instanceof Function) return false;
        if(typeOf(a) != typeOf(b)) return false;
        if(a instanceof Array)
        {
            if(a.length != b.length) return false;
            // TODO: check if array indexes are always sequential
            for(var i = 0, n = a.length; i < n; i++)
            {
                if(!b.hasOwnProperty(i)) return false;
                if(!eq(a[i], b[i])) return false;
            }
        }
        else if(a instanceof Object)
        {
            if ( a.constructor !== b.constructor ) return false;
            for( var p in b )
            {
                if( b.hasOwnProperty(p) && ! a.hasOwnProperty(p) ) return false;
            }
            for( var p in a )
            {
                if ( ! a.hasOwnProperty( p ) ) continue;
                if ( ! b.hasOwnProperty( p ) ) return false;
                if ( a[ p ] === b[ p ] ) continue;
                if ( typeof( a[ p ] ) !== "object" ) return false;
                if ( ! eq( a[ p ],  b[ p ] ) ) return false;
            }
        }
        else if(a != b)
        {
            return false;
        }
        return true;
    };
    Composer.eq	=	eq;


    /**
     * Provides wrapping of extending via function (as opposed to
     * Extend: Composer.Model) for Composer objects (and objects that extend
     * them).
     */
    Composer._export	=	function(exports)
    {
        exports.each(function(name) {
            // TODO: eliminate eval here
            name		=	name.replace(/[^a-z]/gi, '');	// make eval not so bad for now
            var _do_try	=	function(classname) { return 'try{'+classname+'}catch(e){false}'; };
            var cls		=	eval(_do_try(name)) || eval(_do_try('Composer.'+name));
            if(!cls) return false;

            // This function creates a new class with the given attributes that
            // extends the given base. If no base is given, it uses the object's
            // default constructor.
            //
            // The resulting class is also assigned extend/_do_extend functions
            // (which are added to the class, NOT insteances of the class).
            var do_extend	=	function(obj, base)
            {
                var classobj		=	Object.merge({Extends: base}, obj);
                var newclass		=	new Class(classobj);
                newclass.extend		=	base.extend;
                newclass._do_extend	=	do_extend;
                return newclass;
            };
            cls._do_extend	=	do_extend;
            Composer[name]	=	cls;
        }, this);
    }.bind(this);

    Composer._export(['Model', 'Collection', 'Controller']);

    Composer.Base	=	Base;
    Composer.Events	=	Events;
    Composer.Router	=	Router;

    global.Composer	=	Composer;
})();
// additions to the composer.js library we are using

// Composer.eq will always return true on 2 different date objects. use the underscore version of equals function as it is superior.
Composer.eq = _.isEqual;
Locale.define('en-US', 'Number', {
	
	decimal: '.',
	group: '',
	
	currency: {
		prefix: '$',
		decimals: 0
	}
	
});

Locale.inherit('en-GB', 'en-US');
Locale.define('en-GB', 'Number', {
	
	currency: {
		prefix: '£',
		decimals: 0
	}
	
});

Locale.define('en-US', 'Date', {
	
	placeholder: 'mm/dd/yyyy'

});

Locale.define('en-GB', 'Date', {

	placeholder: 'dd/mm/yyyy'

}).inherit('en-US', 'Date');

/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/
var Base64 = {
	
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
	
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
		
		input = Base64._utf8_encode(input);
		
		while (i < input.length) {
			
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
			
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
			
			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
			
		}
		
		return output;
	},
	
	// public method for decoding
	decode : function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
		
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
		
		while (i < input.length) {
			
			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));
 
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
			
			output = output + String.fromCharCode(chr1);
			
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
			
		}
		
		output = Base64._utf8_decode(output);
		return output;
	},
	
	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
 		
		for (var n = 0; n < string.length; n++) {
 			
			var c = string.charCodeAt(n);
 			
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if ((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			} else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			
		}
		
		return utftext;
	},
	
	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
		
		while ( i < utftext.length ) {
			
			c = utftext.charCodeAt(i);
			
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			} else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			} else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
 			
		}
		
		return string;
	}

};

String.implement({
	
	validateAsEmail: function () {   
		var matches = this.match(/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
		return (matches ? true : false);
	},
	
	// @TODO: Check if Date.parse() can handle this natively across browsers
	toDateObject: function () {
        var year;
        var month;
        var day;

        // auto-handle if the format is something like "2010-12-25"
        if (this.substr(4,1) == "-") {
            year = this.substr(0,4);
            month = this.substr(5,2);
            day = this.substr(8,2);
        } else {
            // format: "20101225"
            year = this.substr(0, 4);
            month = this.substr(4, 2);
            day = this.substr(6, 2)
        }

        var date = new Date(year, month - 1, day);

        // @TODO: confirm if isValid() is reliable (it's an undocumented method)
        return (date.isValid()) ? date : null;
	},
	
	// Strip out dollar/minus signs, commas and other non-numeric characters
	toDigits: function () {
		return this.replace(/[\D]/g, '');
	},
	
	toEscapedQuery: function () {
		return encodeURIComponent(this).replace(/\%20/g, '+');
	},
	
	toUnescapedQuery: function () {
		return decodeURIComponent(this).replace(/\+/g, ' ');
	},
	
	encode64: function () {
		return Base64.encode(this);
	},
	
	decode64: function () {
		return Base64.decode(this);
	},
	
	toElement: function() { 
		return new Element('div', {html:this}).getFirst(); 
	},

	toCSS: function(){
		return this.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');
	}
	
});

(function () {
	// Remove everything except for numbers and the decimal character
	// @TODO: make this really locale-sensitive (some countries uses commas as decimal separators)
	var regex = /[^0-9\.]/g;
	
	String.implement({
		toCurrencyValue: function () {
			return this.replace(regex, '').toFloat();
		}
	})
}());

(function(){
	var step = 0, code = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65];

	Element.Events.konami = {
	  base: 'keydown',
	  condition: function(event){
	    step = (event.code == code[step]) ? step + 1 : 0; 
	    if (step >= code.length) {
	      step = 0;
	      return true;
	    } else {
	      return false;
	    }
	  }
	};
})();

(function(){
	var step = 0, code = [68, 83, 67, 72, 87, 65, 82, 84, 90];

	Element.Events.awesomeness = {
	  base: 'keydown',
	  condition: function(event){
	    step = (event.code == code[step]) ? step + 1 : 0; 
	    if (step >= code.length) {
	      step = 0;
	      return true;
	    } else {
	      return false;
	    }
	  }
	};
})();

Array.implement({
	
	// Converts a flat array of strings into a sentence in the format of
	// "a, ..., x, y and z" or "y and z" or just "z"
	toSentence: function () {
		var length = this.length;
		if (length > 1) {
			var sentence = this[length - 2] + ' and ' + this[length - 1];
			
			if (length > 2) {
				sentence = this.slice(0, -2).join(', ') + ', ' + sentence;
			}
			
			return sentence;
		} else {
			return this[0] || '';
		}
	},

	// Jacked from https://github.com/dArignac/mootools_array_more
	intersect: function (anArray) {
		var copy = this.slice();
		this.each(function (el) {
			if (anArray.indexOf(el) === -1) {
				copy.splice(copy.indexOf(el), 1);
			}
		}, this);
		return copy;
	}
	
});

Date.implement({
	
	toBookingDateString: function () {
		return this.format('%Y%m%d');
	},
	
	normalize: function (resolution) {
		resolution = resolution || 'day';
		switch (resolution) {
			case 'day': return this.clearTime();
			case 'month': return this.set('date', 1).clearTime();
			case 'year': return this.set('date', 1).month('month', 1).clearTime();
		}
	}
	
});

// Run capability checks just once
(function () {
	var inputEl = document.createElement('input');
	var features = {};
	['placeholder'].each(function (attribute) {
		features[attribute] = !!(attribute in inputEl);
	});
	
	Element.implement({
		supports: function (attribute) {
			return features[attribute];
		}
	});
})();


Element.Properties.value = {
	get: function () {
		return (this.hasClass('placeholder')) ? '' : this.getProperty('value');
	},
	
	set: function (value) {
		// @TODO: The placeholder class will stick incorrectly if the value
		// is indeed the same as the placeholder
		var placeholder = this.get('placeholder');
		if (placeholder && value !== placeholder) {
			this.removeClass('placeholder');
		}
		return this.setProperty('value', value);
	}
};

Element.Properties.disabled = {
	set: function (value) {
		if (value) {
			this.addClass('disabled');
		} else {
			this.removeClass('disabled');
		}
		return this.setProperty('disabled', !!value);
	}
};

Element.Properties.defaultValue = {
	get: function () {
		switch (this.get('type')) {
			case 'select-one':
				var optionEls = this.getElements('option');
				for (var i=0,len=optionEls.length; i<len; i++) {
					if (optionEls[i].defaultSelected) {
						return optionEls[i].getProperty('value');
					}
				}
				return null;
				
			case 'select-multiple':
				// @TODO: 
				throw new Exception('Element.defaultValue isn’t implemented on select-multiple yet.')
				break;
				
			case 'checkbox':
			case 'radio':
				return this.defaultChecked;
			
			default:
				return this.defaultValue;
		}
	}
}


Element.implement({
	
	setPlaceholder: function (placeholderText) {
		// Use text if passed in, use "placeholder" attribute otherwise
		if (placeholderText) {
			this.set('placeholder', placeholderText);
		} else {
			placeholderText = this.get('placeholder');
		}
		
		if (!placeholderText) {
			return this;
		}
		
		// @TODO: Consider Modernizr
		if (!this.supports('placeholder')) {
			
			// Don't insert placeholder if some other value is already present
			var textFieldValue = this.get('value');
			if (textFieldValue == '' || textFieldValue == placeholderText) {
				this.addClass('placeholder').set('value', placeholderText);
			}
			
			// Create a copy of the password field but with type=text
			var isPassword = (this.get('type') == 'password');
			if (isPassword) {
				var showPasswordPlaceholderEl = function () {
					this.hide();
					passwordPlaceholderEl.show();
				}.bind(this);
				var hidePasswordPlaceholderEl = function () {
					passwordPlaceholderEl.hide();
					this.show().focus();
				}.bind(this)
				
				this.hide();
				var passwordPlaceholderEl = new Element('input', {
					// Copy relevant attributes
					'type': 'text',
					'class': this.get('class'),
					'value': placeholderText
				}).addClass('placeholder').addEvents({
					focus: hidePasswordPlaceholderEl
				}).inject(this, 'after');
				
				this.store('passwordPlaceholderEl', passwordPlaceholderEl);
				
			}
			
			this.addEvents({
				'blur': function () {
					if (this.get('value') == '') {
						if (isPassword) {
							showPasswordPlaceholderEl();
						}
						this.addClass('placeholder').set('value', placeholderText);
					}
				},
				'focus': function () {
					if (this.get('value') == '') {
						this.removeClass('placeholder').set('value', '');
					}
				}
			});
		}
		
		return this;
	},
	
	// Adapted from Element.toQueryString()
	toQueryObject: function(){
		var queryObject = {};
		this.getElements('input, select, textarea').each(function(el) {
			var type = el.type;
			if (!el.name || el.disabled || type == 'submit' || type == 'reset' || type == 'file' || type == 'image') return;
			
			var value = (el.get('tag') == 'select') ? el.getSelected().map(function(opt){
				// IE
				return document.id(opt).get('value');
			}) : ((type == 'radio' || type == 'checkbox') && !el.checked) ? null : el.get('value');
			
			Array.from(value).each(function(val){
				if (typeof val != 'undefined') queryObject[el.name] = val;
			});
		});
		return queryObject;
	},
	
	reset: function () {
		switch (this.get('type')) {
			case 'radio':
			case 'checkbox':
				return this.set('checked', this.get('defaultValue'));
			default:
				return this.set('value', this.get('defaultValue'));
		}
	},

	getOffsetFromViewportTop: function(){
		var offset = this.getPosition().y,
			curPos = window.getScroll().y,
			fromTop = offset - curPos;

		return fromTop;

	},

	getOffsetFromViewportBottom: function(){
		var offsetTop = this.getOffsetFromViewportTop(),
			wHeight = window.getSize().y,
			offsetBottom = wHeight - offsetTop - this.getSize().y;

		return offsetBottom;
	},
	
	// Enable/disable button
	// @DEPRECATED
	enable: function () {
		return this.set('disabled', false).removeClass('disabled');
	},
	
	// @DEPRECATED
	disable: function () {
		return this.set('disabled', true).addClass('disabled');
	},
	
	getOuterHtml: function () {
		return new Element('div').adopt(this.clone()).get('html');
	}
	
});

// Execute fbReady event handlers immediately if the event is added
// after FB.init() is done, ala domready.
Element.Events.fbReady = {
	onAdd: function (fn) {
		if (window.FB) {
			fn.call(this);
		}
	}
};

/*
---

script: Elements.From.js

name: Elements.From

description: Returns a collection of elements from a string of html.

license: MIT-style license

authors:
  - Aaron Newton

requires:
  - Core/String
  - Core/Element
  - /MooTools.More

provides: [Elements.from, Elements.From]

...
*/

Elements.from = function(text, excludeScripts){
	if (excludeScripts || excludeScripts == null) text = text.stripScripts();

	var container, match = text.match(/^\s*<(t[dhr]|tbody|tfoot|thead)/i);

	if (match){
		container = new Element('table');
		var tag = match[1].toLowerCase();
		if (['td', 'th', 'tr'].contains(tag)){
			container = new Element('tbody').inject(container);
			if (tag != 'tr') container = new Element('tr').inject(container);
		}
	}

	return (container || new Element('div')).set('html', text).getChildren();
};

// @TODO:
// Once https://github.com/mootools/mootools-more/issues/1048 gets resolved
// and merged into a MooTools release, this can go away.
Event.definePseudo('throttle', function(split, fn, args){
	var interval = split.value;

	function execute() {
		fn._lastExecuted = new Date().valueOf();
		fn.apply(this, args);
	}

	clearTimeout(fn._timer);

	fn._elapsed = new Date().valueOf() - fn._lastExecuted;
	if (fn._elapsed > interval) {
		execute();
	} else {
		fn._timer = setTimeout(execute, interval - fn._elapsed);
	}
});

/*
 * Optionally to retry a request if the request fails (as determined by isSuccess()).
 * 
 * To use this, pass in retries > 0 as an option.
 *
 * NOTE: This doesn't work properly if Firebug is turned on.
 *
 */
Request = Class.refactor(Request, {
	
	options: {
		retries: 0
	},
	
	initialize: function (options) {
		this.previous(options);
		this.attemptsLeft = this.options.retries;
		
		this.addEvent('complete', function () {
			this.attemptsLeft = this.options.retries;
		}.bind(this));
	},
	
	onFailure: function () {
		if (this.attemptsLeft > 0) {
			this.attemptsLeft--;
			this.resend();
		} else {
			this.previous(arguments);
		}
	},
	
	send: function (options) {
		this.sendOptions = options;
		return this.previous(options);
	},
	
	resend: function () {
		this.fireEvent('retry');
		_gaq.push(['_trackEvent', 'Retry', 'Request', this.options.url]);

		return this.cancel().send(this.sendOptions);
	}
	
});

/*
 * Extending the mootools Browser checker to differentiate between iPhone and iPad
 */

Browser.Platform.iPad = (function(){
	var ua = navigator.userAgent.toLowerCase();

	return ua.match(/ipad/) ? true : false;
})();

Browser.Platform.iPhone = (function(){
	var ua = navigator.userAgent.toLowerCase();

	return ua.match(/iphone|ipod/) ? true : false;
})();

/* Setting the correct Parser format for dates */

Date.defineParser(Locale.get('Date.shortDate'));




(function() {

    var rot13 = function(str) {
        return str.replace(/[a-zA-Z]/g, function(c) {
            return String.fromCharCode((c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
        });
    };

    window.DynamicCropperLinkGenerator = new Class({

        initialize: function(){

        },

        generateLink: function(url, w, h){

            var size = {};
            if (w) {
                size.width = w;
            }
            if (h) {
                size.height = h;
            }

            var version = '';

            var urlJunk = url && url.match(/\?.*|\#.*/); // url junk is anything part of the url starting with '?' or '#'
            if (urlJunk) {
                version = urlJunk.join('|');
                url = url.replace(urlJunk[0], '');
            }

            var cropParams = JSON.stringify({
                metadata : { size : size },
                path     : url,
                version  : version // for cache busting
            });

            var buffer = Base64.encode(cropParams).replace(/=/g, '');

            return 'static/dimg/' + rot13(buffer);

        }

    });
})();
/**
 * lscache library
 * Copyright (c) 2011, Pamela Fox
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*jshint undef:true, browser:true */
/*global define */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else {
        // Browser globals
        root.lscache = factory();
    }
}(this, function () {

  // Prefix for all lscache keys
  var CACHE_PREFIX = 'lscache-';

  // Suffix for the key name on the expiration items in localStorage
  var CACHE_SUFFIX = '-cacheexpiration';

  // expiration date radix (set to Base-36 for most space savings)
  var EXPIRY_RADIX = 10;

  // time resolution in minutes
  var EXPIRY_UNITS = 60 * 1000;

  // ECMAScript max Date (epoch + 1e8 days)
  var MAX_DATE = Math.floor(8.64e15/EXPIRY_UNITS);

  var cachedStorage;
  var cachedJSON;
  var cacheBucket = '';
  var warnings = false;

  // Determines if localStorage is supported in the browser;
  // result is cached for better performance instead of being run each time.
  // Feature detection is based on how Modernizr does it;
  // it's not straightforward due to FF4 issues.
  // It's not run at parse-time as it takes 200ms in Android.
  function supportsStorage() {
    var key = '__lscachetest__';
    var value = key;

    if (cachedStorage !== undefined) {
      return cachedStorage;
    }

    try {
      setItem(key, value);
      removeItem(key);
      cachedStorage = true;
    } catch (exc) {
      cachedStorage = false;
    }
    return cachedStorage;
  }

  // Determines if native JSON (de-)serialization is supported in the browser.
  function supportsJSON() {
    /*jshint eqnull:true */
    if (cachedJSON === undefined) {
      cachedJSON = (window.JSON != null);
    }
    return cachedJSON;
  }

  /**
   * Returns the full string for the localStorage expiration item.
   * @param {String} key
   * @return {string}
   */
  function expirationKey(key) {
    return key + CACHE_SUFFIX;
  }

  /**
   * Returns the number of minutes since the epoch.
   * @return {number}
   */
  function currentTime() {
    return Math.floor((new Date().getTime())/EXPIRY_UNITS);
  }

  /**
   * Wrapper functions for localStorage methods
   */

  function getItem(key) {
    return localStorage.getItem(CACHE_PREFIX + cacheBucket + key);
  }

  function setItem(key, value) {
    // Fix for iPad issue - sometimes throws QUOTA_EXCEEDED_ERR on setItem.
    localStorage.removeItem(CACHE_PREFIX + cacheBucket + key);
    localStorage.setItem(CACHE_PREFIX + cacheBucket + key, value);
  }

  function removeItem(key) {
    localStorage.removeItem(CACHE_PREFIX + cacheBucket + key);
  }

  function warn(message, err) {
    if (!warnings) return;
    if (!'console' in window || typeof window.console.warn !== 'function') return;
    window.console.warn("lscache - " + message);
    if (err) window.console.warn("lscache - The error was: " + err.message);
  }

  var lscache = {
    /**
     * Stores the value in localStorage. Expires after specified number of minutes.
     * @param {string} key
     * @param {Object|string} value
     * @param {number} time
     */
    set: function(key, value, time) {
      if (!supportsStorage()) return;

      // If we don't get a string value, try to stringify
      // In future, localStorage may properly support storing non-strings
      // and this can be removed.
      if (typeof value !== 'string') {
        if (!supportsJSON()) return;
        try {
          value = JSON.stringify(value);
        } catch (e) {
          // Sometimes we can't stringify due to circular refs
          // in complex objects, so we won't bother storing then.
          return;
        }
      }

      try {
        setItem(key, value);
      } catch (e) {
        if (e.name === 'QUOTA_EXCEEDED_ERR' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED' || e.name === 'QuotaExceededError') {
          // If we exceeded the quota, then we will sort
          // by the expire time, and then remove the N oldest
          var storedKeys = [];
          var storedKey;
          for (var i = 0; i < localStorage.length; i++) {
            storedKey = localStorage.key(i);

            if (storedKey.indexOf(CACHE_PREFIX + cacheBucket) === 0 && storedKey.indexOf(CACHE_SUFFIX) < 0) {
              var mainKey = storedKey.substr((CACHE_PREFIX + cacheBucket).length);
              var exprKey = expirationKey(mainKey);
              var expiration = getItem(exprKey);
              if (expiration) {
                expiration = parseInt(expiration, EXPIRY_RADIX);
              } else {
                // TODO: Store date added for non-expiring items for smarter removal
                expiration = MAX_DATE;
              }
              storedKeys.push({
                key: mainKey,
                size: (getItem(mainKey)||'').length,
                expiration: expiration
              });
            }
          }
          // Sorts the keys with oldest expiration time last
          storedKeys.sort(function(a, b) { return (b.expiration-a.expiration); });

          var targetSize = (value||'').length;
          while (storedKeys.length && targetSize > 0) {
            storedKey = storedKeys.pop();
            warn("Cache is full, removing item with key '" + key + "'");
            removeItem(storedKey.key);
            removeItem(expirationKey(storedKey.key));
            targetSize -= storedKey.size;
          }
          try {
            setItem(key, value);
          } catch (e) {
            // value may be larger than total quota
            warn("Could not add item with key '" + key + "', perhaps it's too big?", e);
            return;
          }
        } else {
          // If it was some other error, just give up.
          warn("Could not add item with key '" + key + "'", e);
          return;
        }
      }

      // If a time is specified, store expiration info in localStorage
      if (time) {
        setItem(expirationKey(key), (currentTime() + time).toString(EXPIRY_RADIX));
      } else {
        // In case they previously set a time, remove that info from localStorage.
        removeItem(expirationKey(key));
      }
    },

    /**
     * Retrieves specified value from localStorage, if not expired.
     * @param {string} key
     * @return {string|Object}
     */
    get: function(key) {
      if (!supportsStorage()) return null;

      // Return the de-serialized item if not expired
      var exprKey = expirationKey(key);
      var expr = getItem(exprKey);

      if (expr) {
        var expirationTime = parseInt(expr, EXPIRY_RADIX);

        // Check if we should actually kick item out of storage
        if (currentTime() >= expirationTime) {
          removeItem(key);
          removeItem(exprKey);
          return null;
        }
      }

      // Tries to de-serialize stored value if its an object, and returns the normal value otherwise.
      var value = getItem(key);
      if (!value || !supportsJSON()) {
        return value;
      }

      try {
        // We can't tell if its JSON or a string, so we try to parse
        return JSON.parse(value);
      } catch (e) {
        // If we can't parse, it's probably because it isn't an object
        return value;
      }
    },

    /**
     * Removes a value from localStorage.
     * Equivalent to 'delete' in memcache, but that's a keyword in JS.
     * @param {string} key
     */
    remove: function(key) {
      if (!supportsStorage()) return null;
      removeItem(key);
      removeItem(expirationKey(key));
    },

    /**
     * Returns whether local storage is supported.
     * Currently exposed for testing purposes.
     * @return {boolean}
     */
    supported: function() {
      return supportsStorage();
    },

    /**
     * Flushes all lscache items and expiry markers without affecting rest of localStorage
     */
    flush: function() {
      if (!supportsStorage()) return;

      // Loop in reverse as removing items will change indices of tail
      for (var i = localStorage.length-1; i >= 0 ; --i) {
        var key = localStorage.key(i);
        if (key.indexOf(CACHE_PREFIX + cacheBucket) === 0) {
          localStorage.removeItem(key);
        }
      }
    },

    /**
     * Appends CACHE_PREFIX so lscache will partition data in to different buckets.
     * @param {string} bucket
     */
    setBucket: function(bucket) {
      cacheBucket = bucket;
    },

    /**
     * Resets the string being appended to CACHE_PREFIX so lscache will use the default storage behavior.
     */
    resetBucket: function() {
      cacheBucket = '';
    },

    /**
     * Sets whether to display warnings when an item is removed from the cache or not.
     */
    enableWarnings: function(enabled) {
      warnings = enabled;
    }
  };

  // Return the module
  return lscache;
}));
var User = new Class({
	
	initialize: function () {
		var session = this._getSession();
		Jetsetter.session = this.session = session;

        this.isBot = window && window.navigator && window.navigator.userAgent && /googlebot|gurujibot|yandexbot|slurp|msnbot|bingbot|facebookexternalhit/i.test(window.navigator.userAgent);

        this.email = (function () {
			var sessionEmail = session.em;
			var encodedEmail = (sessionEmail.substr(sessionEmail.indexOf('_') + 1)) || '';
			return encodedEmail.decode64();
		}());
		
		this.firstName = (function () {
			// Account for assume-user mode
			var firstName = Cookie.read('j_sufn') || session.fn || '';
			var dashPosition = firstName.indexOf('-');
			if (dashPosition > 0) {
				firstName = firstName.substring(0, dashPosition);
			}
			return firstName.replace(/\+/g, ' ');
		}());
		
		this.guid = (session.id.split('_')[1]) || '';

		// Only set jsPartition if user is not logged in
		//if (!this.guid && session.pt == -1) {
        if (!session.pt || (session.pt == -1)) {
            var jsPartition;

            if (Jetsetter.bucketStart && Jetsetter.bucketEnd) {
                var bucketStart = parseInt(Jetsetter.bucketStart, 10);
                var bucketEnd = parseInt(Jetsetter.bucketEnd, 10);
                if ((bucketStart || bucketStart === 0) && bucketEnd) {
                    // incorporate bucketEnd + 1 so that the random number is inclusive of bucketEnd
                    jsPartition = bucketStart + (Math.floor(Math.random() * ((bucketEnd + 1) - bucketStart)));
                }
            }

            if (!jsPartition) {
                // if we couldn't set partition according to buckets, set a random one at any range
                jsPartition = Math.floor(Math.random() * 1000);
            }

            session.pt = jsPartition;

            this.saveSession(session);
        }

		this.isAssumed = (Cookie.read('j_issu') == '1');
		// admin check depends on raw session, not assumed session
		if (this.isAssumed) {
			var rawSession = this._getRawSession();
			this.isAdmin = (rawSession.id.substr(rawSession.id.length - 1, rawSession.id.length) == 'r') && (rawSession.id != '') && (rawSession.st);
		} else {
			this.isAdmin = (session.id.substr(session.id.length - 1, session.id.length) == 'r') && this.hasIdentity() && this.hasInsecureToken();
		}
		this.isAnonymous = this._isInAnonymousBrowseMode();
		this.isPriceHidden = this.isAnonymous;		
		// this.nickname = session.nn,
		this.partition = session.pt;
		this.prefs = new UserPrefs();
		this.woeId = session.wid;
		this.visitorId = Cookie.read('j_vid') || '';
		this.isSubscriber = session.sub ? true : false;
		this.isLocked = !!session.locked;
		this.isPublic = (!this.hasIdentity() && !this.isAnonymous);

        var uri = new URI();
        if (uri.getData('pt')) {
            this.partition = parseInt(uri.getData('pt'), 10);
        }

		//Secure
		//Insecure
		//Insecure Facebook
		//Identity - Can be Subscriber
		//Anon/Cache Access
		//Public

		this.state = (function(User){
			if(!User.isPublic){
				if(User.hasSecureToken()){
					return 'secure';
				} else if(User.hasInsecureToken() && !User.isSubscriber){
					return 'insecure';
				} else if(User.hasInsecureToken() && User.isSubscriber){
					return 'facebook-subscriber';
				} else if(User.hasIdentity() && !User.isSubscriber){
					return 'identity';
				} else if(User.isSubscriber){
					return 'subscriber';
				} else if(User.isAnonymous){
					return 'anonymous';
				} else if(User.hasCacheAccess()){
					return 'cache-access';
				}
			} else {
				return 'public';
			}
		})(this);

		if (Cookie.read('j_pcad')) {
			this.isSemPromo = true;
			this.isPriceHidden = false;
		}

		this.affiliateParams = this._getAffiliateParams();
		if (Cookie.read('j_pco') || Cookie.read('j_pch')) {
			this.publicCheckout = true;
		}

        if (Cookie.read('j_sp')) {
            this.publicPricing = true;
        }

		if (!Cookie.read('j_vid')) {
            var uuid = Jetsetter.JetsetUtil.generateUuid();
            this.visitorId = uuid;
            Cookie.write('j_vid', this.visitorId, {
                'domain' : Jetsetter.cookieDomain,
                duration: 3650
            });
		}

        this._checkTracking();

		// This should only run once per session, use j_svc session cookie
		// to determine if the session is new
		/*
		this.newSessions = (Cookie.read('j_nsc') || 0).toInt();
		if (Cookie.read('j_svc') === null) {
			Cookie.write('j_svc', 0); // Session no longer new!
			
			Cookie.write('j_nsc', ++this.newSessions, {
				'duration': 365
			});
		}
		*/
	},

    /**
     * return whether or not this user is eligible to enter an ab test. tests some rudimentary things such as whether
     * or not the user has a partition and whether or not the user is a web crawler
     * @returns {boolean}
     */
    isABEligible: function() {
        if (this.isBot) { return false; }
        if (this.partition === null || this.partition === undefined) { return false; }
        if (this.partition === 0) { return true; } // 0 is a valid partition
        if (this.partition > 0 && this.partition <= 999) { return true; }
        return false;
    },

    // JETSETTER-20835 ... determine whether or not this user is eligible for the august $50 promo
    isEligibleForAugustPromo: function() {
        var uri = new URI();
        if (lscache.get('promo8redeemed'+this.guid)) {
            return false;
        }
        var userCreateDate = moment(this.session.createDate);
        if (userCreateDate.isBefore(uri.getData('promo8date') /* for testing */ || '2014-08-12 00:00:00')) {
            return true;
        }
        return false;
    },

	_checkTracking: function () {
		var uri = new URI();
		if (uri.getData('app_data')) {
			try {
				JSON.decode(uri.getData('app_data').decode64())
			} catch (e) {
				var req = new Request.JSON({
					url: '/user/trackappdata',
					data: {
						'app_data': uri.getData('app_data'),
						'visitor-id': this.visitorId,
						'guid': this.guid
					},
					onSuccess: function (json) {
						// do nothing
					}
				}).get();
			}
		}
	},
	
	_getSession: function () {
		// assume user support
		if (Cookie.read('j_issu') == '1') {
			// build session from assume user cookies
			return {
				'id': Cookie.read('j_suid'),   // Logged in cookie
				'fn': Cookie.read('j_sufn'),   // Full name
				'em': Cookie.read('j_suem'),   // Email
				'st': Cookie.read('j_sust'),   // Secure token
				'al': '',   // Anonymous browse mode object
				'pl': '',   // Public browse mode object
				'pt': Cookie.read('j_supt'),   // Partition
				'wid': -1,  // Woe id
				'nn': ''    // Nickname
			};
		} else {
			return this._getRawSession();
		}
	},

	_getRawSession: function () {
		return JSON.decode(Cookie.read('j_sess')) || this._getEmptySession();
	},

    _getEmptySession: function() {
        return {
            'id': '',   // Logged in cookie
            'fn': '',   // Full name
            'em': '',   // Email
            'st': '',   // Secure token
            'stv4': '', // Secure token v4
            'al': '',   // Anonymous browse mode object
            'pl': '',   // Public browse mode object
            'pt': -1,   // Partition
            'wid': -1,  // Woe id
            'nn': ''    // Nickname
        };
    },

	_getAffiliateParams: function () {
		var uri = new URI();
		if (uri.getData('evid') || uri.getData('promoAlias') || uri.getData('via')) {
			var affiliateParams = {};
			if (uri.getData('evid') || uri.getData('iata')) {
				affiliateParams['evid'] = uri.getData('evid') || uri.getData('iata');
			}
			if (uri.getData('promoAlias')) {
				affiliateParams['promoAlias'] = uri.getData('promoAlias');
			}
			if (uri.getData('via')) {
				affiliateParams['promoAlias'] = uri.getData('via');
			}
			if (uri.getData('opaid')) {
				affiliateParams['opaid'] = uri.getData('opaid');
			}
			return affiliateParams;
		} else {
			return null;
		}
	},
	
	_isInAnonymousBrowseMode: function () {
		// @TODO: This really is checking when to show the anonymous bar, not  anonymous state itself
		// So this should be separated out somehow.
		
		// Show the guest access bar when:
		//  - the user is NOT logged in (has "j_id" cookie)
		//  - the user has "j_al" cookie (sent by a promo that sets it)
		//  - NOT on pages with the modal already on (like /register and /invite)
		//  - NOT on pages that show up as a popup window
		var isPageExcluded = [
			'/terms-of-service',
			'/exitsurvey',
			'/login',
			'/slogin',
			'/win',
			'/fbpage',
			'/registration'
		].some(function (url) {
			return (location.pathname.indexOf(url) === 0);
		});
		
		
		if ((!this.session.id && this.session.al) && !Jetsetter.registrationModal && !isPageExcluded) {
			return true;
		} else {
			return false;
		}
	},
	
	// The nickname might not be set for currently logged in users before j_sess -> nn was added
	// 
	// @TODO: This launched on March 23 2011, max "Remember me" j_sess duration is 90 days.
	//        So we can remove this nickname business after June 23rd 2011.
	getNickname: function () {
		return Jetsetter.session.nn;
	},
	
	getInviteUrl: function () {
		return Jetsetter.HOST + '/invite/' + this.getNickname();
	},

	hasSecureToken: function () {
		// Refresh state
		this.session = this._getSession();

		if (this.session.st) {
			var secureTokenComponents = this.session.st.split('_');
			// test for older secure token prior to merging of auth systems with the api (new secure token has 4 parts, not 3)
			if (secureTokenComponents.length == 4) {
				var tokenExpiryTime = new Date((secureTokenComponents[3].toInt()) * 1000).increment('minute', 30);
				if (tokenExpiryTime > new Date()) {
					return true;
				}
			}
		}
		
		return false;
	},
	
	hasInsecureToken: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.st) {
			return true;
		}
		
		return false;
	},
	
	hasIdentity: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '' || Cookie.read('j_ca')) {
			return true;
		}
		
		return false;
	},

	// don't use this, hasIdentity should be migrated to hasCacheAccess when possible
	hasGuid: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '') {
			return true;
		}
		
		return false;
	},

	hasCacheAccess: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '' || Cookie.read('j_ca') || this.isAnonymous) {
			return true;
		}
		
		return false;
	},

    saveSession: function(session) {
        Cookie.write('j_sess', JSON.encode(session), {
            'domain': Jetsetter.cookieDomain,
            'duration': 30 * 3 // 3 months
        });
    },

    saveEmail: function(email) {
        Cookie.write('j_suem', email, {
            'domain': Jetsetter.cookieDomain,
            'duration': 30 * 3 // 3 months
        });
    },

    logout: function() {
        this.saveSession(this._getEmptySession());

        // the following 3 are carried over from PHP logout controller
        Cookie.dispose('j_cli', {
            domain: Jetsetter.cookieDomain
        });
        Cookie.dispose('j_ac', {
            domain: Jetsetter.cookieDomain
        });
        Cookie.dispose('j_isABTestable', {
            domain: Jetsetter.cookieDomain
        });

        // Cookie to ensure member is logged out from SSO - this cookie brought over from PHP
        Cookie.write('j_loggedout', '1', {
            domain: Jetsetter.cookieDomain,
            duration: 0 // session cookie
        });

        // this feels wrong...
        Jetsetter.user = new User();

        return Jetsetter.user;
    }
});

/**
*	@class UserPrefs
*	@author Marvin Tam
*	Class to manage Jetsetter user preferences
*/

var UserPrefs = new Class({
	
	defaultPrefs: {
		
	},
	
	initialize: function () {
		var cookieValue = Cookie.read('j_prefs');
		if (cookieValue !== null) {
			this.prefs = JSON.decode(cookieValue);
		} else {
			this.prefs = this.defaultPrefs;
			this._writeCookie();
		}
	},
	
	_writeCookie: function () {
		// Note: JSON.encode won't take instance variables
		// https://mootools.lighthouseapp.com/projects/2706/tickets/955-jsonencode-instance-members-not-encoded
		var cookieValue = JSON.encode(Object.clone(this.prefs));
		Cookie.write('j_prefs', cookieValue, {
			'domain': Jetsetter.cookieDomain,
			'duration': 365
		});
	},
	
	set: function (pref, value) {
		// @TODO: special sauce for setting dates here 
		
		this.prefs[pref] = value;
		this._writeCookie();
		
		return this;
	},
	
	get: function (pref) {
		return this.prefs[pref] || null;
	}
	
});

Jetsetter.Models = Jetsetter.Models || {};

/**
 * credit balance model.
 * pass in { guid : [user guid] }. guid should match the currently logged in user's guid
 * @type {*|void}
 */
Jetsetter.Models.CreditBalance = Composer.Model.extend({

    /**
     * credit balance refresh frequency, the greater the number less frequent credit balance will be retrieved from
     * the server. 10 means every 10nth time 20 means every 20th time and so on
     * @type {number}
     */
    refreshFrequency: 20,

    init: function() {

        this.fetched = false;
        this.fetching = false;
        this.userService = this.userService || new UserService();

        var fetchedValue = this._fetchFromStorage();
        if (fetchedValue) {
            this.set(fetchedValue);
            this.fetched = true;
        }
    },

    getCreditTitle: function() {
        var amt = this.get('amount');
        /**
         * August promo credit. $50 extra credit between 8/12 - 8/19
         * only change title from 'credit' to 'extra credit' if the real amount of credits the user currently has is 0
         * https://jira.smartertravelmedia.com/browse/JETSETTER-20835
         */
        if (Jetsetter.augustPromo && amt === 0 && Jetsetter.user.isEligibleForAugustPromo()) {
            return 'Extra Credit';
        }
        return 'Credit';
    },

    getCreditAmountString: function() {
        if (!this.fetched) {
            return null;
        }
        /**
         * August promo credit. $50 extra credit between 8/12 - 8/19
         * https://jira.smartertravelmedia.com/browse/JETSETTER-20835
         */
        var currency = this.get('currency');
        var amount = this.get('amount');
        if (Jetsetter.augustPromo && Jetsetter.user.isEligibleForAugustPromo()) {
            amount += 50;
        }
        return "" + currency + (amount || 0);
    },

    sync: function() {
        this.trigger('syncStart');

        this.fetched = false;
        this.fetching = true;

        this.userService.getAccountCreditBalanceByGuid({

            guid : this.get('guid'),

            onSuccess: function(data) {
                this.fetched = true;
                this.fetching = false;

                if (data) {
                    var roundedAmount = Math.floor(data.amount);

                    var amount = data.currency.symbol + roundedAmount;

                    this.set({
                        currency : data.currency.symbol, // string with currency
                        amount   : roundedAmount // integer
                    });

                    // store value in local storage
                    try {
                        lscache.set('account-credit', this.toJSON(), 86400 * 7);
                    } catch(e) {
                        Jetsetter.log("failed to save account credit in local storage");
                        // ignore the error
                    }
                }

                this.trigger('syncSuccess');
            }.bind(this),

            onFailure: function(error) {
                this.fetched = true;
                this.fetching = false;
                this.trigger('syncFailure', [error]);
            }.bind(this),

            onLoad: function() {}
        })
    },

    /**
     * fetch state of the credentials last saved in local storage
     * @returns {*}
     * @private
     */
    _fetchFromStorage: function() {
        try {
            if (lscache.get('account-credit')) {
                var value = lscache.get('account-credit');
                if (value.guid == this.get('guid')) {
                    if ((!'amount' in value) || (!'currency' in value)) {
                        Jetsetter.log('invalid value in account credit storage. ignoring')
                        lscache.remove('account-credit');
                        return null;
                    }
                    return value;
                } else {
                    lscache.remove('account-credit');
                    Jetsetter.log("stored user credit doesn't match that of requested user");
                }
            }
        } catch (e) {
            Jetsetter.log(e);
        }
        return null;
    },

    /**
     * Credit balance value should be refreshed on the Account page, on the Summary page, and whatever the refresh
     * frequency is set to.
     *
     * @returns {boolean}
     */
    shouldFetch: function() {
        // @todo: accessing Jetsetter.user from here is wrong. it reduces unit-testability of this code by pulling in external global dependencies. should probably be passing in user login state in init of this model
        if (!(Jetsetter.user.hasSecureToken() || Jetsetter.user.hasInsecureToken())) {
            return false;
        }

        // @todo: accessing location.href from here is wrong. it reduces unit-testability by pulling in external global dependencies. should probably be passing something related in or doing this check one level up
        if (location.href.indexOf('account') !== -1) {
            // @todo: since we're already fetching credit data server-side on the accounts page, we should be re-using that data instead of doing a duplicate call on the front-end
            return true;
        }

        // @todo: accessing location.href from here is wrong. it reduces unit-testability by pulling in external global dependencies. should probably be passing something related in or doing this check one level up
        // always refresh on the summary page because the user likely used some credit during checkout
        if (location.href.indexOf('summary') !== -1) {
            return true;
        }

        if (!this.get('amount') || !this.get('currency')) {
            return true;
        }

        if (!this.fetched) {
            return true;
        }

        var answer = Math.floor((Math.random() * this.refreshFrequency) + 1);

        return (answer <= 1) ? true : false;
    }

});

/**
 * singleton for creditBalance model. allows usage of Jetsetter.Models.CreditBalance.get(..) to fetch or create
 * the model so that all controllers can listen to a single model and we don't have multiple floating instances of the same
 * data set
 */
(function() {
    var modelCache = {};
    // set a static method on the model
    Jetsetter.Models.CreditBalance.get = function(initParams) {
        var key = _.values(initParams).join(':');
        if (!modelCache[key]) {
            modelCache[key] = new Jetsetter.Models.CreditBalance(initParams);
        }
        return modelCache[key];
    }
})();
Jetsetter.Controllers = Jetsetter.Controllers || {};

Jetsetter.Controllers.UserCreditController = Composer.Controller.extend({
    init: function() {
        this.model.bind('syncSuccess', this.render.bind(this));
        this.render();
    },

    render: function() {
        var amountString = this.model.getCreditAmountString();

        if (!_.isEmpty(amountString)) {
            var creditAmountEl = this.el.getElement('.credit-amount');
            if (creditAmountEl) {
                creditAmountEl.set('text', amountString);
                this.el.show();
            }
            var creditTitleEl = this.el.getElement('.credit-title');
            if (creditTitleEl) {
                creditTitleEl.set('text', this.model.getCreditTitle());
            }
        } else {
            this.el.hide();
        }
    }

});
var PopUpManager = new Class({
	
	Implements: Options,

	options: {},

	initialize: function(){
		var self = this;

		this.order = ['PublicRegModal', 'RegistrationPersonalizationModal', 'PostRegModal', 'CollectionsModal', 'UKBanner', 'PromoDiscount', 'iPhoneInterstitial','iPadModal','iPhoneBanner', 'iPhoneModal', 'ExpertModal', 'SniqueWelcomeModal', 'TALandingModal'];

		this.whitelist = ['splash'];

		this.setConfig();
	},

	setConfig: function(){
		var found = false;

		for (var i = 0; i < this.order.length; i++) {
			if(window[this.order[i]]){
				//get the state the popup thinks it should have
				var state = window[this.order[i]].shouldShow();

				//pick the correct whitelist (standard or override) and see if we should pop it on this page
				var curPopupWhitelist = (window[this.order[i]].whitelist) ? window[this.order[i]].whitelist : this.whitelist,
					showOnPage = curPopupWhitelist.contains($(document.body).get('id'));
				
				//if we shouldnt pop it on this page or we have a non logged in user dont pop it
				var allowPublic = (window[this.order[i]].allowPublic) ? window[this.order[i]].allowPublic : false;
				if (!showOnPage || (!allowPublic && Jetsetter.user.guid == '')) {
					state = false;
				}

				if(!found && state && Jetsetter.modules[this.order[i]] !== false){
					Jetsetter.popups[this.order[i]] = state;
					found = true;
				}
				else{
					Jetsetter.popups[this.order[i]] = false;
				}	
			}
			else{
				Jetsetter.popups[this.order[i]] = false;
			}
			
		}
				
	}



});

var EventServiceSingleton = new Class({
	
	initialize: function(){
		if(window.EventService){
			return false;
		}
		this.cache = {};
	},

	publish: function(topic, args){
		var self = this;

		self.cache[topic] && Array.each(self.cache[topic], function(callback){
			// not an arra, lets make it one
			if(args && !args.length){
				args = [args];
			}
			callback.apply(this, args || []);
		});
	},

	subscribe: function(topic, callback){
		var self = this;

		if(!self.cache[topic]){
			self.cache[topic] = [];
		}

		self.cache[topic].push(callback);
		return [topic, callback];
	},

	unsubscribe: function(handle){
		var self = this;

		var t = handle[0];

		self.cache[t] && Array.each(self.cache[t], function(idx){
			if(this == handle[1]){
				self.cache[t].splice(idx, 1);
			}
		});
	}

});
var NotificationCenter = new Class({

	Implements: [Options, Events],

	options: {
		timeout: 3500,
		animationTime: 600,
		animation: 'fade'
	},

	initialize: function(rootEl){
		this.rootEl = rootEl;
		this.rootEl.addClass(this.options.animation);

		this.notificationQueue = [];

		this.rootEl.addEvent('click:relay(.close)', function(e, elem){
			this.close();
		}.bind(this));

		// Move the bar down if the admin bar is showing
		if(Jetsetter.user.isAdmin){
			this.rootEl.setStyle('top', 30);
		}
	},

	createNotification: function(notification){
		// if there is already a notification being presented queue it
		if(this.curNotification){
			this.notificationQueue.push(notification);
			return;
		}

		this.buildNotification(notification);
	},

	buildNotification: function(notification){
		var html = '<div class="notification {{type}} past">\
						<div class="logo"></div>\
						<a class="close"></a>\
						<p class="message tenor">{{message}} {{#if cta}}<a class="cta tenor" {{#if ctaLink}}href="{{ctaLink}}"{{/if}}>{{cta}}</a>{{/if}}</p>\
					</div>',
			template = Handlebars.compile(html),
			notificationEl = Elements.from(template(notification));


		this.curNotification = notificationEl.inject(this.rootEl, 'top');

		// If the user hovers over the message wait for them to manually close it
		this.curNotification.addEvent('mouseenter', function(){
			clearTimeout(this.notificationTimeout);
		}.bind(this));

		// If code included onCtaClick then call it when the user clicks on CTA, also close the notification
		if(notification.onCtaClick){
			this.curNotification.addEvent('click:relay(.cta)', function(){
				notification.onCtaClick();
				this.close();
			}.bind(this));
		}

		// Animate notification in
		setTimeout(function(){
			notificationEl.removeClass('past');

			// Wait until notification is done animating
			setTimeout(function(){

				// Set a timeout for the notification to disappear
				var timeout = _.isUndefined(notification.timeout) ? this.options.timeout : notification.timeout;
				if(timeout > 0) {
					this.notificationTimeout = setTimeout(function(){
						this.close();		
					}.bind(this), timeout);
				}
			}.bind(this), this.options.animationTime)
		}.bind(this), 50);
	},

	success: function(notification){
		notification.type = 'success';
		this.createNotification(notification);
	},

	error: function(notification){
		notification.type = 'error';
		this.createNotification(notification);
	},

	info: function(notification){
		notification.type = 'info';
		this.createNotification(notification);
	},

	close: function(){
		// Clear the current notification timeout so it doesnt get called twice
		clearTimeout(this.notificationTimeout);

		// Animate the notification out
		this.curNotification.addClass('past');

		// Wait until the animation is done
		setTimeout(function(){

			// Destroy the notification element and set it to null
			this.curNotification.destroy();
			this.curNotification = null;

			// If there are still notifications waiting to be presented, present the next one
			if(this.notificationQueue.length > 0){
				this.createNotification(this.notificationQueue.pop());
			}
		}.bind(this), this.options.animationTime);
	}

})


// 	var NotificationCenter = new Class({
		
// 		Implements: [Options, Events],

// 		initialize: function (){
// 			if(!Jetsetter.NotificationCenter){
// 				var self = this;

// 				self.rootEl = $(document);
// 				self.browserType = Browser.name === 'ie' ? (Browser.ie9 ? 'ie9' : 'lt9') : Browser.name;
// 				self.notifications = [];
// 				self.timeout = 2000;
// 				self.allowLink = self.rootEl.getElement('#chrome-allow');
// 			}


// 		},

// 		checkAllowed: function(){
// 			var self = this,
// 				allowed = false;
// 			switch(self.browserType){
// 				case 'chrome':
// 					if(window.webkitNotifications.checkPermission() != 0){
// 						self.allowLink = self.rootEl.getElement('#chrome-allow');
// 						self.allowLink.setStyle('background', 'red');

// 						self.allowLink.addEvent('click:once', function(){
// 							self.setAllowed();
// 						});								
// 					}
// 					else{
// 						allowed = true;
// 					}
// 					break;
// 				case 'ie9':
// 					if(window.external.msIsSiteMode()){
// 						allowed = true;
// 					}
// 					break;
// 			}

// 			return allowed;
// 		},

// 		setAllowed: function(){
// 			if(this.browserType === 'chrome'){
// 				window.webkitNotifications.requestPermission();
// 			}
// 		},

// 		addNotifications: function(notifications){
// 			var self = this;

// 			self.notifications = notifications;

// 			Object.each(self.notifications, function(){
// 				self.createNotification(arguments[0], arguments[1]);
// 			});

// 		},

// 		createNotification: function(notification){

// 			var self = this;



// 			if(arguments[1]){
// 				var delta = new Date().diff(new Date(arguments[1]), 'second');
// 			}


// 			switch(self.browserType){
// 				case 'chrome':
// 					var n = window.webkitNotifications.createNotification('http://www.jetsetter.com/favicon.ico', notification.title, notification.message);

// 					if(this.checkAllowed()){
// 						setTimeout(function(){
// 							n.show();
// 						}, delta ? delta * 1000 : self.timeout);
// 					}
// 					break;
// 				case 'ie9':
// 					if(this.checkAllowed()){
// 						window.setTimeout("window.external.msSiteModeActivate()", delta ? delta * 1000 : self.timeout);	
// 					}
// 					break;
// 			}

// 		}

// 	});


// 	Jetsetter.NotificationCenter = new NotificationCenter();
	
	
// 	Jetsetter.NotificationCenter.addNotifications({
// 		"April 28, 2011 3:19:45 pm": {
// 			"title": "Sales Starting Now!",
// 			"message": "Jetsetter's 12pm Sales are Starting Now!"
// 		}

// 	});


// 	/*/
// 	Jetsetter.NotificationCenter.createNotification({
// 		"title": "whatever",
// 		"message": "whatever"
// 	});
// 	//*/

// 	//*/

// 	//console.log(window.external.msIsSiteMode(), Browser.name);

// 	if(Browser.ie9 && window.external.msIsSiteMode()){
// 		var g_ext = window.external;
// 	}
// });
var API = new Class({

    Implements: [Options, Events],

    options: {
        serviceHostname: location.hostname,
        defaultApiVersion: 'v3',
        servicePathPrefix: '/api-proxy/'
    },

    initialize: function(options){
        this.setOptions(options);
        // set default service urls
        if (this.options.serviceURL === undefined) {
            this.options.serviceURL = 'http://' + this.options.serviceHostname + this.options.servicePathPrefix;
        }
        if (this.options.secureServiceURL === undefined) {
            this.options.secureServiceURL = 'https://' + this.options.serviceHostname + this.options.servicePathPrefix;
        }

        this.reqs = {};
    },

    request: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback){
        // check if jsonp is required when building urls
        if (location.hostname != this.options.serviceHostname) {
            // always required if hostnames are different
            this._doJSONPRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        } else if (secure && (location.protocol == 'http:')) {
            // also required if this is a secure request and the current page is http
            this._doJSONPRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        } else {
            this._doJSONRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        }
    },

    // regular get/post request
    _doJSONRequest: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        var req = new Request.JSON({
            url: this.appendCacheBustingParam(this._getUrl(secure, apiVersion, path)),
            headers: this._getHeaders(apiVersion),
            data: data,
            onSuccess: function (json) {
                this.handleSuccess(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json);
            }.bind(this),
            onError: function (text, error) {
                this.handleError(onFailureCallback, 999, error);
                new ErrorService().logError("code 999: "+JSON.stringify(error));
            }.bind(this),
            onFailure: function (xhr) {
                this.handleError(onFailureCallback, 1000, 'Unable to connect.  Please check your Internet connection and try again.');
            }.bind(this)
        })[type]();

        var serviceEndpoint = new URI(this._getUrl(secure, apiVersion, path)).get('directory').split('/');
        this.reqs[serviceEndpoint[3] + '/' + serviceEndpoint[4]] = req;
    },

    _doJSONPRequest: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        var isV4 = (apiVersion == 'v4');
        var url = this._getUrl(secure, apiVersion, path);
        var headers = this._getHeaders(apiVersion);
        data = Object.merge(data || {}, {'method': type});
        data = isV4 ? Object.merge(headers, data) : '';
        url =  isV4 ? url : url + this.getSlashDelimitedParams(Object.merge({'rnd' /* add cache busting parameter */: Math.floor(Math.random() * 1000)}, Object.merge(headers, data)));

        // jsonp request
        var req = new Request.JSONP({
            url: url,
            data: data,
            onComplete: function (json) {
                this.handleSuccess(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json);
            }.bind(this)
        }).send();
    },

    _getHeaders: function(apiVersion){
        var headers = {
            'apikey'     : Jetsetter.API_KEY,
            'csurftoken' : Jetsetter.user.visitorId
        };

        var session = Jetsetter.session;

        if (apiVersion == 'v4'){
            if (session && session.st) {
                headers.sessionToken = session.st;
            } else if (session && session.stv4) {
                headers.sessionToken = session.stv4;
            }
        } else {
            headers.sessionId = session && session.st ? session.st : null;
        }

        /* TODO: Figure out how to do assumed user
         if (Jetsetter.user.isAssumed) {
         var rawSession = Jetsetter.user._getRawSession();
         Object.merge(headers, { 'assumerId' : rawSession.st });
         }*/

        return headers;
    },

    // build url
    _getUrl: function(secure, apiVersion, path){
        var url;

        if (secure) {
            url = this.options.secureServiceURL + apiVersion + path;
        } else if (location.protocol == 'https:') {
            url = this.options.secureServiceURL + apiVersion + path;
        } else {
            url = this.options.serviceURL + apiVersion + path;
        }

        return url;
    },

    appendCacheBustingParam: function(url) {
        return  url + ((url.indexOf('?') != -1) ? '&' : '?') + 'rnd=' + Math.floor(Math.random() * 10000);
    },

    get: function(options){
        this.request('get', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    post: function(options){
        this.request('post', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    put: function(options){
        this.request('put', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    'delete': function(options){
        this.request('delete', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    getSlashDelimitedParams: function (queryObject) {
        return _.chain(queryObject)
            .map(function(value, key) {
                if(value === true) {
                    value = 1;
                } else if(value === false) {
                    value = 0;
                }
                return [key, value];
            })
            .filter(function(keyValue) {
                var value = keyValue[1];
                return value !== null && value !== '' && typeof value != 'undefined';
            })
            .map(function(keyValue) {
                return '/' + keyValue[0] + '/' + encodeURIComponent(keyValue[1]);
            })
            .reduce(function(memo, param) {
                return memo + param;
            }, '')
            .value();
    },

    handleSuccess: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json) {
        if (json.call1 !== undefined) {
            // chained request - check if any of the requests had errors
            var error = null;
            Object.each(json, function(value, key) {
                if ((value === undefined) || (value.status != 0) || (value.data === undefined)) {
                    error = value;
                }
            });
            if(error == null){
                var responseData = (apiVersion == 'v4' && json && json.data) || json;
                onSuccessCallback && onSuccessCallback(responseData);
            } else if ((error.code !== undefined) && ((error.code == 103) || (error.code == 104))) {
                this.handleSessionExpired(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            } else {
                this.handleError(onFailureCallback, error.code, error.msg);
            }
        } else {
            // normal request
            if((json.status !== undefined) && (json.status == 0) && (json.data !== undefined)) {
                var responseData = (apiVersion == 'v4' && json && json.data) || json;
                var metadata = apiVersion == 'v4' && _.omit(json, 'data', 'status');
                onSuccessCallback && onSuccessCallback(responseData, metadata);
            } else if ((json.code !== undefined) && ((json.code == 103) || (json.code == 104))) {
                this.handleSessionExpired(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            } else {
                var error = json.error || json;
                this.handleError(onFailureCallback, error.code, error.msg);
            }
        }
    },

    handleError: function(onFailureCallback, code, rawMessage) {

        // array of error codes from v4 that we want to pass back to the user instead of showing a generic error message
        var v4PassThroughErrors = [
            238, // CCInvalidTypeError
            239, // CCInvalidCvvError
            240, //
            248, // InvalidCCOwnerError
            249, // CCNotFoundError
            250, // UnableToChargeCCError
            251, // PropertyInventoryNeedsApprovalError
            252, // InventoryIsNotAvailableError
            253, // UnableToPurchaseError
            228, // MaxActiveHoldOrdersReachedError
            229, // VoucherOrderLimitReachedError
            226, // InvalidAmountError

            238, // CCInvalidTypeError
            239, // CCInvalidCvvError
            240, // CCInvalidExpirationDateError
            241, // CCInvalidExpirationDateYearError
            242, // CCInvalidExpirationMonthError
            243, // CCInvalidExpirationYearError
            244, // CCInvalidNumberLengthError
            245, // CCInvalidNumberError
            246, // CCUnableToAddError
            247  // CCInvalidBillingAddressPostalCodeError

        ];

        // certain error codes we will use the message from the server
        if (rawMessage && (_.contains(v4PassThroughErrors, code) ||
            (code == 109) || (code == 110) || (code == 229) || (code == 400) || (code == 401) || (code == 500) || (code == 501)
            || (code == 502) || (code == 504) || (code == 505) || (code == 800) || (code == 744) || (code == 766)
            || (code == 767) || (code == 762) || (code == 763) || (code == 764) || (code == 765) || (code == 768) || ((code >= 701) && (code <= 715))
            || (code == 1000))) {
            var message = rawMessage + ' Please contact member services if you need assistance by calling 1-877-573-8872. Reference error code #' + code;
        } else {
            var message = 'There was an error processing your request. Please contact member services if you need assistance by calling 1-877-573-8872. Reference error code #' + code;
        }

        if (!onFailureCallback) {
            // default handling of error
            new NotificationModal(message, 'error').show();
            throw new Error("ERROR " + code + ": " + rawMessage);
        } else {
            onFailureCallback(code, message);
        }
    },

    handleSessionExpired: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        Jetsetter.secureLogin({
            dismissOnLogin: true,
            access: 'secure',
            forceAuthentication: true,
            onLogin: function () {
                // retry request
                this.request(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            }.bind(this)
        });
    }
});

// drop that API in like its hot
API = new API();

var APIService = new Class({

	initialize: function(){
		if(typeof API === 'function'){
			throw 'Cant instantiate API service method when API does not exist';
		}
	}

});
Jetsetter.Models = Jetsetter.Models || {};

/**
 * Model used to store user geo information.
 * The proper way to use this model to make sure you always have data is
 * Jetsetter.userGeoModel.supply(function() {
 *   -- your code here. Jetsetter.userGeoModel either failed or succeeded --
 * });
 * @type {*|void}
 */

Jetsetter.Models.UserGeo = Composer.Model.extend({
    init: function() {
        this.fetched = false;
        this.fetching = false;

        var lsCached = lscache.get('geo-data');
        if (lsCached && (lsCached != 'undefined')) {
            this.set({'data': lsCached});
            this.fetched = true;
            this.fetching = false;
        }
    },

    supply: function(callback) {
        if (this.fetched) {
            return callback();
        } else {
            this.bind_once('syncComplete', callback);
            if (!this.fetching) {
                this.fetch();
            }
        }
    },

    sync: function() {

        if (this.fetching) {
            // if the geo model is already fetching then don't re-send the request
            return true;
        }

        this.trigger('syncStart');

        this.fetched = false;
        this.fetching = true;

        this.request = new Request.JSON({
            url: '/geo',
            timeout: 500,
            onSuccess: function(res) {
                this.fetched = true;
                this.fetching = false;
                this.set({'data': res.data});
                lscache.set('geo-data', res.data, 86400 /* cache 1 day */)
                this.trigger('syncSuccess');
                this.trigger('syncComplete');
            }.bind(this),

            onFailure: function() {
                this.fetched = true;
                this.fetching = false;
                this.set({data: {}});
                this.trigger('syncFailure');
                this.trigger('syncComplete');
            }.bind(this),

            onTimeout: function() {
                this.fetched = true;
                this.fetching = false;
                this.set({data: {}});
                this.trigger('syncFailure');
                this.trigger('syncComplete');
            }.bind(this)
        }).get();
    }

});
Jetsetter.ABTests = {
    'metaTest'  : {

        // retrieve the recipe for this test depending on the passed in partition
        recipe: function(partition) {
            var urlmatches = window.location.href.match(/metaTest=([AB])/);
            if (urlmatches && urlmatches.length > 1) {
                return urlmatches[1];
            }

            return "A";
        },

        // track the test in omniture
        track: function(recipe, additional) {
            return;
            var eVar20 = 'JS Site Meta R5 - Recipe '+recipe;
            if (additional) {
                omniture.trackClickWithSiteSection(additional, 'eVar35', {
                    eVar20 : eVar20
                });
            } else {
                omniture.trackClick(eVar20, 'eVar20');
            }
        },

        // function intended to take care of any required async depencies for this ab test and then call the callback when they are ready
        supply: function(callback) {
            return Jetsetter.userGeoModel.supply(callback);
        }
    },

    'hybridTest' : {
        recipe: function(partition) {

            try {
                var uri = new URI();
                if (uri.getData('hybridTest')) {
                    return uri.getData('hybridTest');
                }
            } catch (e) {}

            if (partition === 0 || (partition > 0 && partition <= 499)) {
                return "A";
            } else if (partition >= 500 && partition <= 999) {
                return "B";
            }
            return null;
        },
        track: function(recipe, additional) {
            var eVar20 = 'SERP Hybrid - Recipe ' + recipe;
            omniture.trackClick(eVar20, 'eVar20');
        }
    }
};
/**
 * History.js jQuery Adapter
 * @author Benjamin Arthur Lupton <contact@balupton.com>
 * @copyright 2010-2011 Benjamin Arthur Lupton <contact@balupton.com>
 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

// Closure
(function(window,undefined){
	// Localise Globals
	var
		History = window.History = window.History||{},
		MooTools = window.MooTools;

	// Check Existence
	if ( typeof History.Adapter !== 'undefined' ) {
		throw new Error('History.js Adapter has already been loaded...');
	}

	// Make MooTools aware of History.js Events
	Object.append(Element.NativeEvents,{
		'popstate':2,
		'hashchange':2
	});

	// Add the Adapter
	History.Adapter = {
		/**
		 * History.Adapter.bind(el,event,callback)
		 * @param {Element|Selector} el
		 * @param {String} event - custom and standard events
		 * @param {Function} callback
		 * @return
		 */
		bind: function(el,event,callback){
			var El = typeof el === 'string' ? document.id(el) : el;
			El.addEvent(event,callback);
		},

		/**
		 * History.Adapter.trigger(el,event)
		 * @param {Element|Selector} el
		 * @param {String} event - custom and standard events
		 * @return
		 */
		trigger: function(el,event){
			var El = typeof el === 'string' ? document.id(el) : el;
			El.fireEvent(event);
		},

		/**
		 * History.Adapter.trigger(el,event)
		 * @param {Function} callback
		 * @return
		 */
		onDomLoad: function(callback) {
			window.addEvent('domready',callback);
		}
	};

	// Try and Initialise History
	if ( typeof History.init !== 'undefined' ) {
		History.init();
	}

})(window);

/**
 * History.js Core
 * @author Benjamin Arthur Lupton <contact@balupton.com>
 * @copyright 2010-2011 Benjamin Arthur Lupton <contact@balupton.com>
 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function(window,undefined){
	"use strict";

	// --------------------------------------------------------------------------
	// Initialise

	// Localise Globals
	var
		console = window.console||undefined, // Prevent a JSLint complain
		document = window.document, // Make sure we are using the correct document
		navigator = window.navigator, // Make sure we are using the correct navigator
		amplify = window.amplify||false, // Amplify.js
		setTimeout = window.setTimeout,
		clearTimeout = window.clearTimeout,
		setInterval = window.setInterval,
		clearInterval = window.clearInterval,
		JSON = window.JSON,
		History = window.History = window.History||{}, // Public History Object
		history = window.history; // Old History Object

	// MooTools Compatibility
	JSON.stringify = JSON.stringify||JSON.encode;
	JSON.parse = JSON.parse||JSON.decode;

	// Check Existence
	if ( typeof History.init !== 'undefined' ) {
		throw new Error('History.js Core has already been loaded...');
	}

	// Initialise History
	History.init = function(){
		// Check Load Status of Adapter
		if ( typeof History.Adapter === 'undefined' ) {
			return false;
		}

		// Check Load Status of Core
		if ( typeof History.initCore !== 'undefined' ) {
			History.initCore();
		}

		// Check Load Status of HTML4 Support
		if ( typeof History.initHtml4 !== 'undefined' ) {
			History.initHtml4();
		}

		// Return true
		return true;
	};

	// --------------------------------------------------------------------------
	// Initialise Core

	// Initialise Core
	History.initCore = function(){
		// Initialise
		if ( typeof History.initCore.initialized !== 'undefined' ) {
			// Already Loaded
			return false;
		}
		else {
			History.initCore.initialized = true;
		}

		// ----------------------------------------------------------------------
		// Options

		/**
		 * History.options
		 * Configurable options
		 */
		History.options = History.options||{};

		/**
		 * History.options.hashChangeInterval
		 * How long should the interval be before hashchange checks
		 */
		History.options.hashChangeInterval = History.options.hashChangeInterval || 100;

		/**
		 * History.options.safariPollInterval
		 * How long should the interval be before safari poll checks
		 */
		History.options.safariPollInterval = History.options.safariPollInterval || 500;

		/**
		 * History.options.doubleCheckInterval
		 * How long should the interval be before we perform a double check
		 */
		History.options.doubleCheckInterval = History.options.doubleCheckInterval || 500;

		/**
		 * History.options.storeInterval
		 * How long should we wait between store calls
		 */
		History.options.storeInterval = History.options.storeInterval || 1000;

		/**
		 * History.options.busyDelay
		 * How long should we wait between busy events
		 */
		History.options.busyDelay = History.options.busyDelay || 250;

		/**
		 * History.options.debug
		 * If true will enable debug messages to be logged
		 */
		History.options.debug = History.options.debug || false;

		/**
		 * History.options.initialTitle
		 * What is the title of the initial state
		 */
		History.options.initialTitle = History.options.initialTitle || document.title;


		// ----------------------------------------------------------------------
		// Interval record

		/**
		 * History.intervalList
		 * List of intervals set, to be cleared when document is unloaded.
		 */
		History.intervalList = [];

		/**
		 * History.clearAllIntervals
		 * Clears all setInterval instances.
		 */
		History.clearAllIntervals = function(){
			var i, il = History.intervalList;
			if (typeof il !== "undefined" && il !== null) {
				for (i = 0; i < il.length; i++) {
					clearInterval(il[i]);
				}
				History.intervalList = null;
			}
		};
		History.Adapter.bind(window,"beforeunload",History.clearAllIntervals);
		History.Adapter.bind(window,"unload",History.clearAllIntervals);


		// ----------------------------------------------------------------------
		// Debug

		/**
		 * History.debug(message,...)
		 * Logs the passed arguments if debug enabled
		 */
		History.debug = function(){
			if ( (History.options.debug||false) ) {
				History.log.apply(History,arguments);
			}
		};

		/**
		 * History.log(message,...)
		 * Logs the passed arguments
		 */
		History.log = function(){
			// Prepare
			var
				consoleExists = !(typeof console === 'undefined' || typeof console.log === 'undefined' || typeof console.log.apply === 'undefined'),
				textarea = document.getElementById('log'),
				message,
				i,n
				;

			// Write to Console
			if ( consoleExists ) {
				var args = Array.prototype.slice.call(arguments);
				message = args.shift();
				if ( typeof console.debug !== 'undefined' ) {
					console.debug.apply(console,[message,args]);
				}
				else {
					console.log.apply(console,[message,args]);
				}
			}
			else {
				message = ("\n"+arguments[0]+"\n");
			}

			// Write to log
			for ( i=1,n=arguments.length; i<n; ++i ) {
				var arg = arguments[i];
				if ( typeof arg === 'object' && typeof JSON !== 'undefined' ) {
					try {
						arg = JSON.stringify(arg);
					}
					catch ( Exception ) {
						// Recursive Object
					}
				}
				message += "\n"+arg+"\n";
			}

			// Textarea
			if ( textarea ) {
				textarea.value += message+"\n-----\n";
				textarea.scrollTop = textarea.scrollHeight - textarea.clientHeight;
			}
			// No Textarea, No Console
			else if ( !consoleExists ) {
				alert(message);
			}

			// Return true
			return true;
		};

		// ----------------------------------------------------------------------
		// Emulated Status

		/**
		 * History.getInternetExplorerMajorVersion()
		 * Get's the major version of Internet Explorer
		 * @return {integer}
		 * @license Public Domain
		 * @author Benjamin Arthur Lupton <contact@balupton.com>
		 * @author James Padolsey <https://gist.github.com/527683>
		 */
		History.getInternetExplorerMajorVersion = function(){
			var result = History.getInternetExplorerMajorVersion.cached =
					(typeof History.getInternetExplorerMajorVersion.cached !== 'undefined')
				?	History.getInternetExplorerMajorVersion.cached
				:	(function(){
						var v = 3,
								div = document.createElement('div'),
								all = div.getElementsByTagName('i');
						while ( (div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->') && all[0] ) {}
						return (v > 4) ? v : false;
					})()
				;
			return result;
		};

		/**
		 * History.isInternetExplorer()
		 * Are we using Internet Explorer?
		 * @return {boolean}
		 * @license Public Domain
		 * @author Benjamin Arthur Lupton <contact@balupton.com>
		 */
		History.isInternetExplorer = function(){
			var result =
				History.isInternetExplorer.cached =
				(typeof History.isInternetExplorer.cached !== 'undefined')
					?	History.isInternetExplorer.cached
					:	Boolean(History.getInternetExplorerMajorVersion())
				;
			return result;
		};

		/**
		 * History.emulated
		 * Which features require emulating?
		 */
		History.emulated = {
			pushState: !Boolean(
				window.history && window.history.pushState && window.history.replaceState
				&& !(
					(/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i).test(navigator.userAgent) /* disable for versions of iOS before version 4.3 (8F190) */
					|| (/AppleWebKit\/5([0-2]|3[0-2])/i).test(navigator.userAgent) /* disable for the mercury iOS browser, or at least older versions of the webkit engine */
				)
			),
			hashChange: Boolean(
				!(('onhashchange' in window) || ('onhashchange' in document))
				||
				(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8)
			)
		};

		/**
		 * History.enabled
		 * Is History enabled?
		 */
		History.enabled = !History.emulated.pushState;

		/**
		 * History.bugs
		 * Which bugs are present
		 */
		History.bugs = {
			/**
			 * Safari 5 and Safari iOS 4 fail to return to the correct state once a hash is replaced by a `replaceState` call
			 * https://bugs.webkit.org/show_bug.cgi?id=56249
			 */
			setHash: Boolean(!History.emulated.pushState && navigator.vendor === 'Apple Computer, Inc.' && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),

			/**
			 * Safari 5 and Safari iOS 4 sometimes fail to apply the state change under busy conditions
			 * https://bugs.webkit.org/show_bug.cgi?id=42940
			 */
			safariPoll: Boolean(!History.emulated.pushState && navigator.vendor === 'Apple Computer, Inc.' && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),

			/**
			 * MSIE 6 and 7 sometimes do not apply a hash even it was told to (requiring a second call to the apply function)
			 */
			ieDoubleCheck: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8),

			/**
			 * MSIE 6 requires the entire hash to be encoded for the hashes to trigger the onHashChange event
			 */
			hashEscape: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 7)
		};

		/**
		 * History.isEmptyObject(obj)
		 * Checks to see if the Object is Empty
		 * @param {Object} obj
		 * @return {boolean}
		 */
		History.isEmptyObject = function(obj) {
			for ( var name in obj ) {
				return false;
			}
			return true;
		};

		/**
		 * History.cloneObject(obj)
		 * Clones a object
		 * @param {Object} obj
		 * @return {Object}
		 */
		History.cloneObject = function(obj) {
			var hash,newObj;
			if ( obj ) {
				hash = JSON.stringify(obj);
				newObj = JSON.parse(hash);
			}
			else {
				newObj = {};
			}
			return newObj;
		};

		// ----------------------------------------------------------------------
		// URL Helpers

		/**
		 * History.getRootUrl()
		 * Turns "http://mysite.com/dir/page.html?asd" into "http://mysite.com"
		 * @return {String} rootUrl
		 */
		History.getRootUrl = function(){
			// Create
			var rootUrl = document.location.protocol+'//'+(document.location.hostname||document.location.host);
			if ( document.location.port||false ) {
				rootUrl += ':'+document.location.port;
			}
			rootUrl += '/';

			// Return
			return rootUrl;
		};

		/**
		 * History.getBaseHref()
		 * Fetches the `href` attribute of the `<base href="...">` element if it exists
		 * @return {String} baseHref
		 */
		History.getBaseHref = function(){
			// Create
			var
				baseElements = document.getElementsByTagName('base'),
				baseElement = null,
				baseHref = '';

			// Test for Base Element
			if ( baseElements.length === 1 ) {
				// Prepare for Base Element
				baseElement = baseElements[0];
				baseHref = baseElement.href.replace(/[^\/]+$/,'');
			}

			// Adjust trailing slash
			baseHref = baseHref.replace(/\/+$/,'');
			if ( baseHref ) baseHref += '/';

			// Return
			return baseHref;
		};

		/**
		 * History.getBaseUrl()
		 * Fetches the baseHref or basePageUrl or rootUrl (whichever one exists first)
		 * @return {String} baseUrl
		 */
		History.getBaseUrl = function(){
			// Create
			var baseUrl = History.getBaseHref()||History.getBasePageUrl()||History.getRootUrl();

			// Return
			return baseUrl;
		};

		/**
		 * History.getPageUrl()
		 * Fetches the URL of the current page
		 * @return {String} pageUrl
		 */
		History.getPageUrl = function(){
			// Fetch
			var
				State = History.getState(false,false),
				stateUrl = (State||{}).url||document.location.href;

			// Create
			var pageUrl = stateUrl.replace(/\/+$/,'').replace(/[^\/]+$/,function(part,index,string){
				return (/\./).test(part) ? part : part+'/';
			});

			// Return
			return pageUrl;
		};

		/**
		 * History.getBasePageUrl()
		 * Fetches the Url of the directory of the current page
		 * @return {String} basePageUrl
		 */
		History.getBasePageUrl = function(){
			// Create
			var basePageUrl = document.location.href.replace(/[#\?].*/,'').replace(/[^\/]+$/,function(part,index,string){
				return (/[^\/]$/).test(part) ? '' : part;
			}).replace(/\/+$/,'')+'/';

			// Return
			return basePageUrl;
		};

		/**
		 * History.getFullUrl(url)
		 * Ensures that we have an absolute URL and not a relative URL
		 * @param {string} url
		 * @param {Boolean} allowBaseHref
		 * @return {string} fullUrl
		 */
		History.getFullUrl = function(url,allowBaseHref){
			// Prepare
			var fullUrl = url, firstChar = url.substring(0,1);
			allowBaseHref = (typeof allowBaseHref === 'undefined') ? true : allowBaseHref;

			// Check
			if ( /[a-z]+\:\/\//.test(url) ) {
				// Full URL
			}
			else if ( firstChar === '/' ) {
				// Root URL
				fullUrl = History.getRootUrl()+url.replace(/^\/+/,'');
			}
			else if ( firstChar === '#' ) {
				// Anchor URL
				fullUrl = History.getPageUrl().replace(/#.*/,'')+url;
			}
			else if ( firstChar === '?' ) {
				// Query URL
				fullUrl = History.getPageUrl().replace(/[\?#].*/,'')+url;
			}
			else {
				// Relative URL
				if ( allowBaseHref ) {
					fullUrl = History.getBaseUrl()+url.replace(/^(\.\/)+/,'');
				} else {
					fullUrl = History.getBasePageUrl()+url.replace(/^(\.\/)+/,'');
				}
				// We have an if condition above as we do not want hashes
				// which are relative to the baseHref in our URLs
				// as if the baseHref changes, then all our bookmarks
				// would now point to different locations
				// whereas the basePageUrl will always stay the same
			}

			// Return
			return fullUrl.replace(/\#$/,'');
		};

		/**
		 * History.getShortUrl(url)
		 * Ensures that we have a relative URL and not a absolute URL
		 * @param {string} url
		 * @return {string} url
		 */
		History.getShortUrl = function(url){
			// Prepare
			var shortUrl = url, baseUrl = History.getBaseUrl(), rootUrl = History.getRootUrl();

			// Trim baseUrl
			if ( History.emulated.pushState ) {
				// We are in a if statement as when pushState is not emulated
				// The actual url these short urls are relative to can change
				// So within the same session, we the url may end up somewhere different
				shortUrl = shortUrl.replace(baseUrl,'');
			}

			// Trim rootUrl
			shortUrl = shortUrl.replace(rootUrl,'/');

			// Ensure we can still detect it as a state
			if ( History.isTraditionalAnchor(shortUrl) ) {
				shortUrl = './'+shortUrl;
			}

			// Clean It
			shortUrl = shortUrl.replace(/^(\.\/)+/g,'./').replace(/\#$/,'');

			// Return
			return shortUrl;
		};

		// ----------------------------------------------------------------------
		// State Storage

		/**
		 * History.store
		 * The store for all session specific data
		 */
		History.store = amplify ? (amplify.store('History.store')||{}) : {};
		History.store.idToState = History.store.idToState||{};
		History.store.urlToId = History.store.urlToId||{};
		History.store.stateToId = History.store.stateToId||{};

		/**
		 * History.idToState
		 * 1-1: State ID to State Object
		 */
		History.idToState = History.idToState||{};

		/**
		 * History.stateToId
		 * 1-1: State String to State ID
		 */
		History.stateToId = History.stateToId||{};

		/**
		 * History.urlToId
		 * 1-1: State URL to State ID
		 */
		History.urlToId = History.urlToId||{};

		/**
		 * History.storedStates
		 * Store the states in an array
		 */
		History.storedStates = History.storedStates||[];

		/**
		 * History.savedStates
		 * Saved the states in an array
		 */
		History.savedStates = History.savedStates||[];

		/**
		 * History.getState()
		 * Get an object containing the data, title and url of the current state
		 * @param {Boolean} friendly
		 * @param {Boolean} create
		 * @return {Object} State
		 */
		History.getState = function(friendly,create){
			// Prepare
			if ( typeof friendly === 'undefined' ) { friendly = true; }
			if ( typeof create === 'undefined' ) { create = true; }

			// Fetch
			var State = History.getLastSavedState();

			// Create
			if ( !State && create ) {
				State = History.createStateObject();
			}

			// Adjust
			if ( friendly ) {
				State = History.cloneObject(State);
				State.url = State.cleanUrl||State.url;
			}

			// Return
			return State;
		};

		/**
		 * History.getIdByState(State)
		 * Gets a ID for a State
		 * @param {State} newState
		 * @return {String} id
		 */
		History.getIdByState = function(newState){

			// Fetch ID
			var id = History.extractId(newState.url);
			if ( !id ) {
				// Find ID via State String
				var str = History.getStateString(newState);
				if ( typeof History.stateToId[str] !== 'undefined' ) {
					id = History.stateToId[str];
				}
				else if ( typeof History.store.stateToId[str] !== 'undefined' ) {
					id = History.store.stateToId[str];
				}
				else {
					// Generate a new ID
					while ( true ) {
						id = String(Math.floor(Math.random()*1000));
						if ( typeof History.idToState[id] === 'undefined' && typeof History.store.idToState[id] === 'undefined' ) {
							break;
						}
					}

					// Apply the new State to the ID
					History.stateToId[str] = id;
					History.idToState[id] = newState;
				}
			}

			// Return ID
			return id;
		};

		/**
		 * History.normalizeState(State)
		 * Expands a State Object
		 * @param {object} State
		 * @return {object}
		 */
		History.normalizeState = function(oldState){
			// Prepare
			if ( !oldState || (typeof oldState !== 'object') ) {
				oldState = {};
			}

			// Check
			if ( typeof oldState.normalized !== 'undefined' ) {
				return oldState;
			}

			// Adjust
			if ( !oldState.data || (typeof oldState.data !== 'object') ) {
				oldState.data = {};
			}

			// ----------------------------------------------------------------------

			// Create
			var newState = {};
			newState.normalized = true;
			newState.title = oldState.title||'';
			newState.url = History.getFullUrl(History.unescapeString(oldState.url||document.location.href));
			newState.hash = History.getShortUrl(newState.url);
			newState.data = History.cloneObject(oldState.data);

			// Fetch ID
			newState.id = History.getIdByState(newState);

			// ----------------------------------------------------------------------

			// Clean the URL
			newState.cleanUrl = newState.url.replace(/\??\&_suid.*/,'');
			newState.url = newState.cleanUrl;

			// Check to see if we have more than just a url
			var dataNotEmpty = !History.isEmptyObject(newState.data);

			// Apply
			if ( newState.title || dataNotEmpty ) {
				// Add ID to Hash
				newState.hash = History.getShortUrl(newState.url).replace(/\??\&_suid.*/,'');
				if ( !/\?/.test(newState.hash) ) {
					newState.hash += '?';
				}
				newState.hash += '&_suid='+newState.id;
			}

			// Create the Hashed URL
			newState.hashedUrl = History.getFullUrl(newState.hash);

			// ----------------------------------------------------------------------

			// Update the URL if we have a duplicate
			if ( (History.emulated.pushState || History.bugs.safariPoll) && History.hasUrlDuplicate(newState) ) {
				newState.url = newState.hashedUrl;
			}

			// ----------------------------------------------------------------------

			// Return
			return newState;
		};

		/**
		 * History.createStateObject(data,title,url)
		 * Creates a object based on the data, title and url state params
		 * @param {object} data
		 * @param {string} title
		 * @param {string} url
		 * @return {object}
		 */
		History.createStateObject = function(data,title,url){
			// Hashify
			var State = {
				'data': data,
				'title': title,
				'url': url
			};

			// Expand the State
			State = History.normalizeState(State);

			// Return object
			return State;
		};

		/**
		 * History.getStateById(id)
		 * Get a state by it's UID
		 * @param {String} id
		 */
		History.getStateById = function(id){
			// Prepare
			id = String(id);

			// Retrieve
			var State = History.idToState[id] || History.store.idToState[id] || undefined;

			// Return State
			return State;
		};

		/**
		 * Get a State's String
		 * @param {State} passedState
		 */
		History.getStateString = function(passedState){
			// Prepare
			var State = History.normalizeState(passedState);

			// Clean
			var cleanedState = {
				data: State.data,
				title: passedState.title,
				url: passedState.url
			};

			// Fetch
			var str = JSON.stringify(cleanedState);

			// Return
			return str;
		};

		/**
		 * Get a State's ID
		 * @param {State} passedState
		 * @return {String} id
		 */
		History.getStateId = function(passedState){
			// Prepare
			var State = History.normalizeState(passedState);

			// Fetch
			var id = State.id;

			// Return
			return id;
		};

		/**
		 * History.getHashByState(State)
		 * Creates a Hash for the State Object
		 * @param {State} passedState
		 * @return {String} hash
		 */
		History.getHashByState = function(passedState){
			// Prepare
			var hash, State = History.normalizeState(passedState);

			// Fetch
			hash = State.hash;

			// Return
			return hash;
		};

		/**
		 * History.extractId(url_or_hash)
		 * Get a State ID by it's URL or Hash
		 * @param {string} url_or_hash
		 * @return {string} id
		 */
		History.extractId = function ( url_or_hash ) {
			// Prepare
			var id;

			// Extract
			var parts,url;
			parts = /(.*)\&_suid=([0-9]+)$/.exec(url_or_hash);
			url = parts ? (parts[1]||url_or_hash) : url_or_hash;
			id = parts ? String(parts[2]||'') : '';

			// Return
			return id||false;
		};

		/**
		 * History.isTraditionalAnchor
		 * Checks to see if the url is a traditional anchor or not
		 * @param {String} url_or_hash
		 * @return {Boolean}
		 */
		History.isTraditionalAnchor = function(url_or_hash){
			// Check
			var isTraditional = !(/[\/\?\.]/.test(url_or_hash));

			// Return
			return isTraditional;
		};

		/**
		 * History.extractState
		 * Get a State by it's URL or Hash
		 * @param {String} url_or_hash
		 * @return {State|null}
		 */
		History.extractState = function(url_or_hash,create){
			// Prepare
			var State = null;
			create = create||false;

			// Fetch SUID
			var id = History.extractId(url_or_hash);
			if ( id ) {
				State = History.getStateById(id);
			}

			// Fetch SUID returned no State
			if ( !State ) {
				// Fetch URL
				var url = History.getFullUrl(url_or_hash);

				// Check URL
				id = History.getIdByUrl(url)||false;
				if ( id ) {
					State = History.getStateById(id);
				}

				// Create State
				if ( !State && create && !History.isTraditionalAnchor(url_or_hash) ) {
					State = History.createStateObject(null,null,url);
				}
			}

			// Return
			return State;
		};

		/**
		 * History.getIdByUrl()
		 * Get a State ID by a State URL
		 */
		History.getIdByUrl = function(url){
			// Fetch
			var id = History.urlToId[url] || History.store.urlToId[url] || undefined;

			// Return
			return id;
		};

		/**
		 * History.getLastSavedState()
		 * Get an object containing the data, title and url of the current state
		 * @return {Object} State
		 */
		History.getLastSavedState = function(){
			return History.savedStates[History.savedStates.length-1]||undefined;
		};

		/**
		 * History.getLastStoredState()
		 * Get an object containing the data, title and url of the current state
		 * @return {Object} State
		 */
		History.getLastStoredState = function(){
			return History.storedStates[History.storedStates.length-1]||undefined;
		};

		/**
		 * History.hasUrlDuplicate
		 * Checks if a Url will have a url conflict
		 * @param {Object} newState
		 * @return {Boolean} hasDuplicate
		 */
		History.hasUrlDuplicate = function(newState) {
			// Prepare
			var hasDuplicate = false;

			// Fetch
			var oldState = History.extractState(newState.url);

			// Check
			hasDuplicate = oldState && oldState.id !== newState.id;

			// Return
			return hasDuplicate;
		};

		/**
		 * History.storeState
		 * Store a State
		 * @param {Object} newState
		 * @return {Object} newState
		 */
		History.storeState = function(newState){
			// Store the State
			History.urlToId[newState.url] = newState.id;

			// Push the State
			History.storedStates.push(History.cloneObject(newState));

			// Return newState
			return newState;
		};

		/**
		 * History.isLastSavedState(newState)
		 * Tests to see if the state is the last state
		 * @param {Object} newState
		 * @return {boolean} isLast
		 */
		History.isLastSavedState = function(newState){
			// Prepare
			var isLast = false;

			// Check
			if ( History.savedStates.length ) {
				var
					newId = newState.id,
					oldState = History.getLastSavedState(),
					oldId = oldState.id;

				// Check
				isLast = (newId === oldId);
			}

			// Return
			return isLast;
		};

		/**
		 * History.saveState
		 * Push a State
		 * @param {Object} newState
		 * @return {boolean} changed
		 */
		History.saveState = function(newState){
			// Check Hash
			if ( History.isLastSavedState(newState) ) {
				return false;
			}

			// Push the State
			History.savedStates.push(History.cloneObject(newState));

			// Return true
			return true;
		};

		/**
		 * History.getStateByIndex()
		 * Gets a state by the index
		 * @param {integer} index
		 * @return {Object}
		 */
		History.getStateByIndex = function(index){
			// Prepare
			var State = null;

			// Handle
			if ( typeof index === 'undefined' ) {
				// Get the last inserted
				State = History.savedStates[History.savedStates.length-1];
			}
			else if ( index < 0 ) {
				// Get from the end
				State = History.savedStates[History.savedStates.length+index];
			}
			else {
				// Get from the beginning
				State = History.savedStates[index];
			}

			// Return State
			return State;
		};

		// ----------------------------------------------------------------------
		// Hash Helpers

		/**
		 * History.getHash()
		 * Gets the current document hash
		 * @return {string}
		 */
		History.getHash = function(){
			var hash = History.unescapeHash(document.location.hash);
			return hash;
		};

		/**
		 * History.unescapeString()
		 * Unescape a string
		 * @param {String} str
		 * @return {string}
		 */
		History.unescapeString = function(str){
			// Prepare
			var result = str;

			// Unescape hash
			var tmp;
			while ( true ) {
				tmp = window.unescape(result);
				if ( tmp === result ) {
					break;
				}
				result = tmp;
			}

			// Return result
			return result;
		};

		/**
		 * History.unescapeHash()
		 * normalize and Unescape a Hash
		 * @param {String} hash
		 * @return {string}
		 */
		History.unescapeHash = function(hash){
			// Prepare
			var result = History.normalizeHash(hash);

			// Unescape hash
			result = History.unescapeString(result);

			// Return result
			return result;
		};

		/**
		 * History.normalizeHash()
		 * normalize a hash across browsers
		 * @return {string}
		 */
		History.normalizeHash = function(hash){
			var result = hash.replace(/[^#]*#/,'').replace(/#.*/, '');

			// Return result
			return result;
		};

		/**
		 * History.setHash(hash)
		 * Sets the document hash
		 * @param {string} hash
		 * @return {History}
		 */
		History.setHash = function(hash,queue){
			// Handle Queueing
			if ( queue !== false && History.busy() ) {
				// Wait + Push to Queue
				//History.debug('History.setHash: we must wait', arguments);
				History.pushQueue({
					scope: History,
					callback: History.setHash,
					args: arguments,
					queue: queue
				});
				return false;
			}

			// Log
			//History.debug('History.setHash: called',hash);

			// Prepare
			var adjustedHash = History.escapeHash(hash);

			// Make Busy + Continue
			History.busy(true);

			// Check if hash is a state
			var State = History.extractState(hash,true);
			if ( State && !History.emulated.pushState ) {
				// Hash is a state so skip the setHash
				//History.debug('History.setHash: Hash is a state so skipping the hash set with a direct pushState call',arguments);

				// PushState
				History.pushState(State.data,State.title,State.url,false);
			}
			else if ( document.location.hash !== adjustedHash ) {
				// Hash is a proper hash, so apply it

				// Handle browser bugs
				if ( History.bugs.setHash ) {
					// Fix Safari Bug https://bugs.webkit.org/show_bug.cgi?id=56249

					// Fetch the base page
					var pageUrl = History.getPageUrl();

					// Safari hash apply
					History.pushState(null,null,pageUrl+'#'+adjustedHash,false);
				}
				else {
					// Normal hash apply
					document.location.hash = adjustedHash;
				}
			}

			// Chain
			return History;
		};

		/**
		 * History.escape()
		 * normalize and Escape a Hash
		 * @return {string}
		 */
		History.escapeHash = function(hash){
			var result = History.normalizeHash(hash);

			// Escape hash
			result = window.escape(result);

			// IE6 Escape Bug
			if ( !History.bugs.hashEscape ) {
				// Restore common parts
				result = result
					.replace(/\%21/g,'!')
					.replace(/\%26/g,'&')
					.replace(/\%3D/g,'=')
					.replace(/\%3F/g,'?');
			}

			// Return result
			return result;
		};

		/**
		 * History.getHashByUrl(url)
		 * Extracts the Hash from a URL
		 * @param {string} url
		 * @return {string} url
		 */
		History.getHashByUrl = function(url){
			// Extract the hash
			var hash = String(url)
				.replace(/([^#]*)#?([^#]*)#?(.*)/, '$2')
				;

			// Unescape hash
			hash = History.unescapeHash(hash);

			// Return hash
			return hash;
		};

		/**
		 * History.setTitle(title)
		 * Applies the title to the document
		 * @param {State} newState
		 * @return {Boolean}
		 */
		History.setTitle = function(newState){
			// Prepare
			var title = newState.title;

			// Initial
			if ( !title ) {
				var firstState = History.getStateByIndex(0);
				if ( firstState && firstState.url === newState.url ) {
					title = firstState.title||History.options.initialTitle;
				}
			}

			// Apply
			try {
				document.getElementsByTagName('title')[0].innerHTML = title.replace('<','&lt;').replace('>','&gt;').replace(' & ',' &amp; ');
			}
			catch ( Exception ) { }
			document.title = title;

			// Chain
			return History;
		};

		// ----------------------------------------------------------------------
		// Queueing

		/**
		 * History.queues
		 * The list of queues to use
		 * First In, First Out
		 */
		History.queues = [];

		/**
		 * History.busy(value)
		 * @param {boolean} value [optional]
		 * @return {boolean} busy
		 */
		History.busy = function(value){
			// Apply
			if ( typeof value !== 'undefined' ) {
				//History.debug('History.busy: changing ['+(History.busy.flag||false)+'] to ['+(value||false)+']', History.queues.length);
				History.busy.flag = value;
			}
			// Default
			else if ( typeof History.busy.flag === 'undefined' ) {
				History.busy.flag = false;
			}

			// Queue
			if ( !History.busy.flag ) {
				// Execute the next item in the queue
				clearTimeout(History.busy.timeout);
				var fireNext = function(){
					if ( History.busy.flag ) return;
					for ( var i=History.queues.length-1; i >= 0; --i ) {
						var queue = History.queues[i];
						if ( queue.length === 0 ) continue;
						var item = queue.shift();
						History.fireQueueItem(item);
						History.busy.timeout = setTimeout(fireNext,History.options.busyDelay);
					}
				};
				History.busy.timeout = setTimeout(fireNext,History.options.busyDelay);
			}

			// Return
			return History.busy.flag;
		};

		/**
		 * History.fireQueueItem(item)
		 * Fire a Queue Item
		 * @param {Object} item
		 * @return {Mixed} result
		 */
		History.fireQueueItem = function(item){
			return item.callback.apply(item.scope||History,item.args||[]);
		};

		/**
		 * History.pushQueue(callback,args)
		 * Add an item to the queue
		 * @param {Object} item [scope,callback,args,queue]
		 */
		History.pushQueue = function(item){
			// Prepare the queue
			History.queues[item.queue||0] = History.queues[item.queue||0]||[];

			// Add to the queue
			History.queues[item.queue||0].push(item);

			// Chain
			return History;
		};

		/**
		 * History.queue (item,queue), (func,queue), (func), (item)
		 * Either firs the item now if not busy, or adds it to the queue
		 */
		History.queue = function(item,queue){
			// Prepare
			if ( typeof item === 'function' ) {
				item = {
					callback: item
				};
			}
			if ( typeof queue !== 'undefined' ) {
				item.queue = queue;
			}

			// Handle
			if ( History.busy() ) {
				History.pushQueue(item);
			} else {
				History.fireQueueItem(item);
			}

			// Chain
			return History;
		};

		/**
		 * History.clearQueue()
		 * Clears the Queue
		 */
		History.clearQueue = function(){
			History.busy.flag = false;
			History.queues = [];
			return History;
		};


		// ----------------------------------------------------------------------
		// IE Bug Fix

		/**
		 * History.stateChanged
		 * States whether or not the state has changed since the last double check was initialised
		 */
		History.stateChanged = false;

		/**
		 * History.doubleChecker
		 * Contains the timeout used for the double checks
		 */
		History.doubleChecker = false;

		/**
		 * History.doubleCheckComplete()
		 * Complete a double check
		 * @return {History}
		 */
		History.doubleCheckComplete = function(){
			// Update
			History.stateChanged = true;

			// Clear
			History.doubleCheckClear();

			// Chain
			return History;
		};

		/**
		 * History.doubleCheckClear()
		 * Clear a double check
		 * @return {History}
		 */
		History.doubleCheckClear = function(){
			// Clear
			if ( History.doubleChecker ) {
				clearTimeout(History.doubleChecker);
				History.doubleChecker = false;
			}

			// Chain
			return History;
		};

		/**
		 * History.doubleCheck()
		 * Create a double check
		 * @return {History}
		 */
		History.doubleCheck = function(tryAgain){
			// Reset
			History.stateChanged = false;
			History.doubleCheckClear();

			// Fix IE6,IE7 bug where calling history.back or history.forward does not actually change the hash (whereas doing it manually does)
			// Fix Safari 5 bug where sometimes the state does not change: https://bugs.webkit.org/show_bug.cgi?id=42940
			if ( History.bugs.ieDoubleCheck ) {
				// Apply Check
				History.doubleChecker = setTimeout(
					function(){
						History.doubleCheckClear();
						if ( !History.stateChanged ) {
							//History.debug('History.doubleCheck: State has not yet changed, trying again', arguments);
							// Re-Attempt
							tryAgain();
						}
						return true;
					},
					History.options.doubleCheckInterval
				);
			}

			// Chain
			return History;
		};

		// ----------------------------------------------------------------------
		// Safari Bug Fix

		/**
		 * History.safariStatePoll()
		 * Poll the current state
		 * @return {History}
		 */
		History.safariStatePoll = function(){
			// Poll the URL

			// Get the Last State which has the new URL
			var
				urlState = History.extractState(document.location.href),
				newState;

			// Check for a difference
			if ( !History.isLastSavedState(urlState) ) {
				newState = urlState;
			}
			else {
				return;
			}

			// Check if we have a state with that url
			// If not create it
			if ( !newState ) {
				//History.debug('History.safariStatePoll: new');
				newState = History.createStateObject();
			}

			// Apply the New State
			//History.debug('History.safariStatePoll: trigger');
			History.Adapter.trigger(window,'popstate');

			// Chain
			return History;
		};

		// ----------------------------------------------------------------------
		// State Aliases

		/**
		 * History.back(queue)
		 * Send the browser history back one item
		 * @param {Integer} queue [optional]
		 */
		History.back = function(queue){
			//History.debug('History.back: called', arguments);

			// Handle Queueing
			if ( queue !== false && History.busy() ) {
				// Wait + Push to Queue
				//History.debug('History.back: we must wait', arguments);
				History.pushQueue({
					scope: History,
					callback: History.back,
					args: arguments,
					queue: queue
				});
				return false;
			}

			// Make Busy + Continue
			History.busy(true);

			// Fix certain browser bugs that prevent the state from changing
			History.doubleCheck(function(){
				History.back(false);
			});

			// Go back
			history.go(-1);

			// End back closure
			return true;
		};

		/**
		 * History.forward(queue)
		 * Send the browser history forward one item
		 * @param {Integer} queue [optional]
		 */
		History.forward = function(queue){
			//History.debug('History.forward: called', arguments);

			// Handle Queueing
			if ( queue !== false && History.busy() ) {
				// Wait + Push to Queue
				//History.debug('History.forward: we must wait', arguments);
				History.pushQueue({
					scope: History,
					callback: History.forward,
					args: arguments,
					queue: queue
				});
				return false;
			}

			// Make Busy + Continue
			History.busy(true);

			// Fix certain browser bugs that prevent the state from changing
			History.doubleCheck(function(){
				History.forward(false);
			});

			// Go forward
			history.go(1);

			// End forward closure
			return true;
		};

		/**
		 * History.go(index,queue)
		 * Send the browser history back or forward index times
		 * @param {Integer} queue [optional]
		 */
		History.go = function(index,queue){
			//History.debug('History.go: called', arguments);

			// Prepare
			var i;

			// Handle
			if ( index > 0 ) {
				// Forward
				for ( i=1; i<=index; ++i ) {
					History.forward(queue);
				}
			}
			else if ( index < 0 ) {
				// Backward
				for ( i=-1; i>=index; --i ) {
					History.back(queue);
				}
			}
			else {
				throw new Error('History.go: History.go requires a positive or negative integer passed.');
			}

			// Chain
			return History;
		};


		// ----------------------------------------------------------------------
		// Initialise

		/**
		 * Create the initial State
		 */
		History.saveState(History.storeState(History.extractState(document.location.href,true)));

		/**
		 * Bind for Saving Store
		 */
		if ( amplify ) {
			History.onUnload = function(){
				// Prepare
				var
					currentStore = amplify.store('History.store')||{},
					item;

				// Ensure
				currentStore.idToState = currentStore.idToState || {};
				currentStore.urlToId = currentStore.urlToId || {};
				currentStore.stateToId = currentStore.stateToId || {};

				// Sync
				for ( item in History.idToState ) {
					if ( !History.idToState.hasOwnProperty(item) ) {
						continue;
					}
					currentStore.idToState[item] = History.idToState[item];
				}
				for ( item in History.urlToId ) {
					if ( !History.urlToId.hasOwnProperty(item) ) {
						continue;
					}
					currentStore.urlToId[item] = History.urlToId[item];
				}
				for ( item in History.stateToId ) {
					if ( !History.stateToId.hasOwnProperty(item) ) {
						continue;
					}
					currentStore.stateToId[item] = History.stateToId[item];
				}

				// Update
				History.store = currentStore;

				// Store
				amplify.store('History.store',currentStore);
			};
			// For Internet Explorer
			History.intervalList.push(setInterval(History.onUnload,History.options.storeInterval));
			// For Other Browsers
			History.Adapter.bind(window,'beforeunload',History.onUnload);
			History.Adapter.bind(window,'unload',History.onUnload);
			// Both are enabled for consistency
		}


		// ----------------------------------------------------------------------
		// HTML5 State Support

		if ( History.emulated.pushState ) {
			/*
			 * Provide Skeleton for HTML4 Browsers
			 */

			// Prepare
			var emptyFunction = function(){};
			History.pushState = History.pushState||emptyFunction;
			History.replaceState = History.replaceState||emptyFunction;
		}
		else {
			/*
			 * Use native HTML5 History API Implementation
			 */

			/**
			 * History.onPopState(event,extra)
			 * Refresh the Current State
			 */
			History.onPopState = function(event){
				// Reset the double check
				History.doubleCheckComplete();

				// Check for a Hash, and handle apporiatly
				var currentHash	= History.getHash();
				if ( currentHash ) {
					// Expand Hash
					var currentState = History.extractState(currentHash||document.location.href,true);
					if ( currentState ) {
						// We were able to parse it, it must be a State!
						// Let's forward to replaceState
						//History.debug('History.onPopState: state anchor', currentHash, currentState);
						History.replaceState(currentState.data, currentState.title, currentState.url, false);
					}
					else {
						// Traditional Anchor
						//History.debug('History.onPopState: traditional anchor', currentHash);
						History.Adapter.trigger(window,'anchorchange');
						History.busy(false);
					}

					// We don't care for hashes
					History.expectedStateId = false;
					return false;
				}

				// Prepare
				var newState = false;

				// Prepare
				event = event||{};
				if ( typeof event.state === 'undefined' ) {
					// jQuery
					if ( typeof event.originalEvent !== 'undefined' && typeof event.originalEvent.state !== 'undefined' ) {
						event.state = event.originalEvent.state||false;
					}
					// MooTools
					else if ( typeof event.event !== 'undefined' && typeof event.event.state !== 'undefined' ) {
						event.state = event.event.state||false;
					}
				}

				// Ensure
				event.state = (event.state||false);

				// Fetch State
				if ( event.state ) {
					// Vanilla: Back/forward button was used
					newState = History.getStateById(event.state);
				}
				else if ( History.expectedStateId ) {
					// Vanilla: A new state was pushed, and popstate was called manually
					newState = History.getStateById(History.expectedStateId);
				}
				else {
					// Initial State
					newState = History.extractState(document.location.href);
				}

				// The State did not exist in our store
				if ( !newState ) {
					// Regenerate the State
					newState = History.createStateObject(null,null,document.location.href);
				}

				// Clean
				History.expectedStateId = false;

				// Check if we are the same state
				if ( History.isLastSavedState(newState) ) {
					// There has been no change (just the page's hash has finally propagated)
					//History.debug('History.onPopState: no change', newState, History.savedStates);
					History.busy(false);
					return false;
				}

				// Store the State
				History.storeState(newState);
				History.saveState(newState);

				// Force update of the title
				History.setTitle(newState);

				// Fire Our Event
				History.Adapter.trigger(window,'statechange');
				History.busy(false);

				// Return true
				return true;
			};
			History.Adapter.bind(window,'popstate',History.onPopState);

			/**
			 * History.pushState(data,title,url)
			 * Add a new State to the history object, become it, and trigger onpopstate
			 * We have to trigger for HTML4 compatibility
			 * @param {object} data
			 * @param {string} title
			 * @param {string} url
			 * @return {true}
			 */
			History.pushState = function(data,title,url,queue){
				//History.debug('History.pushState: called', arguments);

				// Check the State
				if ( History.getHashByUrl(url) && History.emulated.pushState ) {
					throw new Error('History.js does not support states with fragement-identifiers (hashes/anchors).');
				}

				// Handle Queueing
				if ( queue !== false && History.busy() ) {
					// Wait + Push to Queue
					//History.debug('History.pushState: we must wait', arguments);
					History.pushQueue({
						scope: History,
						callback: History.pushState,
						args: arguments,
						queue: queue
					});
					return false;
				}

				// Make Busy + Continue
				History.busy(true);

				// Create the newState
				var newState = History.createStateObject(data,title,url);

				// Check it
				if ( History.isLastSavedState(newState) ) {
					// Won't be a change
					History.busy(false);
				}
				else {
					// Store the newState
					History.storeState(newState);
					History.expectedStateId = newState.id;

					// Push the newState
					history.pushState(newState.id,newState.title,newState.url);

					// Fire HTML5 Event
					History.Adapter.trigger(window,'popstate');
				}

				// End pushState closure
				return true;
			};

			/**
			 * History.replaceState(data,title,url)
			 * Replace the State and trigger onpopstate
			 * We have to trigger for HTML4 compatibility
			 * @param {object} data
			 * @param {string} title
			 * @param {string} url
			 * @return {true}
			 */
			History.replaceState = function(data,title,url,queue){
				//History.debug('History.replaceState: called', arguments);

				// Check the State
				if ( History.getHashByUrl(url) && History.emulated.pushState ) {
					throw new Error('History.js does not support states with fragement-identifiers (hashes/anchors).');
				}

				// Handle Queueing
				if ( queue !== false && History.busy() ) {
					// Wait + Push to Queue
					//History.debug('History.replaceState: we must wait', arguments);
					History.pushQueue({
						scope: History,
						callback: History.replaceState,
						args: arguments,
						queue: queue
					});
					return false;
				}

				// Make Busy + Continue
				History.busy(true);

				// Create the newState
				var newState = History.createStateObject(data,title,url);

				// Check it
				if ( History.isLastSavedState(newState) ) {
					// Won't be a change
					History.busy(false);
				}
				else {
					// Store the newState
					History.storeState(newState);
					History.expectedStateId = newState.id;

					// Push the newState
					history.replaceState(newState.id,newState.title,newState.url);

					// Fire HTML5 Event
					History.Adapter.trigger(window,'popstate');
				}

				// End replaceState closure
				return true;
			};

			// Be aware, the following is only for native pushState implementations
			// If you are wanting to include something for all browsers
			// Then include it above this if block

			/**
			 * Setup Safari Fix
			 */
			if ( History.bugs.safariPoll ) {
				History.intervalList.push(setInterval(History.safariStatePoll, History.options.safariPollInterval));
			}

			/**
			 * Ensure Cross Browser Compatibility
			 */
			if ( navigator.vendor === 'Apple Computer, Inc.' || (navigator.appCodeName||'') === 'Mozilla' ) {
				/**
				 * Fix Safari HashChange Issue
				 */

				// Setup Alias
				History.Adapter.bind(window,'hashchange',function(){
					History.Adapter.trigger(window,'popstate');
				});

				// Initialise Alias
				if ( History.getHash() ) {
					History.Adapter.onDomLoad(function(){
						History.Adapter.trigger(window,'hashchange');
					});
				}
			}

		} // !History.emulated.pushState

	}; // History.initCore

	// Try and Initialise History
	History.init();

})(window);

/**
 * History.js HTML4 Support
 * Depends on the HTML5 Support
 * @author Benjamin Arthur Lupton <contact@balupton.com>
 * @copyright 2010-2011 Benjamin Arthur Lupton <contact@balupton.com>
 * @license New BSD License <http://creativecommons.org/licenses/BSD/>
 */

(function(window,undefined){
	"use strict";

	// --------------------------------------------------------------------------
	// Initialise

	// Localise Globals
	var
		document = window.document, // Make sure we are using the correct document
		setTimeout = window.setTimeout||setTimeout,
		clearTimeout = window.clearTimeout||clearTimeout,
		setInterval = window.setInterval||setInterval,
		History = window.History = window.History||{}; // Public History Object

	// Check Existence
	if ( typeof History.initHtml4 !== 'undefined' ) {
		throw new Error('History.js HTML4 Support has already been loaded...');
	}

	// --------------------------------------------------------------------------
	// Initialise HTML4 Support

	// Initialise HTML4 Support
	History.initHtml4 = function(){
		// Initialise
		if ( typeof History.initHtml4.initialized !== 'undefined' ) {
			// Already Loaded
			return false;
		}
		else {
			History.initHtml4.initialized = true;
		}

		// ----------------------------------------------------------------------
		// Properties

		/**
		 * History.enabled
		 * Is History enabled?
		 */
		History.enabled = true;


		// ----------------------------------------------------------------------
		// Hash Storage

		/**
		 * History.savedHashes
		 * Store the hashes in an array
		 */
		History.savedHashes = [];

		/**
		 * History.isLastHash(newHash)
		 * Checks if the hash is the last hash
		 * @param {string} newHash
		 * @return {boolean} true
		 */
		History.isLastHash = function(newHash){
			// Prepare
			var oldHash = History.getHashByIndex();

			// Check
			var isLast = newHash === oldHash;

			// Return isLast
			return isLast;
		};

		/**
		 * History.saveHash(newHash)
		 * Push a Hash
		 * @param {string} newHash
		 * @return {boolean} true
		 */
		History.saveHash = function(newHash){
			// Check Hash
			if ( History.isLastHash(newHash) ) {
				return false;
			}

			// Push the Hash
			History.savedHashes.push(newHash);

			// Return true
			return true;
		};

		/**
		 * History.getHashByIndex()
		 * Gets a hash by the index
		 * @param {integer} index
		 * @return {string}
		 */
		History.getHashByIndex = function(index){
			// Prepare
			var hash = null;

			// Handle
			if ( typeof index === 'undefined' ) {
				// Get the last inserted
				hash = History.savedHashes[History.savedHashes.length-1];
			}
			else if ( index < 0 ) {
				// Get from the end
				hash = History.savedHashes[History.savedHashes.length+index];
			}
			else {
				// Get from the beginning
				hash = History.savedHashes[index];
			}

			// Return hash
			return hash;
		};

		// ----------------------------------------------------------------------
		// Discarded States

		/**
		 * History.discardedHashes
		 * A hashed array of discarded hashes
		 */
		History.discardedHashes = {};

		/**
		 * History.discardedStates
		 * A hashed array of discarded states
		 */
		History.discardedStates = {};

		/**
		 * History.discardState(State)
		 * Discards the state by ignoring it through History
		 * @param {object} State
		 * @return {true}
		 */
		History.discardState = function(discardedState,forwardState,backState){
			//History.debug('History.discardState', arguments);
			// Prepare
			var discardedStateHash = History.getHashByState(discardedState);

			// Create Discard Object
			var discardObject = {
				'discardedState': discardedState,
				'backState': backState,
				'forwardState': forwardState
			};

			// Add to DiscardedStates
			History.discardedStates[discardedStateHash] = discardObject;

			// Return true
			return true;
		};

		/**
		 * History.discardHash(hash)
		 * Discards the hash by ignoring it through History
		 * @param {string} hash
		 * @return {true}
		 */
		History.discardHash = function(discardedHash,forwardState,backState){
			//History.debug('History.discardState', arguments);
			// Create Discard Object
			var discardObject = {
				'discardedHash': discardedHash,
				'backState': backState,
				'forwardState': forwardState
			};

			// Add to discardedHash
			History.discardedHashes[discardedHash] = discardObject;

			// Return true
			return true;
		};

		/**
		 * History.discardState(State)
		 * Checks to see if the state is discarded
		 * @param {object} State
		 * @return {bool}
		 */
		History.discardedState = function(State){
			// Prepare
			var StateHash = History.getHashByState(State);

			// Check
			var discarded = History.discardedStates[StateHash]||false;

			// Return true
			return discarded;
		};

		/**
		 * History.discardedHash(hash)
		 * Checks to see if the state is discarded
		 * @param {string} State
		 * @return {bool}
		 */
		History.discardedHash = function(hash){
			// Check
			var discarded = History.discardedHashes[hash]||false;

			// Return true
			return discarded;
		};

		/**
		 * History.recycleState(State)
		 * Allows a discarded state to be used again
		 * @param {object} data
		 * @param {string} title
		 * @param {string} url
		 * @return {true}
		 */
		History.recycleState = function(State){
			//History.debug('History.recycleState', arguments);
			// Prepare
			var StateHash = History.getHashByState(State);

			// Remove from DiscardedStates
			if ( History.discardedState(State) ) {
				delete History.discardedStates[StateHash];
			}

			// Return true
			return true;
		};

		// ----------------------------------------------------------------------
		// HTML4 HashChange Support

		if ( History.emulated.hashChange ) {
			/*
			 * We must emulate the HTML4 HashChange Support by manually checking for hash changes
			 */

			/**
			 * History.hashChangeInit()
			 * Init the HashChange Emulation
			 */
			History.hashChangeInit = function(){
				// Define our Checker Function
				History.checkerFunction = null;

				// Define some variables that will help in our checker function
				var
					lastDocumentHash = '';

				// Handle depending on the browser
				if ( History.isInternetExplorer() ) {
					// IE6 and IE7
					// We need to use an iframe to emulate the back and forward buttons

					// Create iFrame
					var
						iframeId = 'historyjs-iframe',
						iframe = document.createElement('iframe');

					// Adjust iFarme
					iframe.setAttribute('id', iframeId);
					iframe.style.display = 'none';

					// Append iFrame
					document.body.appendChild(iframe);

					// Create initial history entry
					iframe.contentWindow.document.open();
					iframe.contentWindow.document.close();

					// Define some variables that will help in our checker function
					var
						lastIframeHash = '',
						checkerRunning = false;

					// Define the checker function
					History.checkerFunction = function(){
						// Check Running
						if ( checkerRunning ) {
							return false;
						}

						// Update Running
						checkerRunning = true;

						// Fetch
						var
							documentHash = History.getHash()||'',
							iframeHash = History.unescapeHash(iframe.contentWindow.document.location.hash)||'';

						// The Document Hash has changed (application caused)
						if ( documentHash !== lastDocumentHash ) {
							// Equalise
							lastDocumentHash = documentHash;

							// Create a history entry in the iframe
							if ( iframeHash !== documentHash ) {
								//History.debug('hashchange.checker: iframe hash change', 'documentHash (new):', documentHash, 'iframeHash (old):', iframeHash);

								// Equalise
								lastIframeHash = iframeHash = documentHash;

								// Create History Entry
								iframe.contentWindow.document.open();
								iframe.contentWindow.document.close();

								// Update the iframe's hash
								iframe.contentWindow.document.location.hash = History.escapeHash(documentHash);
							}

							// Trigger Hashchange Event
							History.Adapter.trigger(window,'hashchange');
						}

						// The iFrame Hash has changed (back button caused)
						else if ( iframeHash !== lastIframeHash ) {
							//History.debug('hashchange.checker: iframe hash out of sync', 'iframeHash (new):', iframeHash, 'documentHash (old):', documentHash);

							// Equalise
							lastIframeHash = iframeHash;

							// Update the Hash
							History.setHash(iframeHash,false);
						}

						// Reset Running
						checkerRunning = false;

						// Return true
						return true;
					};
				}
				else {
					// We are not IE
					// Firefox 1 or 2, Opera

					// Define the checker function
					History.checkerFunction = function(){
						// Prepare
						var documentHash = History.getHash();

						// The Document Hash has changed (application caused)
						if ( documentHash !== lastDocumentHash ) {
							// Equalise
							lastDocumentHash = documentHash;

							// Trigger Hashchange Event
							History.Adapter.trigger(window,'hashchange');
						}

						// Return true
						return true;
					};
				}

				// Apply the checker function
				History.intervalList.push(setInterval(History.checkerFunction, History.options.hashChangeInterval));

				// Done
				return true;
			}; // History.hashChangeInit

			// Bind hashChangeInit
			History.Adapter.onDomLoad(History.hashChangeInit);

		} // History.emulated.hashChange


		// ----------------------------------------------------------------------
		// HTML5 State Support

		if ( History.emulated.pushState ) {
			/*
			 * We must emulate the HTML5 State Management by using HTML4 HashChange
			 */

			/**
			 * History.onHashChange(event)
			 * Trigger HTML5's window.onpopstate via HTML4 HashChange Support
			 */
			History.onHashChange = function(event){
				//History.debug('History.onHashChange', arguments);

				// Prepare
				var
					currentUrl						= ((event && event.newURL) || document.location.href),
					currentHash						= History.getHashByUrl(currentUrl),
					currentState					= null,
					currentStateHash			= null,
					currentStateHashExits	= null;

				// Check if we are the same state
				if ( History.isLastHash(currentHash) ) {
					// There has been no change (just the page's hash has finally propagated)
					//History.debug('History.onHashChange: no change');
					History.busy(false);
					return false;
				}

				// Reset the double check
				History.doubleCheckComplete();

				// Store our location for use in detecting back/forward direction
				History.saveHash(currentHash);

				// Expand Hash
				if ( currentHash && History.isTraditionalAnchor(currentHash) ) {
					//History.debug('History.onHashChange: traditional anchor', currentHash);
					// Traditional Anchor Hash
					History.Adapter.trigger(window,'anchorchange');
					History.busy(false);
					return false;
				}

				// Create State
				currentState = History.extractState(History.getFullUrl(currentHash||document.location.href,false),true);

				// Check if we are the same state
				if ( History.isLastSavedState(currentState) ) {
					//History.debug('History.onHashChange: no change');
					// There has been no change (just the page's hash has finally propagated)
					History.busy(false);
					return false;
				}

				// Create the state Hash
				currentStateHash = History.getHashByState(currentState);

				// Check if we are DiscardedState
				var discardObject = History.discardedState(currentState);
				if ( discardObject ) {
					// Ignore this state as it has been discarded and go back to the state before it
					if ( History.getHashByIndex(-2) === History.getHashByState(discardObject.forwardState) ) {
						// We are going backwards
						//History.debug('History.onHashChange: go backwards');
						History.back(false);
					} else {
						// We are going forwards
						//History.debug('History.onHashChange: go forwards');
						History.forward(false);
					}
					return false;
				}

				// Push the new HTML5 State
				//History.debug('History.onHashChange: success hashchange');
				History.pushState(currentState.data,currentState.title,currentState.url,false);

				// End onHashChange closure
				return true;
			};
			History.Adapter.bind(window,'hashchange',History.onHashChange);

			/**
			 * History.pushState(data,title,url)
			 * Add a new State to the history object, become it, and trigger onpopstate
			 * We have to trigger for HTML4 compatibility
			 * @param {object} data
			 * @param {string} title
			 * @param {string} url
			 * @return {true}
			 */
			History.pushState = function(data,title,url,queue){
				//History.debug('History.pushState: called', arguments);

				// Check the State
				if ( History.getHashByUrl(url) ) {
					throw new Error('History.js does not support states with fragement-identifiers (hashes/anchors).');
				}

				// Handle Queueing
				if ( queue !== false && History.busy() ) {
					// Wait + Push to Queue
					//History.debug('History.pushState: we must wait', arguments);
					History.pushQueue({
						scope: History,
						callback: History.pushState,
						args: arguments,
						queue: queue
					});
					return false;
				}

				// Make Busy
				History.busy(true);

				// Fetch the State Object
				var
					newState = History.createStateObject(data,title,url),
					newStateHash = History.getHashByState(newState),
					oldState = History.getState(false),
					oldStateHash = History.getHashByState(oldState),
					html4Hash = History.getHash();

				// Store the newState
				History.storeState(newState);
				History.expectedStateId = newState.id;

				// Recycle the State
				History.recycleState(newState);

				// Force update of the title
				History.setTitle(newState);

				// Check if we are the same State
				if ( newStateHash === oldStateHash ) {
					//History.debug('History.pushState: no change', newStateHash);
					History.busy(false);
					return false;
				}

				// Update HTML4 Hash
				if ( newStateHash !== html4Hash && newStateHash !== History.getShortUrl(document.location.href) ) {
					//History.debug('History.pushState: update hash', newStateHash, html4Hash);
					History.setHash(newStateHash,false);
					return false;
				}

				// Update HTML5 State
				History.saveState(newState);

				// Fire HTML5 Event
				//History.debug('History.pushState: trigger popstate');
				History.Adapter.trigger(window,'statechange');
				History.busy(false);

				// End pushState closure
				return true;
			};

			/**
			 * History.replaceState(data,title,url)
			 * Replace the State and trigger onpopstate
			 * We have to trigger for HTML4 compatibility
			 * @param {object} data
			 * @param {string} title
			 * @param {string} url
			 * @return {true}
			 */
			History.replaceState = function(data,title,url,queue){
				//History.debug('History.replaceState: called', arguments);

				// Check the State
				if ( History.getHashByUrl(url) ) {
					throw new Error('History.js does not support states with fragement-identifiers (hashes/anchors).');
				}

				// Handle Queueing
				if ( queue !== false && History.busy() ) {
					// Wait + Push to Queue
					//History.debug('History.replaceState: we must wait', arguments);
					History.pushQueue({
						scope: History,
						callback: History.replaceState,
						args: arguments,
						queue: queue
					});
					return false;
				}

				// Make Busy
				History.busy(true);

				// Fetch the State Objects
				var
					newState        = History.createStateObject(data,title,url),
					oldState        = History.getState(false),
					previousState   = History.getStateByIndex(-2);

				// Discard Old State
				History.discardState(oldState,newState,previousState);

				// Alias to PushState
				History.pushState(newState.data,newState.title,newState.url,false);

				// End replaceState closure
				return true;
			};

			/**
			 * Ensure initial state is handled correctly
			 */
			if ( History.getHash() && !History.emulated.hashChange ) {
				History.Adapter.onDomLoad(function(){
					History.Adapter.trigger(window,'hashchange');
				});
			}

		} // History.emulated.pushState

	}; // History.initHtml4

	// Try and Initialise History
	History.init();

})(window);

var ABTestService = new Class({

	Extends: APIService,

	executeForVariation: function(testName, variationName, user, callback){
		var userParam = {
			guid: user.guid || user.visitorId,
			partition: user.partition
		};

		var query = {
				testName: testName,
				variationName: variationName,
				User: JSON.encode(userParam)
			},
			path = '/abTestService/executeForVariation' + API.getSlashDelimitedParams(query);

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	},

	convert: function(testName, user, callback){
		var userParam = {
			guid: user.guid || user.visitorId,
			partition: user.partition
		};

		var query = {
				testName: testName,
				User: JSON.encode(userParam)
			},
			path = '/abTestService/convert' + API.getSlashDelimitedParams(query);

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	}
});
var AuthService = new Class({

    Extends: APIService,

    ERROR_INCORRECT_PASSWORD: 410,

    emailLogin: function(options){
        var path = '/AuthService/emailLogin';
        API.post({
            path: path,
            apiVersion: 'v4',
            data: {
                email: options.email
            },
            onSuccess: function(json){
                if (json) {
                    this._onLoginSuccess(json, options.onSuccess);
                } else {
                    this._onFailure(json, options.onFailure);
                }
            }.bind(this),
            onFailure: function(json){
                this._onFailure(json, options.onFailure);
            }.bind(this)
        });
    },

    _onLoginSuccess: function(json, onSuccess){
        /**
         * On v4 login success, make another call to login with v3 to get a valid v3 session token required for v3 services, as well as
         * to set all required user cookies. When we transition to using v4 user service for all auth on www this can be reworked
         */
        Jetsetter.Auth.emailAuth({
            email: json.user.email,
            onSuccess: function() {

                // emailAuth will have overridden Jetsetter.user to be the newly logged in user. Add the v4 token field to it and save.
                Jetsetter.user.session.stv4 = json.sessionToken;
                Jetsetter.user.saveSession(Jetsetter.user.session);

                _gaq.push(['_trackEvent', 'Account', 'Login', 'Success']);
                setTimeout(function() {
                    onSuccess(json);
                }, 500); // delay to allow GAQ to go through
            },
            onFailure: this._onFailure
        });

    },

    _onFailure: function(json, onFailure){
        var errorCode = json.error.code,
            errorMessage = json.error.message;
        // If there's a redirect target to an invite link, go there.
        if (json.data && json.data.location) {
            _gaq.push(['_trackEvent', 'Account', 'Login-send-to-reg', 'Failure']);
            location.replace(json.data.location);
        } else {
            if (errorCode == this.ERROR_INCORRECT_PASSWORD) {
                _gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
                this.loginAttempts++;
            }
            if (this.loginAttempts >= 3) {
                _gaq.push(['_trackEvent', 'Account', 'Login-send-to-forgot-password', 'Failure']);
                onFailure(json);
            } else {
                onFailure(json);
                _gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
            }
        }
    },

    logout: function () {
        location.replace('/auth/logout');
    }

});

var CampaignService = new Class({

    Extends: APIService,

    getPromos: function(options){
        var path = '/CampaignService/promos';

        if (options.type) {
            path = path + '?type=' + options.type;
        }
        
        API.get({
            apiVersion: 'v4',
            path: path,
            secure: false,
            onSuccess: function(data) {
                options.onSuccess && options.onSuccess(data);
            },
            onFailure: function(err, message) {
                options.onFailure && options.onFailure(err, message);
            }
        });
    }
});
var CheckoutService = new Class({

	Extends: APIService,

    processStandby: function(options) {
        this.processOrder(options, 'standbys');
    },

    processHold: function(options) {
        this.processOrder(options, 'holds');
    },

	processOrder: function(options, orderType) {
        var path = '/CheckoutService/' + (orderType || 'orders');

        var data = {
            checkIn: options.checkIn,
            checkOut: options.checkOut,
            roomTypeId: options.roomTypeId,
            ratePlanId: options.ratePlanId,
            creditCardId: options.creditCardId,
            travelerName: options.travelerName,
            phoneNumber: options.phoneNumber,
            quantity: options.quantity,
            reminderEmail: options.reminderEmail,
            iataNumber: options.iataNumber,
            promoCode: options.promoCode,
            fraudTrackingId: options.fraudTrackingId,
            latlng: options.latlng
        };

        if (options.rooms) {
            // optional param
            data.rooms = options.rooms;
        }

        this.serviceCall(path, data, options);
	},

    processExpertVoucher: function(options) {
        var path = '/CheckoutService/travelPlanningVouchers';

        var data = {
            creditCardId: options.creditCardId,
            voucherCertificateId: options.voucherCertificateId,
            quantity: options.quantity,
            recipientName: options.recipientName,
            recipientEmail: options.recipientEmail,
            preferredDestinations: options.preferredDestinations,
            timeFrame: options.tripStart,
            promoCode: options.promoCode,
            fraudTrackingId: options.fraudTrackingId,
            latlng: options.latlng
        };

        this.serviceCall(path, data, options);
    },

    processVoucher: function(options) {
        var path = '/CheckoutService/vouchers';

        var data = {
            creditCardId: options.creditCardId,
            voucherCertificateId: options.voucherCertificateId,
            quantity: options.quantity,
            recipientName: options.recipientName,
            recipientEmail: options.recipientEmail,
            promoCode: options.promoCode,
            senderName: options.senderName,
            message: options.message,
            fraudTrackingId: options.fraudTrackingId,
            latlng: options.latlng
        };

        this.serviceCall(path, data, options);
    },

    processHoldConversionOrder: function(options) {
        var path = '/CheckoutService/holds/' + options.holdOrderId;

        var data = {
            creditCardId: options.creditCardId,
            travelerName: options.travelerName,
            phoneNumber: options.phoneNumber,
            fraudTrackingId: options.fraudTrackingId,
            latlng: options.latlng
        };

        this.serviceCall(path, data, options);
    },

    processGiftCard: function(options) {
        var path = '/CheckoutService/giftcards';

        var data = {
            amount: options.amount,
            senderName: options.senderName,
            sendDate: options.sendDate,
            recipientName: options.recipientName,
            recipientEmail: options.recipientEmail,
            creditCardId: options.creditCardId,
            message: options.message,
            fraudTrackingId: options.fraudTrackingId,
            latlng: options.latlng
        };

        this.serviceCall(path, data, options);
    },

    serviceCall: function(path, data, options) {
		this.addSourceTrackingData(data);
        API.post({
            apiVersion: 'v4',
            path: path,
            data: data,
            secure: true,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

	addSourceTrackingData: function (orderData) {
		if (Cookie.read("j_source")) {
			try {
				var sourceCookie = JSON.parse(Cookie.read("j_source"));
				// Prevent devious folks from overwriting params
				var sourceCookieParams = {
					'ta_param': sourceCookie.ta_param,
					'source_id': sourceCookie.source_id,
					'nl_id': sourceCookie.nl_id,
					'partner_tracking_code': sourceCookie.partner_tracking_code,
					'landing_page_ta_id': sourceCookie.landing_page_ta_id,
					'supmt': sourceCookie.supmt,
					'supai': sourceCookie.supai
				};
				Object.merge(orderData, sourceCookieParams);
			} catch (e) {

			}
		}
	}
});


var CollectionService = new Class({

	Extends: APIService,

	getCollectionById: function(id, callback){
		var query = {
				collectionId: id
			},
			path = '/CollectionService/getCollectionById' + API.getSlashDelimitedParams(query);

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	},

	getFeaturedCollections: function(callback){
		var path = '/CollectionService/getFeaturedCollections';

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	}
});
var CommentService = new Class({

    Extends: APIService,

    getCommentsByPropertyId: function(options){
        var query = {
                propertyId: options.propertyId,
                eventId: options.eventId,
                offset: options.offset,
                limit: options.limit
            },
            path = '/CommentService/getCommentsByPropertyId' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            onSuccess: function(json){
                options.onSuccess(json.data);
            },
            onFailure: options.onFailure
        });
    },

    addComment: function(options){
        var query = {
                Comment: JSON.stringify({
                    propertyId: options.propertyId,
                    eventId: options.eventId || 0,
                    guid: Jetsetter.user.guid,
                    text: options.text
                }),
                guid: Jetsetter.user.guid
            },
            path = '/CommentService/addComment' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            secure: true,
            onSuccess: function(json){
                options.onSuccess(json.data);
            },
            onFailure: options.onFailure
        });
    }


});
var ContentService = new Class({

	Extends: APIService,

	getCustomMenuItems: function(options){
		var data = {offset: options.offset, limit: options.limit, order: options.order};
		var path = '/ContentService/getCustomMenuItems' + API.getSlashDelimitedParams(data);
		API.get({
			path: path,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	}
});
var ErrorService = new Class({

    logError: function(msg, additional, callback){
        Jetsetter.log(msg, additional);
        var data = {
            'msg': msg
        }
        var req = new Request.JSON({
            url: '/error/log',
            data: data,
            onSuccess: function (json) {
                if (callback) {
                    callback(json);
                }
            }.bind(this)
        }).post();
    }
});
var EventsService = new Class({

    Extends: APIService,

    getEvents: function(options) {
        var path = '/EventService/events';

        if (options.regionWoeId) {
            path += "?regionWoeId=" + options.regionWoeId;
        }

        if (!(typeof options.mosaic == 'undefined')) {
            path += ((path.indexOf("?") == -1) ? "?" : "&") + "mosaic=" + (options.mosaic ? 'true' : 'false');
        }

        return API.get({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    }

});
window.FavoritesService = new Class({

    Extends: APIService,

    'list': function(options) {
        options = options || {};
        var path = '/FavoritesService/users/' + options.guid + "/favorites";
        API.get({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    'add': function(options) {
        var path = '/FavoritesService/users/' + options.guid + '/favorites';
        API.post({
            apiVersion: 'v4',
            data : {
                productId : options.id
            },
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    'delete': function(options) {
        var path = '/FavoritesService/users/' + options.guid + '/favorites/' + options.id;
        API['delete']({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    'save': function(options) {
        var path = '/FavoritesService/users/' + options.guid + '/favorites/' + options.id;
        API.put({
            apiVersion: 'v4',
            path: path,
            data: {
                description: options.description
            },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        })
    },

    'order': function(options) {
        var path = '/FavoritesService/users/' + options.guid + '/favorites';
        API.put({
            apiVersion: 'v4',
            path: path,
            data: {
                order: options.order
            },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        })
    }

});
var GeoService = new Class({

    Extends: APIService,

    getCenterForWoeId: function(options){
        var query = {
            woeId: options.woeId
        }
        var path = '/GeoService/getCenterForWoeId' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            secure: false,
            onSuccess: function(json){
                var data = (json && json.data) || {};
                options.onSuccess && options.onSuccess(data);
            },
            onFailure: function(code, msg) {
                options.onFailure && options.onFailure(code, msg);
            }
        });
    },

    // DEPRECATED
    getCountriesList: function(options){
        var path = '/GeoService/getCountriesList';

        API.get({
            path: path,
            secure: false,
            onSuccess: function(json){
                var data = (json && json.data) || [];
                options.onSuccess && options.onSuccess(data);
            },
            onFailure: function(code, msg) {
                options.onFailure && options.onFailure(code, msg);
            }
        });
    },

    getCountries: function(options) {
        options = options || {};
        var path = '/GeoService/countries';
        API.get({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    }

});
var InventoryService = new Class({

	Extends: APIService,

	isInventoryAvailable: function(options){
		var inventoryQuery = {
			'inventoryIds': JSON.encode(options.inventoryIds),
			'quantity': options.quantity,
			'isAdmin': Jetsetter.user.isAdmin
		};
		var path = '/InventoryService/isInventoryAvailable' + API.getSlashDelimitedParams(inventoryQuery);
		// this is a post since the call response should never be cached
		API.post({
			path: path,
			secure: false,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	getInventoryForPropertyByPropertyId: function(options){
		var query = {
			'propertyId': options.propertyId,
			'eventId': options.eventId
		};


		var path = '/InventoryService/getInventoryForPropertyByPropertyId' + API.getSlashDelimitedParams(query);
		// this is a post since the call response should never be cached
		API.get({
			path: path,
			secure: false,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},


    getPropertyInventory: function(options){
        var path = '/InventoryService/properties/' + options.propertyId + '/inventory';
        return API.get({
            apiVersion: 'v4',
            path: path,
            data: {
                channel: options.channel,
                checkIfFPRateSuppressed : true
            },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    getPropertyInventoryRange: function(options) {
        var path = '/InventoryService/properties/'+options.propertyId+'/inventory';
        return API.get({
            apiVersion: 'v4',
            path: path,
            data: {
                channel: options.channel,
                start: options['start'],
                end: options['end'],
                checkIfFPRateSuppressed : true
            },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    getInventoryForItem: function(options){
		var query = {
			itemId: options.itemId,
			saleId: options.saleId
		};

		var path = '/InventoryService/getInventoryForItem' + API.getSlashDelimitedParams(query);
		// this is a post since the call response should never be cached
		API.get({
			path: path,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	}
});
var InviteService = new Class({

    Extends: APIService,

    canInvite: function(options){

        var path = '/InviteService/canInvite';

        API.post({
            secure: false,
            path: path,
            data: {
                emailAddresses : JSON.encode(options.emailAddresses)
            },
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });
    },

    validateEmailAddresses: function(options) {
        var params = {
            emailAddresses: JSON.encode(options.emailAddresses)
        };

        API.post({
            secure: false,
            path : '/InviteService/validateEmailAddresses',
            data: params,
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });

    },

    sendInvitations: function(options){
        var params = {
            guid: Jetsetter.user.guid,
            validatedEmailAddresses: JSON.encode(options.validatedEmailAddresses),
            customMessage: options.customMessage ? JSON.encode(options.customMessage) : 0, // Hack - we can't pass null values
            'method': options['method'],
            type: options.type
        }
        this._callService(options, params, 'sendInvitations');
    },

    resendInvite: function(options){
        var params = {
            guid: Jetsetter.user.guid,
            emailAddress: options.emailAddress
        }
        this._callService(options, params, 'resendInvite', true);
    },

    sendEmailInvites: function(options){
        var params = {
            guid: Jetsetter.user.guid,
            emailAddresses: options.emailAddresses.join(','),
            message: options.message,
            propertyId: options.propertyId,
            eventId: options.saleId
        }
        this._callService(options, params, 'sendEmailInvites');
    },

    _callService: function(options, params, methodName, secure) {
        var path = '/InviteService/' + methodName + API.getSlashDelimitedParams(params);
        
        API.get({
            secure: secure,
            path: path,
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });
    }
});
var MessagingService = new Class({

	Extends: APIService,

	sendTextMessage: function(options){
		var path = '/MessagingService/sendTextMessage';
		var messageData = {
			'TextMessage':  JSON.encode({
				'recipientGuid': options.recipientGuid,
				'sender': options.sender || 'System',
				'recipientPhone': options.recipientPhone,
				'body': options.body
			})
		};
		API.post({
			path: path,
			data: messageData,
			onSuccess: function(json){
				if (json) {
					options.onSuccess(json.data);
				} else {
					options.onSuccess(false);
				}
			},
			onFailure: options.onFailure
		});
	}
	
});
var OrderService = new Class({

	Extends: APIService,

    getTravelers: function(options) {
        var guid = Jetsetter.user.guid,
            reservationId = options.reservationId;

        async.auto({
            reservationTravelers: function(callback){
                if (!reservationId || !Jetsetter.user.hasSecureToken()) {
                    return callback(null, []);
                }
                var path = '/OrderService/getReservationTravellers/reservationId/' + reservationId;
                API.get({
                    path: path,
                    secure: true,
                    onSuccess: function(json){
                        return callback(null, json && json.data || []);
                    },
                    onFailure: function(){
                        return callback(null, []);
                    }
                });
            }.bind(this),

            userTravelers: function(callback){
                if (!guid) {
                    return callback(null, []);
                }
                var path = '/OrderService/getUserTravellers/guid/' + guid;
                API.get({
                    path: path,
                    secure: false,
                    onSuccess: function(json) {
                        return callback(null, json && json.data || []);
                    },
                    onFailure: function(){
                        return callback(null, []);
                    }
                });
            }.bind(this)
        }, function(error, data){
            if (error) {
                options.onFailure();
            }

            options.onSuccess(data.reservationTravelers, data.userTravelers);
        }.bind(this));
    },

	setReservationTravellers: function(options){
		var path = '/OrderService/setReservationTravellers';
		var travelerData = {
			'reservationId': options.reservationId,
			'travellerIds': JSON.encode(options.travellerIds)
		};
		API.post({
			path: path,
			secure: true,
			data: travelerData,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	addTraveler: function(options){
		var path = '/OrderService/addTraveller';
		var travelerData = {
			'Traveller':  JSON.encode({
				'parentGuid': Jetsetter.user.guid,
				'name': options.name
			})
		};
		API.post({
			path: path,
			secure: true,
			data: travelerData,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	setReservationSpecialInstructions: function(options){
		var path = '/OrderService/setReservationSpecialInstructions';
		var data = {
			'reservationId': options.reservationId,
			'specialInstructions': options.specialInstructions
		};
		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	setReservationBeddingType: function(options){
		var path = '/OrderService/setReservationBeddingType';
		var data = {
			'reservationId': options.reservationId,
			'beddingTypeId': options.beddingTypeId
		};
		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	setOrderContactPhone: function(options){
		var path = '/OrderService/setOrderContactPhone';
		var data = {
			'orderId': options.orderId,
			'contactPhone': options.contactPhone
		};
		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	activateGiftCard: function(options){
		var path = '/OrderService/activateGiftCard';
		var data = {
			'guid': Jetsetter.user.guid,
			'activationCode': options.activationCode
		};
		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || {};
				options.onSuccess(data);
			},
			onFailure: function(err, message) {
				options.onFailure && options.onFailure(err, message)
			}
		});
	},

	getPromoCodeDiscount: function(options){
		var path = '/OrderTransactionService/getPromoCodeDiscount';
		var data = {
			guid: Jetsetter.user.guid,
			promoCode: options.promoCode,
			voucherId: options.voucherId,
			orderId: options.orderId,
			inventoryIds: options.inventoryIds,
			ratePlanId: options.ratePlanId,
			quantity: options.quantity
		};
		API.get({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || {};
				options.onSuccess(data);
			},
			onFailure: function(err, message) {
				options.onFailure && options.onFailure(err, message)
			}
		});
	},

	updateOrder: function(options) {
		var updates = _.chain(options.reservations)
			.map(function(reservation) {
				var resUpdates = [];

				if(reservation.userTravellerIds) {
					resUpdates.push(function(callback) {
						this.setReservationTravellers({
							reservationId: reservation.reservationId,
							travellerIds: reservation.userTravellerIds,
							onSuccess: function() {
								callback();
							},
							onFailure: callback
						});
					}.bind(this));
				}

				if(reservation.beddingTypeId) {
					resUpdates.push(function(callback) {
						this.setReservationBeddingType({
							reservationId: reservation.reservationId,
							beddingTypeId: reservation.beddingTypeId,
							onSuccess: function() {
								callback();
							},
							onFailure: callback
						});
					}.bind(this));
				}

				if(reservation.specialInstructions) {
					resUpdates.push(function(callback) {
						this.setReservationSpecialInstructions({
							reservationId: reservation.reservationId,
							specialInstructions: reservation.specialInstructions,
							onSuccess: function() {
								callback();
							},
							onFailure: callback
						});
					}.bind(this));
				}

				return resUpdates;

			}.bind(this))
			.flatten(true)
			.value();

		if(options.contactPhone) {
			updates.push(function(callback) {
				this.setOrderContactPhone({
					orderId: options.orderId,
					contactPhone: options.contactPhone,
					onSuccess: function() {
						callback();
					},
					onFailure: callback
				})
			}.bind(this));
		}

		async.parallel(updates, function(err, data) {
			if(err) {
				options.onFailure && options.onFailure(err, data);
			} else {
				options.onSuccess && options.onSuccess();
			}
		}.bind(this));
	},

    getCountOfActiveHolds: function(options) {
        var data = {
            guid: options.guid || Jetsetter.user.guid
        };
		var path = '/OrderService/getCountOfActiveHolds' + API.getSlashDelimitedParams(data);

		API.get({
			path: path,
			secure: true,
			onSuccess: function(json){
				options.onSuccess(json.data);
			},
			onFailure: options.onFailure
		});
    },

    getOrder: function(options) {
        var data = _.omit(options, ['onSuccess', 'onFailure', 'orderType']);

        var endpoint = {
            hold: 'holds',
            voucher: 'vouchers',
            expert: 'travelPlanningVouchers',
            travelPlanningVoucher: 'travelPlanningVouchers',
            standby: 'standbys',
            deferredbooking: 'standbys',
            deferred: 'standbys'
        }[options.orderType] || 'orders';

        var path = '/OrderService/' + endpoint;

        API.post({
            apiVersion: 'v4',
            path: path,
            data: data,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    }
});

var OrderTransactionService = new Class({

	Extends: APIService,

	getOrderByInventoryIdsAndRatePlanId: function(options){
		var path = '/OrderTransactionService/getOrderByInventoryIdsAndRatePlanId';
		var data = {
			'inventoryIds': JSON.encode(options.inventoryIds),
			'ratePlanId': options.ratePlanId,
			'quantity': options.quantity,
			'guid': Jetsetter.user.guid
		};
		API.get({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	processOrder: function(options){
		// default to regular order
		options.orderType = options.orderType || 'InventoryOrderTransactionRequest';

		var path = '/OrderTransactionService/processOrderTransactionRequest';
		var orderData = {
			'guid': Jetsetter.user.guid,
			'payment': [{
				'id': options.ccGuid,
				'amount': 100,
				'type': 'percentage'
			}],
			'inventoryIds': options.inventoryIds,
			'quantity': options.quantity,
			'ratePlanId': options.ratePlanId,
			'travellerName': options.travelerName,
			'phoneNumber': options.phoneNumber,
			'promoCode': options.promoCode,
			'fraudTrackingId': options.fraudTrackingId
		}
		if (options.travelInsuranceOffer !== undefined) {
			Object.merge(orderData, { 'travelInsuranceOffer': options.travelInsuranceOffer });
		}
		if (options.sendReminderEmail !== undefined) {
			Object.merge(orderData, { 'sendReminderEmail': options.sendReminderEmail });
		}
		if (options.iataNumber !== undefined) {
			Object.merge(orderData, { 'IATANumber': options.iataNumber });
		}

		this.addSourceTrackingData(orderData);

		var data = {};
		data[options.orderType] = JSON.encode(orderData);
		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	processStandbyOrder: function(options){
		this.processOrder(Object.merge(options, { 'orderType': 'InventoryStandbyOrderTransactionRequest' }));
	},

	processHoldOrder: function(options){
		this.processOrder(Object.merge(options, { 'orderType': 'InventoryHoldOrderTransactionRequest' }));
	},

	processHoldConversionOrder: function(options){
		var path = '/OrderTransactionService/convertHoldByHoldOrderId';
		var orderData = {
			'guid': Jetsetter.user.guid,
			'holdOrderId': options.holdOrderId,
			'payment': [
				{
					'id': options.ccGuid,
					'amount': 100,
					'type': 'percentage'
				}],
			'quantity': options.quantity,
			'travellerName': options.travelerName,
			'phoneNumber': options.phoneNumber,
			'promoCode': options.promoCode,
			'fraudTrackingId': options.fraudTrackingId
		};
		this.addSourceTrackingData(orderData);
		var data = {
			'HoldOrderConversionTransactionRequest':  JSON.encode(orderData)
		};


		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	processVoucherOrder: function(options){
		var path = '/OrderTransactionService/processOrderTransactionRequest';
		var orderData = {
			'guid': Jetsetter.user.guid,
			'voucherId': options.voucherId,
			'payment': [
				{
					'id': options.ccGuid,
					'amount': 100,
					'type': 'percentage'
				}],
			'quantity': options.quantity,
			'recipientName': options.recipientName,
			'recipientEmail': options.recipientEmail,
			'isGift': options.isGift,
			'senderName': options.senderName,
			'personalMessage': options.personalMessage,
			'promoCode': options.promoCode,
			'fraudTrackingId': options.fraudTrackingId
		};
		this.addSourceTrackingData(orderData);
		var data = {
			'VoucherOrderTransactionRequest':  JSON.encode(orderData)
		};


		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	processGiftCardOrder: function(options){
		var path = '/OrderTransactionService/processOrderTransactionRequest';
		var orderData = {
			'guid': Jetsetter.user.guid,
			'amount': options.amount,
			'payment': [
				{
					'id': options.ccGuid,
					'amount': 100,
					'type': 'percentage'
				}],
			'recipientName': options.recipientName,
			'recipientEmail': options.recipientEmail,
			'senderName': options.senderName,
			'personalMessage': options.personalMessage,
			'sendDate': options.sendDate,
			'fraudTrackingId': options.fraudTrackingId
		};
		this.addSourceTrackingData(orderData);
		var data = {
			'GiftCardOrderTransactionRequest':  JSON.encode(orderData)
		};


		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	processTravelPlanningOrder: function(options){
		var path = '/OrderTransactionService/processOrderTransactionRequest';
		var orderData = {
			'guid': Jetsetter.user.guid,
			'voucherId': options.voucherId,
			'payment': [
				{
					'id': options.ccGuid,
					'amount': 100,
					'type': 'percentage'
				}],
			'recipientName': options.recipientName,
			'recipientEmail': options.recipientEmail,
			'isGift': options.isGift,
			'senderName': options.senderName,
			'personalMessage': options.personalMessage,
			'preferredDestinations': options.preferredDestinations,
			'tripStart': options.tripStart,
			'promoCode': options.promoCode,
			'fraudTrackingId': options.fraudTrackingId
		};
		this.addSourceTrackingData(orderData);
		var data = {
			'TravelPlanningOrderTransactionRequest':  JSON.encode(orderData)
		};


		API.post({
			path: path,
			secure: true,
			data: data,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	addSourceTrackingData: function (orderData) {
		if (Cookie.read("j_source")) {
			try {
				var sourceCookie = JSON.parse(Cookie.read("j_source"));
				// Prevent devious folks from overwriting params
				var sourceCookieParams = {
					'ta_param': sourceCookie.ta_param,
					'source_id': sourceCookie.source_id,
					'nl_id': sourceCookie.nl_id,
					'partner_tracking_code': sourceCookie.partner_tracking_code,
					'landing_page_ta_id': sourceCookie.landing_page_ta_id,
					'supmt': sourceCookie.supmt,
					'supai': sourceCookie.supai
				};
				Object.merge(orderData, sourceCookieParams);
			} catch (e) {

			}
		}
	}
});
var PaymentService = new Class({

	Extends: APIService,

	addCreditCard: function(options) {
		options.orderType = {
			expert: 'voucher',
            travelPlanningVoucher: 'voucher',
			giftcard: 'giftCard',
			order: 'reservation',
			deferredbooking: 'standby',
			holdpurchase: 'holdConversion'
		}[options.orderType] || options.orderType;

		if(options.latlng) {
			return sendAddCreditCardRequest();
		}

		var req = new Request.JSON({
			url: '/geo',
			onSuccess: function (res) {
				var data = res.data || {};
				options.latlng = parseFloat(data.latitude)+","+parseFloat(data.longitude)
				sendAddCreditCardRequest();
			}.bind(this),
			onFailure: function () {
				// If there was a problem getting the lat lng just
				// send the request without it
				sendAddCreditCardRequest();
			}
		}).get();

		function sendAddCreditCardRequest() {

	        var data = {
	            name: options.nameOnCard,
	            city: options.city,
	            streetLine1: options.streetLine1,
	            streetLine2: options.streetLine2,
	            countryCode: options.countryCode,
	            state: options.state,
	            postalCode: options.postalCode,
	            cvnEncrypted: options.cvn,
	            expirationDate: options.ccMonth + '-' + options.ccYear,
	            numberEncrypted: options.ccNumber,
				// These fields are used for fraud detection
				latlng: options.latlng,
				checkIn: options.checkIn ? moment(options.checkIn).format('YYYY-MM-DD') : null,
				productId: options.productId,
				orderType: options.orderType,
				channel: options.channel,
				amount: options.amount,
				fraudTrackingId: options.fraudTrackingId,
                phoneNumber: options.phoneNumber
	        };

	        var path = '/PaymentService/users/' + Jetsetter.user.guid + '/creditCards';
	        return API.post({
	            apiVersion: 'v4',
	            path: path,
	            data: data,
                secure: true,
				onSuccess: options.onSuccess,
	            onFailure: options.onFailure
	        });
		}
	}
});

var PricingService = new Class({

	Extends: APIService,

	getRoomRates: function(options){
        var path = '/PricingService/properties/'+ options.propertyId +'/roomRates';

		API.get({
            apiVersion: 'v4',
			path: path,
			secure: false,
			data: {
				checkIn: options.checkIn,
				checkOut: options.checkOut,
				channel: options.channel
			},
			onSuccess: options.onSuccess,
			onFailure: options.onFailure
		});
	},

    getPackageRates: function(options) {
        var path = '/PricingService/properties/'+ options.propertyId +'/packageRates';

		API.get({
            apiVersion: 'v4',
			path: path,
			secure: false,
			data: { channel: options.channel },
			onSuccess: options.onSuccess,
			onFailure: options.onFailure
		});
    },

    getVoucherRates: function(options) {
        var path = '/PricingService/vouchers/'+ options.voucherId +'/voucherRates';

		API.get({
            apiVersion: 'v4',
			path: path,
			secure: false,
			onSuccess: options.onSuccess,
			onFailure: options.onFailure
		});
    }
});
var ProductService = new Class({

	Extends: APIService,

	getBeddingTypesForProduct: function(options){
		var productQuery = {
				productId: options.productId
			}
			path = '/ProductService/getBeddingTypesForProduct' + API.getSlashDelimitedParams(productQuery);

		API.get({
			path: path,
			secure: true,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	getPricingByTrip: function(options){
		var productQuery = {
				checkin: options.checkin,
				checkout: options.checkout,
				propertyId: options.propertyId,
				eventId: options.eventId,
				numRooms: options.numRooms,
				numAdults: options.numAdults,
				numChildren: options.numChildren,
				ratePlanId: options.ratePlanId,
				productId: options.productId
			}
			path = '/ProductService/getPricingByTrip' + API.getSlashDelimitedParams(productQuery);

		API.get({
			path: path,
			secure: false,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	getVouchersForItem: function(options){
	    var query = {
	            propertyId: options.propertyId,
	            eventId: options.eventId
	        },
	        path = '/ProductService/getVouchersForItem' + API.getSlashDelimitedParams(query);

	    API.get({
	        path: path,
	        onSuccess: function(json){
	        	var data = json && json.data || [];
	        	options.onSuccess(data);
	        },
	        onFailure: options.onFailure
	    });
	},

	getTwitterUrl: function(options){
	    var query = {
	    		guid: Jetsetter.user.guid,
	            propertyName: options.propertyName,
	            propertyAlias: options.propertyAlias,
	            mode: options.mode
	        },
	        path = '/ProductService/getTwitterUrl' + API.getSlashDelimitedParams(query);

	    API.get({
	        path: path,
	        onSuccess: function(json){
	        	var data = json && json.data || [];
	        	options.onSuccess(data);
	        },
	        onFailure: options.onFailure
	    });
	}
});
var PropertyService = new Class({

	Extends: APIService,

    // v4 version of getPropertyById
    getProperty: function(options) {
        var path = '/PropertyService/properties/' + options.propertyId;
        return API.get({
            apiVersion: 'v4',
            path: path,
            data: { channel: options.channel },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

	getPropertyByAlias: function(alias, callback){
		var query = {
				alias: alias
			},	
			path = '/PropertyService/getPropertyByAlias' + API.getSlashDelimitedParams(query);

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	},

	getCollectionPropertyItemsByPropertyIds: function(propertyId, callback){
		var query = {
				propertyIds: '[' + propertyId +']'
			},
			path = '/PropertyService/getCollectionPropertyItemsByPropertyIds' + API.getSlashDelimitedParams(query);

		API.get({
			path: path
		}, function(err, data){
			var data = data && data.data || [];
			callback(err, data);
		});
	},
	
	addTripLeadGen: function(options) {
		var path = '/PropertyService/addTripLeadGen';
		var tripLeadGenData = {
			'TripLeadGen':  JSON.encode({
				'propertyId': options.propertyId,
				'guid': Jetsetter.user.guid,
				'name': options.name,
				'email': options.email,
				'phone': options.phone,
				'numTravelers': options.numTravelers,
				'dates': options.dateRangeOfTravel,
				'comments': options.comments
			})
		};
		API.post({
			path: path,
			data: tripLeadGenData,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	}
});
var ReviewService = new Class({

    Extends: APIService,

    getPendingReviewsByGuid: function(options) {
        var path = '/ReviewService/users/'+ options.guid + '/reviews/pending';

        API.get({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },


    // DEPRECATED. USE getPendingReviewsByGuid
    getReviewsByPropertyId: function(options){
        var query = {
                propertyId: options.propertyId,
                eventId: options.eventId,
                offset: options.offset,
                limit: options.limit,
                ignoreEventSpecific: options.ignoreEventSpecific,
                opaquePublished: options.opaquePublished
            },
            path = '/ReviewService/getReviewsByPropertyId' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            onSuccess: function(json){
                options.onSuccess(json.data);
            },
            onFailure: options.onFailure
        });
    },

    // DEPRECATED. NEED A v4 ENDPOINT FOR THIS
    reviewWasHelpful: function(options){
        var query = {
                reviewId: options.reviewId,
                guid: Jetsetter.user.guid
            },
            path = '/ReviewService/reviewWasHelpful' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            onSuccess: function(json){
                options.onSuccess(json.data);
            },
            onFailure: options.onFailure
        });
    }
});
var SearchService = new Class({

	Extends: APIService,

	search: function(options) {
        var path = '/SearchService/search/products';

        return API.get({
            apiVersion: 'v4',
            path: path,
            data: options.query,
			onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
	},

    autocomplete: function(options) {
        var path = '/SearchService/search/autocomplete';

        return API.get({
            apiVersion: 'v4',
            path: path,
            data: { term : options.term },
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

	searchProperties: function(options){
	    var query = {
	        PropertySearchCriteria: JSON.stringify(options.PropertySearchCriteria || {
	            term: options.term,
	            includeFacets: options.includeFacets,
	            includeProducts: options.includeProducts,
	            includeLiveViewersCount: options.includeLiveViewersCount,
	            propertyTypeFilter: 'All',
	            numOccupants: options.numOccupants,
	            propertyIds: options.propertyIds,
	            dateCriterion: (options.checkin && options.checkout) ? [{
	                checkin: options.checkin,
	                checkout: options.checkout
	            }] : null,
	            pricingThresholdFilter: options.pricingThresholdFilter,
	            selector: {
	                paginator: {
	                    limit: options.limit,
	                    offset: options.offset
	                }
	            }
	        })
	    };

	    var path = '/SearchService/searchProperties' + API.getSlashDelimitedParams(query);

	    API.get({
	        path: path,
	        onSuccess: function(json){
	            options.onSuccess(json.data);
	        },
	        onFailure: function(err, json){
	            options.onFailure(err,json);
	        }
	    });
	},

	searchEvents: function(options){

		var eventSearchCriteriaData = {'EventSearchCriteria': JSON.encode({
			includeActive: options.includeActive,
			includeUpcoming: options.includeUpcoming,
			selector: options.selector,
			regionId: options.regionId
		})};

		var path = '/SearchService/searchEvents' + API.getSlashDelimitedParams(eventSearchCriteriaData);
		
		API.get({
			path: path,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	},

	searchByKeyword: function(options){
	    var query = {
	        KeywordSearchCriteria: JSON.stringify({
	            term: options.term
	        })
	    };

	    var path = '/SearchService/searchByKeyword' + API.getSlashDelimitedParams(query);

	    if(API.reqs['SearchService/searchByKeyword']){
	    	API.reqs['SearchService/searchByKeyword'].cancel();
	    }

	    API.get({
	        path: path,
	        onSuccess: function(json){
	            options.onSuccess(json.data);
	        },
	        onFailure: function(err, json){
	            options.onFailure(err,json);
	        }
	    });
	}
});
var SplashService = new Class({

    Extends: APIService,

    getRecentlyViewedMarkup: function(options){
        var cookieBody = Cookie.read('j_pid');
        if(!cookieBody) {
            return options.onSuccess('');
        }
        var properties = JSON.decode(cookieBody);
        if(!properties.length || properties.length < 3) {
            return options.onSuccess('');
        }

        properties = _.first(properties, 3);
        var req = new Request({
            url: '/recent',
            data: {
                propertyIds: properties
            },
            method: 'get',
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        }).send();
    }
});
var TagService = new Class({

    Extends: APIService,

    lookupGeoByPrefix: function(options){
        var path = 'TagService/lookupGeoByPrefix';

        // Cancel any pending requests
        if(API.reqs[path]){
            API.reqs[path].cancel();
        }

        var params = {
            geoPrefix: options.geoPrefix,
            limit:     options.limit
        };

        API.post({
            path: '/' + path,
            secure: false,
            data: params,
            onSuccess: function(json){
                var data = (json && json.data) || [];
                options.onSuccess && options.onSuccess(data);
            },
            onFailure: function(code, msg) {
                options.onFailure && options.onFailure(code, msg);
            }
        });
    }

});
var TrackingService = new Class({

	Extends: APIService,

	incrementLivePropertyViewerCount: function(options){
		var path = '/TrackingService/incrementLivePropertyViewerCount';
		var propertyId = {
			'propertyId': options.propertyId
		};

		API.post({
			path: path,
			secure: false,
			data: propertyId,
			onSuccess: function(json){
				var data = json && json.data || [];
				options.onSuccess(data);
			},
			onFailure: options.onFailure
		});
	}

});
var TripAdvisorMetaService = new Class({

    search: function(options){
        var url = '/ta-meta-search';

        // white-list options fields
        var data = {
            taId        : options.taId,
            check_in    : moment(options.checkIn).format("YYYY-MM-DD"),
            nights      : options.nights,
            rooms       : options.rooms,
            adults      : options.adults,
            mcid        : options.mcid,
            rnd         : Math.floor(Math.random() * 10000)
        };

        var req = new Request.JSON({
            url: url,
            data : data,
            onSuccess: function (json) {
                options.onSuccess && options.onSuccess(json);
            }.bind(this),
            onFailure: function() {
                options.onFailure && options.onFailure(arguments);
            }.bind(this)
        }).get();
    }
});
var TripAdvisorReviewsService = new Class({

    getReviewsByPropertyId: function(options){
        var url = '/property/ta-reviews?propertyId=' + options.propertyId + '&rnd=' + (Math.floor(Math.random() * 10000));
        var req = new Request.JSON({
            url: url,
            onSuccess: function (json) {
                options.onSuccess && options.onSuccess(json);
            }.bind(this),
            onFailure: function() {
                options.onFailure && options.onFailure(arguments);
            }.bind(this)
        }).get();
    }
});
var UserService = new Class({

    Extends: APIService,

    ERROR_USER_EXISTS: 140,

    addUserPasswordReset: function(options){
        var path = '/UserService/users/'+ options.emailAddress + '/resetPassword';
        API.post({
            apiVersion: 'v4',
            data: {},
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    resetPassword: function(options){
        var path = '/UserService/users/'+ options.emailAddress + '/password';

        var data = {
            newPassword: options.newPassword,
            resetToken: options.resetToken
        };

        API.put({
            apiVersion: 'v4',
            secure: true,
            data: data,
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    getWoeIdForUser: function(options) {
        var data = {
            guid: Jetsetter.user.guid,
            lat: options.lat,
            lng: options.lng
        };
        this._callService(options, data, 'getWoeIdForUser');
    },

    setWoeIdForUser: function(options) {

        async.auto({

            userSetting: function(callback) {
                this.getUserSetting({
                    onSuccess: function(userSetting) {
                        userSetting = userSetting || { guid: Jetsetter.user.guid };
                        callback(null, userSetting);
                    }.bind(this),

                    onFailure: callback
                });
            }.bind(this),

            setUserSetting: ['userSetting', function(callback, data) {
                data.userSetting.homeWoeId = options.woeId;
                this.setUserSetting({
                    userSetting: data.userSetting,

                    onSuccess: function() {
                        callback();
                    }.bind(this),

                    onFailure: callback
                });
            }.bind(this)],

            geoCenter: function(callback) {
                new GeoService().getCenterForWoeId({
                    woeId: options.woeId,

                    onSuccess: function(center) {
                        callback(null, center);
                    }.bind(this),

                    onFailure: callback
                });
            }.bind(this)

        }, function(err, data) {
            if(err) {
                options.onFailure && options.onFailure(err, data);
                return;
            }

            // TODO: Auth.setWoeIdCookie(options.woeId)
            Cookie.write('j_ll', JSON.encode(data.geoCenter), {
                duration: 365
            });

            options.onSuccess && options.onSuccess(data.geoCenter);
        });


        var query = {
            woeId: options.woeId
        },
        path = '/UserService/setUserSetting' + API.getSlashDelimitedParams(query);
    },

    getUserSetting: function(options) {
        var data = {
            guid: options.guid || Jetsetter.user.guid
        };
        this._callService(options, data, 'getUserSetting', true);
    },

    setUserSetting: function(options) {
        var data = {
            UserSetting: JSON.stringify(options.userSetting)
        };
        this._callService(options, data, 'setUserSetting', true);
    },

    updatePassword: function(options) {

        var path = '/UserService/users/'+ options.guid + '/password';

        var data = {
            password: options.password,
            newPassword: options.newPassword
        };

        API.put({
            apiVersion: 'v4',
            secure: true,
            data: data,
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    updateNickname: function(options){
        var data = {
            guid: Jetsetter.user.guid,
            nickName: options.nickname
        };

        // If the nickname updates successfully, reset the session cookie
        var onSuccess = options.onSuccess;
        options.onSuccess = function(data) {
            Jetsetter.Auth.resetSessionCookies({
                onSuccess: function() {
                    onSuccess && onSuccess(data);
                },
                onFailure: options.onFailure
            });
        }

        this._callService(options, data, 'updateNickname', true);
    },

    getPersonaliationQuestions: function(options){
        API.get({
            path: '/UserService/getPersonaliationQuestions',
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });
    },

    addUserSaleNotification: function(options){
        var data = {
            guid: Jetsetter.user.guid,
            saleId: options.saleId,
            saleNotificationTypeId: options.saleNotificationTypeId
        };
        this._callService(options, data, 'addUserSaleNotification', true);
    },

    getFbId: function(options){
        var query = {
                guid: Jetsetter.user.guid
            },
            path = '/UserService/getFbId' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            secure: true,
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });
    },

    answerPersonalizationQuestion: function(options){
        var query = {
                guid: Jetsetter.user.guid,
                questionId: options.questionId,
                optionAnswers: options.optionAnswers
            },
            path = '/UserService/answerPersonalizationQuestion' + API.getSlashDelimitedParams(query);

        API.get({
            path: path,
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: options.onFailure
        });
    },

    _callService: function(options, query, methodName, secure) {
        var path = '/UserService/' + methodName + API.getSlashDelimitedParams(query);
        
        API.get({
            path: path,
            secure: secure,
            onSuccess: function(json){
                options.onSuccess && options.onSuccess(json && json.data || {});
            },
            onFailure: function(err, message) {
                options.onFailure && options.onFailure(err, message);
            }
        });
    },

    /**
     * The path is randomized to avoid unnecessary caching of sensitive information such as users account credit balance
     */
    getAccountCreditBalanceByGuid: function(options) {
        var path = '/UserService/users/'+ options.guid + '/credits';

        API.get({
            apiVersion: 'v4',
            //secure: true,
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    },

    subscribe: function(options) {
        var path = '/UserService/users';

        API.post({
            path: path,
            apiVersion: 'v4',
            secure: true,
            data: {
                email: options.email,
                promoId: options.promoId
            },

            onSuccess: function (json){
                /*
                 * FIX ME:
                 * During transition to v4 Auth replace this call with setting all necessary cookies that are currently
                 * being set by PHP side
                 */
                Jetsetter.Auth.emailAuth({
                    email: options.email,
                    onSuccess: function() {

                        // emailAuth will have overridden Jetsetter.user to be the newly logged in user. Add the v4 token field to it and save.
                        Jetsetter.user.session.stv4 = json.sessionToken;
                        Jetsetter.user.saveSession(Jetsetter.user.session);

                        _gaq.push(['_trackEvent', 'Account', 'Login', 'Success']);
                        setTimeout(function() {
                            options.onSuccess(json);
                        }, 500);
                    },
                    onFailure: options.onFailure
                });
            }.bind(this),

            onFailure: function(code, message){
                if (code == this.ERROR_USER_EXISTS) {
                    Jetsetter.user.email = options.email;
                    Jetsetter.user.saveEmail(options.email);
                }
                options.onFailure(code, message);
            }.bind(this)
        });
    }
});
var VoucherService = new Class({

    Extends: APIService,

    getVouchers: function(options) {
        var path = '/VoucherService/vouchers/'+ options.productId;

        API.get({
            apiVersion: 'v4',
            path: path,
            onSuccess: options.onSuccess,
            onFailure: options.onFailure
        });
    }

});
var AdminImageReporter = new Class({
	
	initialize: function(elements){
		this.elements = elements;
		this.button = new Element('div', {
			'id': 'admin-image-reporter'
		}).inject(document.body, 'bottom');

		this.button.fade('hide');

		this.button.addEvents({
			'mouseover': function(e){
				e.stop();
			}.bind(this),
			'mouseout': function(e){
				e.stop();
			}.bind(this)
		});

		$(document.body).addEvent('mouseover', function(){
			this.button.fade('out');

			this.button.removeClass('sent');
			this.button.removeClass('error');
		}.bind(this));

		$(document.body).addEvent('mouseover:relay(img)', function(e, elem){
			e.stop();
			this.button.position({
				relativeTo: elem
			});

			this.curElem = elem;

			this.button.fade('in');
		}.bind(this));

		this.button.addEvent('click', function(){
			this.sendReport();
		}.bind(this));

		this.applyPageFixes();
	},

	sendReport: function(){
		if(this.curElem){
			var req = new Request.JSON({
				url: '/static/report',
				data: {
					imageUrl: this.curElem.get('src'),
					pageUrl: location.href
				},
				onSuccess: function (json) {
					if(json.success){
						this.button.addClass('sent');

						setTimeout(function(){
							this.button.removeClass('sent');
						}.bind(this), 3000);	
					} else {
						this.button.addClass('error');

						setTimeout(function(){
							this.button.removeClass('error');
						}.bind(this), 3000);
					}
				}.bind(this)
			}).post();
		}
	},

	applyPageFixes: function(){
		switch($(document.body).get('id')){
			case 'product-details':
				//main pdp gallery
				$('screen-gallery').getElements('.full-area').hide();
				break;
			case 'travel-expert':
				//main hero gallery
				var postcards = $('postcards');
				if(postcards){
					var hoverArea = postcards.getElement('.postcard-mask');
					hoverArea.addEvent('mouseover', function(e){
						e.stop();
						this.button.position({
							relativeTo: hoverArea
						});

						postcards.getElements('.postcards li').each(function(elem){
							if(elem.isVisible()){
								this.curElem = elem;
							}
						}.bind(this));

						this.curElem.set('src', this.curElem.get('data-image'));

						this.button.fade('in');
					}.bind(this));
				}

				//small expert carousel
				var experts = $('experts')
				if(experts){
					experts.getElements('div.list-item .mask, div.list-item .mask-alternate').addEvent('mouseover', function(e){
						e.stop();
						var expert = e.target;

						this.button.position({
							relativeTo: expert
						});

						this.curElem = expert.getPrevious('img');
						this.button.fade('in');
					}.bind(this));
				}

				//expert bio pic
				var bio = $('bio-hero');
				if(bio){
					bio.getElement('.mask').addEvent('mouseover', function(e){
						e.stop();

						this.button.position({
							relativeTo: bio
						});

						this.curElem = bio.getElement('.expert-shot');

						var src = this.curElem.getStyle('background-image');

						src = src.substring(4, src.length);
						src = src.substring(0, src.length - 1);

						this.curElem.set('src', src);

						this.button.fade('in');
					}.bind(this))
				}
				break;
			case 'presale':
			//top hero image
				var hero = $('page-content').getElement('.presale-top');
				hero.addEvent('mouseover', function(e){
					e.stop()

					this.button.position({
						relativeTo: bio
					});

					this.curElem = hero.getElement('img');

					this.button.fade('in');
				}.bind(this));
				break;
		}
	}

});
var Auth = new Class({

	Implements: [Options, Events],

	options: {
		// type
		// email
		// password
		// facebookId
		// promoAlias
		// promoId
		// referrerGuid
		// invitationId
		// userSearchReferralId
	},

	initialize: function(options){
		this.setOptions();

		//check for public promo alias
		if (!this.options.promoAlias) {
			if (Jetsetter.session && Jetsetter.session.pl && Jetsetter.session.pl.promo) {
				this.options.promoAlias = Jetsetter.session.pl.promo;
			}
		}
	},

	authenticate: function(options){
		options = Object.merge(options, this.options);

		switch(options.type){
			case 'email':
				this.emailAuth(options);
				break;
			case 'facebook':
				this.facebookAuth(options);
				break;
			default:
				//fail out with error about type required
				break;
		}
	},
	

	emailAuth: function(options){
		var onSuccess = options.onSuccess,
			onFailure = options.onFailure;

		delete options.onSuccess;
		delete options.onFailure;

        options.rnd = Math.floor(Math.random() * 10000);

		new Request.JSONP({
			url: Jetsetter.SECURE_HOST + '/auth/login',
			data: options,
			onSuccess: function (json) {
				if(json.success){
					this._handleAuthResponse(json, onSuccess);
				} else {
					onFailure(json);
				}
			}.bind(this)
		}).send();
	},

	facebookAuth: function(options){
		FB.getLoginStatus(function (response) {
			if (response.authResponse) {
				fbAuth(response.authResponse.accessToken, response.authResponse.signedRequest);
			} else {
				FB.login(function (response) {
					if (response.authResponse) {
						fbAuth(response.authResponse.accessToken, response.authResponse.signedRequest);
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
					} else {
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
					}
				}.bind(this), {
					'scope': 'email,publish_stream,offline_access'
				});
			}
		}.bind(this));


		var self = this;
		function fbAuth(accessToken, signedRequest){
			FB.api('/me', function (user) {
				new Request.JSONP({
					url: Jetsetter.SECURE_HOST + '/auth/login',
					data: Object.merge(user, {
						'fbUserId': user.id,
						'access_token': accessToken,
						'signed_request': signedRequest
					}),
					onSuccess: function (json) {
						if(json.success){
							self._handleAuthResponse(json, options.onSuccess, user);
						} else {
							options.onFailure(json, user);
						}
					}
				}).send();
			});
		}
	},

	_handleAuthResponse: function(json, onSuccess, user) {
		if (json.success) {
			Jetsetter.user = new User();

			var asyncs = {};

			// If this was a registration
			if (json.data.promoAlias) {
				Cookie.write('j_register_event', json.data.promoAlias, {
					'domain': Jetsetter.cookieDomain,
					'duration': 1
				});

				// Stuff in here will affect ALL registration screens
				asyncs.trackRegistration = function(callback) {
					GA.trackRegistration(json.data.promoAlias);
					setTimeout(function(){
						callback(null, null);
					},250);
				};
				
				Jetsetter.user.guid = json.data.guid;
				
				asyncs.doubleclick = function(callback) {
					var axel = Math.random() + "";
					var a = axel * 10000000000000;
					var e = new Element('iframe', {
						src: 'http://fls.doubleclick.net/activityi;src=3081328;type=jsreg570;cat=jsmem724;u1=' + json.data.guid + ';ord=' + a + '?',
						width: "1", height: "1", frameborder: "0", style: "display:none",
						events: {
							load: function() {
								callback(null, null);
							}
						}
					});
					document.getElementsByTagName('body')[0].appendChild(e);
				};
			} else {
				asyncs.trackLogin = function(callback) {
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Success']);
					// Delay firing login event so that pixel can fire
					setTimeout(function() {
						callback(null, null);
					}.bind(this), 500);
				}
			}

			var eventFired = false;
			async.parallel(asyncs, function(err, results) {
				if (!eventFired) {
					eventFired = true;
					onSuccess(json, user);
				}
			});
			setTimeout(function() {
				if (!eventFired) {
					eventFired = true;
					onSuccess(json, user);
				}
			}, 1000);
		} else {
			var errorCode = json.error.code,
				errorMessage = json.error.message;
			// If there's a redirect target to an invite link, go there.
			if (json.data && json.data.location) {
				_gaq.push(['_trackEvent', 'Account', 'Login-send-to-reg', 'Failure']);
				location.replace(json.data.location);
			} else {
				if (errorCode == 410) {
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
					this.loginAttempts++;
				}
				if (this.loginAttempts >= 3) {
					_gaq.push(['_trackEvent', 'Account', 'Login-send-to-forgot-password', 'Failure']);
					onFailure(json, user);
				} else {
					onFailure(json, user);
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
				}
			}			
		}
	},

	logout: function () {
		location.replace('/auth/logout');
	},

    resetSessionCookies: function(options){
        var req = new Request.JSON({
            url: '/auth/resetsessioncookies?rnd=' + Math.floor(Math.random() * 10000),
            onSuccess: function () {
                options.onSuccess && options.onSuccess();
            },
            onFailure: function () {
                options.onFailure && options.onFailure(103, "Could not reset session cookie");
            }
        }).get();
    }
})
var Header = new Class({

    Implements: Options,

    options: {
        fixed: true
    },

    initialize: function(headerEl, options){
        this.setOptions(options);

        this.headerEl = headerEl;
        this.linkMenu = this.headerEl.getElement('nav ul');
        this.searchForm = this.headerEl.getElement('form');
        this.accountMenuEl = this.headerEl.getElement('#account-menu');
        this.accountToggleEl = this.headerEl.getElement('#auth-menu-account');
        this.authMenuLogin = this.headerEl.getElement('#auth-menu-login');
        this.authMenuBecome = this.headerEl.getElement('#auth-menu-become');
        this.authMenuInvite = this.headerEl.getElement('#auth-menu-invite');
        this.searchCta = this.headerEl.getElement('.search-cta');
        this.searchCancel = this.headerEl.getElement('.search-cancel');
        this.container = this.headerEl.getElement('.page-container');
        this.destinationInputEl = this.headerEl.getElement('.search .destination');
        this.destinationInputEl.addEvent('focus', function(){
            this.destinationInputEl.removeClass('highlight');
        }.bind(this));

        this.minimalWhitelist = ['checkout'];
        this.showMinimal = this.minimalWhitelist.contains($(document.body).get('id'));

        // add minimal header
        if(this.showMinimal){
            $(document.html).addClass('minimal');
        }

        if(this.options.fixed){
            this.setupFixed();
        }

        if(!this.showMinimal){
            this.linkbin = new Linkbin(this.headerEl);

            var badgeMenuEl = $('custom-menu');
            if (badgeMenuEl) {
                var contentService = new ContentService();

                var cachedMenuItems = lscache.get('customMenuItems');
                if (!cachedMenuItems) {
                    contentService.getCustomMenuItems({
                        options: null,
                        limit: null,
                        order: 'rank',
                        onSuccess: function(data) {
                            lscache.set('customMenuItems', data, 60 /* 60 mins == 1 hr */);
                            this.badgeMenu = new GlassBadgeMenu(this.linkMenu.getElement('li'), badgeMenuEl, data);
                        }.bind(this),
                        onFailure: function(code, message) {
                            // log error but do not notify user
                            throw new Error("ERROR " + code + ": " + message);
                        }
                    });
                } else {
                    this.badgeMenu = new GlassBadgeMenu(this.linkMenu.getElement('li'), badgeMenuEl, cachedMenuItems);
                }
            }

            var truncateAt, placeholder;
            switch(Jetsetter.page.width){
                case 995:
                    truncateAt = 30;
                    placeholder = 'Type a Destination or Hotel';
                    break;
                case 960:
                    truncateAt = 25;
                    placeholder = 'Destination or Hotel';
                    break;
                case 918:
                    truncateAt = 22;
                    placeholder = 'Destination or Hotel';
                    break;
                default:
                    truncateAt = 22;
                    placeholder = 'Destination or Hotel';
                    break;
            }

            this.destinationInputEl.set('placeholder', placeholder);

            this.autocomplete = headerSearchAutocomplete = new HeaderSearchAutocomplete(this.destinationInputEl, {
                searchSource: 'TopNav-nofollow',
                propertyRequestParams: { nm: 'Search-TopNav' },
                theme: 'dark',
                truncateAtChar: truncateAt
            });

            this.autocomplete.addEvent('selectionMade', function (el) {
                // Omniture tracking
                var position = el.getAllPrevious('li').length;
                var feature = 'Autocomplete click: ' + headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')';
                var data = el.retrieve('data');


                var search = new URI(el.getElement('a').get('href')),
                    data = search.get('data');

                data.type = 'Dropdown';

                if(this.options.searchSource){
                    data.source = this.options.searchSource;
                }

                search.set('data', data);

                window.location = search.toString();

                _gaq.push(['_trackEvent', 'Autocomplete', 'click', headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')']);
            });

            if(this.accountMenuEl && this.accountToggleEl){
                var cliCookie = Cookie.read('j_cli');
                if (cliCookie) {
                    var cliCookieValue = JSON.decode(cliCookie.decode64());
                    if (cliCookieValue && cliCookieValue.propertyId) {
                        this.accountMenuEl.getElement('.favorite span').set('text', _.size(cliCookieValue.propertyId));
                    } else {
                        this.accountMenuEl.getElement('.favorite span').destroy();
                    }
                } else {
                    this.accountMenuEl.getElement('.favorite span').destroy();
                }

                this.accountMenuEl.hide();
                this.accountMenuEl.addEvents({
                    'mouseenter': function(e){
                        e.stop();
                    },

                    'mouseleave': function(e){
                        e.stop()
                    },

                    'mouseover': function(e){
                        e.stop();
                    },

                    'click:relay(li)': function(e, elem){
                        if(elem.hasClass('fb')){
                            e.stop();
                            this.fbLogin();
                        }
                    }.bind(this)
                });

                this.accountToggleEl.addEvents({
                    'mouseenter': function(e){
                        e.stop();
                        if(!this.menuLock){
                            EventService.publish('/linkbin/hide');
                            this.accountMenuEl.show();
                        }
                    }.bind(this),

                    'mouseleave': function(e){
                        e.stop();
                    },

                    'mouseover': function(e){
                        e.stop();
                    }
                });

                document.addEvent('mouseover', function(){
                    this.menuLock = false;
                    this.accountMenuEl.hide();
                }.bind(this));
            }
        }
    },

    fbLogin: function(){
        Jetsetter.Auth.authenticate({
            type: 'facebook',
            onSuccess: function(json){
                _gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
                window.location.reload();
            }.bind(this),
            onFailure: function(json){
                _gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
                window.location.reload();
            }.bind(this)
        });
    },

    setupFixed: function(){
        var headerPos = this.headerEl.getPosition().y;

        window.addEvent('scroll', function(){
            var curPos = window.getScroll().y;

            if(curPos > headerPos){
                if(!this.headerEl.hasClass('fixed')){
                    this.headerEl.addClass('fixed');
                }
            } else {
                if(this.headerEl.hasClass('fixed')){
                    this.headerEl.removeClass('fixed');
                }
            }
        }.bind(this));
    }

});
var WindowAutoExpander = new Class({

    'initialize': function() {
        this.clickHandler = _.bind(this.clickHandler, this);
    },

    start: function(sourceData) {
        if (!this.initialized) {
            if(this.isApplicable(sourceData)) {
                this.listen();
                this.initialized = true;
            }
        }
    },

    /**
     * determine whether or not the window auto expander should apply to this page.
     * Currently the expander should apply if:
     * - user is coming from a ta meta source
     * - AND their screen resolution is <= 1280x1024
     */
    isApplicable: function(sourceData /* nullable */) {

        if (!window || !window.screen || (window.screen.width == 0) || (window.screen.height == 0)) {
            // don't apply if we cant' determine the window size
            return false;
        }

        // don't apply for screen resolutions larger than 1280x1024
        if ((window.screen.width > 1280) && (window.screen.height > 1024)) {
            return false;
        }

        if (sourceData && sourceData.type && (sourceData.type == 'traq')) {
            return true;
        }

        var utm_campaign_matches = window.location.href.match(/utm_campaign=([\d\w_-]+)/);
        if (utm_campaign_matches && utm_campaign_matches.length > 1) {
            var utm_campaign = utm_campaign_matches[1].toLowerCase();
            if ((utm_campaign == 'kayak-ppc-m_b125_us') || ((utm_campaign != 'ta-ppc-mp_r_b01_us') && (utm_campaign.indexOf('ta-ppc') === 0))) {
                return true;
            }
        }
        var via_matches = window.location.href.match(/via=([\d\w_-]+)/);
        if (via_matches && via_matches.length > 1) {
            var via = via_matches[1].toLowerCase();
            if ((via == 'kayak-ppc-m_b125_us') || ((via != 'ta-ppc-mp_r_b01_us') && (via.indexOf("ta-ppc") === 0))) {
                return true;
            }
        }

        return false;

    },

    /**
     * listen for first click and expand window if necessary
     */
    'listen': function() {
        document.addEvent('click', this.clickHandler);
    },

    'clickHandler': function() {
        document.removeEvent('click', this.clickHandler);
        this.expand();
    },

    /**
     * expand window to full screen
     */
    'expand': function() {

        var newWidth = screen.availWidth || screen.width;
        var newHeight = screen.availHeight || (screen.height - 50);

        if (window.resizeTo && window.moveTo) {
            window.moveTo(0,0);
            window.resizeTo(newWidth, newHeight);
        }
    }

});
// set up global error logger
window.onerror = function(msg, file, line) {
    new ErrorService().logError('message: ' + msg +'; file: '+ file+'; line: ' + line);
};


window.Jetsetter = Object.merge(window.Jetsetter || {}, {

	PUB_EXP_HEX: '10001',

	HOST: 'http://' + location.host,
	SECURE_HOST: 'https://' + location.host,
	ABSOLUTE_HOST: location.protocol + '//' + location.host,  // Used for generating protocol-relative absolute URIs
	
	TRACKER_SITE: 'jetsetter',
	
	// Must match values set in .ini files
	INVITER_CREDIT: (function () {
		if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			return 25;
		} else {
			return 25;
		}
	}()),
	
	// @TODO: CHANNEL_ID should be pulled from server
	CHANNEL_ID: (function () {
		if (location.hostname.contains('asw')) {
			return 8;
		} else if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			return 10;
		} else {
			return 1;
		}
	}()),

	ENTITY_ID: (function () {
		if (location.hostname.contains('asw')) {
			return 2;
		} else if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			return 3;
		} else {
			return 1;
		}
	}()),


	ENV: (function () {
		switch(location.hostname){
			case 'www.jetsetter.com':
			case 'www.jetsetter.co.uk':
			case 'asw.jetsetter.com':
				return 'production';
				break;
			case 'stg.jetsetter.com':
            case 'ukwwwstg.jetsetter.com':
			case 'wwwstg.jetsetter.com':
			case 'wwwstg01.jetsetter.com':
			case 'wwwstg02.jetsetter.com':
				return 'staging';
				break;
			case 'qa1.jetsetter.com':
			case 'qa2.jetsetter.com':
			case 'qa3.jetsetter.com':
			case 'qa4.jetsetter.com':
			case 'qa5.jetsetter.com':
			case 'qa6.jetsetter.com':
			case 'qa7.jetsetter.com':

			case 'wwwqa01.jetsetter.com':
			case 'wwwqa02.jetsetter.com':
			case 'wwwqa03.jetsetter.com':
			case 'wwwqa04.jetsetter.com':
			case 'wwwqa05.jetsetter.com':
			case 'wwwqa06.jetsetter.com':
			case 'wwwqa07.jetsetter.com':

			case 'nodewwwqa01.jetsetter.com':
			case 'nodewwwqa02.jetsetter.com':
			case 'nodewwwqa03.jetsetter.com':
			case 'nodewwwqa04.jetsetter.com':
			case 'nodewwwqa05.jetsetter.com':
			case 'nodewwwqa06.jetsetter.com':
			case 'nodewwwqa07.jetsetter.com':

            case 'nodewwwqa01.jetsetter.co.uk':
            case 'nodewwwqa02.jetsetter.co.uk':
            case 'nodewwwqa03.jetsetter.co.uk':
            case 'nodewwwqa04.jetsetter.co.uk':
            case 'nodewwwqa05.jetsetter.co.uk':
            case 'nodewwwqa06.jetsetter.co.uk':
            case 'nodewwwqa07.jetsetter.co.uk':
			case 'nodewwwsbx.jetsetter.com':
				return 'qa';
				break;
			case 'jetsetwww.dev':
			case 'jetsetwww.co.uk.dev':
			case 'asw.jetsetwww.dev':
			case 'node.jetsetwww.dev':
            case 'node.jetsetwww.dev.co.uk':
			case 'node.jetsetwww.co.uk.dev':
				return 'development';
				break;
			default:
                Jetsetter.log('could not determine ENV. defaulting to production');
				return 'production';
				break;
		}
	}()),


	GA_ACCOUNT_ID: (function () {
		if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			return 'UA-12185313-3';
		} else {
			return 'UA-12185313-2';
		}
	}()),


	API_KEY: (function () {
		if (location.hostname.contains('asw')) {
			return 'f4fad0f0889c11e1809a732046fe2ad7';
		} else if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			return '023fd8e6889d11e1aca826957cacea91';
		} else {
			return '1a9d6ce2d9ed102f9ff495096f141429';
		}
	}()),
	
	packages: {
		core: {},
		checkout: {}, // TODO: will be obsoleted by "confirmation" below
		confirmation: {},
		summary: {},
		contact: {},
		presale: {},
		splash: {},
		product: {},
		profile: {},
		login: {},
		register: {},
		upcoming: {},
		search: {}
	},
	
	// For use with "objectTouch" event in tracker.php
	objectTypes: {
		PROPERTY: 'Property',
		SALE: 'Sale'
	},

	page: {
		uri: new URI(),
		id: '' // Init on domready
	},
	
	cookieDomain: (function(){
		return '.' + location.hostname;
	})(),
	trackerEvents: [],
	
	//our global config object
	config: {},

    devicePixelRatio: (function() {
        var dpr = window.devicePixelRatio || 1;

        // round dpr up to nearest .5
        dpr = Math.ceil(dpr * 2) / 2;

        // allow force_dpr=[num] on the query string
        try {
            var force_dpr = window.location.search.match(/force_dpr=(\d\.?\d?)/);
            if (force_dpr && (force_dpr.length == 2)) {
                dpr = parseInt(force_dpr[1], 10) || dpr;
            }
        } catch (e) {}

        return dpr;
    })(),

	init: function () {

        // for busting file cache
        var cacheBust = 'abc';

		// Mixin Underscore.String into Underscore
		_.mixin(_.str.exports());

		this.CDN_HOST = (function (self) {
			var hostname = '';
			
			switch (location.hostname) {
                case 'jetsetter.com':
				case 'www.jetsetter.com':
				case 'www.jetsetter.co.uk':
				case 'asw.jetsetter.com':
					return '//cdnx.jetcdn.com';
				case 'nuwww.jetsetter.com':
					return '//nucdn.jetcdn.com';
				case 'jetsetwww.dev':
				case 'jetsetwww.co.uk.dev':
					return '//cdnx.dev'
				case 'wwwstg.jetsetter.com':
				case 'ukwwwstg.jetsetter.com':
					return '//nodeoriginstg.jetsetter.com'
				default:
					return '//' + location.host;
			}
			
		}(this));

		// RSA keys
		this.PUB_MODULUS_HEX = this.ENV == 'production' ?
			'00cb6e5ed171a9dd7d35f5ba822da278ed7129034c49759d7b9eded3f688680709b81071ed5881517a773d6c070ec5c2a5686409f3e907120ef7a3dfac2417b6b2d9d60d9b241aeba5502352e50ba364f7aa8ca3dd51350a2afe4f706f13cb9c726519899160faf22377f69e8c04f9a7c5cd55e6af1e060c857f85ad5fd32fa54d' :
			'00d8b40061e7e689df87c7a24dc123df63a1f38325e2e8b3234aabfe213f2d9995292bda3abe2a25b64e170153ca74310799a1f92848e8a7665d8300d41d9f51ec55e0c9d2a172f9c5e147e7f7b6f9d9c56049b924f1a01424667775620e8e209c38972a5c5243b49c5de81aaf3a3c59edf475bdcb2891d7f4f6787310a0d2e311';
	

		this.CURRENCY_SYMBOL = this.ENTITY_ID === 3 ? '&pound;' : '$';

		//For PopUpManager
		this.popups = {};
		//for accessing the classes directly
		window.popups = [];
		//For ModuleManager
		this.modules = {};
		
		this.WHITE_LABEL = (this.CHANNEL_ID !== 1);
		
		if (Cookie.read('j_awt') == -1) { // adwords test
			_gaq.push(['gwo._setAccount', 'UA-12185313-1']);
			_gaq.push(['gwo._trackPageview', '/1245067567/test']);
			Cookie.write('j_awt', 1, {
				'domain': Jetsetter.cookieDomain
			});
		}		
		
		// @TODO: get locale from entity channel?
		if (location.hostname.contains('.co.uk') || location.hostname.contains('ukwww')) {
			Locale.use('en-GB');
		}
		

		this.user = new User();

		// Deferred Cookie Setting
		if(Jetsetter.deferredCookies){
			Object.each(Jetsetter.deferredCookies, function(cookie, cookieName){
				// j_sess should not be overwritten if user is not public
				if(cookieName === 'j_sess' && Jetsetter.user.state !== 'public'){
					return false;
				}

				Cookie.write(cookieName, cookie.content, {
					duration: cookie.duration,
					domain: cookie.domain,
					path: '/'
				});
			});

			// if we have any deferred cookies, reinitialize user object
			this.user = new User();
		}

		// initialize auth
		this.Auth = new Auth();
        this.AuthService = new AuthService();
        this.UserService = new UserService();

		$(document.html).addClass('user-' + Jetsetter.user.state);

        // todo: take this out of the global scope
		EventService = new EventServiceSingleton();

        Jetsetter.userGeoModel = new Jetsetter.Models.UserGeo();

        /**
         * window auto expander is initialized here and 'started'. This will check a bunch of GA params. Additionally the
         * 'start' method will be called when source data comes back from the API. In case this start() invocation determined
         * that the auto expander should not be initialized based on GA params, it will have another chance to attempt it when
         * sources come back. It is safe to call start() multiple times as it will try each time to initialize the click listener
         * and it will not do anything if start() had successfully initialized the click tracker in a previous invocation
         *
         * @type {WindowAutoExpander}
         */
        this.windowAutoExpander = new WindowAutoExpander();
        Jetsetter.windowAutoExpander.start();
    },

    secureLogin: function (options) {
        options = Object.merge({
            access: 'secure',
            startScreen: options.startScreen,
            forceAuthentication: false,
            dismissOnLogin: true
        }, options || {});

        if (!options.access) {
            options.access = 'secure';
        }
        if ((options.forceAuthentication == false) && (((options.access == 'secure' && this.user.hasSecureToken()) ||
            (options.access == 'insecure' && this.user.hasInsecureToken()) ||
            (options.access == 'identity' && this.user.hasIdentity()) ||
            this.user.isAssumed))) {
            if (typeOf(options.onLogin) == 'function') {
                options.onLogin();
            }
        } else {
            if (typeOf(options.onModalShow) == 'function') {
                options.onModalShow();
            }
            // var secureLoginModal = new SecureLoginModal(options).show();
            var authModal = new AuthModal(options).show();
        }
    },

    emailLogin: function(options) {
        if (this.user.hasIdentity()) {
            this.AuthService.emailLogin({
                email: this.user.email,
                onSuccess: options.onSuccess,
                onFailure: options.onFailure
            });
        } else {
            this.secureLogin(options);
        }
    },

	setEntityAndRedirect: function(entity) {
		var entities = {
			1: 'http://www.jetsetter.com',
			2: 'http://asw.jetsetter.com',
			3: 'http://www.jetsetter.co.uk'
		};

		var redirectObj = new URI(),
			redirectUrl = 'http://' + redirectObj.get('host').replace('.co.uk', '.com'),
			req = new Request.JSONP({
				url: redirectUrl + '/user/setpreferredentityxd',
				data: {
					'sess_id': Jetsetter.session.id,
					'entity-id': entity
				}
			}).send();

			// Give the request a moment to be sent and then redirect
			setTimeout(function() {
				document.location = redirectUrl;
			}, 500);
	},

	log: function(message){
		if(location.hostname.contains('.dev')){
			if(typeof message === 'undefined'){
				message = '';
			}

			console.log(message);	
		}
	},

	loadImages: function(elements) {

        var errorService = new ErrorService();

        try {
            // dpr-aware == device pixel ratio aware. serve larger image sizes based on dpr (retina) via a param to the dynamic image crop tool
            elements.each(function(img) {
                if (img.get('src')) { return; /* skip images that already have a src attribute */ }
                try {
                    var path = img.get('data-path');
                    var width = parseInt(img.get('width'), 10);
                    var height = parseInt(img.get('height'), 10);

                    var extra = {};

                    if (img.get('data-offset-x')) {
                        extra['offsetX'] = parseInt(img.get('data-offset-x'), 10);
                    }

                    if (img.get('data-offset-y')) {
                        extra['offsetY'] = parseInt(img.get('data-offset-y'), 10);
                    }

                    img.onerror = function() {
                        Jetsetter.log('image loading error', img);
                    };

                    if (path && width && height) {
                        img.set('src', Jetsetter.CDN_HOST + "/static/" + Jetsetter.JetsetUtil.getDynamicCropUrl(path, width, height, Jetsetter.devicePixelRatio, extra));
                    } else {
                        Jetsetter.log('device pixel ratio aware image doesnt have data-path, width, or height', img);
                    }
                } catch (e) {
                    errorService.logError(e);
                }
            }.bind(this));
        } catch (e) {
            errorService.logError(e);
        }
	}
	
	
});
Jetsetter.init();

(function () {
function initHeader() {
	var newHeaderEl = document.body.getElement('header#main');

	if(!Cookie.read('j_cli') && Jetsetter.user.hasInsecureToken()){

        var favoritesService = new FavoritesService();

        favoritesService.list({
            guid: Jetsetter.user.guid,
            onSuccess: function(data) {
                Cookie.write('j_cli', Base64.encode(JSON.encode({
                    show : _.size(data),
                    productId: _.map(data, function(item) { return item.product.id; })
                })), {
                    domain: Jetsetter.cookieDomain,
                    path: '/',
                    duration: 365
                });
            },
            onFailure: function() {

            }
        });

	}

	if(newHeaderEl){
		window.Header = new Header(newHeaderEl, {
			fixed: $('splash') && !Jetsetter.user.isPublic && !Browser.ie7 && !Browser.ie6
		});	
	} else {
        Jetsetter.log('old header el?');
        new ErrorService().logError('found usage of deprecated header el');
    }

//    else {
//
//        console.log('hello');
//
//		// Linkbin
//		if($('new-header')){
//			var linkbin = new Linkbin2($('linkbin'));
//			linkbin.addTrigger($('tripsOnSale'), 'onSaleList');
//			linkbin.addTrigger($('browseDestinations'), 'browseList');
//
//			//check to see if these exist -- they dont on UK
//			var ptpLinkbin = $('linkbin-ptp');
//			if(ptpLinkbin){
//				linkbin.addTrigger($('linkbin-ptp'), 'browseAdvice');
//			}
//
//			var homesLinkbin = $('linkbin-homes');
//			if(homesLinkbin){
//				linkbin.addTrigger($('linkbin-homes'), 'browseHomes');
//			}
//		}
//		else{
//			var linkbin = new Linkbin($('linkbin'));
//			linkbin.addTrigger($('tripsOnSale'), 'TripsOnSale');
//			linkbin.addTrigger($('browseTrips'), 'BrowseTrips');
//		}
//
//		var salesContainerEl = $('onSaleList').addClass('loading');
//		// // Populate linkbin per region user is in
//		var j_ms = Cookie.read('j_ms'), region = controlGroup = '';
//		if (j_ms) {
//			region = j_ms.split('_')[0];
//			controlGroup = j_ms.split('_')[1];
//		}
//
//        Jetsetter.log('hello');
//		var searchService = new SearchService();
//		searchService.searchEvents({
//			includeActive: true,
//			includeUpcoming: false,
//			regionId: region,
//			onSuccess: function(data) {
//				salesContainerEl.removeClass('loading');
//				var activeSalesSpecArray = data.specArray;
//				if (activeSalesSpecArray.length == 0) {
//					return;
//				}
//
//				var activeSalesColumns = new Array($('linkbin-current-0'), $('linkbin-current-1'), $('linkbin-current-2'));
//				var activeSalesColumnCounter = 0;
//				var activeSalesRowCounter = 0;
//				var stop = false;
//				activeSalesSpecArray.each(function(activeSaleSpec) {
//					if (stop) return;
//
//					var url = activeSaleSpec.jsUrl;
//					if (activeSaleSpec.propertySpecArray.length == 1) {
//						url = activeSaleSpec.propertySpecArray[0].jsUrl;
//					}
//
//					new Element('li', {
//						'html': '<a href="'+ url +'?nm=linkbin&cl='+ activeSalesColumnCounter +'">'+ activeSaleSpec.title +'</a>'
//					}).inject(activeSalesColumns[activeSalesColumnCounter]);
//
//					activeSalesRowCounter++;
//					if (activeSalesRowCounter % 6 == 0) {
//						activeSalesColumnCounter++;
//					}
//
//					if (activeSalesColumnCounter >= 3) {
//						stop = true;
//					}
//				});
//
//				var activeLI = new Element('li', {
//					'html': '<a href="' + Jetsetter.HOST + '/calendar" class="more">View all active sales</a>'
//				}).inject(activeSalesColumns[activeSalesColumnCounter - 1]);
//
//
//				var villaProperties = new Array();
//				stop = false;
//				activeSalesSpecArray.each(function(activeSaleSpec) {
//					if (stop) return;
//					if (activeSaleSpec.propertySpecArray.length > 0 && activeSaleSpec.propertySpecArray[0].type == 'Villa') {
//						var stop2 = false;
//						activeSaleSpec.propertySpecArray.each(function(propertySpec) {
//							if (stop2) return;
//							villaProperties.push({title: propertySpec.title +' - '+ propertySpec.shortLocation, url: propertySpec.jsUrl});
//							if (villaProperties.length >= 12) {
//								stop2 = true;
//							}
//						});
//						if (villaProperties.length >= 12) {
//							stop = true;
//						}
//					}
//				});
//
//				var homeColumns = new Array($('linkbin-homes-1'), $('linkbin-homes-2'));
//				var homeColumnCounter = 0;
//				var homeRowCounter = 0;
//				stop = false;
//				villaProperties.each(function(villa, index){
//					if (stop) return;
//					new Element('li', {
//						'html': '<a href="'+ villa.url +'?nm=linkbin&cl='+ index +'">'+ villa.title +'</a>'
//					}).inject(homeColumns[homeColumnCounter]);
//
//					homeRowCounter++;
//					if (homeRowCounter % 6 == 0) {
//						homeColumnCounter++;
//					}
//
//					if (homeColumnCounter >= 2) {
//						stop = true;
//					}
//				});
//			},
//			onFailure: function(code, message) {
//				// log error but do not notify user
//				throw new Error("ERROR " + code + ": " + message);
//			}
//		});
//
//		searchService.searchEvents({
//			includeActive: false,
//			includeUpcoming: true,
//			regionId: region,
//			selector: {'paginator':{'limit': 6}},
//			onSuccess: function(data) {
//				var upcomingSalesSpecArray = data.specArray;
//				if (upcomingSalesSpecArray.length == 0) {
//					return;
//				}
//
//				var upcomingSaleUl = $('linkbin-upcoming-3');
//				upcomingSalesSpecArray.each(function(upcomingSaleSpec) {
//					new Element('li', {
//						'html': '<a href="'+ upcomingSaleSpec.url +'">'+ upcomingSaleSpec.title +'</a>'
//					}).inject(upcomingSaleUl);
//				});
//
//				new Element('li', {
//					'html': '<a href="' + Jetsetter.HOST + '/calendar#upcoming-sales" class="more">View all upcoming sales</a>'
//				}).inject(upcomingSaleUl, 'bottom');
//			},
//			onFailure: function(code, message) {
//				// log error but do not notify user
//				throw new Error("ERROR " + code + ": " + message);
//			}
//		});
//
//		var badgeMenuEl = $('custom-menu');
//		if (badgeMenuEl) {
//			var contentService = new ContentService();
//			contentService.getCustomMenuItems({
//				options: null,
//				limit: null,
//				order: 'rank',
//				onSuccess: function(data) {
//					if (data.length > 0) {
//						var badgeMenuItems = new Array();
//						data.each(function(badgeMenuItem, index) {
//							if (badgeMenuItem && badgeMenuItem.title) {
//								badgeMenuItems.push({
//									'id': badgeMenuItem.id,
//									'title': badgeMenuItem.title,
//									'url': badgeMenuItem.url +'?nm=badgemenu&cl='+ index,
//									'promoted': badgeMenuItem.promoted === 1 ? true : false,
//									'rank': badgeMenuItem.rank
//								});
//							}
//						});
//						if (badgeMenuItems.length > 0 && badgeMenuEl){
//							var badgeMenu = new BadgeMenu(badgeMenuEl, badgeMenuItems);
//						} else {
//							badgeMenuEl.hide();
//						}
//					} else {
//						if (badgeMenuEl) {
//							badgeMenuEl.hide();
//						}
//					}
//				},
//				onFailure: function(code, message) {
//					// log error but do not notify user
//					throw new Error("ERROR " + code + ": " + message);
//				}
//			});
//		}
//
//		// Account menu dropdown (doesn't show up in anonymous mode)
//		var accountMenuEl = $('account-menu');
//		if (accountMenuEl) {
//			var accountMenu = new PullDownMenu(accountMenuEl, accountMenuEl.getElement('ul'));
//			if($('product-details')){
//				var favs = setInterval(function(){
//					if(window.favsTooltip){
//						// @TODO: This thing should be pubsub-ed
//						accountMenu.addEvent('showEnd', function(){
//							favsTooltip.hide(true);
//						});
//						clearInterval(favs);
//					}
//				},1000);
//			}
//
//			var cliCookie = Cookie.read('j_cli');
//			if (cliCookie) {
//				var cliCookieValue = JSON.decode(cliCookie.decode64());
//				if (cliCookieValue && cliCookieValue.propertyId) {
//					accountMenuEl.getElement('.favorite b').set('text', cliCookieValue.propertyId.length);
//				}
//			}
//		}
//
//		var searchFormEl = $('nav-search');
//		var searchInputEl = searchFormEl.getElement('input');
//
//		var headerSearchAutocomplete = new HeaderSearchAutocomplete(searchInputEl, {
//			searchSource: 'TopNav',
//			theme: 'dark',
//			truncateAtChar: 37
//		});
//		headerSearchAutocomplete.addEvent('selectionMade', function (el) {
//			// Omniture tracking
//			var position = el.getAllPrevious('li').length;
//			var feature = 'Autocomplete click: ' + headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')';
//			var data = el.retrieve('data');
//
//			_gaq.push(['_trackEvent', 'Autocomplete', 'Click', headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')']);
//
//			var search = new URI(el.getElement('a').get('href')),
//		    	data = search.get('data');
//
//		    data.type = 'Dropdown';
//
//		    if(this.options.searchSource){
//		    	data.source = this.options.searchSource;
//		    }
//
//		    search.set('data', data);
//
//		  	window.location = search.toString();
//		});
//	}
	
}

window.addEvent('domready', function () {
	//disable console for prod
	if(Jetsetter.ENV === 'production'){
		if(typeof window.console === 'undefined' || !window.console){
			window.console = {};
		}
		window.console.log = window.console.error = window.console.info = window.console.debug = window.console.warn = window.console.trace = window.console.dir = window.console.dirxml = window.console.group = window.console.groupEnd = window.console.time = window.console.timeEnd = window.console.assert = window.console.profile = function() {};
	}

	// Bind notification center to Jetsetter
	Jetsetter.NotificationCenter = new NotificationCenter($('notification-center'));

	$$('.logout-url').addEvent('click', function(event, element) {
		event.preventDefault();
		Jetsetter.Auth.logout();
	});

	Jetsetter.page.id = $(document.body).get('id');

	var pageElems = $$('#page-content, .page-container'),
		toMeasure = [];

	pageElems.each(function(elem){
		if(!elem.getParent('header#main')){
			toMeasure.push(elem);
		}
	});

	if(toMeasure[0]){
		Jetsetter.page.width = toMeasure[0].measure(function(){
			var width = Math.round(this.getSize().x);

			// fix for summary page
			if(width === 926){
				width = 918;
			}

			return width;
		});
	}

	document.html.addClass('width-' + Jetsetter.page.width);

	var moduleManager = new ModuleManager();
	var popUpManager = new PopUpManager();
	Jetsetter.tracker = new Tracker();
	Jetsetter.sourceTracker = new SourceTracker();
	
	//iPadModal
	if(Jetsetter.popups.iPadModal){
		window.popups['iPadModal'] = new iPadModal();	
	}

	// Public reg modal, only on PDP - JETSETTER-7379
	// if(Jetsetter.popups.PublicRegModal){
	// 	var promoAlias = new URI().getData('via');

		// new AuthModal({
		// 	promoAlias: promoAlias,
		// 	setScreen: 'PublicReg',
		// 	dismissable: true,
		// 	dismissOnLogin: true,
		// 	onLogin: function(){
		// 		window.location.reload();
		// 	}
		// }).show();
	// }

	window.addEvent('konami', function(){
		document.body.addClass('konami');
	});

	window.addEvent('awesomeness', function(e){
		if(Jetsetter.user.isAdmin){
			document.body.addClass('awesomeness');
		}
	});

	//iPhone2 Release - Go to module manager and change false to true, popups manager is still in play though
	//so this will not fire if PostRegModal is going to fire etc.
	if(Jetsetter.popups.iPhoneInterstitial && Jetsetter.modules.iPhoneInterstitial){
		// Disabling for now
		//window.location.href = '/promo/iphoneinterstitial?return=' + escape(window.location.href);
		//new iPhoneInterstitial();
	}

	//iPhone2 Release - Go to module manager and change false to true, popups manager is still in play though
	//so this will not fire if PostRegModal is going to fire etc.
	if(Jetsetter.popups.iPhoneBanner && Jetsetter.modules.iPhoneBanner){
		window.popups['iPhoneBanner'] = new iPhoneBanner();
	}
	
	if(Jetsetter.popups.iPhoneModal && Jetsetter.modules.iPhoneModal){
		window.popups['iPhoneModal'] = new iPhoneModal().show();
	}

	if(Jetsetter.popups.PromoDiscount && Jetsetter.modules.PromoDiscount){
		Jetsetter.promoDiscount = window.popups['PromoDiscount'] = new PromoDiscount();
	}

	var publicSignupEl = $('public-bar');
	if(publicSignupEl){
		var publicSignupBar = new PublicSignupBar(publicSignupEl);
	}
	
//	if (Browser.ie9 && window.external && window.external.msIsSiteMode && window.external.msIsSiteMode() && window.localStorage){
//
//		var j_pin = localStorage.getItem('j_pin');
//
//		if(!localStorage.getItem('j_pin') || new Date().diff(new Date(JSON.decode(j_pin).time), 'hour') > 12){
//			if(!localStorage.getItem('j_pin')){
//
//			}
//			else{
//				localStorage.removeItem('j_pin');
//			}
//			var j_ms = Cookie.read('j_ms'), region = controlGroup = '';
//			if (j_ms) {
//				region = j_ms.split('_')[0];
//				controlGroup = j_ms.split('_')[1];
//			}
//
//			var searchService = new SearchService();
//			EventService.getEvents({
//                active: true,
//                upcoming: false,
//                regionWoeId: region,
//                onSuccess: function(data) {
//                    var activeSalesSpecArray = data.specArray;
//                    if (activeSalesSpecArray.length == 0) {
//                        return;
//                    }
//
//                    var g_ext = window.external;
//                    g_ext.msSiteModeClearJumpList();
//                    g_ext.msSiteModeCreateJumpList("Newest Flash Sales");
//                    activeSalesSpecArray.each(function(activeSaleSpec) {
//                        var url = activeSaleSpec.jsUrl;
//                        if (activeSaleSpec.length == 1) {
//                            url = activeSaleSpec.propertySpecArray[0].jsUrl;
//                        }
//                        g_ext.msSiteModeAddJumpListItem(activeSaleSpec.title, url +'?nm=iejumplist', './favicon.ico');
//                    });
//
//                    localStorage.setItem('j_pin', JSON.encode({
//                        'time': new Date().getTime()
//                    }));
//
//                    g_ext.msSiteModeShowJumplist();
//                }
//            });
//        }
//	}
//
	var isLoginPage = ['/login', '/slogin'].some(function (url) {
		return (location.pathname.indexOf(url) === 0);
	});
	

	if (Jetsetter.user.isPublic) {
		if (Jetsetter.session.pl.mt >= 0) {
			if (!Jetsetter.session.pl.timestamp || Jetsetter.session.pl.timestamp == 0) {
				Jetsetter.session.pl.timestamp = new Date().format('%s');
				Cookie.write('j_sess', JSON.encode(Jetsetter.session), {
					'domain': Jetsetter.cookieDomain
				});
			}

			// show reg modal, unless we are on splash page
			if ($(document.body).get('id') != 'splash') {
				setTimeout(function() {
					new AuthModal({
						setScreen: 'PublicReg',
						dismissable: (Jetsetter.session.pl.md == 1 ? true : false),
						onLogin: function(){
							window.location.reload();
						}
					}).show();
				}, (Jetsetter.session.pl.mt || 0) * 1000);
			}					
		}		
	}
	

	var headerEl = $('header-wrapper') || $$('header#main')[0];
	if (headerEl) { 
		if (!headerEl.hasClass('no-nav')) {
			initHeader();
		}

		var secureOptions = {
			'access': 'insecure',
			onCloseEnd: function () {},
			onLogin: function () {
				window.location.reload();
			}
		};

		if(Jetsetter.regOptions){
			secureOptions.promoId = Jetsetter.regOptions.promoId ? Jetsetter.regOptions.promoId : '';
			secureOptions.referrerGuid = Jetsetter.regOptions.referrerGuid ? Jetsetter.regOptions.referrerGuid : '';
			secureOptions.invitationId = Jetsetter.regOptions.invitationId ? Jetsetter.regOptions.invitationId : '';
			secureOptions.promo = Jetsetter.regOptions.promo ? Jetsetter.regOptions.promo : '';
			secureOptions.promoKey = Jetsetter.regOptions.promoKey ? Jetsetter.regOptions.promoKey : '';
		} else if (Jetsetter.session.pl) {
			secureOptions.promoId = Jetsetter.session.pl.promo_id;
			secureOptions.promo = Jetsetter.session.pl.promo;
		}

        var signInMenu = $('sign-in-link');
        if (signInMenu) {
            signInMenu.getElement('a').addEvent('click', function() {
                    Jetsetter.secureLogin(secureOptions)
            });
        }

        var signUpMenu = $('sign-up-link');
        if (signUpMenu) {
            signUpMenu.getElement('a').addEvent('click', function() {
                    Jetsetter.secureLogin(secureOptions);
            });
        }

        var signInEl = $('sign-in-global');
        if(signInEl){
            signInEl.addEvent('click', function(){
                Jetsetter.secureLogin(secureOptions);
            });
        }
	}

	// Footer feedback link
	var feedbackEl = $('feedback');
	if (feedbackEl) {
		feedbackEl.addEvent('click', function () {
			var feedbackModal = new FeedbackModal();
			feedbackModal.show();
			return false;
		});
	}

	var footerEl = $('footer-inner');
	if (footerEl) {
		footerEl.addEvent('click:relay(a)', function(e, elem){
			var gacol = elem.parentNode.parentNode.id;
			var galoc = elem.get('html') + elem.href;
			_gaq.push(['_trackEvent', 'Footer',  gacol, galoc]);
		});
	}

    var creditBalanceModel = Jetsetter.Models.CreditBalance.get({
        guid        : Jetsetter.user.guid
    });

    var creditAuthMenu = $('credit-menu-item');
    if (creditAuthMenu) {
        var creditAuthMenuController = new Jetsetter.Controllers.UserCreditController({
            el: creditAuthMenu.getElement('.credit'),
            model: creditBalanceModel
        });

//        if (Jetsetter.augustPromo && Jetsetter.user.isEligibleForAugustPromo()) {
//            creditAuthMenu.addClass('has-tooltip');
//            creditAuthMenu.addEvents({
//                'mouseover': function(e) {
//                    var tooltip = creditAuthMenu.retrieve('tooltip') || new Tooltip(creditAuthMenu.getElement('.credit'), {
//                        'className': 'credit-tooltip' ,
//                        orientation: 'bottom'
//                    });
//                    var ttText = 'Limited-time $50 credit for purchases over $400<br />Valid until August 19 at 11:59PM EDT';
//                    tooltip.show(ttText, creditAuthMenu, 0);
//                    creditAuthMenu.store('tooltip', tooltip);
//                },
//                'mouseout' : function(e) {
//                    var tt = creditAuthMenu.retrieve('tooltip');
//                    if (tt) {
//                        tt.hide();
//                    }
//                }
//
//            });
//        }
    }

    var creditAccountMenu = $('account-menu');
    if (creditAccountMenu) {
        var creditAccountController = new Jetsetter.Controllers.UserCreditController({
            el: creditAccountMenu.getElement('.credit'),
            model: creditBalanceModel
        });
    }

    if(creditBalanceModel.shouldFetch()) {
        creditBalanceModel.fetch();
    }

	//page view
	var currUri = new URI(window.location);
	var refUri = new URI(document.referrer);
	Jetsetter.trackerEvents.include({
		eventType: 'pageView',
		key3: Jetsetter.TRACKER_SITE,
		key4: encodeURIComponent(refUri.get('directory') + refUri.get('file')),
		key5: encodeURIComponent(currUri.get('directory') + currUri.get('file')),
		key6: encodeURIComponent(currUri.get('query')),
		key25: Jetsetter.user.visitorId,
		key32: Jetsetter.CHANNEL_ID
	});
	
    Jetsetter.userGeoModel.supply(function() {
        var data = Jetsetter.userGeoModel.get('data');
        // @todo: remove this and entirely use Jetsetter.userGeoModel instead of j_ll cookie. (remove j_ll cookie everywhere)
        Cookie.write('j_ll', JSON.encode({
            'latitude': (data.latitude || ''),
            'longitude': (data.longitude || ''),
            'countryCode': (data.countryCode || '')
        }), {
            duration: 7,
            domain: Jetsetter.cookieDomain
        });
    });

	if (!Jetsetter.user.woeId || Jetsetter.user.woeId < 1) {
		Jetsetter.userGeoModel.supply(function() {
            var data = Jetsetter.userGeoModel.get('data');
            // set woe
            var req = new Request.JSON({
                url: '/user/getwoeidforuser?lat='+(data.latitude || '')+'&long='+(data.longitude || '')
            });
            req.get();
        });
	}
	
	
	if (!isLoginPage) {
		if (Jetsetter.user.woeId && Jetsetter.user.woeId > 0 && !Cookie.read('j_ms') && Jetsetter.user.partition > 0) {
			var req = new Request.JSON({
				url: '/user/mapgeo'
			});
			req.get();
		} 
		
		if (Cookie.read('j_ms')) {
			if(Jetsetter.user.partition >= 800 && Cookie.read('j_ms').split('_')[1] == 1) {
				var msCookie = Cookie.read('j_ms').split('_')[0] + '_0';
				Cookie.write('j_ms', msCookie, {
					duration: 7,
					domain:Jetsetter.cookieDomain
				});
			} else if (Jetsetter.user.partition < 800 && Cookie.read('j_ms').split('_')[1] === 0) {
				var msCookie = Cookie.read('j_ms').split('_')[0] + '_1';
				Cookie.write('j_ms', msCookie, {
					duration: 7,
					domain: Jetsetter.cookieDomain
				});
			}
		}
	}
	
	//promo spot on splash, TOS and contact pages
	var campaignPromoEl = $('campaign-promo');
	if (campaignPromoEl) {
		//get all active promos
		var prefix = Jetsetter.CDN_HOST + '/static/';
		new CampaignService().getPromos({
			onSuccess: function(data) {
				//get cookie for frequency capping checks
				var cpCookie = Cookie.read('j_cp');
				if (cpCookie !== null) {
					var seenPromos = cpCookie.split(",");
					var campaignCookieArray = [];
					for(var i=0; i < seenPromos.length;i++) {
						var arrayVals = seenPromos[i].split(":");
						campaignCookieArray[arrayVals[0]] = arrayVals[1];
					}
				}
				//this array will hold all promos that the user can see
				var eligiblePromos = [];
				var defaultPromos = [];
				var index = 0;
				var defaultIndex = 0;
				data.each(function (campaignPromo) {
					if(campaignPromo.defaultAd == 1) {
						defaultPromos[defaultIndex] = campaignPromo;
						defaultIndex++; 
					} else {
						//if no frequency cap is set, it is eligible
						if (campaignPromo.frequencyCap === null || campaignPromo.frequencyCap == 0) {
							eligiblePromos[index] = campaignPromo;
							index++;
						} else {
							if(cpCookie !== null) {
								if(typeof(campaignCookieArray[campaignPromo.id]) !== 'undefined') {
									var timesSeen = campaignCookieArray[campaignPromo.id];
									if (timesSeen < campaignPromo.frequencyCap) {
										eligiblePromos[index] = campaignPromo;
										index++;
									}
								} else {
									eligiblePromos[index] = campaignPromo;
									index++;
								}
							} else {
								eligiblePromos[index] = campaignPromo;
								index++;
							}
						}
					}
				}, this);
				if (eligiblePromos.length == 0 && defaultPromos.length > 0) {
					eligiblePromos = defaultPromos;
				}
				if (eligiblePromos.length > 0) {
					//let's pick a random creative from the amount of eligible promos we have
					var chosenIndex = Math.floor(Math.random()*eligiblePromos.length);
					
					if(cpCookie !== null ) {
						if(typeof(campaignCookieArray[eligiblePromos[chosenIndex].id]) !== 'undefined') {
							campaignCookieArray[eligiblePromos[chosenIndex].id]++;
						} else {
							campaignCookieArray[eligiblePromos[chosenIndex].id] = 1;
						}
						var writeCookie = '';
						for(var i=0; i < campaignCookieArray.length; i++) {
							if(typeof(campaignCookieArray[i]) !== 'undefined') {
								writeCookie += (writeCookie.length > 0) ? ',' : '';
								writeCookie += i+':'+campaignCookieArray[i];
							}
						}
						Cookie.write('j_cp', writeCookie,{
							duration: 90
						});
					} else {
						Cookie.write('j_cp', eligiblePromos[chosenIndex].id + ':1',{
							duration: 90
						});
					}	
					
					if (eligiblePromos[chosenIndex].promoHTML.length) {
						campaignPromoEl.innerHTML = eligiblePromos[chosenIndex].promoHTML;
						if (typeof campaignPromoload != 'undefined') { campaignPromoload(); }
					} else {
						campaignPromoEl.innerHTML = "<a href='"+eligiblePromos[chosenIndex].clickthroughUrl+"'><img src='"+prefix+eligiblePromos[chosenIndex].hostedImage.path+"' alt='"+eligiblePromos[chosenIndex].name+"'>";
					}
				} else {
					//if there is nothing to show, show the invite promo
					campaignPromoEl.innerHTML = '<a title="Invite Your Friends" href="/account/invite"><img border="0" title="Invite Your Friends" alt="Invite Your Friends" src="'+prefix+'images/promo/invite-friends.jpg"></a>';
				}
			},
			onFailure: function() {
				//any errors with the json, show invite promo
				campaignPromoEl.innerHTML = '<a title="Invite Your Friends" href="/account/invite"><img border="0" title="Invite Your Friends" alt="Invite Your Friends" src="'+prefix+'images/promo/invite-friends.jpg"></a>';
			}
		});
		cpReq.send('action=getEligiblePromos');
	}
	
	
	var tourLinkEl = $('take-the-tour');
	if (tourLinkEl) {
		tourLinkEl.addEvent('click', function () {
			var tourModal = new TourModal();
			tourModal.show();
		});
	}	
	
	// allow both types of modals
	if (!isLoginPage && (Jetsetter.popups.RegistrationPersonalizationModal || Jetsetter.popups.PostRegModal)) {
		var hashQuery = new URI().get('fragment').parseQueryString();
		if (hashQuery) {
			var showTour = location.hash == '#tour' || (hashQuery.tour && hashQuery.tour.toInt()),
				showInvite = hashQuery.invite && hashQuery.invite.toInt();
			
			// Reset hash to prevent the back button from retriggering the modal
			// BEWARE: Firefox 3.0 will reload the page if set to empty string
			if (navigator.userAgent.contains('Firefox/3.0')) {
				location.hash = '#';
			} else {
				location.hash = '';
			}

			window.setTimeout(function () {
				window.popups['RegistrationPersonalizationModal'] = new RegistrationPersonalizationModal().show();
			}, 1500);
		}
	}
	
	if (Jetsetter.user.isAdmin) {
		Jetsetter.adminToolbar = new AdminToolbar({isAssumed: (Jetsetter.user.isAssumed) ? true : false});
	}

	if(Jetsetter.user.isAdmin && Jetsetter.modules.AdminImageReporter){
		new AdminImageReporter($$('img'));
	}
	
	var upcomingCalendar = new UpcomingCalendar();
	
	var crossSellEl = $('cross-sell');
	if (crossSellEl) {
		new LazyImageLoader(crossSellEl.getElements('img'));
	}

	
	$(document.body).addEvent('click:relay(a)',function(e,elem){
		var host = new URI(elem.get('href')).get('host'),
			internal = host.contains('jetset');

		// Don't want to open global nav clicks in new tab
		if(!internal && !elem.hasClass('magellan-nav-item-link')){
			e.preventDefault();

			Jetsetter.tracker.trackEvent({
				'eventType': 'externalLink',
				'key35': elem.get('href')
			});
			
			window.open(elem.get('href'));
		}
	});

	// Global classes to pop different auth states
	$(document.body).addEvent('click:relay(a)', function(e, elem){
		var authOptions = {
			dismissable: true,
			dismissOnLogin: true,
			onLogin: function(){
				window.location.reload();
			}
		},
		launchModal = false;

		if(elem.hasClass('auth-pop-login')){
			authOptions.forceScreen = 'SecureLogin';
			launchModal = true;
		}

		if(elem.hasClass('auth-pop-public')){
            authOptions.forceScreen = 'PublicReg';
			launchModal = true;
		}

		if(Jetsetter.user.isLocked) {
			authOptions.forceScreen = 'AccountLocked';
		}

		if(launchModal){
			Jetsetter.secureLogin(authOptions);
		}
	});
	
	// Auto-pop secure login modal
	$(document.body).addEvent('click:relay(a)',function(e,elem){
		var uri = new URI(elem.get('href'));
		
		// Don't pop secure modal for empty hrefs, and ignore fragment portion
		if (!elem.get('href') || uri.setData({}, false, 'fragment').toString() == new URI().setData({}, false, 'fragment').toString()) {
			return;
		}
		
		var access = elem.get('data-access'); 
		var doPopModal = (access || (uri.get('host').contains('jetset') && uri.get('scheme') == 'https')) && access != 'public';

		if(doPopModal){
			e.preventDefault();

			Jetsetter.secureLogin({
				'access': access,
				onLogin: function () {
					location = elem.get('href');
				}
			});
		}
	});

	// Cookies Law UK
	if(Jetsetter.ENTITY_ID == 3 && !Cookie.read('j_cluk')) {
		Cookie.write('j_cluk', "true", {
			domain: Jetsetter.cookieDomain,
			path: '/',
			duration: 3650
		});

		Jetsetter.NotificationCenter.success({
			message: "Jetsetter uses cookies to improve your site experience. By continuing, you consent to our cookies.",
			ctaLink: "/privacy#cookies",
			cta: "Learn More",
			timeout: 0
		});
	} else if(Jetsetter.ENTITY_ID == 1 && new URI().get('data').redirectedFrom == 'UK') {
		Jetsetter.NotificationCenter.success({
			message: "We're currently making some improvements under the hood to Jetsetter UK. Please bear with us and use Jetsetter.com in the interim.",
			timeout: 0
		});
	}

	if(Jetsetter.user.guid && Jetsetter.modules.ExitSurvey){

        var forceExitPopup = false;
        try {
            var uri = new URI();
            if (uri.getData('force-exit-popup')) {
                forceExitPopup = true;
            }
        } catch (e) {
            Jetsetter.log(e);
        }

		// Exit Survey
		// If they are logged in, have clicked internally, and are randomly selected (2% chance)
		var internalClick = false;
		$(document).addEvent('click:once', function () {
			internalClick = true;
		});
		window.onunload = function () {
			if (forceExitPopup || (!internalClick && Jetsetter.user.guid)) {
				if (forceExitPopup || (Number.random(1, 50) <= 1)) {
					var j_ses = Cookie.read('j_ses') ? parseInt(Cookie.read('j_ses')) : 0;
					if (forceExitPopup || (j_ses < 2)) {
						internalClick = true;
                        var surveyUrl = 'http://sgiz.mobi/s3/c5bbfcc9b405';
                        if (Cookie.read('j_booked')) {
                            surveyUrl += "?hasBooked=true";
                        } else {
                            surveyUrl += "?hasBooked=false";
                        }
						window.open(surveyUrl, 'JSExitSurvey', 'toolbar=0, location=0, directories=0, status=0, menubar=0, scrollbars=1, resizable=0, width=530, height=605');
						Cookie.dispose('j_ses');
						Cookie.write('j_ses', j_ses + 1, {
							'duration': 2000
						});
					}
				}
			}
		};
	}

	if(Jetsetter.user.guid && Jetsetter.modules.PostStayBanner){

		// Stay Survey Banner
		var j_rv = Cookie.read('j_rv');

		if (j_rv) {
			var bannerEl = $('promo-banner');
			
			if (bannerEl && j_rv != -1 && !$(document.html).hasClass('minimal')) {
				var reviewData = JSON.decode(j_rv);
				
				if (reviewData.length == 0) {
					// no reviews
					//if there are no reviews, and we in the UK, we can show the UK Intro Banner
					//--UKBanner Class decides whether to show itself internally based on cookie
					if(Jetsetter.popups.UKBanner){
						window.popups['UKBanner'] = new UKBanner($('promo-banner'));
					}
				} else {
					var options = {
						'message': 'Welcome back! ' + reviewData.positive + ' out of ' + reviewData.all + ' members recommend ' + reviewData.propertyName.replace(/\+/g, ' ') + ' to friends. What do you think?',
						'actionLabel': 'Give feedback'
					};
					var reviewId = reviewData.reviewId;
					var promoBanner = new PromoBanner(bannerEl, options);
					promoBanner.addEvents({
						'action': function() {
							// Post Stay banner tracking
							_gaq.push(['_trackEvent', 'Review', 'Banner', 'Click']);
							document.location = reviewData.reviewUrl;
						},
						'close': function() {
							// Post Stay banner tracking
							_gaq.push(['_trackEvent', 'Review', 'Banner', 'Close']);
							Cookie.write('j_rv', -1, {
								'domain': Jetsetter.cookieDomain,
								'duration': 365
							});
							new Request.JSON({
								method: 'post',
								url: '/user/reviewdismissed',
								data: {
									'review-id': reviewId
								}
							}).send();
						}
					});
					if (!reviewData.shown) {
						reviewData.shown = 1;
						setTimeout(function () {
							promoBanner.slideIn();
						}, 1500);
					} else {
						reviewData.shown++;
						promoBanner.show();
					}
					
					// write cookie to client again, but attempt to maintain cookie expiration
					var duration = new Date().diff(new Date(reviewData.expiration * 1000), 'minute') / (60 * 24);
					Cookie.write('j_rv', JSON.encode(reviewData), {
						'domain': Jetsetter.cookieDomain,
						'duration': duration
					});
				}

			}
		} else {
			// Sets j_rv
			// throttled to 10% of page views
			if (Number.random(0, 99) < 10 && Jetsetter.user.hasInsecureToken()) {
                // @todo: move to v4
				new Request.JSON({
					url: '/user/getpendingreviews'
				}).get();
			}
			
			if(Jetsetter.popups.UKBanner){
				window.popups['UKBanner'] = new UKBanner($('promo-banner'));
			}
		}
	}

	if(Cookie.read('j_register_event')) {
		if(JETSETTER_GTM_DATA) {
			JETSETTER_GTM_DATA.push({
				'event': 'newUserJoined',
				'newUserPromoAlias': Cookie.read('j_register_event')
			});
		}
		Cookie.dispose('j_register_event', {
			'domain': Jetsetter.cookieDomain
		});
	}
	
});
}());

Jetsetter.Utilities = {};

Jetsetter.Utilities.String = {
	getFlashBanner: function(endTime){

        var endMoment;
        if (typeof endTime === 'number') {
            endMoment = moment.unix(parseInt(endTime),10);
        } else {
            endMoment = moment(endTime);
        }

	    var days = Math.abs(moment().diff(endMoment, 'days'));

	    var banner = 'On Sale Now';
	    if(days < 1){
	        banner = 'Ends soon!';
	    } else if(days < 2) {
	        banner = days + ' day left';
	    } else if(days < 8) {
	        banner = days + ' days left';
	    }

	    return banner;
	}
}

// used in conjunction with _.wrap for painless try/catch
Jetsetter.tryCatch = function(func) {
    try {
        func();
    } catch(e) {
        new ErrorService().logError(e);
    }
};

window.addEvent('domready', function() {
    setTimeout(function() { Jetsetter.loadImages($$('.dpr-aware')); }, 0);
});

window.addEvent('load', function () {

    setTimeout(function() {
        Jetsetter.loadImages($$('.dpr-aware-deferred'));
    },0);

    //NewTrackerCode
	Jetsetter.tracker.addToQueue(Jetsetter.trackerEvents[0]);
	Jetsetter.tracker.fireQueue();
	Jetsetter.sourceTracker.trackSource(function(sourceData) {
        Jetsetter.windowAutoExpander.start(sourceData);
    });
});

/*global setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root = this,
        previous_async = root.async;

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    else {
        root.async = async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    //// cross-browser compatiblity functions ////

    var _forEach = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _forEach(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _forEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        async.nextTick = function (fn) {
            setTimeout(fn, 0);
        };
    }
    else {
        async.nextTick = process.nextTick;
    }

    async.forEach = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _forEach(arr, function (x) {
            iterator(x, function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback(null);
                    }
                }
            });
        });
    };

    async.forEachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback(null);
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };

    async.forEachLimit = function (arr, limit, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length || limit <= 0) {
            return callback();
        }
        var completed = 0;
        var started = 0;
        var running = 0;

        (function replenish () {
            if (completed === arr.length) {
                return callback();
            }

            while (running < limit && started < arr.length) {
                started += 1;
                running += 1;
                iterator(arr[started - 1], function (err) {
                    if (err) {
                        callback(err);
                        callback = function () {};
                    }
                    else {
                        completed += 1;
                        running -= 1;
                        if (completed === arr.length) {
                            callback();
                        }
                        else {
                            replenish();
                        }
                    }
                });
            }
        })();
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEach].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);


    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.forEachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _forEach(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {};
            }
        });

        _forEach(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];
            var taskCallback = function (err) {
                if (err) {
                    callback(err);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    taskComplete();
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.nextTick(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    async.parallel = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEach(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.queue = function (worker, concurrency) {
        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if(data.constructor !== Array) {
                    data = [data];
                }
                _forEach(data, function(task) {
                    q.tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (q.saturated && q.tasks.length == concurrency) {
                        q.saturated();
                    }
                    async.nextTick(q.process);
                });
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if(q.empty && q.tasks.length == 0) q.empty();
                    workers += 1;
                    worker(task.data, function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if(q.drain && q.tasks.length + workers == 0) q.drain();
                        q.process();
                    });
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _forEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

}());

var _gaq = _gaq || [];
var hitTime = new Date().getTime();
var _utma = (Cookie.read('__utma'))
var _utmz = (Cookie.read('__utmz'))
if (_utma) {
	var utmaTokens = _utma.split(".");
	var googleVisitorId = utmaTokens[1];
	var sessionStartTime = utmaTokens[4];
}

_gaq.push(['gwo._setAccount', 'UA-12185313-1']);
_gaq.push(['_setAccount', Jetsetter.GA_ACCOUNT_ID]);
_gaq.push(['_setLocalRemoteServerMode']);
_gaq.push(["_setLocalGifPath","//webtracker.jetsetter.com/__utm.gif"]);

// Commented custom variables are not being used. Do not delete them, we might add them to the suite going forward.
_gaq.push(['_setCustomVar', 1, 'GUID', Jetsetter.user.guid ? Jetsetter.user.guid : Jetsetter.user.visitorId, 1]);
_gaq.push(['_setCustomVar', 2, 'Partition', Jetsetter.user.partition, 1]);
_gaq.push(['_setCustomVar', 3, 'User Status', Jetsetter.user.state, 2]);
_gaq.push(['_setCustomVar', 4, 'Site Section', Jetsetter.HOST, 3]);
_gaq.push(['_setCustomVar', 5, 'utma_contents', _utma, 2]);
_gaq.push(['_setCustomVar', 6, 'Session Start Time', sessionStartTime, 2]);
//_gaq.push(['_setCustomVar', 7, 'Pkey', 'Yes', 2]);
window.addEvent('domready', function () { 
	_gaq.push(['_setCustomVar', 8, 'Page Type', Jetsetter.page.id, 3]);
});
//_gaq.push(['_setCustomVar', 9, 'Gender', Jetsetter.user.gender, 1]);
//_gaq.push(['_setCustomVar', 10, 'Number of Orders', 'Yes', 1]);
//_gaq.push(['_setCustomVar', 11, 'Age', 'Yes', 1]);
//_gaq.push(['_setCustomVar', 12, 'Test Variant', 'Yes', 1]);
//_gaq.push(['_setCustomVar', 13, 'Hit ID', googleVisitorId + hitTime, 3]);
_gaq.push(['_setCustomVar', 14, 'Hit Time', ''+hitTime, 3])
//_gaq.push(['_setCustomVar', 15, '', '', 1]);
//_gaq.push(['_setCustomVar', 16, 'Visit Number', '', 2]);
//_gaq.push(['_setCustomVar', 17, 'Page Count', '', 3]);
//_gaq.push(['_setCustomVar', 18, 'IP', '', 2]);
//_gaq.push(['_setCustomVar', 19, 'Sale Type', '', 3]);
//_gaq.push(['_setCustomVar', 20, 'Page Category', '', 3]);
//_gaq.push(['_setCustomVar', 21, 'Sale ID', '', 3]);
//_gaq.push(['_setCustomVar', 22, 'ExactTarget ID', '', 1]);
//_gaq.push(['_setCustomVar', 23, 'eDialog ID', '', 1]);
_gaq.push(['_setCustomVar', 24, 'Visitor ID', Cookie.read('sid'), 1]);
_gaq.push(['_setCustomVar', 25, 'utmz_contents', _utmz, 2]);

_gaq.push(['_setDomainName', 'jetsetter.com']); 
_gaq.push(['_trackPageview']);

_gaq.push(['_setCampaignCookieTimeout', 2592000000]);


(function() {
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

var GA = {

	// Ecommerce tracking for GA
	trackOrder: function (order) {
		_gaq.push(['_addTrans', order.id, 'Jetsetter', order.total, order.tax]);
		_gaq.push(['_addItem', order.id, '', order.itemName, 'Jetsetter|'+ order.saleId, (order.total+order.tax)/order.resCount, order.resCount ]); 
		_gaq.push(['_trackTrans']);
	},
	
	trackRegistration: function (promoAlias) {
		_gaq.push(['_trackPageview', '/register/promo/' + promoAlias]);
		_gaq.push(['_trackEvent', 'Account', 'Registration', 'Success-New']);
	},
	
	trackInvites: function (numOfInvites, type) {
		_gaq.push(['_trackEvent', 'Account', 'Invites', type || '', numOfInvites]);
	}
	
}

// Fix global "s" object retardedness
var omniture;

(function () {
/* SiteCatalyst code version: H.22.1
Copyright 1996-2010 Adobe, Inc. All Rights Reserved
More info available at http://www.omniture.com */
/************************ ADDITIONAL FEATURES ************************
     Plugins
*/
var s_account="slbbjscomdev"
var s=s_gi(s_account);

omniture = s;

/**
 * Track an omniture 'on click' event
 * @param value value of the primary evar
 * @param evar name of the primary evar, defaults to eVar35
 * @param additionalVars object of additional evars => values to send
 */
s.trackClick = function (value, evar, additionalVars) {

	try {
		evar = evar || 'eVar35';
		var s = s_gi(s_account);
		s.usePlugins = false;
		s.linkTrackVars = evar;
		s[evar] = value;

        if (additionalVars) {
            s.linkTrackVars = s.linkTrackVars + ',' + _.keys(additionalVars).join(',');
            _.each(additionalVars, function(v, ev) {
                s[ev] = v;
            });
        }

		s.tl(true, 'o', value);
	} catch (e) {
		new ErrorService().logError("failed to execute omniture trackClick: " + e.message);
	}
}

s.trackClickEvent = function (event, evars) {
	try {
		var s = s_gi(s_account);
		s.usePlugins = false;
		s.linkTrackVars = 'events';
        if (evars) {
            s.linkTrackVars += ',' + evars.join(',');
//            s.linkTrackVars = s.linkTrackVars + "," + _.keys(evars).join(',');
//            _.each(evars, function(val, key) {
//                s.key =
//            });
        }
		s.linkTrackEvents = event;
		s.events = event;
		s.tl(true, 'o', event);
	} catch (e) {
		new ErrorService().logError("failed to execute omniture trackClick: " + e.message);
	}
}

s.trackQuickviewTabClick = function (value, propertyDetails) {
	try {
		var value = omniture.channel + ' - ' + value;
		var s = s_gi(s_account);
		s.usePlugins = false;
		s.linkTrackVars = "eVar27,eVar35,eVar75,products,events";
		s.linkTrackEvents = "event17,event84,prodView";
		s.events = "event17,event84,prodView";
		if (propertyDetails.fetched) {
			s.eVar27 = propertyDetails.get('channel');
			s.eVar75 = propertyDetails.get('property').details.jetsetterVerified ? 'Verified' : 'Approved';
			s.products = ';' + propertyDetails.get('propertyId');
		}
		s.eVar35 = value;
		s.tl(true, 'o', value);
	} catch (e) {
		new ErrorService().logError("failed to execute omniture trackQuickviewTabClickEvent: " + e.message);
	}
}

s.trackClickWithSiteSection = function(value, evar, additionalVars) {
	try {
		s.trackClick(omniture.channel + ' - ' + value, evar, additionalVars);
	} catch (e) {
		new ErrorService().logError("failed to execute omniture trackClickWithSiteSection: " + e.message);
	}
};

s.getSiteSection = function() {
    if (omniture.channel) {
        return omniture.channel;
    } else {
        return setChannel(omniture);
    }
};

/************************** CONFIG SECTION **************************/
/* You may add or alter any code config here. */
/* Conversion Config */

if (new URI().get('host').contains('.co.uk')) {
	s.currencyCode="GBP";
} else {
	s.currencyCode="USD";
}
	
/* Link Tracking Config */
s.trackDownloadLinks=true
s.trackExternalLinks=true
s.trackInlineStats=true
s.linkDownloadFileTypes="exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx"
s.linkInternalFilters="javascript:,jetsetter.com,localhost"
s.linkLeaveQueryString=false
s.linkTrackVars="None"
s.linkTrackEvents="None"
s.dynamicAccountSelection=true;
s.dynamicAccountList = 'slbbjscomdev=dev.jetsetter.com,node.jetsetwww.dev;slbbjscom=www.jetsetter.com,asw.jetsetter.com;slbbjscouk=www.jetsetter.co.uk';

/* Plugin Config */
s.usePlugins=true


function setChannel(s) {
	var channel = s.channel;

	if(!channel) {
		var pathElements = window.location.pathname.split('/');
		channel = pathElements.length > 1 ? pathElements[1] : '';
		channel = channel || 'homepage';
		if(channel == 'hotels' || channel == 'homes' || channel == 'trips') {
			channel += " - " + (Jetsetter.property && Jetsetter.property.mode ? Jetsetter.property.mode : 'unknown');

			var uri = new URI();
			if(uri.getData('checkin') && uri.getData('checkout')) {
				channel += ' | dated';
			}
			else {
				channel += ' | dateless';
			}

			if($('public-sidebar')) {
				channel += ' | no prices';
			}
		}
		s.channel = channel;

	}
	s.eVar24 = channel;
	return channel;
}
function setCampaign(s) {
	var uri = new URI();
	var sourceId = uri.getData('source_id');
	var campaign;
	if(sourceId) {
		campaign = sourceId;
	}
	// We are hardcoding sources for SEM and CRM because they are not available on page load, they are looked up and
	// validated asynchronously via the sources api and omniture should not wait for that
	if(uri.getData('taparam')) {
		campaign = 45234;
	}
	if(uri.getData('nl_id')) {
		campaign = 45574;
	}
	if(campaign) {
		s.campaign = campaign;
		s.eVar7 = campaign;
		s.eVar9 = campaign;
		s.eVar50 = campaign;
	}
}
function setPageName(s) {
	var pageName = s.pageName || document.title.replace(" - Jetsetter", "");
	if(pageName.indexOf("Order Confirmation") === 0) {
		pageName = "Order Confirmation";
	}

	s.pageName = pageName;
	s.eVar25 = pageName;
	return pageName;
}
function setLoginStatus(s) {
	if(Jetsetter.user.hasSecureToken()) {
		s.eVar39 = "fully logged in";
	}
	else if(Jetsetter.user.hasIdentity()) {
		s.eVar39 = "partially logged in";
	}
	else {
		s.eVar39 = "not logged in";
	}
}
function s_doPlugins(s) {
	if(omnitureTracking && omnitureTracking.isErrorPage) {
		s.pageType = "errorPage";
	}

	var pageName = setPageName(s);
	var channel = setChannel(s);
	setCampaign(s);
	setLoginStatus(s);
	s.eVar4 = Jetsetter.user.guid;
	s.eVar26 = Jetsetter.user.visitorId;

	var uri = new URI();
	if(uri.getData('nl_id')) {
		s.eVar6 = uri.getData('nl_id');
	}
	if(uri.getData('taparam')) {
		s.eVar29 = uri.getData('taparam');
	}
	if(uri.getData('traqparam')) {
		s.eVar31 = uri.getData('traqparam');
	}
	if(uri.getData('supmt')) {
		s.eVar36 = uri.getData('supmt');
	}
	s.eVar38 = "Desktop site";
	if(uri.getData('utm_source')) {
		s.eVar68 = uri.getData('utm_source');
	}
	if(uri.getData('utm_medium')) {
		s.eVar69 = uri.getData('utm_medium');
	}
	if(uri.getData('utm_keyword')) {
		s.eVar70 = uri.getData('utm_keyword');
	}
	if(uri.getData('utm_campaign')) {
		s.eVar71 = uri.getData('utm_campaign');
	}
	if(uri.getData('utm_term')) {
		s.eVar72 = uri.getData('utm_term');
	}
	s.eVar73 = Jetsetter.user.partition;
	s.eVar74 = window.location.pathname + window.location.search;

	var hasOmnitureTrackingCookie = Cookie.read('omn_t');
	if(!hasOmnitureTrackingCookie) {
		s.eVar11 = new Date().getUTCHours();
		s.eVar22 = pageName;
		s.eVar62 = channel;
		Cookie.write('omn_t', 'true');
	}

	s.events = s.apl(s.events,"event15",",",1);

	if(Cookie.read('j_register_event')) {
		s.events = s.apl(s.events,"event4",",",1);
	}

	if (Cookie.read("j_source")) {
		try {
			var sourceCookie = JSON.parse(Cookie.read("j_source"));
			s.eVar8 = sourceCookie.source_id;
		} catch (e) {}
	}

}
s.doPlugins=s_doPlugins
/************************** PLUGINS SECTION *************************/
/* You may insert any plugins you wish to use here.                 */
/*
 * Plugin: getQueryParam 2.1 - return query string parameter(s)
 */
s.getQueryParam=new Function("p","d","u",""
+"var s=this,v='',i,t;d=d?d:'';u=u?u:(s.pageURL?s.pageURL:s.wd.locati"
+"on);if(u=='f')u=s.gtfs().location;while(p){i=p.indexOf(',');i=i<0?p"
+".length:i;t=s.p_gpv(p.substring(0,i),u+'');if(t)v+=v?d+t:t;p=p.subs"
+"tring(i==p.length?i:i+1)}return v");
s.p_gpv=new Function("k","u",""
+"var s=this,v='',i=u.indexOf('?'),q;if(k&&i>-1){q=u.substring(i+1);v"
+"=s.pt(q,'&','p_gvf',k)}return v");
s.p_gvf=new Function("t","k",""
+"if(t){var s=this,i=t.indexOf('='),p=i<0?t:t.substring(0,i),v=i<0?'T"
+"rue':t.substring(i+1);if(p.toLowerCase()==k.toLowerCase())return s."
+"epa(v)}return ''");

/*
 * Plugin: getValOnce 0.2 - get a value once per session or number of days
 */
s.getValOnce=new Function("v","c","e",""
+"var s=this,k=s.c_r(c),a=new Date;e=e?e:0;if(v){a.setTime(a.getTime("
+")+e*86400000);s.c_w(c,v,e?a:0);}return v==k?'':v");

/*
 * Utility Function: split v1.5 - split a string (JS 1.0 compatible)
 */
s.split=new Function("l","d",""
+"var i,x=0,a=new Array;while(l){i=l.indexOf(d);i=i>-1?i:l.length;a[x"
+"++]=l.substring(0,i);l=l.substring(i+d.length);}return a");

/*
 * Plugin: getPercentPageViewed v1.2
 */
s.getPercentPageViewed=new Function("",""
+"var s=this;if(typeof(s.linkType)=='undefined'||s.linkType=='e'){var"
+" v=s.c_r('s_ppv');s.c_w('s_ppv',0);return v;}");
s.getPPVCalc=new Function("",""
+"var s=s_c_il["+s._in+"],dh=Math.max(Math.max(s.d.body.scrollHeight,"
+"s.d.documentElement.scrollHeight),Math.max(s.d.body.offsetHeight,s."
+"d.documentElement.offsetHeight),Math.max(s.d.body.clientHeight,s.d."
+"documentElement.clientHeight)),vph=s.wd.innerHeight||(s.d.documentE"
+"lement.clientHeight||s.d.body.clientHeight),st=s.wd.pageYOffset||(s"
+".wd.document.documentElement.scrollTop||s.wd.document.body.scrollTo"
+"p),vh=st+vph,pv=Math.round(vh/dh*100),cp=s.c_r('s_ppv');if(pv>100){"
+"s.c_w('s_ppv','');}else if(pv>cp){s.c_w('s_ppv',pv);}");
s.getPPVSetup=new Function("",""
+"var s=this;if(s.wd.addEventListener){s.wd.addEventListener('load',s"
+".getPPVCalc,false);s.wd.addEventListener('scroll',s.getPPVCalc,fals"
+"e);s.wd.addEventListener('resize',s.getPPVCalc,false);}else if(s.wd"
+".attachEvent){s.wd.attachEvent('onload',s.getPPVCalc);s.wd.attachEv"
+"ent('onscroll',s.getPPVCalc);s.wd.attachEvent('onresize',s.getPPVCa"
+"lc);}");
s.getPPVSetup();

/*
 * Plugin: getPreviousValue v1.0 - return previous value of designated
 *   variable (requires split utility)
 */
s.getPreviousValue=new Function("v","c","el",""
+"var s=this,t=new Date,i,j,r='';t.setTime(t.getTime()+1800000);if(el"
+"){if(s.events){i=s.split(el,',');j=s.split(s.events,',');for(x in i"
+"){for(y in j){if(i[x]==j[y]){if(s.c_r(c)) r=s.c_r(c);v?s.c_w(c,v,t)"
+":s.c_w(c,'no value',t);return r}}}}}else{if(s.c_r(c)) r=s.c_r(c);v?"
+"s.c_w(c,v,t):s.c_w(c,'no value',t);return r}");

/*
 * Plugin: exitLinkHandler 0.5 - identify and report exit links
 */
s.exitLinkHandler=new Function("p",""
+"var s=this,h=s.p_gh(),n='linkInternalFilters',i,t;if(!h||(s.linkTyp"
+"e&&(h||s.linkName)))return '';i=h.indexOf('?');t=s[n];s[n]=p?p:t;h="
+"s.linkLeaveQueryString||i<0?h:h.substring(0,i);if(s.lt(h)=='e')s.li"
+"nkType='e';else h='';s[n]=t;return h;");

/*
 * Utility Function: p_gh
 */
s.p_gh=new Function(""
+"var s=this;if(!s.eo&&!s.lnk)return '';var o=s.eo?s.eo:s.lnk,y=s.ot("
+"o),n=s.oid(o),x=o.s_oidt;if(s.eo&&o==s.eo){while(o&&!n&&y!='BODY'){"
+"o=o.parentElement?o.parentElement:o.parentNode;if(!o)return '';y=s."
+"ot(o);n=s.oid(o);x=o.s_oidt}}return o.href?o.href:'';");

/*
 * Plugin Utility: apl v1.1
 */
s.apl=new Function("l","v","d","u",""
+"var s=this,m=0;if(!l)l='';if(u){var i,n,a=s.split(l,d);for(i=0;i<a."
+"length;i++){n=a[i];m=m||(u==1?(n==v):(n.toLowerCase()==v.toLowerCas"
+"e()));}}if(!m)l=l?l+d+v:v;return l");

/* WARNING: Changing any of the below variables will cause drastic
changes to how your visitor data is collected.  Changes should only be
made when instructed to do so by your account manager.*/
if(window.location && window.location.hostname && window.location.hostname.indexOf("jetsetter.co.uk") != -1) {
	s.trackingServer="smarterliving.112.2o7.net";
	s.trackingServerSecure="smarterliving.112.2o7.net";
}
else {
	s.trackingServer = "stat.jetsetter.com";
	s.trackingServerSecure = "sstat.jetsetter.com";
}
s.dc=112;

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code='',s_objectID;function s_gi(un,pg,ss){var c="s._c='s_c';s.wd=window;if(!s.wd.s_c_in){s.wd.s_c_il=new Array;s.wd.s_c_in=0;}s._il=s.wd.s_c_il;s._in=s.wd.s_c_in;s._il[s._in]=s;s.wd.s_c_in++;s"
+".an=s_an;s.cls=function(x,c){var i,y='';if(!c)c=this.an;for(i=0;i<x.length;i++){n=x.substring(i,i+1);if(c.indexOf(n)>=0)y+=n}return y};s.fl=function(x,l){return x?(''+x).substring(0,l):x};s.co=func"
+"tion(o){if(!o)return o;var n=new Object,x;for(x in o)if(x.indexOf('select')<0&&x.indexOf('filter')<0)n[x]=o[x];return n};s.num=function(x){x=''+x;for(var p=0;p<x.length;p++)if(('0123456789').indexO"
+"f(x.substring(p,p+1))<0)return 0;return 1};s.rep=s_rep;s.sp=s_sp;s.jn=s_jn;s.ape=function(x){var s=this,h='0123456789ABCDEF',i,c=s.charSet,n,l,e,y='';c=c?c.toUpperCase():'';if(x){x=''+x;if(s.em==3)"
+"return encodeURIComponent(x);else if(c=='AUTO'&&('').charCodeAt){for(i=0;i<x.length;i++){c=x.substring(i,i+1);n=x.charCodeAt(i);if(n>127){l=0;e='';while(n||l<4){e=h.substring(n%16,n%16+1)+e;n=(n-n%"
+"16)/16;l++}y+='%u'+e}else if(c=='+')y+='%2B';else y+=escape(c)}return y}else{x=s.rep(escape(''+x),'+','%2B');if(c&&s.em==1&&x.indexOf('%u')<0&&x.indexOf('%U')<0){i=x.indexOf('%');while(i>=0){i++;if"
+"(h.substring(8).indexOf(x.substring(i,i+1).toUpperCase())>=0)return x.substring(0,i)+'u00'+x.substring(i);i=x.indexOf('%',i)}}}}return x};s.epa=function(x){var s=this;if(x){x=''+x;return s.em==3?de"
+"codeURIComponent(x):unescape(s.rep(x,'+',' '))}return x};s.pt=function(x,d,f,a){var s=this,t=x,z=0,y,r;while(t){y=t.indexOf(d);y=y<0?t.length:y;t=t.substring(0,y);r=s[f](t,a);if(r)return r;z+=y+d.l"
+"ength;t=x.substring(z,x.length);t=z<x.length?t:''}return ''};s.isf=function(t,a){var c=a.indexOf(':');if(c>=0)a=a.substring(0,c);if(t.substring(0,2)=='s_')t=t.substring(2);return (t!=''&&t==a)};s.f"
+"sf=function(t,a){var s=this;if(s.pt(a,',','isf',t))s.fsg+=(s.fsg!=''?',':'')+t;return 0};s.fs=function(x,f){var s=this;s.fsg='';s.pt(x,',','fsf',f);return s.fsg};s.si=function(){var s=this,i,k,v,c="
+"s_gi+'var s=s_gi(\"'+s.oun+'\");s.sa(\"'+s.un+'\");';for(i=0;i<s.va_g.length;i++){k=s.va_g[i];v=s[k];if(v!=undefined){if(typeof(v)=='string')c+='s.'+k+'=\"'+s_fe(v)+'\";';else c+='s.'+k+'='+v+';'}}"
+"c+=\"s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';\";return c};s.c_d='';s.c_gdf=function(t,a){var s=this;if(!s.num(t))return 1;return 0};s.c_gd=function(){var"
+" s=this,d=s.wd.location.hostname,n=s.fpCookieDomainPeriods,p;if(!n)n=s.cookieDomainPeriods;if(d&&!s.c_d){n=n?parseInt(n):2;n=n>2?n:2;p=d.lastIndexOf('.');if(p>=0){while(p>=0&&n>1){p=d.lastIndexOf('"
+".',p-1);n--}s.c_d=p>0&&s.pt(d,'.','c_gdf',0)?d.substring(p):d}}return s.c_d};s.c_r=function(k){var s=this;k=s.ape(k);var c=' '+s.d.cookie,i=c.indexOf(' '+k+'='),e=i<0?i:c.indexOf(';',i),v=i<0?'':s."
+"epa(c.substring(i+2+k.length,e<0?c.length:e));return v!='[[B]]'?v:''};s.c_w=function(k,v,e){var s=this,d=s.c_gd(),l=s.cookieLifetime,t;v=''+v;l=l?(''+l).toUpperCase():'';if(e&&l!='SESSION'&&l!='NON"
+"E'){t=(v!=''?parseInt(l?l:0):-60);if(t){e=new Date;e.setTime(e.getTime()+(t*1000))}}if(k&&l!='NONE'){s.d.cookie=k+'='+s.ape(v!=''?v:'[[B]]')+'; path=/;'+(e&&l!='SESSION'?' expires='+e.toGMTString()"
+"+';':'')+(d?' domain='+d+';':'');return s.c_r(k)==v}return 0};s.eh=function(o,e,r,f){var s=this,b='s_'+e+'_'+s._in,n=-1,l,i,x;if(!s.ehl)s.ehl=new Array;l=s.ehl;for(i=0;i<l.length&&n<0;i++){if(l[i]."
+"o==o&&l[i].e==e)n=i}if(n<0){n=i;l[n]=new Object}x=l[n];x.o=o;x.e=e;f=r?x.b:f;if(r||f){x.b=r?0:o[e];x.o[e]=f}if(x.b){x.o[b]=x.b;return b}return 0};s.cet=function(f,a,t,o,b){var s=this,r,tcf;if(s.apv"
+">=5&&(!s.isopera||s.apv>=7)){tcf=new Function('s','f','a','t','var e,r;try{r=s[f](a)}catch(e){r=s[t](e)}return r');r=tcf(s,f,a,t)}else{if(s.ismac&&s.u.indexOf('MSIE 4')>=0)r=s[b](a);else{s.eh(s.wd,"
+"'onerror',0,o);r=s[f](a);s.eh(s.wd,'onerror',1)}}return r};s.gtfset=function(e){var s=this;return s.tfs};s.gtfsoe=new Function('e','var s=s_c_il['+s._in+'],c;s.eh(window,\"onerror\",1);s.etfs=1;c=s"
+".t();if(c)s.d.write(c);s.etfs=0;return true');s.gtfsfb=function(a){return window};s.gtfsf=function(w){var s=this,p=w.parent,l=w.location;s.tfs=w;if(p&&p.location!=l&&p.location.host==l.host){s.tfs="
+"p;return s.gtfsf(s.tfs)}return s.tfs};s.gtfs=function(){var s=this;if(!s.tfs){s.tfs=s.wd;if(!s.etfs)s.tfs=s.cet('gtfsf',s.tfs,'gtfset',s.gtfsoe,'gtfsfb')}return s.tfs};s.mrq=function(u){var s=this,"
+"l=s.rl[u],n,r;s.rl[u]=0;if(l)for(n=0;n<l.length;n++){r=l[n];s.mr(0,0,r.r,0,r.t,r.u)}};s.br=function(id,rs){var s=this;if(s.disableBufferedRequests||!s.c_w('s_br',rs))s.brl=rs};s.flushBufferedReques"
+"ts=function(){this.fbr(0)};s.fbr=function(id){var s=this,br=s.c_r('s_br');if(!br)br=s.brl;if(br){if(!s.disableBufferedRequests)s.c_w('s_br','');s.mr(0,0,br)}s.brl=0};s.mr=function(sess,q,rs,id,ta,u"
+"){var s=this,dc=s.dc,t1=s.trackingServer,t2=s.trackingServerSecure,tb=s.trackingServerBase,p='.sc',ns=s.visitorNamespace,un=s.cls(u?u:(ns?ns:s.fun)),r=new Object,l,imn='s_i_'+(un),im,b,e;if(!rs){if"
+"(t1){if(t2&&s.ssl)t1=t2}else{if(!tb)tb='2o7.net';if(dc)dc=(''+dc).toLowerCase();else dc='d1';if(tb=='2o7.net'){if(dc=='d1')dc='112';else if(dc=='d2')dc='122';p=''}t1=un+'.'+dc+'.'+p+tb}rs='http'+(s"
+".ssl?'s':'')+'://'+t1+'/b/ss/'+s.un+'/'+(s.mobile?'5.1':'1')+'/H.22.1/'+sess+'?AQB=1&ndh=1'+(q?q:'')+'&AQE=1';if(s.isie&&!s.ismac)rs=s.fl(rs,2047);if(id){s.br(id,rs);return}}if(s.d.images&&s.apv>=3"
+"&&(!s.isopera||s.apv>=7)&&(s.ns6<0||s.apv>=6.1)){if(!s.rc)s.rc=new Object;if(!s.rc[un]){s.rc[un]=1;if(!s.rl)s.rl=new Object;s.rl[un]=new Array;setTimeout('if(window.s_c_il)window.s_c_il['+s._in+']."
+"mrq(\"'+un+'\")',750)}else{l=s.rl[un];if(l){r.t=ta;r.u=un;r.r=rs;l[l.length]=r;return ''}imn+='_'+s.rc[un];s.rc[un]++}im=s.wd[imn];if(!im)im=s.wd[imn]=new Image;im.s_l=0;im.onload=new Function('e',"
+"'this.s_l=1;var wd=window,s;if(wd.s_c_il){s=wd.s_c_il['+s._in+'];s.mrq(\"'+un+'\");s.nrs--;if(!s.nrs)s.m_m(\"rr\")}');if(!s.nrs){s.nrs=1;s.m_m('rs')}else s.nrs++;im.src=rs;if((!ta||ta=='_self'||ta="
+"='_top'||(s.wd.name&&ta==s.wd.name))&&rs.indexOf('&pe=')>=0){b=e=new Date;while(!im.s_l&&e.getTime()-b.getTime()<500)e=new Date}return ''}return '<im'+'g sr'+'c=\"'+rs+'\" width=1 height=1 border=0"
+" alt=\"\">'};s.gg=function(v){var s=this;if(!s.wd['s_'+v])s.wd['s_'+v]='';return s.wd['s_'+v]};s.glf=function(t,a){if(t.substring(0,2)=='s_')t=t.substring(2);var s=this,v=s.gg(t);if(v)s[t]=v};s.gl="
+"function(v){var s=this;if(s.pg)s.pt(v,',','glf',0)};s.rf=function(x){var s=this,y,i,j,h,l,a,b='',c='',t;if(x){y=''+x;i=y.indexOf('?');if(i>0){a=y.substring(i+1);y=y.substring(0,i);h=y.toLowerCase()"
+";i=0;if(h.substring(0,7)=='http://')i+=7;else if(h.substring(0,8)=='https://')i+=8;h=h.substring(i);i=h.indexOf(\"/\");if(i>0){h=h.substring(0,i);if(h.indexOf('google')>=0){a=s.sp(a,'&');if(a.lengt"
+"h>1){l=',q,ie,start,search_key,word,kw,cd,';for(j=0;j<a.length;j++){t=a[j];i=t.indexOf('=');if(i>0&&l.indexOf(','+t.substring(0,i)+',')>=0)b+=(b?'&':'')+t;else c+=(c?'&':'')+t}if(b&&c){y+='?'+b+'&'"
+"+c;if(''+x!=y)x=y}}}}}}return x};s.hav=function(){var s=this,qs='',fv=s.linkTrackVars,fe=s.linkTrackEvents,mn,i;if(s.pe){mn=s.pe.substring(0,1).toUpperCase()+s.pe.substring(1);if(s[mn]){fv=s[mn].tr"
+"ackVars;fe=s[mn].trackEvents}}fv=fv?fv+','+s.vl_l+','+s.vl_l2:'';for(i=0;i<s.va_t.length;i++){var k=s.va_t[i],v=s[k],b=k.substring(0,4),x=k.substring(4),n=parseInt(x),q=k;if(v&&k!='linkName'&&k!='l"
+"inkType'){if(s.pe||s.lnk||s.eo){if(fv&&(','+fv+',').indexOf(','+k+',')<0)v='';if(k=='events'&&fe)v=s.fs(v,fe)}if(v){if(k=='dynamicVariablePrefix')q='D';else if(k=='visitorID')q='vid';else if(k=='pa"
+"geURL'){q='g';v=s.fl(v,255)}else if(k=='referrer'){q='r';v=s.fl(s.rf(v),255)}else if(k=='vmk'||k=='visitorMigrationKey')q='vmt';else if(k=='visitorMigrationServer'){q='vmf';if(s.ssl&&s.visitorMigra"
+"tionServerSecure)v=''}else if(k=='visitorMigrationServerSecure'){q='vmf';if(!s.ssl&&s.visitorMigrationServer)v=''}else if(k=='charSet'){q='ce';if(v.toUpperCase()=='AUTO')v='ISO8859-1';else if(s.em="
+"=2||s.em==3)v='UTF-8'}else if(k=='visitorNamespace')q='ns';else if(k=='cookieDomainPeriods')q='cdp';else if(k=='cookieLifetime')q='cl';else if(k=='variableProvider')q='vvp';else if(k=='currencyCode"
+"')q='cc';else if(k=='channel')q='ch';else if(k=='transactionID')q='xact';else if(k=='campaign')q='v0';else if(k=='resolution')q='s';else if(k=='colorDepth')q='c';else if(k=='javascriptVersion')q='j"
+"';else if(k=='javaEnabled')q='v';else if(k=='cookiesEnabled')q='k';else if(k=='browserWidth')q='bw';else if(k=='browserHeight')q='bh';else if(k=='connectionType')q='ct';else if(k=='homepage')q='hp'"
+";else if(k=='plugins')q='p';else if(s.num(x)){if(b=='prop')q='c'+n;else if(b=='eVar')q='v'+n;else if(b=='list')q='l'+n;else if(b=='hier'){q='h'+n;v=s.fl(v,255)}}if(v)qs+='&'+q+'='+(k.substring(0,3)"
+"!='pev'?s.ape(v):v)}}}return qs};s.ltdf=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';var qi=h.indexOf('?');h=qi>=0?h.substring(0,qi):h;if(t&&h.substring(h.length-(t.length+1))=='.'+t"
+")return 1;return 0};s.ltef=function(t,h){t=t?t.toLowerCase():'';h=h?h.toLowerCase():'';if(t&&h.indexOf(t)>=0)return 1;return 0};s.lt=function(h){var s=this,lft=s.linkDownloadFileTypes,lef=s.linkExt"
+"ernalFilters,lif=s.linkInternalFilters;lif=lif?lif:s.wd.location.hostname;h=h.toLowerCase();if(s.trackDownloadLinks&&lft&&s.pt(lft,',','ltdf',h))return 'd';if(s.trackExternalLinks&&h.substring(0,1)"
+"!='#'&&(lef||lif)&&(!lef||s.pt(lef,',','ltef',h))&&(!lif||!s.pt(lif,',','ltef',h)))return 'e';return ''};s.lc=new Function('e','var s=s_c_il['+s._in+'],b=s.eh(this,\"onclick\");s.lnk=s.co(this);s.t"
+"();s.lnk=0;if(b)return this[b](e);return true');s.bc=new Function('e','var s=s_c_il['+s._in+'],f,tcf;if(s.d&&s.d.all&&s.d.all.cppXYctnr)return;s.eo=e.srcElement?e.srcElement:e.target;tcf=new Functi"
+"on(\"s\",\"var e;try{if(s.eo&&(s.eo.tagName||s.eo.parentElement||s.eo.parentNode))s.t()}catch(e){}\");tcf(s);s.eo=0');s.oh=function(o){var s=this,l=s.wd.location,h=o.href?o.href:'',i,j,k,p;i=h.inde"
+"xOf(':');j=h.indexOf('?');k=h.indexOf('/');if(h&&(i<0||(j>=0&&i>j)||(k>=0&&i>k))){p=o.protocol&&o.protocol.length>1?o.protocol:(l.protocol?l.protocol:'');i=l.pathname.lastIndexOf('/');h=(p?p+'//':'"
+"')+(o.host?o.host:(l.host?l.host:''))+(h.substring(0,1)!='/'?l.pathname.substring(0,i<0?0:i)+'/':'')+h}return h};s.ot=function(o){var t=o.tagName;t=t&&t.toUpperCase?t.toUpperCase():'';if(t=='SHAPE'"
+")t='';if(t){if((t=='INPUT'||t=='BUTTON')&&o.type&&o.type.toUpperCase)t=o.type.toUpperCase();else if(!t&&o.href)t='A';}return t};s.oid=function(o){var s=this,t=s.ot(o),p,c,n='',x=0;if(t&&!o.s_oid){p"
+"=o.protocol;c=o.onclick;if(o.href&&(t=='A'||t=='AREA')&&(!c||!p||p.toLowerCase().indexOf('javascript')<0))n=s.oh(o);else if(c){n=s.rep(s.rep(s.rep(s.rep(''+c,\"\\r\",''),\"\\n\",''),\"\\t\",''),' '"
+",'');x=2}else if(t=='INPUT'||t=='SUBMIT'){if(o.value)n=o.value;else if(o.innerText)n=o.innerText;else if(o.textContent)n=o.textContent;x=3}else if(o.src&&t=='IMAGE')n=o.src;if(n){o.s_oid=s.fl(n,100"
+");o.s_oidt=x}}return o.s_oid};s.rqf=function(t,un){var s=this,e=t.indexOf('='),u=e>=0?t.substring(0,e):'',q=e>=0?s.epa(t.substring(e+1)):'';if(u&&q&&(','+u+',').indexOf(','+un+',')>=0){if(u!=s.un&&"
+"s.un.indexOf(',')>=0)q='&u='+u+q+'&u=0';return q}return ''};s.rq=function(un){if(!un)un=this.un;var s=this,c=un.indexOf(','),v=s.c_r('s_sq'),q='';if(c<0)return s.pt(v,'&','rqf',un);return s.pt(un,'"
+",','rq',0)};s.sqp=function(t,a){var s=this,e=t.indexOf('='),q=e<0?'':s.epa(t.substring(e+1));s.sqq[q]='';if(e>=0)s.pt(t.substring(0,e),',','sqs',q);return 0};s.sqs=function(un,q){var s=this;s.squ[u"
+"n]=q;return 0};s.sq=function(q){var s=this,k='s_sq',v=s.c_r(k),x,c=0;s.sqq=new Object;s.squ=new Object;s.sqq[q]='';s.pt(v,'&','sqp',0);s.pt(s.un,',','sqs',q);v='';for(x in s.squ)if(x&&(!Object||!Ob"
+"ject.prototype||!Object.prototype[x]))s.sqq[s.squ[x]]+=(s.sqq[s.squ[x]]?',':'')+x;for(x in s.sqq)if(x&&(!Object||!Object.prototype||!Object.prototype[x])&&s.sqq[x]&&(x==q||c<2)){v+=(v?'&':'')+s.sqq"
+"[x]+'='+s.ape(x);c++}return s.c_w(k,v,0)};s.wdl=new Function('e','var s=s_c_il['+s._in+'],r=true,b=s.eh(s.wd,\"onload\"),i,o,oc;if(b)r=this[b](e);for(i=0;i<s.d.links.length;i++){o=s.d.links[i];oc=o"
+".onclick?\"\"+o.onclick:\"\";if((oc.indexOf(\"s_gs(\")<0||oc.indexOf(\".s_oc(\")>=0)&&oc.indexOf(\".tl(\")<0)s.eh(o,\"onclick\",0,s.lc);}return r');s.wds=function(){var s=this;if(s.apv>3&&(!s.isie|"
+"|!s.ismac||s.apv>=5)){if(s.b&&s.b.attachEvent)s.b.attachEvent('onclick',s.bc);else if(s.b&&s.b.addEventListener)s.b.addEventListener('click',s.bc,false);else s.eh(s.wd,'onload',0,s.wdl)}};s.vs=func"
+"tion(x){var s=this,v=s.visitorSampling,g=s.visitorSamplingGroup,k='s_vsn_'+s.un+(g?'_'+g:''),n=s.c_r(k),e=new Date,y=e.getYear();e.setYear(y+10+(y<1900?1900:0));if(v){v*=100;if(!n){if(!s.c_w(k,x,e)"
+")return 0;n=x}if(n%10000>v)return 0}return 1};s.dyasmf=function(t,m){if(t&&m&&m.indexOf(t)>=0)return 1;return 0};s.dyasf=function(t,m){var s=this,i=t?t.indexOf('='):-1,n,x;if(i>=0&&m){var n=t.subst"
+"ring(0,i),x=t.substring(i+1);if(s.pt(x,',','dyasmf',m))return n}return 0};s.uns=function(){var s=this,x=s.dynamicAccountSelection,l=s.dynamicAccountList,m=s.dynamicAccountMatch,n,i;s.un=s.un.toLowe"
+"rCase();if(x&&l){if(!m)m=s.wd.location.host;if(!m.toLowerCase)m=''+m;l=l.toLowerCase();m=m.toLowerCase();n=s.pt(l,';','dyasf',m);if(n)s.un=n}i=s.un.indexOf(',');s.fun=i<0?s.un:s.un.substring(0,i)};"
+"s.sa=function(un){var s=this;s.un=un;if(!s.oun)s.oun=un;else if((','+s.oun+',').indexOf(','+un+',')<0)s.oun+=','+un;s.uns()};s.m_i=function(n,a){var s=this,m,f=n.substring(0,1),r,l,i;if(!s.m_l)s.m_"
+"l=new Object;if(!s.m_nl)s.m_nl=new Array;m=s.m_l[n];if(!a&&m&&m._e&&!m._i)s.m_a(n);if(!m){m=new Object,m._c='s_m';m._in=s.wd.s_c_in;m._il=s._il;m._il[m._in]=m;s.wd.s_c_in++;m.s=s;m._n=n;m._l=new Ar"
+"ray('_c','_in','_il','_i','_e','_d','_dl','s','n','_r','_g','_g1','_t','_t1','_x','_x1','_rs','_rr','_l');s.m_l[n]=m;s.m_nl[s.m_nl.length]=n}else if(m._r&&!m._m){r=m._r;r._m=m;l=m._l;for(i=0;i<l.le"
+"ngth;i++)if(m[l[i]])r[l[i]]=m[l[i]];r._il[r._in]=r;m=s.m_l[n]=r}if(f==f.toUpperCase())s[n]=m;return m};s.m_a=new Function('n','g','e','if(!g)g=\"m_\"+n;var s=s_c_il['+s._in+'],c=s[g+\"_c\"],m,x,f=0"
+";if(!c)c=s.wd[\"s_\"+g+\"_c\"];if(c&&s_d)s[g]=new Function(\"s\",s_ft(s_d(c)));x=s[g];if(!x)x=s.wd[\\'s_\\'+g];if(!x)x=s.wd[g];m=s.m_i(n,1);if(x&&(!m._i||g!=\"m_\"+n)){m._i=f=1;if((\"\"+x).indexOf("
+"\"function\")>=0)x(s);else s.m_m(\"x\",n,x,e)}m=s.m_i(n,1);if(m._dl)m._dl=m._d=0;s.dlt();return f');s.m_m=function(t,n,d,e){t='_'+t;var s=this,i,x,m,f='_'+t,r=0,u;if(s.m_l&&s.m_nl)for(i=0;i<s.m_nl."
+"length;i++){x=s.m_nl[i];if(!n||x==n){m=s.m_i(x);u=m[t];if(u){if((''+u).indexOf('function')>=0){if(d&&e)u=m[t](d,e);else if(d)u=m[t](d);else u=m[t]()}}if(u)r=1;u=m[t+1];if(u&&!m[f]){if((''+u).indexO"
+"f('function')>=0){if(d&&e)u=m[t+1](d,e);else if(d)u=m[t+1](d);else u=m[t+1]()}}m[f]=1;if(u)r=1}}return r};s.m_ll=function(){var s=this,g=s.m_dl,i,o;if(g)for(i=0;i<g.length;i++){o=g[i];if(o)s.loadMo"
+"dule(o.n,o.u,o.d,o.l,o.e,1);g[i]=0}};s.loadModule=function(n,u,d,l,e,ln){var s=this,m=0,i,g,o=0,f1,f2,c=s.h?s.h:s.b,b,tcf;if(n){i=n.indexOf(':');if(i>=0){g=n.substring(i+1);n=n.substring(0,i)}else "
+"g=\"m_\"+n;m=s.m_i(n)}if((l||(n&&!s.m_a(n,g)))&&u&&s.d&&c&&s.d.createElement){if(d){m._d=1;m._dl=1}if(ln){if(s.ssl)u=s.rep(u,'http:','https:');i='s_s:'+s._in+':'+n+':'+g;b='var s=s_c_il['+s._in+'],"
+"o=s.d.getElementById(\"'+i+'\");if(s&&o){if(!o.l&&s.wd.'+g+'){o.l=1;if(o.i)clearTimeout(o.i);o.i=0;s.m_a(\"'+n+'\",\"'+g+'\"'+(e?',\"'+e+'\"':'')+')}';f2=b+'o.c++;if(!s.maxDelay)s.maxDelay=250;if(!"
+"o.l&&o.c<(s.maxDelay*2)/100)o.i=setTimeout(o.f2,100)}';f1=new Function('e',b+'}');tcf=new Function('s','c','i','u','f1','f2','var e,o=0;try{o=s.d.createElement(\"script\");if(o){o.type=\"text/javas"
+"cript\";'+(n?'o.id=i;o.defer=true;o.onload=o.onreadystatechange=f1;o.f2=f2;o.l=0;':'')+'o.src=u;c.appendChild(o);'+(n?'o.c=0;o.i=setTimeout(f2,100)':'')+'}}catch(e){o=0}return o');o=tcf(s,c,i,u,f1,"
+"f2)}else{o=new Object;o.n=n+':'+g;o.u=u;o.d=d;o.l=l;o.e=e;g=s.m_dl;if(!g)g=s.m_dl=new Array;i=0;while(i<g.length&&g[i])i++;g[i]=o}}else if(n){m=s.m_i(n);m._e=1}return m};s.vo1=function(t,a){if(a[t]"
+"||a['!'+t])this[t]=a[t]};s.vo2=function(t,a){if(!a[t]){a[t]=this[t];if(!a[t])a['!'+t]=1}};s.dlt=new Function('var s=s_c_il['+s._in+'],d=new Date,i,vo,f=0;if(s.dll)for(i=0;i<s.dll.length;i++){vo=s.d"
+"ll[i];if(vo){if(!s.m_m(\"d\")||d.getTime()-vo._t>=s.maxDelay){s.dll[i]=0;s.t(vo)}else f=1}}if(s.dli)clearTimeout(s.dli);s.dli=0;if(f){if(!s.dli)s.dli=setTimeout(s.dlt,s.maxDelay)}else s.dll=0');s.d"
+"l=function(vo){var s=this,d=new Date;if(!vo)vo=new Object;s.pt(s.vl_g,',','vo2',vo);vo._t=d.getTime();if(!s.dll)s.dll=new Array;s.dll[s.dll.length]=vo;if(!s.maxDelay)s.maxDelay=250;s.dlt()};s.t=fun"
+"ction(vo,id){var s=this,trk=1,tm=new Date,sed=Math&&Math.random?Math.floor(Math.random()*10000000000000):tm.getTime(),sess='s'+Math.floor(tm.getTime()/10800000)%10+sed,y=tm.getYear(),vt=tm.getDate("
+")+'/'+tm.getMonth()+'/'+(y<1900?y+1900:y)+' '+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()+' '+tm.getTimezoneOffset(),tcf,tfs=s.gtfs(),ta=-1,q='',qs='',code='',vb=new Objec"
+"t;s.gl(s.vl_g);s.uns();s.m_ll();if(!s.td){var tl=tfs.location,a,o,i,x='',c='',v='',p='',bw='',bh='',j='1.0',k=s.c_w('s_cc','true',0)?'Y':'N',hp='',ct='',pn=0,ps;if(String&&String.prototype){j='1.1'"
+";if(j.match){j='1.2';if(tm.setUTCDate){j='1.3';if(s.isie&&s.ismac&&s.apv>=5)j='1.4';if(pn.toPrecision){j='1.5';a=new Array;if(a.forEach){j='1.6';i=0;o=new Object;tcf=new Function('o','var e,i=0;try"
+"{i=new Iterator(o)}catch(e){}return i');i=tcf(o);if(i&&i.next)j='1.7'}}}}}if(s.apv>=4)x=screen.width+'x'+screen.height;if(s.isns||s.isopera){if(s.apv>=3){v=s.n.javaEnabled()?'Y':'N';if(s.apv>=4){c="
+"screen.pixelDepth;bw=s.wd.innerWidth;bh=s.wd.innerHeight}}s.pl=s.n.plugins}else if(s.isie){if(s.apv>=4){v=s.n.javaEnabled()?'Y':'N';c=screen.colorDepth;if(s.apv>=5){bw=s.d.documentElement.offsetWid"
+"th;bh=s.d.documentElement.offsetHeight;if(!s.ismac&&s.b){tcf=new Function('s','tl','var e,hp=0;try{s.b.addBehavior(\"#default#homePage\");hp=s.b.isHomePage(tl)?\"Y\":\"N\"}catch(e){}return hp');hp="
+"tcf(s,tl);tcf=new Function('s','var e,ct=0;try{s.b.addBehavior(\"#default#clientCaps\");ct=s.b.connectionType}catch(e){}return ct');ct=tcf(s)}}}else r=''}if(s.pl)while(pn<s.pl.length&&pn<30){ps=s.f"
+"l(s.pl[pn].name,100)+';';if(p.indexOf(ps)<0)p+=ps;pn++}s.resolution=x;s.colorDepth=c;s.javascriptVersion=j;s.javaEnabled=v;s.cookiesEnabled=k;s.browserWidth=bw;s.browserHeight=bh;s.connectionType=c"
+"t;s.homepage=hp;s.plugins=p;s.td=1}if(vo){s.pt(s.vl_g,',','vo2',vb);s.pt(s.vl_g,',','vo1',vo)}if((vo&&vo._t)||!s.m_m('d')){if(s.usePlugins)s.doPlugins(s);var l=s.wd.location,r=tfs.document.referrer"
+";if(!s.pageURL)s.pageURL=l.href?l.href:l;if(!s.referrer&&!s._1_referrer){s.referrer=r;s._1_referrer=1}s.m_m('g');if(s.lnk||s.eo){var o=s.eo?s.eo:s.lnk;if(!o)return '';var p=s.pageName,w=1,t=s.ot(o)"
+",n=s.oid(o),x=o.s_oidt,h,l,i,oc;if(s.eo&&o==s.eo){while(o&&!n&&t!='BODY'){o=o.parentElement?o.parentElement:o.parentNode;if(!o)return '';t=s.ot(o);n=s.oid(o);x=o.s_oidt}oc=o.onclick?''+o.onclick:''"
+";if((oc.indexOf(\"s_gs(\")>=0&&oc.indexOf(\".s_oc(\")<0)||oc.indexOf(\".tl(\")>=0)return ''}if(n)ta=o.target;h=s.oh(o);i=h.indexOf('?');h=s.linkLeaveQueryString||i<0?h:h.substring(0,i);l=s.linkName"
+";t=s.linkType?s.linkType.toLowerCase():s.lt(h);if(t&&(h||l))q+='&pe=lnk_'+(t=='d'||t=='e'?s.ape(t):'o')+(h?'&pev1='+s.ape(h):'')+(l?'&pev2='+s.ape(l):'');else trk=0;if(s.trackInlineStats){if(!p){p="
+"s.pageURL;w=0}t=s.ot(o);i=o.sourceIndex;if(s.gg('objectID')){n=s.gg('objectID');x=1;i=1}if(p&&n&&t)qs='&pid='+s.ape(s.fl(p,255))+(w?'&pidt='+w:'')+'&oid='+s.ape(s.fl(n,100))+(x?'&oidt='+x:'')+'&ot="
+"'+s.ape(t)+(i?'&oi='+i:'')}}if(!trk&&!qs)return '';s.sampled=s.vs(sed);if(trk){if(s.sampled)code=s.mr(sess,(vt?'&t='+s.ape(vt):'')+s.hav()+q+(qs?qs:s.rq()),0,id,ta);qs='';s.m_m('t');if(s.p_r)s.p_r("
+");s.referrer=''}s.sq(qs);}else{s.dl(vo);}if(vo)s.pt(s.vl_g,',','vo1',vb);s.lnk=s.eo=s.linkName=s.linkType=s.wd.s_objectID=s.ppu=s.pe=s.pev1=s.pev2=s.pev3='';if(s.pg)s.wd.s_lnk=s.wd.s_eo=s.wd.s_link"
+"Name=s.wd.s_linkType='';if(!id&&!s.tc){s.tc=1;s.flushBufferedRequests()}return code};s.tl=function(o,t,n,vo){var s=this;s.lnk=s.co(o);s.linkType=t;s.linkName=n;s.t(vo)};if(pg){s.wd.s_co=function(o)"
+"{var s=s_gi(\"_\",1,1);return s.co(o)};s.wd.s_gs=function(un){var s=s_gi(un,1,1);return s.t()};s.wd.s_dc=function(un){var s=s_gi(un,1);return s.t()}}s.ssl=(s.wd.location.protocol.toLowerCase().inde"
+"xOf('https')>=0);s.d=document;s.b=s.d.body;if(s.d.getElementsByTagName){s.h=s.d.getElementsByTagName('HEAD');if(s.h)s.h=s.h[0]}s.n=navigator;s.u=s.n.userAgent;s.ns6=s.u.indexOf('Netscape6/');var ap"
+"n=s.n.appName,v=s.n.appVersion,ie=v.indexOf('MSIE '),o=s.u.indexOf('Opera '),i;if(v.indexOf('Opera')>=0||o>0)apn='Opera';s.isie=(apn=='Microsoft Internet Explorer');s.isns=(apn=='Netscape');s.isope"
+"ra=(apn=='Opera');s.ismac=(s.u.indexOf('Mac')>=0);if(o>0)s.apv=parseFloat(s.u.substring(o+6));else if(ie>0){s.apv=parseInt(i=v.substring(ie+5));if(s.apv>3)s.apv=parseFloat(i)}else if(s.ns6>0)s.apv="
+"parseFloat(s.u.substring(s.ns6+10));else s.apv=parseFloat(v);s.em=0;if(s.em.toPrecision)s.em=3;else if(String.fromCharCode){i=escape(String.fromCharCode(256)).toUpperCase();s.em=(i=='%C4%80'?2:(i=="
+"'%U0100'?1:0))}s.sa(un);s.vl_l='dynamicVariablePrefix,visitorID,vmk,visitorMigrationKey,visitorMigrationServer,visitorMigrationServerSecure,ppu,charSet,visitorNamespace,cookieDomainPeriods,cookieLi"
+"fetime,pageName,pageURL,referrer,currencyCode';s.va_l=s.sp(s.vl_l,',');s.vl_t=s.vl_l+',variableProvider,channel,server,pageType,transactionID,purchaseID,campaign,state,zip,events,products,linkName,"
+"linkType';for(var n=1;n<76;n++)s.vl_t+=',prop'+n+',eVar'+n+',hier'+n+',list'+n;s.vl_l2=',tnt,pe,pev1,pev2,pev3,resolution,colorDepth,javascriptVersion,javaEnabled,cookiesEnabled,browserWidth,browse"
+"rHeight,connectionType,homepage,plugins';s.vl_t+=s.vl_l2;s.va_t=s.sp(s.vl_t,',');s.vl_g=s.vl_t+',trackingServer,trackingServerSecure,trackingServerBase,fpCookieDomainPeriods,disableBufferedRequests"
+",mobile,visitorSampling,visitorSamplingGroup,dynamicAccountSelection,dynamicAccountList,dynamicAccountMatch,trackDownloadLinks,trackExternalLinks,trackInlineStats,linkLeaveQueryString,linkDownloadF"
+"ileTypes,linkExternalFilters,linkInternalFilters,linkTrackVars,linkTrackEvents,linkNames,lnk,eo,_1_referrer';s.va_g=s.sp(s.vl_g,',');s.pg=pg;s.gl(s.vl_g);if(!ss)s.wds()",
w=window,l=w.s_c_il,n=navigator,u=n.userAgent,v=n.appVersion,e=v.indexOf('MSIE '),m=u.indexOf('Netscape6/'),a,i,s;if(un){un=un.toLowerCase();if(l)for(i=0;i<l.length;i++){s=l[i];if(!s._c||s._c=='s_c'){if(s.oun==un)return s;else if(s.fs&&s.sa&&s.fs(s.oun,un)){s.sa(un);return s}}}}w.s_an='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
w.s_sp=new Function("x","d","var a=new Array,i=0,j;if(x){if(x.split)a=x.split(d);else if(!d)for(i=0;i<x.length;i++)a[a.length]=x.substring(i,i+1);else while(i>=0){j=x.indexOf(d,i);a[a.length]=x.subst"
+"ring(i,j<0?x.length:j);i=j;if(i>=0)i+=d.length}}return a");
w.s_jn=new Function("a","d","var x='',i,j=a.length;if(a&&j>0){x=a[0];if(j>1){if(a.join)x=a.join(d);else for(i=1;i<j;i++)x+=d+a[i]}}return x");
w.s_rep=new Function("x","o","n","return s_jn(s_sp(x,o),n)");
w.s_d=new Function("x","var t='`^@$#',l=s_an,l2=new Object,x2,d,b=0,k,i=x.lastIndexOf('~~'),j,v,w;if(i>0){d=x.substring(0,i);x=x.substring(i+2);l=s_sp(l,'');for(i=0;i<62;i++)l2[l[i]]=i;t=s_sp(t,'');d"
+"=s_sp(d,'~');i=0;while(i<5){v=0;if(x.indexOf(t[i])>=0) {x2=s_sp(x,t[i]);for(j=1;j<x2.length;j++){k=x2[j].substring(0,1);w=t[i]+k;if(k!=' '){v=1;w=d[b+l2[k]]}x2[j]=w+x2[j].substring(1)}}if(v)x=s_jn("
+"x2,'');else{w=t[i]+' ';if(x.indexOf(w)>=0)x=s_rep(x,w,t[i]);i++;b+=62}}}return x");
w.s_fe=new Function("c","return s_rep(s_rep(s_rep(c,'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"\\n\",\"\\\\n\")");
w.s_fa=new Function("f","var s=f.indexOf('(')+1,e=f.indexOf(')'),a='',c;while(s>=0&&s<e){c=f.substring(s,s+1);if(c==',')a+='\",\"';else if((\"\\n\\r\\t \").indexOf(c)<0)a+=c;s++}return a?'\"'+a+'\"':"
+"a");
w.s_ft=new Function("c","c+='';var s,e,o,a,d,q,f,h,x;s=c.indexOf('=function(');while(s>=0){s++;d=1;q='';x=0;f=c.substring(s);a=s_fa(f);e=o=c.indexOf('{',s);e++;while(d>0){h=c.substring(e,e+1);if(q){i"
+"f(h==q&&!x)q='';if(h=='\\\\')x=x?0:1;else x=0}else{if(h=='\"'||h==\"'\")q=h;if(h=='{')d++;if(h=='}')d--}if(d>0)e++}c=c.substring(0,s)+'new Function('+(a?a+',':'')+'\"'+s_fe(c.substring(o+1,e))+'\")"
+"'+c.substring(e+1);s=c.indexOf('=function(')}return c;");
c=s_d(c);if(e>0){a=parseInt(i=v.substring(e+5));if(a>3)a=parseFloat(i)}else if(m>0)a=parseFloat(u.substring(m+10));else a=parseFloat(v);if(a>=5&&v.indexOf('Opera')<0&&u.indexOf('Opera')<0){w.s_c=new Function("un","pg","ss","var s=this;"+c);return new s_c(un,pg,ss)}else s=new Function("un","pg","ss","var s=new Object;"+s_ft(c)+";return s");return s(un,pg,ss)}


})();


// Optimizely SiteCatalyst Integration
window.optimizely = window.optimizely || [];
window.optimizely.push(['activateSiteCatalyst', {"sVariable": omniture}]);
var ErrorHandler = new Class ({
	
	initialize: function () {
	
		this.errors = {
			
			101: {
				callback: function () {
					alert('Test callback');
				}
			},
			
			102: {
				message: 'Test message'	
			},
			
			103: {
				message: 'An internal error occurred. Please try again or contact customer support if issues persist.'
			},
			
			301: {
				message: 'There are no valid email addresses.'
			},			
			
			302: {
				message: 'An internal error occurred. Please try again or contact customer support if issues persist.'
			},
			
			303: {
				message: 'Your card is expired. Please try a different card.'
			},
			
			307: {
				message: 'Your card was declined while authorizing. Please check your information and try again.'
			},
			
			400: {
				message: 'The email address you entered is invalid.'
			},
			
			401: {
				message: 'Unrecognized email address. If you’re not a member, you can <a href="#request-membership">request a membership</a>'
			},
			
			402: {
				message: 'We\'re sorry, but this reset link is invalid.'
			},
			
			403: {
				message: 'We\'re sorry, but this reset link is expired.'
			},
			
			404: {
				message: 'Your password reset failed. Please try again.'
			},
			
			407: {
				message: 'There was an internal error. Please try again.'
			},
			
			408: {
				message: 'Please enter your existing password.'
			},
			
			409: {
				message: 'Please enter your new password.'
			},
			
			410: {
				message: 'The email address and password you\'ve entered do not match our records.  Please check your credentials and try again.'
			},
			
			411: {
				message: 'Incorrect password.'
			},
			
			412: {
				message: 'The password you\'ve entered does not match our records.  Please check your credentials and try again.',
				callback: function () {
					JetsetterLogin.showForgotPasswordForm();
				}
			},
			
			420: {
				message: 'Too many attempts. Try again later.'
			},
			
			500: {
				message: 'Please check the required fields and try again.'
			},
			
			501: {
				message: 'Please check the lengths of the required fields and try again.'
			},
			
			502: {
				message: 'Please check the zip code and try again.'
			},
			
			503: {
				message: 'Please use only numeric values where appropriate and try again.'
			},
			
			504: {
				message: 'Please check the email address and try again.'
			},															
			
			505: {
				message: 'It seems you are already registered with Jetsetter. Please sign in.'
			},
			
			506: {
				message: 'The passwords you have entered are not the same.'
			},
			
			507: {
				message: 'There was a problem changing your password. Please try again.'
			},
			
			13: {
				message: 'An unexpected error has occurred. If the problem persists, please contact support@jetsetter.com.'
			}
		};
		
	},
	
	handle: function (code) {
		
		code = Number(code);
		
		var output = {
			exists: false,
			sucess: false,
			callback: false,
			message: false
		};
		
		if (this.errors[code] != undefined) {
			
			var error = this.errors[code];
			output.exists = true;
			
			if (error.callback != undefined) {
				output.callback = error.callback;
				output.success = true;
			} else if (error.message != undefined) {
				output.message = error.message
				output.success = true;
			}
			
			return output;
			
		} else {
			
			return output;
			
		}
		
	}
	
});

ErrorHandler.basic = function (code) {
	
	var error = new ErrorHandler().handle(Number(code));
	
	if (error.exists) {
		
		if (error.success) {
			if (error.callback) error.callback();
			if (error.message) alert(error.message);
		}
		
	}
	
};
(function() {
    var
    b64map
    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var b64pad = "=";

    function hex2b64(h) {
        var i;
        var c;
        var ret = "";
        for (i = 0; i + 3 <= h.length; i += 3) {
            c = parseInt(h.substring(i, i + 3), 16);
            ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);
        }
        if (i + 1 == h.length) {
            c = parseInt(h.substring(i, i + 1), 16);
            ret += b64map.charAt(c << 2);
        }
        else if (i + 2 == h.length) {
            c = parseInt(h.substring(i, i + 2), 16);
            ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);
        }
        while ((ret.length & 3) > 0) ret += b64pad;
        return ret;
    }

    // convert a base64 string to hex
    function b64tohex(s) {
        var ret = ""
        var i;
        var k = 0;
        // b64 state, 0-3
        var slop;
        for (i = 0; i < s.length; ++i) {
            if (s.charAt(i) == b64pad) break;
            v = b64map.indexOf(s.charAt(i));
            if (v < 0) continue;
            if (k == 0) {
                ret += int2char(v >> 2);
                slop = v & 3;
                k = 1;
            }
            else if (k == 1) {
                ret += int2char((slop << 2) | (v >> 4));
                slop = v & 0xf;
                k = 2;
            }
            else if (k == 2) {
                ret += int2char(slop);
                ret += int2char(v >> 2);
                slop = v & 3;
                k = 3;
            }
            else {
                ret += int2char((slop << 2) | (v >> 4));
                ret += int2char(v & 0xf);
                k = 0;
            }
        }
        if (k == 1)
        ret += int2char(slop << 2);
        return ret;
    }

    // convert a base64 string to a byte/number array
    function b64toBA(s) {
        //piggyback on b64tohex for now, optimize later
        var h = b64tohex(s);
        var i;
        var a = new Array();
        for (i = 0; 2 * i < h.length; ++i) {
            a[i] = parseInt(h.substring(2 * i, 2 * i + 2), 16);
        }
        return a;
    }
    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.
    // Basic JavaScript BN library - subset useful for RSA encryption.
    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = ((canary & 0xffffff) == 0xefcafe);

    // (public) Constructor
    function BigInteger(a, b, c) {
        if (a != null)
        if ("number" == typeof a) this.fromNumber(a, b, c);
        else if (b == null && "string" != typeof a) this.fromString(a,
        256);
        else this.fromString(a, b);
    }

    // return new, unset BigInteger
    function nbi() {
        return new BigInteger(null);
    }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.
    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i, x, w, j, c, n) {
        while (--n >= 0) {
            var v = x * this[i++] + w[j] + c;
            c = Math.floor(v / 0x4000000);
            w[j++] = v & 0x3ffffff;
        }
        return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i, x, w, j, c, n) {
        var xl = x & 0x7fff,
        xh = x >> 15;
        while (--n >= 0) {
            var l = this[i] & 0x7fff;
            var h = this[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w[j++] = l & 0x3fffffff;
        }
        return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i, x, w, j, c, n) {
        var xl = x & 0x3fff,
        xh = x >> 14;
        while (--n >= 0) {
            var l = this[i] & 0x3fff;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 0xfffffff;
        }
        return c;
    }
    if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
        BigInteger.prototype.am = am2;
        dbits = 30;
    }
    else if (j_lm && (navigator.appName != "Netscape")) {
        BigInteger.prototype.am = am1;
        dbits = 26;
    }
    else {
        // Mozilla/Netscape seems to prefer am3
        BigInteger.prototype.am = am3;
        dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = ((1 << dbits) - 1);
    BigInteger.prototype.DV = (1 << dbits);

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;

    // Digit conversions
    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
    var BI_RC = new Array();
    var rr,
    vv;
    rr = "0".charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = "a".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = "A".charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) {
        return BI_RM.charAt(n);
    }
    function intAt(s, i) {
        var c = BI_RC[s.charCodeAt(i)];
        return (c == null) ? -1: c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
        for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
        r.t = this.t;
        r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
        this.t = 1;
        this.s = (x < 0) ? -1: 0;
        if (x > 0) this[0] = x;
        else if (x < -1) this[0] = x + DV;
        else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) {
        var r = nbi();
        r.fromInt(i);
        return r;
    }

    // (protected) set from string and radix
    function bnpFromString(s, b) {
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 256) k = 8;
        // byte array
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else {
            this.fromRadix(s, b);
            return;
        }
        this.t = 0;
        this.s = 0;
        var i = s.length,
        mi = false,
        sh = 0;
        while (--i >= 0) {
            var x = (k == 8) ? s[i] & 0xff: intAt(s, i);
            if (x < 0) {
                if (s.charAt(i) == "-") mi = true;
                continue;
            }
            mi = false;
            if (sh == 0)
            this[this.t++] = x;
            else if (sh + k > this.DB) {
                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
                this[this.t++] = (x >> (this.DB - sh));
            }
            else
            this[this.t - 1] |= x << sh;
            sh += k;
            if (sh >= this.DB) sh -= this.DB;
        }
        if (k == 8 && (s[0] & 0x80) != 0) {
            this.s = -1;
            if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
        }
        this.clamp();
        if (mi) BigInteger.ZERO.subTo(this, this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
        var c = this.s & this.DM;
        while (this.t > 0 && this[this.t - 1] == c)--this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
        if (this.s < 0) return "-" + this.negate().toString(b);
        var k;
        if (b == 16) k = 4;
        else if (b == 8) k = 3;
        else if (b == 2) k = 1;
        else if (b == 32) k = 5;
        else if (b == 4) k = 2;
        else return this.toRadix(b);
        var km = (1 << k) - 1,
        d,
        m = false,
        r = "",
        i = this.t;
        var p = this.DB - (i * this.DB) % k;
        if (i-->0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
                m = true;
                r =
                int2char(d);
            }
            while (i >= 0) {
                if (p < k) {
                    d = (this[i] & ((1 << p) - 1)) << (k - p);
                    d |= this[--i] >> (p += this.DB - k);
                }
                else {
                    d = (this[i] >> (p -= k)) & km;
                    if (p <= 0) {
                        p += this.DB; --i;
                    }
                }
                if (d > 0) m = true;
                if (m) r += int2char(d);
            }
        }
        return m ? r: "0";
    }

    // (public) -this
    function bnNegate() {
        var r = nbi();
        BigInteger.ZERO.subTo(this, r);
        return r;
    }

    // (public) |this|
    function bnAbs() {
        return (this.s < 0) ? this.negate() : this;
    }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
        var r = this.s - a.s;
        if (r != 0) return r;
        var i = this.t;
        r = i - a.t;
        if (r != 0) return r;
        while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
        return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
        var r = 1,
        t;
        if ((t = x >>> 16) != 0) {
            x = t;
            r += 16;
        }
        if ((t = x >> 8) != 0) {
            x = t;
            r += 8;
        }
        if ((t = x >> 4) != 0) {
            x = t;
            r += 4;
        }
        if ((t = x >> 2) != 0) {
            x = t;
            r += 2;
        }
        if ((t = x >> 1) != 0) {
            x = t;
            r += 1;
        }
        return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
        if (this.t <= 0) return 0;
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n, r) {
        var i;
        for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
        for (i = n - 1; i >= 0; --i) r[i] = 0;
        r.t = this.t + n;
        r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n, r) {
        for (var i = n; i < this.t; ++i) r[i - n] = this[i];
        r.t = Math.max(this.t - n, 0);
        r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n, r) {
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << cbs) - 1;
        var ds = Math.floor(n / this.DB),
        c = (this.s << bs) & this.DM,
        i;
        for (i = this.t - 1; i >= 0; --i) {
            r[i + ds + 1] = (this[i] >> cbs) | c;
            c = (this[i] & bm) << bs;
        }
        for (i = ds - 1; i >= 0; --i) r[i] = 0;
        r[ds] = c;
        r.t = this.t + ds + 1;
        r.s = this.s;
        r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n, r) {
        r.s = this.s;
        var ds = Math.floor(n / this.DB);
        if (ds >= this.t) {
            r.t = 0;
            return;
        }
        var bs = n % this.DB;
        var cbs = this.DB - bs;
        var bm = (1 << bs) - 1;
        r[0] = this[ds] >> bs;
        for (var i = ds + 1; i < this.t; ++i) {
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs;
        }
        if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
        r.t = this.t - ds;
        r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a, r) {
        var i = 0,
        c = 0,
        m = Math.min(a.t, this.t);
        while (i < m) {
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        if (a.t < this.t) {
            c -= a.s;
            while (i < this.t) {
                c += this[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c += this.s;
        }
        else {
            c += this.s;
            while (i < a.t) {
                c -= a[i];
                r[i++] = c & this.DM;
                c >>= this.DB;
            }
            c -= a.s;
        }
        r.s = (c < 0) ? -1: 0;
        if (c < -1) r[i++] = this.DV + c;
        else if (c > 0) r[i++] = c;
        r.t = i;
        r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a, r) {
        var x = this.abs(),
        y = a.abs();
        var i = x.t;
        r.t = i + y.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
        r.s = 0;
        r.clamp();
        if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
        var x = this.abs();
        var i = r.t = 2 * x.t;
        while (--i >= 0) r[i] = 0;
        for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
                r[i + x.t] -= x.DV;
                r[i + x.t + 1] = 1;
            }
        }
        if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
        r.s = 0;
        r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m, q, r) {
        var pm = m.abs();
        if (pm.t <= 0) return;
        var pt = this.abs();
        if (pt.t < pm.t) {
            if (q != null) q.fromInt(0);
            if (r != null) this.copyTo(r);
            return;
        }
        if (r == null) r = nbi();
        var y = nbi(),
        ts = this.s,
        ms = m.s;
        var nsh = this.DB - nbits(pm[pm.t - 1]);
        // normalize modulus
        if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
        }
        else {
            pm.copyTo(y);
            pt.copyTo(r);
        }
        var ys = y.t;
        var y0 = y[ys - 1];
        if (y0 == 0) return;
        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2: 0);
        var d1 = this.FV / yt,
        d2 = (1 << this.F1) / yt,
        e = 1 << this.F2;
        var i = r.t,
        j = i - ys,
        t = (q == null) ? nbi() : q;
        y.dlShiftTo(j, t);
        if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r);
        }
        BigInteger.ONE.dlShiftTo(ys, t);
        t.subTo(y, y);
        // "negative" y so we can replace sub with am later
        while (y.t < ys) y[y.t++] = 0;
        while (--j >= 0) {
            // Estimate quotient digit
            var qd = (r[--i] == y0) ? this.DM: Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                // Try it out
                y.dlShiftTo(j, t);
                r.subTo(t, r);
                while (r[i] < --qd) r.subTo(t, r);
            }
        }
        if (q != null) {
            r.drShiftTo(ys, q);
            if (ts != ms) BigInteger.ZERO.subTo(q, q);
        }
        r.t = ys;
        r.clamp();
        if (nsh > 0) r.rShiftTo(nsh, r);
        // Denormalize remainder
        if (ts < 0) BigInteger.ZERO.subTo(r, r);
    }

    // (public) this mod a
    function bnMod(a) {
        var r = nbi();
        this.abs().divRemTo(a, null, r);
        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
        return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) {
        this.m = m;
    }
    function cConvert(x) {
        if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
        else return x;
    }
    function cRevert(x) {
        return x;
    }
    function cReduce(x) {
        x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }
    function cSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
        if (this.t < 1) return 0;
        var x = this[0];
        if ((x & 1) == 0) return 0;
        var y = x & 3;
        // y == 1/x mod 2^2
        y = (y * (2 - (x & 0xf) * y)) & 0xf;
        // y == 1/x mod 2^4
        y = (y * (2 - (x & 0xff) * y)) & 0xff;
        // y == 1/x mod 2^8
        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;
        // y == 1/x mod 2^16
        // last step - calculate inverse mod DV directly;
        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
        y = (y * (2 - x * y % this.DV)) % this.DV;
        // y == 1/x mod 2^dbits
        // we really want the negative inverse, and -DV < y < DV
        return (y > 0) ? this.DV - y: -y;
    }

    // Montgomery reduction
    function Montgomery(m) {
        this.m = m;
        this.mp = m.invDigit();
        this.mpl = this.mp & 0x7fff;
        this.mph = this.mp >> 15;
        this.um = (1 << (m.DB - 15)) - 1;
        this.mt2 = 2 * m.t;
    }

    // xR mod m
    function montConvert(x) {
        var r = nbi();
        x.abs().dlShiftTo(this.m.t, r);
        r.divRemTo(this.m, null, r);
        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
        return r;
    }

    // x/R mod m
    function montRevert(x) {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
        while (x.t <= this.mt2)
        // pad x so am has enough room later
        x[x.t++] = 0;
        for (var i = 0; i < this.m.t; ++i) {
            // faster way of calculating u0 = x[i]*mp mod DV
            var j = x[i] & 0x7fff;
            var u0 = (j * this.mpl + (((j * this.mph +
            (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
            // use am to combine the multiply-shift-add into one call
            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
            // propagate carry
            while (x[j] >= x.DV) {
                x[j] -= x.DV;
                x[++j]++;
            }
        }
        x.clamp();
        x.drShiftTo(this.m.t, x);
        if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x, r) {
        x.squareTo(r);
        this.reduce(r);
    }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x, y, r) {
        x.multiplyTo(y, r);
        this.reduce(r);
    }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() {
        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;
    }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e, z) {
        if (e > 0xffffffff || e < 1) return BigInteger.ONE;
        var r = nbi(),
        r2 = nbi(),
        g = z.convert(this),
        i = nbits(e) - 1;
        g.copyTo(r);
        while (--i >= 0) {
            z.sqrTo(r, r2);
            if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
            else {
                var t = r;
                r = r2;
                r2 = t;
            }
        }
        return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e, m) {
        var z;
        if (e < 256 || m.isEven()) z = new Classic(m);
        else z = new
        Montgomery(m);
        return this.exp(e, z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);
    // prng4.js - uses Arcfour as a PRNG
    function Arcfour() {
        this.i = 0;
        this.j = 0;
        this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
        var i,
        j,
        t;
        for (i = 0; i < 256; ++i)
        this.S[i] = i;
        j = 0;
        for (i = 0; i < 256; ++i) {
            j = (j + this.S[i] + key[i % key.length]) & 255;
            t = this.S[i];
            this.S[i] = this.S[j];
            this.S[j] = t;
        }
        this.i = 0;
        this.j = 0;
    }

    function ARC4next() {
        var t;
        this.i = (this.i + 1) & 255;
        this.j = (this.j + this.S[this.i]) & 255;
        t = this.S[this.i];
        this.S[this.i] = this.S[this.j];
        this.S[this.j] = t;
        return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
        return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;
    // Random number generator - requires a PRNG backend, e.g. prng4.js
    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.
    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
        rng_pool[rng_pptr++] ^= x & 255;
        rng_pool[rng_pptr++] ^= (x >> 8) & 255;
        rng_pool[rng_pptr++] ^= (x >> 16) & 255;
        rng_pool[rng_pptr++] ^= (x >> 24) & 255;
        if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
        rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if (rng_pool == null) {
        rng_pool = new Array();
        rng_pptr = 0;
        var t;
        if (navigator.appName == "Netscape" && navigator.appVersion < "5"
        && window.crypto) {
            // Extract entropy (256 bits) from NS4 RNG if available
            var z = window.crypto.random(32);
            for (t = 0; t < z.length; ++t)
            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
        while (rng_pptr < rng_psize) {
            // extract some randomness from
            Math.random()
            t = Math.floor(65536 * Math.random());
            rng_pool[rng_pptr++] = t >>> 8;
            rng_pool[rng_pptr++] = t & 255;
        }
        rng_pptr = 0;
        rng_seed_time();
        //rng_seed_int(window.screenX);
        //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
        if (rng_state == null) {
            rng_seed_time();
            rng_state = prng_newstate();
            rng_state.init(rng_pool);
            for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
            rng_pool[rng_pptr] = 0;
            rng_pptr = 0;
            //rng_pool = null;
        }
        // TODO: allow reseeding after first request
        return rng_state.next();
    }

    function rng_get_bytes(ba) {
        var i;
        for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;
    // Depends on jsbn.js and rng.js
    // convert a (hex) string to a bignum object
    function parseBigInt(str, r) {
        return new BigInteger(str, r);
    }

    function linebrk(s, n) {
        var ret = "";
        var i = 0;
        while (i + n < s.length) {
            ret += s.substring(i, i + n) + "n";
            i += n;
        }
        return ret + s.substring(i, s.length);
    }

    function byte2Hex(b) {
        if (b < 0x10)
        return "0" + b.toString(16);
        else
        return b.toString(16);
    }

    // PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint
    function pkcs1pad2(s, n) {
        if (n < s.length + 11) {
            alert("Message too long for RSA");
            return null;
        }
        var ba = new Array();
        var i = s.length - 1;
        while (i >= 0 && n > 0) ba[--n] = s.charCodeAt(i--);
        ba[--n] = 0;
        var rng = new SecureRandom();
        var x = new Array();
        while (n > 2) {
            // random non-zero pad
            x[0] = 0;
            while (x[0] == 0) rng.nextBytes(x);
            ba[--n] = x[0];
        }
        ba[--n] = 2;
        ba[--n] = 0;
        return new BigInteger(ba);
    }

    // "empty" RSA key constructor
    function RSAKey() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
    }

    // Set the public key fields N and e from hex strings
    function RSASetPublic(N, E) {
        if (N != null && E != null && N.length > 0 && E.length > 0) {
            this.n = parseBigInt(N, 16);
            this.e = parseInt(E, 16);
        }
        else
        alert("Invalid RSA public key");
    }

    // Perform raw public operation on "x": return x^e (mod n)
    function RSADoPublic(x) {
        return x.modPowInt(this.e, this.n);
    }

    // Return the PKCS#1 RSA encryption of "text" as an even-length hex string
    function RSAEncrypt(text) {
        var m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3);
        if (m == null) return null;
        var c = this.doPublic(m);
        if (c == null) return null;
        var h = c.toString(16);
        if ((h.length & 1) == 0) return h;
        else return "0" + h;
    }

    // Return the PKCS#1 RSA encryption of "text" as a Base64-encoded string
    function RSAEncryptB64(text) {
        var h = this.encrypt(text);
        if (h) return hex2b64(h);
        else return null;
    }

    // protected
    RSAKey.prototype.doPublic = RSADoPublic;

    // public
    RSAKey.prototype.setPublic = RSASetPublic;
    RSAKey.prototype.encrypt = RSAEncrypt;
    RSAKey.prototype.encrypt_b64 = RSAEncryptB64;

    // PUBLIC METHODS:
    window.RSAKey = RSAKey;
    //window.hex2b64 = hex2b64;
})();
/*
---

name: AddressFields

requires:
  - FormFields

...
*/

var AddressFields = new Class({
	
	initialize: function (rootEl) {
		this.rootEl = rootEl;
		
		this.requiredFields = this.rootEl.getElements('[required]').map(function (element) {
			var name = element.get('name');
			
			if (name == 'postal_code') {
				return new FormField(element, {
					validators: [{
						tester: function (fieldEl, validator) {
							var fieldValue = fieldEl.get('value');
							if (fieldEl.getParent().hasClass('zip')) {
								validator.message = 'Please enter a valid ZIP code.';
								
								var valueLength = fieldValue.toDigits().length;
								return (valueLength == 5 || valueLength == 9);
							} else {
								validator.message = 'Please enter a valid postal code.';
								return (fieldValue.trim().length > 0);
							}
							
						}
					}]
				});
			} else {
				return new FormField(element);
			}
		}, this);
		
		// Change to "City & Region" for non-US countries
		this.countryFieldEl = this.rootEl.getElement('.country select');
		this.countryFieldEl.addEvent('change', function (event) {
			var stateContainerEl = rootEl.getElement('.state.field');
			var stateSelectEl = stateContainerEl.getElement('select')
			var cityLabelEl = rootEl.getElement('.city label');
			
			var postalCodeContainerEl = rootEl.getElement('.postal-code.field');
			var postalCodeLabelEl = postalCodeContainerEl.getElement('label');
			var postalCodeEl = postalCodeContainerEl.getElement('input');
			
			if (this.get('value') == 'US') {
				stateContainerEl.show();
				stateSelectEl.set('disabled', false);
				
				cityLabelEl.set('text', 'City');
				postalCodeContainerEl.addClass('zip');
				postalCodeLabelEl.set('text', 'ZIP Code');
				
			} else {
				stateContainerEl.hide();
				stateSelectEl.set('disabled', true);
				
				cityLabelEl.set('text', 'City & Region');
				postalCodeContainerEl.removeClass('zip');
				postalCodeLabelEl.set('text', 'Postal Code');
			}
		}).fireEvent('change'); // Fire event to init onload
	},
	
	getAddress: function () {
		return this.rootEl.toQueryObject();
	},
	
	setAddress: function (values) {
		this.resetAddress();
		Object.each(values, function (value, key) {
			// Strip "shipping[country]" down to "country" if applicable
			var name = (/.+\[(.+)\]/.test(key)) ?
				key.substring(key.indexOf('[') + 1, key.indexOf(']')) :
				key;
			var element = this.rootEl.getElement('[name*=' + name + ']');
			
			if (element) {
				element.set('value', value);
			}
		}, this);
		
		this.countryFieldEl.fireEvent('change');
		
		return this;
	},
	
	resetAddress: function () {
		this.rootEl.getElements('input.text, select').each(function (element) {
			element.reset();
		});
		return this;
	},
	
	getRequiredFields: function () {
		return this.requiredFields;
	}
	
});

/**
*	@class BackgroundImage
*	@author Marvin Tam
*	
*  Implements a background image that resizes according to the viewport size
* 
*/

var BackgroundImage = new Class({
	
	Implements: [Options, Events],
	
	options: {
		showGradients: false,
		injectTo: null,
		lazyLoad: false
	},
	
	initialize: function (imageUrl, options) {
		this.setOptions(options);
				
		var imgOptions = {
			'class': 'background-image'
		}

		if(this.options.lazyLoad){
			imgOptions['data-src'] = imageUrl;
		} else{
			imgOptions.src = imageUrl;
		}

		this.imageEl = new Element('img', imgOptions);
		
		// Put image element in a full width/height wrapper element,
		// append it as the first child of <body>
		this.wrapperEl = new Element('div', {
			'class': 'background-image-wrapper'
		}).adopt(this.imageEl).inject(this.options.injectTo ? this.options.injectTo : document.body, this.options.injectTo ? 'bottom' : 'top');
		
		if (Browser.ie6) {
			// http://msdn.microsoft.com/en-us/library/ms533774%28v=vs.85%29.aspx
			this.imageEl.setProperty('galleryimg', 'yes');
			$(document.body).setStyle('height', '100%');
		}
		
		if (this.options.showGradients) {
			this.gradientsEl = new Element('div', {
				'class': 'gradients',
				'html': '<div class="top"></div><div class="bottom"></div>'
			}).inject(this.wrapperEl);
		}
		
		window.addEvent('resize', this.setImagePosition.bind(this));
		
		this.setImagePosition();
	},
	
	setImagePosition: function () {
		
		var windowSize = window.getSize();
		var imageSize = this.imageEl.getSize();
		if (imageSize.x === 0) {
			// Image might not be loaded yet, so needs a fallback size
			imageSize = {
				x: 1920,
				y: 1200
			};
		}
		var ratio;
		
		// Fit to viewport width while maintaining aspect ratio
		if (windowSize.x * (imageSize.y / imageSize.x) > windowSize.y) {
			ratio = windowSize.x / imageSize.x;
		} else {
			ratio = windowSize.y / imageSize.y;
		}
		
		var projectedWidth = Math.round(imageSize.x * ratio);
		var projectedHeight = Math.round(imageSize.y * ratio);
		
		this.imageEl.setProperties({
			width: projectedWidth,
			height: projectedHeight
		}).setStyles({
			left: (windowSize.x - projectedWidth) / 2,
			top: (windowSize.y - projectedHeight) / 2
		});
		
		if (this.options.showGradients) {
			this.gradientsEl.setStyles({
				width: windowSize.x,
				height: windowSize.y
			})
		}
		
	},

	load: function(){
		if(this.imageEl.get('data-src')){
			this.imageEl.set('src', this.imageEl.get('data-src'));
			this.imageEl.erase('data-src');	
		}
	}
	
});

var FormField = new Class({
	
	Implements: [Events, Options],
	
	options: {
		validators: [{
			tester: function (fieldEl) {
				return (fieldEl.get('value').trim() !== '');
			},
			message: 'This field is required.'
		}],
		tooltipStyle: 'right' // right | top
	},
	
	isValid: false,
	isValidAsync: null,
	
	initialize: function (fieldEl, options) {
		if (!fieldEl) {
			throw new Exception('fieldEl is required.');
		}
		
		this.setOptions(options);
		this.fieldEl = fieldEl.addEvents({
			focus: function () {
				this.hasFocus = true;
				this.reset();
			}.bind(this),
			blur: function () {
				this.hasFocus = false;
			}.bind(this),
			change: function () {
				// Mark for revalidation
				this.isValid = false;
				this.isValidAsync = null;
			}.bind(this)
		}).store('formFieldInstance', this);
		
		
		if (this.fieldEl.get('tag') === 'select') {
			this.highlightEl = this.fieldEl.getParent('.field-wrapper') || this.fieldEl.getParent();
			this.highlightClass = 'field-highlight';
		} else if (this.fieldEl.get('type') === 'checkbox') {
			this.highlightEl = null;
		} else {
			this.highlightEl = this.fieldEl;
			this.highlightClass = 'highlight';
		}
	},
	
	highlight: function () {
		if (this.highlightEl) {
			this.highlightEl.addClass(this.highlightClass);
		}
		return this;
	},
	
	showTooltip: function (message) {
		this.highlight();
		
		this.tooltip = this.tooltip || (
			(this.options.tooltipStyle === 'top') ?
				new Tooltip(this.fieldEl.getOffsetParent(), {
					'className': 'top-tooltip'
				}) :
				new RightTooltip(this.fieldEl.getOffsetParent())
		);
		
		this.tooltip.show(message || this.message, this.fieldEl);
		
		return this;
	},
	
	reset: function () {
		if (this.tooltip) {
			this.tooltip.hide();
		}
		
		if (this.highlightEl) {
			this.highlightEl.removeClass(this.highlightClass);
		}
		
		return this;
	},
	
	toElement: function () {
		return this.fieldEl;
	},
	
	setFocus: function () {
		if (!this.hasFocus) {
			setTimeout(function () {
				this.fieldEl.focus();
			}.bind(this), 0);
		}
	},
	
	validate: function () {
		// If async validation is ran, take that result as the hard truth and 
		// don't run local validation
		if (this.isValidAsync !== null) {
			return this.isValidAsync;
		}
		
		// Validate against all defined validators
		this.isValid = this.options.validators.every(function (validator) {
			// Passing the validator object to allow dynamic error message from
			// async calls and such
			if (!validator.tester.apply(this, [this.fieldEl, validator])) {
				this.message = validator.message;
				
				return false;
			} else {
				this.reset();
				return true;
			}
		}, this);
		
		// http://www.w3.org/TR/html5/association-of-controls-and-forms.html#barred-from-constraint-validation
		// 
		//  "Note: An element can still suffer from these states even when the element is disabled; thus these
		//  states can be represented in the DOM even if validating the form during submission wouldn't indicate
		//  a problem to the user."
		// 
		// So if the field is disabled, we should still run validation but we ignore the results
		
		// @TODO: But really, the invoker is the one that should check the state before calling validation
		return (this.fieldEl.get('disabled')) ?
			true :
			this.isValid;
	},

    getValue: function() {
        return this.fieldEl.get('value').trim();
    },

    setValue: function(value) {
        this.fieldEl.set('value', value);
    }
});

/*
---

name: Loop

description: Runs a class method on a periodical

license: MIT-style license.

authors: Ryan Florence <http://ryanflorence.com>

docs: http://moodocs.net/rpflo/mootools-rpflo/Loop

requires:
- Core/Class

provides: [Loop]

...
*/

var Loop = new Class({

	loopCount: 0,
	isLooping: false,
	loopMethod: function(){},

	setLoop: function(fn, delay){
		wasLooping = this.isLooping;
		if (wasLooping) this.stopLoop();
		this.loopMethod = fn;
		this.loopDelay = delay || 3000;
		if (wasLooping) this.startLoop();
		return this;
	},

	stopLoop: function(){
		this.isLooping = false;
		clearInterval(this.periodical);
		return this;
	},

	startLoop: function(delay, now){
		if (!this.isLooping){
			this.isLooping = true;
			if (now) this.looper();
			this.periodical = this.looper.periodical(delay || this.loopDelay, this);
		};
		return this;
	},

	resetLoop: function(){
		this.loopCount = 0;
		return this;
	},

	looper: function(){
		this.loopCount++;
		this.loopMethod(this.loopCount);
		return this;
	}

});
/*
---

name: "SlideShow"

description: "Extensible mid-level class that manages transitions of elements that share the same space, typically for slideshows, tabs, and galleries."

license: "MIT-style license."

authors: "Ryan Florence <http://ryanflorence.com>"

requires:
  - Core/Fx.Tween
  - Core/Slick.Parser
  - Loop/Loop

provides:
  - SlideShow

...
*/

;(function(){

var SlideShow = this.SlideShow = new Class({

	Implements: [Options, Events, Loop],

	options: {
		/*
		onShow: function(){},
		onShowComplete: function(){},
		onReverse: function(){},
		onPlay: function(){},
		onPause: function(){},
		*/
		delay: 7000,
		transition: 'crossFade',
		duration: 500,
		autoplay: false,
		dataAttribute: 'data-slideshow',
		selector: '> *'
	},

	transitioning: false,
	reversed: false,

	initialize: function(element, options, noSetup){
		this.element = document.id(element);
		this.setOptions(options);
		if (!noSetup) this.setup();
	},

	setup: function(options){
		if (options) this.setOptions(options);
		this.slides = this.element.getElements(this.options.selector);
		this.setupElement().setupSlides();
		this.current = this.current || this.slides[0];
		this.index = this.current.retrieve('slideshow-index');
		this.setLoop(this.show.pass(this.reversed ? 'previous' : 'next', this), this.options.delay);
		if (this.options.autoplay) this.play();
		return this;
	},

	show: function(slide, options){
		if (slide == 'next' || slide == 'previous') slide = this[slide + 'Slide']();
		if (typeof slide == 'number') slide = this.slides[slide];
		if (slide == this.current || this.transitioning) return this;

		this.transitioning = true;
		this.current.store('slideshow:oldStyles', this.current.get('style'));

		var transition = (options && options.transition) ? options.transition : slide.retrieve('slideshow-transition'),
			duration = (options && options.duration) ? options.duration : slide.retrieve('slideshow-duration'),
			previous = this.current.setStyle('z-index', 1),
			next = this.reset(slide),
			nextIndex = this.index = next.retrieve('slideshow-index')
			slideData = {
				previous: { element: previous, index: previous.retrieve('slideshow-index') },
				next:     { element: next,     index: nextIndex }
			};

		this.fireEvent('show', slideData);

		SlideShow.transitions[transition]({
			previous: previous,
			next: next,
			duration: duration,
			instance: this
		});

		(function(){
			previous.setStyle('display', 'none');
			this.fireEvent('showComplete', slideData);
			this.transitioning = false;
		}).bind(this).delay(duration);

		this.current = next;
		return this;
	},

	play: function(){
		this.startLoop();
		this.fireEvent('play');
		return this;
	},

	pause: function(){
		this.stopLoop();
		this.fireEvent('pause');
		return this;
	},

	reverse: function(){
		this.setLoop(this.show.pass(this.reversed ? 'next' : 'previous', this), this.options.delay);
		this.reversed = !this.reversed;
		this.fireEvent('reverse');
		return this;
	},

	setupElement: function(){
		this.storeData(this.element);
		this.options.duration = this.element.retrieve('slideshow-duration');
		this.options.transition = this.element.retrieve('slideshow-transition');
		this.options.delay = this.element.retrieve('slideshow-delay');
		if (this.element.getStyle('position') == 'static') this.element.setStyle('position', 'relative');
		return this;
	},

	setupSlides: function(){
		this.slides.each(function(slide, index){
			slide.store('slideshow-index', index).store('slideshow:oldStyles', slide.get('style'));
			this.storeData(slide);
			this.reset(slide);
			slide.setStyle('display', (this.current || index == 0) ? '' : 'none');
		}, this);
		return this;
	},

	storeData: function(element){
		var ops = this.options;
		// default options
		element.store('slideshow-transition', ops.transition);
		element.store('slideshow-duration', ops.duration);
		if (element == this.element) element.store('slideshow-delay', ops.delay);
		// override from data attribute
		var data = element.get(this.options.dataAttribute);
		if (!data) return this;
		Slick.parse(data).expressions[0].each(function(option){
			element.store('slideshow-' + option.tag, option.pseudos[0].key);
		});
		return this;
	},

	reset: function(slide){
		return slide.set('style', slide.retrieve('slideshow:oldStyles'));
	},

	nextSlide: function(){
		return this.slides[this.index + 1] || this.slides[0];
	},

	previousSlide: function(){
		return this.slides[this.index - 1] || this.slides.getLast();
	},

	toElement: function(){
		return this.element;
	}

});

SlideShow.transitions = {};

SlideShow.defineTransition = function(name, fn){
	SlideShow.transitions[name] = fn;
};

SlideShow.defineTransitions = function(transitions){
	Object.each(transitions, function(item, index){
		SlideShow.defineTransition(index, item);
	});
};

})();

// element extensions

Element.Properties.slideshow = {

	set: function(options){
		this.get('slideshow').setup(options);
		return this;
	},

	get: function(){
		var instance = this.retrieve('slideshow');
		if (!instance){
			instance = new SlideShow(this, {}, true);
			this.store('slideshow', instance);
		}
		return instance;
	}

};

Element.implement({

	playSlideShow: function(options){
		this.get('slideshow').setup(options).play();
		return this;
	},

	pauseSlideShow: function(){
		this.get('slideshow').pause();
		return this;
	}

});

// 19 transitions :D
SlideShow.defineTransitions({

	none: function(data){
		data.previous.setStyle('display', 'none');
		return this;
	},

	fade: function(data){
		data.previous.set('tween', {duration: data.duration}).fade('out');
		return this;
	},

	crossFade: function(data){
		data.previous.set('tween', {duration: data.duration}).fade('out');
		data.next.set('tween', {duration: data.duration}).fade('in');
		return this;
	},

	fadeThroughBackground: function(data){
		var half = data.duration / 2;
		data.next.set('tween', {duration: half}).fade('hide');
		data.previous.set('tween',{
			duration: half,
			onComplete: function(){ data.next.fade('in'); }
		}).fade('out');
		return this;
	}

});

(function(){

	function getStyles(direction){
		return {
			property: (direction == 'left' || direction == 'right') ? 'left' : 'top',
			inverted: (direction == 'left' || direction == 'up') ? 1 : -1
		};
	}

	function go(type, styles, data){
		var tweenOptions = {duration: data.duration, unit: '%'};
		if (type == 'blind') {
			data.next.setStyle('z-index', 2);
		}
		if (type != 'slide') {
			data.next
			    .set('tween', tweenOptions)
			    .setStyle(styles.property, 100 * styles.inverted + '%');
			data.next.tween(styles.property, 0);
		}
		if (type != 'blind'){
			data.previous
			    .set('tween', tweenOptions)
			    .setStyle(styles.property, 0)
			    .tween(styles.property, -(100 * styles.inverted));
		}
	}

	['left', 'right', 'up', 'down'].each(function(direction){

		var capitalized = direction.capitalize(),
		    blindName = 'blind' + capitalized,
		    slideName = 'slide' + capitalized;

		[
			['push' + capitalized, (function(){
				var styles = getStyles(direction);
				return function(data){
					go('push', styles, data);
				}
			}())],

			[blindName, (function(){
				var styles = getStyles(direction);
				return function(data){
					go('blind', styles, data);
				}
			}())],

			[slideName, (function(){
				var styles = getStyles(direction);
				return function(data){
					go('slide', styles, data);
				}
			}())],

			[blindName + 'Fade', function(data){
				this.fade(data)[blindName](data);
				return this;
			}]
		].each(function(transition){
			SlideShow.defineTransition(transition[0], transition[1]);
		});
	});

})();


SlideShow.defineTransitions({
	
	slideInLeft: function (data) {
		var distance = data.instance.element.getStyle('width').toInt();
		
		data.previous.setStyles({
			'left': 0,
			'z-index': 1,
			'opacity': 1
		}).set('morph',{
			duration: data.duration / 3,
			transition: Fx.Transitions.Circ.easeIn
		}).morph({
			'left': -100,
			'opacity': 0
		});
		
		data.next.setStyles({
			'left': 100,
			'z-index': 2,
			'opacity': 0
		}).set('morph',{
			duration: data.duration / 2,
			transition: Fx.Transitions.Quint.easeOut
		}).morph.delay(data.duration / 3, data.next, {
			'left': 0,
			'opacity': 1
		});
		
		return this;
	},

	stylizedPushLeft: function (data) {
		var distance = data.instance.element.getStyle('width').toInt();
		
		data.previous.setStyles({
			'left': 0,
			'z-index': 1,
			'opacity': 1
		}).set('morph',{
			duration: data.duration / 3,
			transition: Fx.Transitions.Circ.easeIn
		}).morph({
			'left': -distance,
			'opacity': 0
		});
		
		data.next.setStyles({
			'left': distance,
			'z-index': 2,
			'opacity': 0
		}).set('morph',{
			duration: data.duration / 2,
			transition: Fx.Transitions.Quint.easeOut
		}).morph.delay(data.duration / 3, data.next, {
			'left': 0,
			'opacity': 1
		});
		
		return this;
	},


	stylizedPushLeftNoAlpha: function (data) {
		var distance = data.instance.element.getStyle('width').toInt();
		
		data.duration = 700;

		data.previous.setStyles({
			'left': 0,
			'z-index': 1
		}).set('morph',{
			duration: data.duration,
			transition: Fx.Transitions.Expo.easeInOut
		}).morph({
			'left': -distance
		});
		
		data.next.setStyles({
			'left': distance,
			'z-index': 2
		}).set('morph',{
			duration: data.duration,
			transition: Fx.Transitions.Expo.easeInOut
		}).morph( {
			'left': 0
		});
		
		return this;
	},


	stylizedPushRight: function (data) {
		var distance = data.instance.element.getStyle('width').toInt();
		
		data.previous.setStyles({
			'left': 0,
			'z-index': 1,
			'opacity': 1
		}).set('morph',{
			duration: data.duration / 3,
			transition: Fx.Transitions.Circ.easeIn
		}).morph({
			'left': distance,
			'opacity': 0
		});
		
		data.next.setStyles({
			'left': -distance,
			'z-index': 2,
			'opacity': 0
		}).set('morph',{
			duration: data.duration / 2,
			transition: Fx.Transitions.Quint.easeOut
		}).morph.delay(data.duration / 3, data.next, {
			'left': 0,
			'opacity': 1
		});
		
		return this;
	},

	stylizedPushRightNoAlpha: function (data) {
		var distance = data.instance.element.getStyle('width').toInt();
		
		data.previous.setStyles({
			'left': 0,
			'z-index': 1
		}).set('morph',{
			duration: data.duration,
			transition: Fx.Transitions.Expo.easeInOut
		}).morph({
			'left': distance
		});
		
		data.next.setStyles({
			'left': -distance,
			'z-index': 2
		}).set('morph',{
			duration: data.duration,
			transition: Fx.Transitions.Expo.easeInOut
		}).morph({
			'left': 0
		});
		
		return this;
	},

	CSSFade: function(data){
		var transitionString = 'opacity ' + data.duration / 1000 + 's linear';

		var styles = {
			'opacity': 0,
			'visibility': 'visible'
		}

		styles[Modernizr.prefixed('transition').toCSS()] = transitionString;

		data.previous.setStyles(styles);

		return this;
	},

	CSSCrossFade: function(data){
		var transitionString = 'opacity ' + data.duration / 1000 + 's linear';

		var styles = {
			'opacity': 0,
			'visibility': 'visible'
		}

		styles[Modernizr.prefixed('transition').toCSS()] = transitionString;

		data.previous.setStyles(styles);

		styles.opacity = 1;

		data.next.setStyles(styles);

		return this;
	}
	
});

// lib/handlebars/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"statements":6,"simpleInverse":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"params":25,"hash":26,"param":27,"STRING":28,"INTEGER":29,"BOOLEAN":30,"hashSegments":31,"hashSegment":32,"ID":33,"EQUALS":34,"pathSegments":35,"SEP":36,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",28:"STRING",29:"INTEGER",30:"BOOLEAN",33:"ID",34:"EQUALS",36:"SEP"},
productions_: [0,[3,2],[4,3],[4,1],[4,0],[6,1],[6,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[7,2],[17,3],[17,2],[17,2],[17,1],[25,2],[25,1],[27,1],[27,1],[27,1],[27,1],[26,1],[31,2],[31,1],[32,3],[32,3],[32,3],[32,3],[21,1],[35,3],[35,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1] 
break;
case 2: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]) 
break;
case 3: this.$ = new yy.ProgramNode($$[$0]) 
break;
case 4: this.$ = new yy.ProgramNode([]) 
break;
case 5: this.$ = [$$[$0]] 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 7: this.$ = new yy.InverseNode($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 8: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0]) 
break;
case 9: this.$ = $$[$0] 
break;
case 10: this.$ = $$[$0] 
break;
case 11: this.$ = new yy.ContentNode($$[$0]) 
break;
case 12: this.$ = new yy.CommentNode($$[$0]) 
break;
case 13: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]) 
break;
case 14: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]) 
break;
case 15: this.$ = $$[$0-1] 
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]) 
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true) 
break;
case 18: this.$ = new yy.PartialNode($$[$0-1]) 
break;
case 19: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]) 
break;
case 20: 
break;
case 21: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]] 
break;
case 22: this.$ = [[$$[$0-1]].concat($$[$0]), null] 
break;
case 23: this.$ = [[$$[$0-1]], $$[$0]] 
break;
case 24: this.$ = [[$$[$0]], null] 
break;
case 25: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 26: this.$ = [$$[$0]] 
break;
case 27: this.$ = $$[$0] 
break;
case 28: this.$ = new yy.StringNode($$[$0]) 
break;
case 29: this.$ = new yy.IntegerNode($$[$0]) 
break;
case 30: this.$ = new yy.BooleanNode($$[$0]) 
break;
case 31: this.$ = new yy.HashNode($$[$0]) 
break;
case 32: $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 33: this.$ = [$$[$0]] 
break;
case 34: this.$ = [$$[$0-2], $$[$0]] 
break;
case 35: this.$ = [$$[$0-2], new yy.StringNode($$[$0])] 
break;
case 36: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])] 
break;
case 37: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])] 
break;
case 38: this.$ = new yy.IdNode($$[$0]) 
break;
case 39: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 40: this.$ = [$$[$0]] 
break;
}
},
table: [{3:1,4:2,5:[2,4],6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{1:[3]},{5:[1,16]},{5:[2,3],7:17,8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,19],20:[2,3],22:[1,13],23:[1,14],24:[1,15]},{5:[2,5],14:[2,5],15:[2,5],16:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5]},{4:20,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{4:21,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{17:22,21:23,33:[1,25],35:24},{17:26,21:23,33:[1,25],35:24},{17:27,21:23,33:[1,25],35:24},{17:28,21:23,33:[1,25],35:24},{21:29,33:[1,25],35:24},{1:[2,1]},{6:30,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{5:[2,6],14:[2,6],15:[2,6],16:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6]},{17:22,18:[1,31],21:23,33:[1,25],35:24},{10:32,20:[1,33]},{10:34,20:[1,33]},{18:[1,35]},{18:[2,24],21:40,25:36,26:37,27:38,28:[1,41],29:[1,42],30:[1,43],31:39,32:44,33:[1,45],35:24},{18:[2,38],28:[2,38],29:[2,38],30:[2,38],33:[2,38],36:[1,46]},{18:[2,40],28:[2,40],29:[2,40],30:[2,40],33:[2,40],36:[2,40]},{18:[1,47]},{18:[1,48]},{18:[1,49]},{18:[1,50],21:51,33:[1,25],35:24},{5:[2,2],8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,2],22:[1,13],23:[1,14],24:[1,15]},{14:[2,20],15:[2,20],16:[2,20],19:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,7],14:[2,7],15:[2,7],16:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7]},{21:52,33:[1,25],35:24},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{18:[2,22],21:40,26:53,27:54,28:[1,41],29:[1,42],30:[1,43],31:39,32:44,33:[1,45],35:24},{18:[2,23]},{18:[2,26],28:[2,26],29:[2,26],30:[2,26],33:[2,26]},{18:[2,31],32:55,33:[1,56]},{18:[2,27],28:[2,27],29:[2,27],30:[2,27],33:[2,27]},{18:[2,28],28:[2,28],29:[2,28],30:[2,28],33:[2,28]},{18:[2,29],28:[2,29],29:[2,29],30:[2,29],33:[2,29]},{18:[2,30],28:[2,30],29:[2,30],30:[2,30],33:[2,30]},{18:[2,33],33:[2,33]},{18:[2,40],28:[2,40],29:[2,40],30:[2,40],33:[2,40],34:[1,57],36:[2,40]},{33:[1,58]},{14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,17],14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]},{18:[1,59]},{18:[1,60]},{18:[2,21]},{18:[2,25],28:[2,25],29:[2,25],30:[2,25],33:[2,25]},{18:[2,32],33:[2,32]},{34:[1,57]},{21:61,28:[1,62],29:[1,63],30:[1,64],33:[1,25],35:24},{18:[2,39],28:[2,39],29:[2,39],30:[2,39],33:[2,39],36:[2,39]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{18:[2,34],33:[2,34]},{18:[2,35],33:[2,35]},{18:[2,36],33:[2,36]},{18:[2,37],33:[2,37]}],
defaultActions: {16:[2,1],37:[2,23],53:[2,21]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    };

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol == null)
                symbol = lex();
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                var errStr = '';
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+'\nExpecting '+expected.join(', ');
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state == 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};/* Jison generated lexer */
var lexer = (function(){var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parseError) {
            this.yy.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext+=ch;
        this.yyleng++;
        this.match+=ch;
        this.matched+=ch;
        var lines = ch.match(/\n/);
        if (lines) this.yylineno++;
        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        this._input = ch + this._input;
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            match = this._input.match(this.rules[rules[i]]);
            if (match) {
                lines = match[0].match(/\n.*/g);
                if (lines) this.yylineno += lines.length;
                this.yylloc = {first_line: this.yylloc.last_line,
                               last_line: this.yylineno+1,
                               first_column: this.yylloc.last_column,
                               last_column: lines ? lines[lines.length-1].length-1 : this.yylloc.last_column + match[0].length}
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                this._more = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, rules[i],this.conditionStack[this.conditionStack.length-1]);
                if (token) return token;
                else return;
            }
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(), 
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    }});
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: this.begin("mu"); if (yy_.yytext) return 14; 
break;
case 1: return 14; 
break;
case 2: return 24; 
break;
case 3: return 16; 
break;
case 4: return 20; 
break;
case 5: return 19; 
break;
case 6: return 19; 
break;
case 7: return 23; 
break;
case 8: return 23; 
break;
case 9: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.begin("INITIAL"); return 15; 
break;
case 10: return 22; 
break;
case 11: return 34; 
break;
case 12: return 33; 
break;
case 13: return 33; 
break;
case 14: return 36; 
break;
case 15: /*ignore whitespace*/ 
break;
case 16: this.begin("INITIAL"); return 18; 
break;
case 17: this.begin("INITIAL"); return 18; 
break;
case 18: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 28; 
break;
case 19: return 30; 
break;
case 20: return 30; 
break;
case 21: return 29; 
break;
case 22: return 33; 
break;
case 23: return 'INVALID'; 
break;
case 24: return 5; 
break;
}
};
lexer.rules = [/^[^\x00]*?(?=(\{\{))/,/^[^\x00]+/,/^\{\{>/,/^\{\{#/,/^\{\{\//,/^\{\{\^/,/^\{\{\s*else\b/,/^\{\{\{/,/^\{\{&/,/^\{\{![\s\S]*?\}\}/,/^\{\{/,/^=/,/^\.(?=[} ])/,/^\.\./,/^[/.]/,/^\s+/,/^\}\}\}/,/^\}\}/,/^"(\\["]|[^"])*"/,/^true(?=[}\s])/,/^false(?=[}\s])/,/^[0-9]+(?=[}\s])/,/^[a-zA-Z0-9_$-]+(?=[=}\s/.])/,/^./,/^$/];
lexer.conditions = {"mu":{"rules":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"inclusive":false},"INITIAL":{"rules":[0,1,24],"inclusive":true}};return lexer;})()
parser.lexer = lexer;
return parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = handlebars;
exports.parse = function () { return handlebars.parse.apply(handlebars, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    if (typeof process !== 'undefined') {
        var source = require('fs').readFileSync(require('path').join(process.cwd(), args[1]), "utf8");
    } else {
        var cwd = require("file").path(require("file").cwd());
        var source = cwd.join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
};
;
// lib/handlebars/base.js
var Handlebars = {};

Handlebars.VERSION = "1.0.beta.2";

Handlebars.Parser = handlebars;

Handlebars.parse = function(string) {
  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(string);
};

Handlebars.print = function(ast) {
  return new Handlebars.PrintVisitor().accept(ast);
};

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

Handlebars.registerHelper('blockHelperMissing', function(context, fn, inverse) {
  inverse = inverse || function() {};

  var ret = "";
  var type = Object.prototype.toString.call(context);

  if(type === "[object Function]") {
    context = context();
  }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      for(var i=0, j=context.length; i<j; i++) {
        ret = ret + fn(context[i]);
      }
    } else {
      ret = inverse(this);
    }
    return ret;
  } else {
    return fn(context);
  }
}, function(context, fn) {
  return fn(context);
});

Handlebars.registerHelper('each', function(context, fn, inverse) {
  var ret = "";

  if(context && context.length > 0) {
    for(var i=0, j=context.length; i<j; i++) {
      ret = ret + fn(context[i]);
    }
  } else {
    ret = inverse(this);
  }
  return ret;
});

Handlebars.registerHelper('if', function(context, fn, inverse) {
  if(!context || context == []) {
    return inverse(this);
  } else {
    return fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, fn, inverse) {
  return Handlebars.helpers['if'].call(this, context, inverse, fn);
});

Handlebars.registerHelper('with', function(context, fn) {
  return fn(context);
});

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  // override in the host environment
  log: function(level, str) {}
};

Handlebars.log = function(level, str) { Handlebars.logger.log(level, str); };
;
// lib/handlebars/ast.js
(function() {

  Handlebars.AST = {};

  Handlebars.AST.ProgramNode = function(statements, inverse) {
    this.type = "program";
    this.statements = statements;
    if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
  };

  Handlebars.AST.MustacheNode = function(params, hash, unescaped) {
    this.type = "mustache";
    this.id = params[0];
    this.params = params.slice(1);
    this.hash = hash;
    this.escaped = !unescaped;
  };

  Handlebars.AST.PartialNode = function(id, context) {
    this.type    = "partial";

    // TODO: disallow complex IDs

    this.id      = id;
    this.context = context;
  };

  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  Handlebars.AST.BlockNode = function(mustache, program, close) {
    verifyMatch(mustache.id, close);
    this.type = "block";
    this.mustache = mustache;
    this.program  = program;
  };

  Handlebars.AST.InverseNode = function(mustache, program, close) {
    verifyMatch(mustache.id, close);
    this.type = "inverse";
    this.mustache = mustache;
    this.program  = program;
  };

  Handlebars.AST.ContentNode = function(string) {
    this.type = "content";
    this.string = string;
  };

  Handlebars.AST.HashNode = function(pairs) {
    this.type = "hash";
    this.pairs = pairs;
  };

  Handlebars.AST.IdNode = function(parts) {
    this.type = "ID";
    this.original = parts.join(".");

    var dig = [], depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i];

      if(part === "..") { depth++; }
      else if(part === "." || part === "this") { continue; }
      else { dig.push(part); }
    }

    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;
    this.isSimple = (dig.length === 1) && (depth === 0);
  };

  Handlebars.AST.StringNode = function(string) {
    this.type = "STRING";
    this.string = string;
  };

  Handlebars.AST.IntegerNode = function(integer) {
    this.type = "INTEGER";
    this.integer = integer;
  };

  Handlebars.AST.BooleanNode = function(bool) {
    this.type = "BOOLEAN";
    this.bool = bool;
  };

  Handlebars.AST.CommentNode = function(comment) {
    this.type = "comment";
    this.comment = comment;
  };

})();;
// lib/handlebars/visitor.js

Handlebars.Visitor = function() {};

Handlebars.Visitor.prototype = {
  accept: function(object) {
    return this[object.type](object);
  }
};;
// lib/handlebars/utils.js
Handlebars.Exception = function(message) {
  this.message = message;
};

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /&(?!\w+;)|[<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;"
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (typeof value === "undefined") {
        return true;
      } else if (value === null) {
        return true;
      } else if (value === false) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/compiler.js
Handlebars.Compiler = function() {};
Handlebars.JavaScriptCompiler = function() {};

(function(Compiler, JavaScriptCompiler) {
  Compiler.OPCODE_MAP = {
    appendContent: 1,
    getContext: 2,
    lookupWithHelpers: 3,
    lookup: 4,
    append: 5,
    invokeMustache: 6,
    appendEscaped: 7,
    pushString: 8,
    truthyOrFallback: 9,
    functionOrFallback: 10,
    invokeProgram: 11,
    invokePartial: 12,
    push: 13,
    invokeInverse: 14,
    assignToHash: 15,
    pushStringParam: 16
  };

  Compiler.MULTI_PARAM_OPCODES = {
    appendContent: 1,
    getContext: 1,
    lookupWithHelpers: 1,
    lookup: 1,
    invokeMustache: 2,
    pushString: 1,
    truthyOrFallback: 1,
    functionOrFallback: 1,
    invokeProgram: 2,
    invokePartial: 1,
    push: 1,
    invokeInverse: 1,
    assignToHash: 1,
    pushStringParam: 1
  };

  Compiler.DISASSEMBLE_MAP = {};

  for(var prop in Compiler.OPCODE_MAP) {
    var value = Compiler.OPCODE_MAP[prop];
    Compiler.DISASSEMBLE_MAP[value] = prop;
  }

  Compiler.multiParamSize = function(code) {
    return Compiler.MULTI_PARAM_OPCODES[Compiler.DISASSEMBLE_MAP[code]];
  };

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, nextCode;
      var out = [], str, name, value;

      for(var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if(opcode === 'DECLARE') {
          name = opcodes[++i];
          value = opcodes[++i];
          out.push("DECLARE " + name + " = " + value);
        } else {
          str = Compiler.DISASSEMBLE_MAP[opcode];

          var extraParams = Compiler.multiParamSize(opcode);
          var codes = [];

          for(var j=0; j<extraParams; j++) {
            nextCode = opcodes[++i];

            if(typeof nextCode === "string") {
              nextCode = "\"" + nextCode.replace("\n", "\\n") + "\"";
            }

            codes.push(nextCode);
          }

          str = str + " " + codes.join(" ");

          out.push(str);
        }
      }

      return out.join("\n");
    },

    guid: 0,

    compile: function(program, options) {
      this.children = [];
      this.depths = {list: []};
      this.options = options || {};
      return this.program(program);
    },

    accept: function(node) {
      return this[node.type](node);
    },

    program: function(program) {
      var statements = program.statements, statement;
      this.opcodes = [];

      for(var i=0, l=statements.length; i<l; i++) {
        statement = statements[i];
        this[statement.type](statement);
      }

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache;
      var depth, child, inverse, inverseGuid;

      var params = this.setupStackForMustache(mustache);

      var programGuid = this.compileProgram(block.program);

      if(block.program.inverse) {
        inverseGuid = this.compileProgram(block.program.inverse);
        this.declare('inverse', inverseGuid);
      }

      this.opcode('invokeProgram', programGuid, params.length);
      this.declare('inverse', null);
      this.opcode('append');
    },

    inverse: function(block) {
      this.ID(block.mustache.id);
      var programGuid = this.compileProgram(block.program);

      this.opcode('invokeInverse', programGuid);
      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('push', '{}');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        this.accept(val);
        this.opcode('assignToHash', pair[0]);
      }
    },

    partial: function(partial) {
      var id = partial.id;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'context');
      }

      this.opcode('invokePartial', id.original);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      var params = this.setupStackForMustache(mustache);

      this.opcode('invokeMustache', params.length, mustache.id.original);

      if(mustache.escaped) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);

      this.opcode('getContext', id.depth);

      this.opcode('lookupWithHelpers', id.parts[0] || null);

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('push', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('push', bool.bool);
    },

    comment: function() {},

    // HELPERS
    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.string);
        } else {
          this[param.type](param);
        }
      }
    },

    opcode: function(name, val1, val2) {
      this.opcodes.push(Compiler.OPCODE_MAP[name]);
      if(val1 !== undefined) { this.opcodes.push(val1); }
      if(val2 !== undefined) { this.opcodes.push(val2); }
    },

    declare: function(name, value) {
      this.opcodes.push('DECLARE');
      this.opcodes.push(name);
      this.opcodes.push(value);
    },

    addDepth: function(depth) {
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    setupStackForMustache: function(mustache) {
      var params = mustache.params;

      this.pushParams(params);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('push', '{}');
      }

      this.ID(mustache.id);

      return params;
    }
  };

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name, type) {
      if(JavaScriptCompiler.RESERVED_WORDS[name] || name.indexOf('-') !== -1 || !isNaN(name)) {
        return parent + "['" + name + "']";
      } else if (/^[0-9]+$/.test(name)) {
        return parent + "[" + name + "]";
      } else {
        return parent + "." + name;
      }
    },

    appendToBuffer: function(string) {
      return "buffer = buffer + " + string + ";";
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },
    // END PUBLIC API

    compile: function(environment, options) {
      this.environment = environment;
      this.options = options || {};

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = {list: []};

      this.compileChildren(environment, options);

      Handlebars.log(Handlebars.logger.DEBUG, environment.disassemble() + "\n\n");

      var opcodes = environment.opcodes, opcode, name, declareName, declareVal;

      this.i = 0;

      for(l=opcodes.length; this.i<l; this.i++) {
        opcode = this.nextOpcode(0);

        if(opcode[0] === 'DECLARE') {
          this.i = this.i + 2;
          this[opcode[1]] = opcode[2];
        } else {
          this.i = this.i + opcode[1].length;
          this[opcode[0]].apply(this, opcode[1]);
        }
      }

      return this.createFunction();
    },

    nextOpcode: function(n) {
      var opcodes = this.environment.opcodes, opcode = opcodes[this.i + n], name, val;
      var extraParams, codes;

      if(opcode === 'DECLARE') {
        name = opcodes[this.i + 1];
        val  = opcodes[this.i + 2];
        return ['DECLARE', name, val];
      } else {
        name = Compiler.DISASSEMBLE_MAP[opcode];

        extraParams = Compiler.multiParamSize(opcode);
        codes = [];

        for(var j=0; j<extraParams; j++) {
          codes.push(opcodes[this.i + j + 1 + n]);
        }

        return [name, codes];
      }
    },

    eat: function(opcode) {
      this.i = this.i + opcode.length;
    },

    preamble: function() {
      var out = [];
      out.push("var buffer = " + this.initializeBuffer() + ", currentContext = context");

      var copies = "helpers = helpers || Handlebars.helpers;";
      if(this.environment.usePartial) { copies = copies + " partials = partials || Handlebars.partials;"; }
      out.push(copies);

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunction: function() {
      var container = {
        escapeExpression: Handlebars.Utils.escapeExpression,
        invokePartial: Handlebars.VM.invokePartial,
        programs: [],
        program: function(i, helpers, partials, data) {
          var programWrapper = this.programs[i];
          if(data) {
            return Handlebars.VM.program(this.children[i], helpers, partials, data);
          } else if(programWrapper) {
            return programWrapper;
          } else {
            programWrapper = this.programs[i] = Handlebars.VM.program(this.children[i], helpers, partials);
            return programWrapper;
          }
        },
        programWithDepth: Handlebars.VM.programWithDepth,
        noop: Handlebars.VM.noop
      };
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[0] = this.source[0] + ", " + locals.join(", ");
      }

      this.source[0] = this.source[0] + ";";

      this.source.push("return buffer;");

      var params = ["Handlebars", "context", "helpers", "partials"];

      if(this.options.data) { params.push("data"); }

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      if(params.length === 4 && !this.environment.usePartial) { params.pop(); }

      params.push(this.source.join("\n"));

      var fn = Function.apply(this, params);
      fn.displayName = "Handlebars.js";

      Handlebars.log(Handlebars.logger.DEBUG, fn.toString() + "\n\n");

      container.render = fn;

      container.children = this.environment.children;

      return function(context, options, $depth) {
        try {
          options = options || {};
          var args = [Handlebars, context, options.helpers, options.partials, options.data];
          var depth = Array.prototype.slice.call(arguments, 2);
          args = args.concat(depth);
          return container.render.apply(container, args);
        } catch(e) {
          throw e;
        }
      };
    },

    appendContent: function(content) {
      this.source.push(this.appendToBuffer(this.quotedString(content)));
    },

    append: function() {
      var local = this.popStack();
      this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
    },

    appendEscaped: function() {
      var opcode = this.nextOpcode(1), extra = "";

      if(opcode[0] === 'appendContent') {
        extra = " + " + this.quotedString(opcode[1][0]);
        this.eat(opcode);
      }

      this.source.push(this.appendToBuffer("this.escapeExpression(" + this.popStack() + ")" + extra));
    },

    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;

        if(depth === 0) {
          this.source.push("currentContext = context;");
        } else {
          this.source.push("currentContext = depth" + depth + ";");
        }
      }
    },

    lookupWithHelpers: function(name) {
      if(name) {
        var topStack = this.nextStack();

        var toPush =  "if('" + name + "' in helpers) { " + topStack +
                      " = " + this.nameLookup('helpers', name, 'helper') +
                      "; } else { " + topStack + " = " +
                      this.nameLookup('currentContext', name, 'context') +
                      "; }";

        this.source.push(toPush);
      } else {
        this.pushStack("currentContext");
      }
    },

    lookup: function(name) {
      var topStack = this.topStack();
      this.source.push(topStack + " = " + this.nameLookup(topStack, name, 'context') + ";");
    },

    pushStringParam: function(string) {
      this.pushStack("currentContext");
      this.pushString(string);
    },

    pushString: function(string) {
      this.pushStack(this.quotedString(string));
    },

    push: function(name) {
      this.pushStack(name);
    },

    invokeMustache: function(paramSize, original) {
      this.populateParams(paramSize, this.quotedString(original), "{}", null, function(nextStack, helperMissingString, id) {
        this.source.push("else if(" + id + "=== undefined) { " + nextStack + " = helpers.helperMissing.call(" + helperMissingString + "); }");
        this.source.push("else { " + nextStack + " = " + id + "; }");
      });
    },

    invokeProgram: function(guid, paramSize) {
      var inverse = this.programExpression(this.inverse);
      var mainProgram = this.programExpression(guid);

      this.populateParams(paramSize, null, mainProgram, inverse, function(nextStack, helperMissingString, id) {
        this.source.push("else { " + nextStack + " = helpers.blockHelperMissing.call(" + helperMissingString + "); }");
      });
    },

    populateParams: function(paramSize, helperId, program, inverse, fn) {
      var id = this.popStack(), nextStack;
      var params = [], param, stringParam;

      var hash = this.popStack();

      this.register('tmp1', program);
      this.source.push('tmp1.hash = ' + hash + ';');

      if(this.options.stringParams) {
        this.source.push('tmp1.contexts = [];');
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          this.source.push('tmp1.contexts.push(' + this.popStack() + ');');
        }
      }

      if(inverse) {
        this.source.push('tmp1.fn = tmp1;');
        this.source.push('tmp1.inverse = ' + inverse + ';');
      }

      if(this.options.data) {
        this.source.push('tmp1.data = data;');
      }

      params.push('tmp1');

      // TODO: This is legacy behavior. Deprecate and remove.
      if(inverse) {
        params.push(inverse);
      }

      this.populateCall(params, id, helperId || id, fn);
    },

    populateCall: function(params, id, helperId, fn) {
      var paramString = ["context"].concat(params).join(", ");
      var helperMissingString = ["context"].concat(helperId).concat(params).join(", ");

      nextStack = this.nextStack();

      this.source.push("if(typeof " + id + " === 'function') { " + nextStack + " = " + id + ".call(" + paramString + "); }");
      fn.call(this, nextStack, helperMissingString, id);
    },

    invokeInverse: function(guid) {
      var program = this.programExpression(guid);

      var blockMissingParams = ["context", this.topStack(), "this.noop", program];
      this.pushStack("helpers.blockHelperMissing.call(" + blockMissingParams.join(", ") + ")");
    },

    invokePartial: function(context) {
      this.pushStack("this.invokePartial(" + this.nameLookup('partials', context, 'partial') + ", '" + context + "', " + this.popStack() + ", helpers, partials);");
    },

    assignToHash: function(key) {
      var value = this.popStack();
      var hash = this.topStack();

      this.source.push(hash + "['" + key + "'] = " + value + ";");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;
      var compiled = [];

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        compiled[i] = compiler.compile(child, options);
      }

      environment.rawChildren = children;
      environment.children = compiled;
    },

    programExpression: function(guid) {
      if(guid == null) { return "this.noop"; }

      var programParams = [guid, "helpers", "partials"];

      var depths = this.environment.rawChildren[guid].depths.list;

      if(this.options.data) { programParams.push("data"); }

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("context"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      if(!this.environment.usePartial) {
        if(programParams[3]) {
          programParams[2] = "null";
        } else {
          programParams.pop();
        }
      }

      if(depths.length === 0) {
        return "this.program(" + programParams.join(", ") + ")";
      } else {
        programParams[0] = "this.children[" + guid + "]";
        return "this.programWithDepth(" + programParams.join(", ") + ")";
      }
    },

    register: function(name, val) {
      this.useRegister(name);
      this.source.push(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStack: function(item) {
      this.source.push(this.nextStack() + " = " + item + ";");
      return "stack" + this.stackSlot;
    },

    nextStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return "stack" + this.stackSlot;
    },

    popStack: function() {
      return "stack" + this.stackSlot--;
    },

    topStack: function() {
      return "stack" + this.stackSlot;
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r') + '"';
    }
  };

  var reservedWords = ("break case catch continue default delete do else finally " +
                       "for function if in instanceof new return switch this throw " + 
                       "try typeof var void while with null true false").split(" ");

  compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.VM = {
  programWithDepth: function(fn, helpers, partials, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 4);

    return function(context, options) {
      options = options || {};

      options = {
        helpers: options.helpers || helpers,
        partials: options.partials || partials,
        data: options.data || data
      };

      return fn.apply(this, [context, options].concat(args));
    };
  },
  program: function(fn, helpers, partials, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, {
        helpers: options.helpers || helpers,
        partials: options.partials || partials,
        data: options.data || data
      });
    };
  },
  noop: function() { return ""; },
  compile: function(string, options) {
    var ast = Handlebars.parse(string);
    var environment = new Handlebars.Compiler().compile(ast, options);
    return new Handlebars.JavaScriptCompiler().compile(environment, options);
  },
  invokePartial: function(partial, name, context, helpers, partials) {
    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, {helpers: helpers, partials: partials});
    } else {
      partials[name] = Handlebars.VM.compile(partial);
      return partials[name](context, {helpers: helpers, partials: partials});
    }
  }
};

Handlebars.compile = Handlebars.VM.compile;;

var EmailField = new Class({
	
	Extends: FormField,
	
	options: {
		validators: [{
			tester: function (fieldEl) {
				return (fieldEl.get('value').trim().validateAsEmail());
			},
			message: 'Please enter a valid email address'
		}]
	},
	
	initialize: function (fieldEl, options) {
		this.parent(fieldEl, options);
	},
	
	setEmail: function (email) {
		this.fieldEl.set('value', email.trim().toLowerCase());
		return this;
	}
	
});

var PasswordField = new Class({
	
	Extends: FormField,
	
	options: {
		minLength: 7,

		validators: [{
			tester: function (fieldEl) {
				return (fieldEl.get('value').trim().length >= this.options.minLength);
			}
		}]
	},
	
	initialize: function (fieldEl, options) {
		this.parent(fieldEl, options);
		this.options.validators[0].message = 'Please enter a password with ' + this.options.minLength + ' or more characters';
	}
	
});

var RegistrationEmailField = new Class({
	
	Extends: EmailField,
	
	initialize: function (fieldEl, options) {
		this.parent(fieldEl, options);
	},
	
	validate: function () {
		var email = this.fieldEl.get('value').trim()
		if (this.isValid || !this.parent()) {
			this.fireEvent('validationComplete', [this.isValid, email]);
			return this.isValid;
		}
		
		// this.isValid
		var req = new Request.JSON({
			url: '/user/validateemail',
			data: {
				'email': email
			},
			onSuccess: function (json) {
				this.isValid = json.success;
				if (!json.success) {
					var status = json.errors[0][0].toInt(),
						message = json.errors[0][1];
					switch (status) {
						case 400:
							this.message = 'Please enter a valid email address.';
							break;
						case 505:
							this.fireEvent('registeredEmailFound', email);
							return;
						default:
							this.message = message;
					}
				}
				this.fireEvent('validationComplete', [this.isValid, email]);
			}.bind(this)
		}).get();
		
	}
	
});

/**
*	@class DropDownList
*	@author Dominik Hofmann
*	A tool tip.
*/

var Tooltip = new Class({

	Implements: Options,
	
	options: {
		className: '',
		dismissable: true
	},
	
	initialize: function (attachTo, options) {
		this.setOptions(options);
		
		this.attachTo = attachTo || document.body;
		this.container = new Element('div', {
			'class': 'tooltip'
		});
		
		if (this.options.className) {
			this.container.addClass(this.options.className);
		}
		
		this.content = new Element('div', {
			'class': 'tooltip-content'
		}).inject(this.container);
		this.arrow = new Element('div', {
			'class': 'arrow'
		}).inject(this.container, this.options.orientation == 'bottom' ? 'top' : 'bottom');
		
		this.container.setStyle('display', 'none').inject(this.attachTo);
		
		this.timeout = null;

        if (this.options.width) {
            this.content.style.width = options.width +'px';
        }

		// Clear the tooltip when anything else is clicked on
		if (this.options.dismissable) {
			this.container.addEvent('mouseup', this.hide.bind(this));
			
			$(document).addEvent('mousedown', function (event) {
				// The first check is necessary for IE when event.target is an <object> because
				// it's really an ActiveX object
				if (event.target.getParent && $(event.target).getParent('.tooltip') !== this.container) {
					this.hide();
				}
			}.bind(this));
		}
		
		
	},
	
	setPosition: function (element) {
		var pos = element.getPosition(this.attachTo);
		var size = element.getSize();
		var containerSize = this.container.getSize();

		if (this.options.orientation == 'bottom') {
			this.container.setStyles({
				'left': pos.x + Math.round((size.x - containerSize.x) / 2),
				'top': pos.y + containerSize.y
			});
			this.arrow.addClass('arrow-orientation-up');
		} else if (this.options.orientation == 'left') {
			this.container.setStyles({
				'left': pos.x - Math.round(containerSize.x + 10),
				'top': pos.y + ((size.y - containerSize.y) / 2)
			});
		} else if (this.options.orientation == 'right') {
			this.container.setStyles({
				'left': pos.x + Math.round(size.x + 10),
				'top': pos.y + ((size.y - containerSize.y) / 2)
			});
		} else { // this.options.orientation == 'top'
			this.container.setStyles({
				'left': pos.x + Math.round((size.x - containerSize.x) / 2),
				'top': pos.y - containerSize.y
			});
		}
	},
	
	show: function (content, onElement, timeOut) {
		// Insert Element or string
		if (typeOf(content) === 'element') {
			this.content.empty().adopt(content);
		} else {
			this.content.set('html', content);
		}

		if (timeOut > 0) {
			clearTimeout(this.timeout);
			this.timeout = setTimeout(function () {
				this.container.show();
				this.setPosition(onElement);
			}.bind(this), timeOut);
		} else {
			this.container.show();
			this.setPosition(onElement);
		}
		
		return this;
	},
	
	hide: function (delay) {
		clearTimeout(this.timeout);
		
		if (delay > 0) {
			this.timeout = setTimeout(function () {
				this.container.get('tween', {duration: 200}).start('opacity', 0).chain(function () {
					this.element.setStyle('display', 'none');
				});
			}.bind(this), delay || 0);
		}
		
		this.container.setStyle('display', 'none');
		
		return this;
	}

});

var HoverTooltip = new Class({
	
	Implements: [Options, Events],
	
	options: {
		tooltipContent: '',
		delayBeforeOpen: 350,
		delayBeforeClose: 350,
		tooltipHover: true,
		orientation: 'top',
		dismissable: false, // No mouse clicks involved
		attachTo: null // if null, will use triggerEl.getOffsetParent()
	},
	
	triggerEl: null,
	tooltip: null,
	timeout: null,
	toolTipcontent: null,
	_onTooltipMouseenter: null,
	_onTooltipMouseleave: null,

	initialize: function (triggerEl, options) {
		this.setOptions(options);
		
		// Tooltip hover events
		this._onTooltipMouseenter = function (event) {
			clearTimeout(this.timeout);
			event.stop();
		}.bind(this);

		this._onTooltipMouseleave = function (event) {
			this.timeout = setTimeout(function(){
				this.tooltip.hide();
			}.bind(this), this.options.delay);
		}.bind(this);

		this.setContent(this.options.tooltipContent);

		this.triggerEl = triggerEl.addEvents({
			'mouseenter': function () {
				this.tooltip = (this.tooltip || new Tooltip(this.options.attachTo || triggerEl.getOffsetParent(), this.options))
					.show(this.toolTipcontent, triggerEl, this.options.delayBeforeOpen);
				
				clearTimeout(this.timeout);

				if (this.options.tooltipHover) {
					this.tooltip.container.addEvents({
						mouseenter: this._onTooltipMouseenter,
						mouseleave: this._onTooltipMouseleave
					});
				}

			}.bind(this),
			'mouseleave': function (event) {
				event.stop();

				this.timeout = setTimeout(function () {
					this.tooltip.hide();

					if (this.options.tooltipHover) {
						this.tooltip.container.removeEvent('mouseenter', this._onTooltipMouseenter);
						this.tooltip.container.removeEvent('mouseleave', this._onTooltipMouseleave);
					}
					
				}.bind(this), this.options.delay);

			}.bind(this)
		});
		
	},

	setContent: function (content) {
		this.toolTipcontent = content;
	}

});

/**
*	@class Modal
*	@author Dominik Hofmann
*	A basic modal overlay class that can be extended for use across the site.
*/

var Modal = new Class({
	
	Implements: [Events, Options],
	
	options: {
		'id': '',
		'title': '',
		'dismissable': true,
		'overlayOpacity': 0.5,
		'minWidth': 918, // Scroll bars will show up below this width
		'scrollable': false,
		'class': ''
	},
	
	overlay: null,
	container: null,
	content: null,
	
	initialize: function (options) {
		this.setOptions(options);
		
		this.container = new Element('div', {
			'id': this.options.id,
			'class': 'modal ' + this.options['class']
		});
		
		
		this.content = new Element('div', {
			'class': 'content'
		});
		
		if (this.options.title) {
			this.title = new Element('h2', {
				'text': this.options.title
			}).inject(this.content);
		}
		
		if (this.options.dismissable) {
			this.addCloseButton();
		}
			
		this.canvas = new Element('div', {
			'class': 'canvas clearfix'
		}).inject(this.content);
		
		this.onResize = this.setPosition.bind(this);
		
		this.content.inject(this.container);
	},

	addCloseButton: function () {
		this.closeButton = new Element('a', {
			'class': 'close close-modal',
			text: 'Close'
		}).inject(this.content, 'top');
		
		this.content.addEvent('click:relay(.close-modal)', this.close.bind(this));
		
		// Store the function so that it can be detached later
		this._onEsc = function (event) {
			if (event.key == 'esc') {
				this.close();
			}
		}.bind(this);
		document.addEvent('keyup', this._onEsc);
	},
	
	_enableWindowScroll: function () {
		// Only document.html works for IE6/7
		var documentEl = (Browser.ie6 || Browser.ie7) ? document.html : document.body;
		$(documentEl).setStyle('overflow', '');
		return this;
	},
	
	_disableWindowScroll: function () {
		var documentEl = (Browser.ie6 || Browser.ie7) ? document.html : document.body;
		$(documentEl).setStyle('overflow', 'hidden');
		return this;
	},
	
	_showOverlay: function () {
		this.overlay = new Element('div', {
			'id': 'modal-overlay'
		}).set('tween', {
			duration: 250,
			transition: Fx.Transitions.Cubic.easeIn
		}).setStyle('height', window.getScrollSize().y).inject(document.body);
		
		if (this.options.dismissable) {
			this.overlay.addEvent('click', function () {
				this.close();
			}.bind(this));
		}
		
		this.overlay.setStyle('opacity', 0).get('tween').start('opacity', this.options.overlayOpacity);
        this.overlay.fade(this.options.overlayOpacity);
		
		return this;
	},
	
	_hideOverlay: function (disableEvent) {
		this.overlay.get('tween').start('opacity', 0).chain(function () {
			this.overlay.destroy();

			if(!disableEvent){
				this.fireEvent('closeEnd');
			}
		}.bind(this));
		
		return this;
	},
	
	setPosition: function () {

		var contentSize = this.content.getSize();
		var viewportSize = window.getSize();
		var positioning = '';
		var modalYOffset = '';
		var marginTop = '';
		var disablePositionFixed = (Browser.ie6 || Browser.Platform.ios || Browser.Platform.android || Browser.Platform.webos);
		
		// Disable fixed positioning if the modal is not fully visible
		if (disablePositionFixed || contentSize.y > viewportSize.y || viewportSize.x < this.options.minWidth) {
			positioning = 'absolute';
			
			modalYOffset = (viewportSize.y / 2) - (contentSize.y / 2);
			modalYOffset = (modalYOffset > 0) ? modalYOffset : 0;
			modalYOffset += window.getScroll().y;
			
			this._enableWindowScroll();
		} else {
			positioning = 'fixed';
			
			modalYOffset = '50%';
			marginTop = -(contentSize.y / 2);
			
			if(!this.options.scrollable){
				this._disableWindowScroll();	
			}
		}
		
		// Resize overlay
		this.overlay && this.overlay.setStyle('height', window.getScrollSize().y);
		
		// Set dimensions to center the modal
		this.container && this.container.setStyle('width', contentSize.x);
		this.content.setStyles({
			'position': positioning,
			'top': modalYOffset,
			'margin-top': marginTop
		});
		
	},
	
	show: function () {
		window.addEvent('resize:pause', this.onResize);
		
		this._showOverlay();
		
		this.container.inject(document.body);
		this.setPosition();
		
		// Fade in modal
        if (this.options.instantShow) {
            this.container.show();
        } else {
            this.container.setStyle('opacity', 0).set('tween', {
                duration: 250,
                transition: Fx.Transitions.Quint.easeIn
            });
        }

		setTimeout(function () {
			// this.container could be gone if the modal is closed really quickly after
			// it's opened (for IE really)
			this.container && this.container.get('tween').start('opacity', 1).chain(function () {
				this.fireEvent('showEnd');
			}.bind(this));
		}.bind(this), 50);
		
		return this;
	},
	
	close: function (disableEvent) {
		if(!this.options.scrollable){
			this._enableWindowScroll();
		}
		
		// In IE, this.container or its children might contain Fx instances that
		// are still running when destroy() is called. clean() in Element.destroy()
		// somehow messes up whatever the Fx instance is depending on.
		//
		// So yes, this will create memory leaks in IE7 and below
        if (this.container) {
		    this.container.dispose();
		    this.container = null;
        }
		
		this._hideOverlay(disableEvent);
		
		window.removeEvent('resize:pause', this.onResize);
		if (this._onEsc) {
			document.removeEvent('keyup', this._onEsc);
		}

		this.fireEvent('close');
		
		return this;
	}
	
});
/*
 * MonthlyCalendar
 * Depends on MooTools More’s Date
 * 
 * Note: Member functions must run Date.normalize('month') on Date object arguments
 * 
 */
var MonthlyCalendar = new Class({
	
	Implements: [Events, Options],
	
	options: {
		/*
		onDateClick: function () {},
		onSelect: function () {},
		onDeselect: function () {},
		onMonthChange: function () {},
		*/
		monthFormat: '%B',
		currentMonthFormat: '%B',
		reset: false
	},
	
	initialize: function (options) {
		
		// Show current month/year by default
		var currentMonth = new Date().normalize('month');
		this.options = Object.merge({
			activeMonth: currentMonth,
			earliestMonth: currentMonth,
			latestMonth: currentMonth
		}, this.options);
		this.setOptions(options);
		
		this.activeMonth   = this.options.activeMonth.normalize('month');
		this.earliestMonth = this.options.earliestMonth.normalize('month');
		this.latestMonth   = this.options.latestMonth.normalize('month');
		
		this.calendarEl = new Element('div', {
			'class': 'monthly-calendar',
			'unselectable': 'on' // Make calendar elements unselectable for IE and Opera
		}).addEvents({
			'click:relay(td)': function (event, element) {
				element.removeClass('hover');
				this.fireEvent('dateClick', arguments);
			}.bind(this), 
			'click:relay(.controls a)': function (event, element) {

                if (element.hasClass('loading')) {
                    return false;
                }

				if (element.hasClass('prev-month')) {
					this.selectPreviousMonth();
				} else if (element.hasClass('next-month')) {
					this.selectNextMonth();
				}
				
				// Maintain selected date across months
				var selectedDate = this.getSelectedDate();
				if (selectedDate) {
					var selectedEl = this.getElementFromBookingDate(selectedDate);
					if (selectedEl) {
						this.selectDate(selectedEl);
					}
				}

				this.fireEvent('monthChange', this.activeMonth);
				return false;
			}.bind(this),
			'mouseover:relay(td)': function (event, element) {
				this.fireEvent('dateMouseover', arguments);
			}.bind(this),
			'mouseout:relay(td)': function (event, element) {
				this.fireEvent('dateMouseout', arguments);
			}.bind(this)
		});
		
		this.selectedEl = null;

		if(this.options.reset){
			this.resetEl = new Element('div', {
				'class': 'reset-cal',
				html: "<a>Reset dates</a>"
			});	
		}

		this.arrow = new Element('div', {
			'class': 'arrow'
		});	

		this._render();
	},
	
	_createCalendar: function (month /* date object */) {

		var activeMonth = month ? month.getMonth() : this.activeMonth.getMonth();
		var tableBodyEl = new Element('tbody');
		var weeks = this._getWeeks(6, month || this.activeMonth);
		
		weeks.each(function (week) {
			var weekEl = new Element('tr').inject(tableBodyEl);
			week.each(function (day) {
				var dayEl = new Element('td', {
//					'text': day.getDate()
				}).adopt(new Element('div', {
                        'text' : day.getDate()
                    }).addClass('inner').adopt(new Element('div').addClass('line')));
				
				if (day.getMonth() != activeMonth) {
					dayEl.addClass('not-in-month');
				}

                var dow = day.getDay();
                if (dow === 0 || dow == 6) {
                    dayEl.addClass('weekend');
                }

				// Storing the date object associated with the calendar day
				dayEl.store('bookingDate', day);
				
				weekEl.adopt(dayEl);
			});
		});
		
		return new Element('table', {
			'html': '<thead><tr><th>S</th><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th></tr></thead>'
		}).adopt(tableBodyEl);
	},

	_createControls: function () {
		var activeMonth  = this.activeMonth;
		var monthFormat = this.options.monthFormat;
		
		// Controls container element
		var controlsEl = new Element('div', {
			'class': 'controls'
		});

        var renderNextLoading = false,
            renderPreviousLoading = false;

        if (this.monthsAfterLoading) {
            var nextMonth = new Date();
            nextMonth.setTime(activeMonth.getTime());
            nextMonth.setMonth(nextMonth.getMonth() + 1);
            if (nextMonth >= this.monthsAfterLoading) {
                renderNextLoading = true;
            }
        }

        if (this.monthsBeforeLoading) {
            var previousMonth = new Date();
            previousMonth.setTime(activeMonth.getTime());
            previousMonth.setMonth(previousMonth.getMonth() - 1);
            if (previousMonth < this.monthsBeforeLoading) {
                renderPreviousLoading = true;
            }
        }


		// Controls
        if (renderPreviousLoading) {
            var prevMonthLoading = new Element('div', {
                'class' : 'prev-month loading-icon',
                'title' : 'Loading',
                'html'  : ''
            }).inject(controlsEl);
        } else if (activeMonth > this.earliestMonth) {
			var prevMonthEl = new Element('a', {
				'class': 'prev-month action',
				'title': 'Previous month',
				'html' : '< ' + activeMonth.clone().decrement('month').format(monthFormat)
			}).inject(controlsEl);
		}
		
		// Show year only when it's not the current year
		var displayYear = (activeMonth.getFullYear() != new Date().getFullYear()) ? ' ' + activeMonth.getFullYear() : '';
		var current = new Element('span', {
			'class': 'current-month',
			'text': activeMonth.format(this.options.currentMonthFormat) + displayYear
		}).inject(controlsEl);

        if (renderNextLoading) {
            var nextMonthLoading = new Element('div', {
                'class' : 'next-month loading-icon',
                'title' : 'Loading',
                'html'  : ''
            }).inject(controlsEl);
        } else if (activeMonth < this.latestMonth) {
			var nextMonthEl = new Element('a', {
				'class': 'next-month action',
				'title': 'Next month',
				'html' : activeMonth.clone().increment('month').format(monthFormat) + ' >'
			}).inject(controlsEl);
		}
		
		return controlsEl;
	},
	
	_getWeeks: function (rows, month) {
		var rows = rows || 6;
		var numOfDays = rows * 7;
		var activeMonth = (typeof month != 'undefined') ? month : this.activeMonth;
		
		var dayOfWeek = activeMonth.getDay();
		var activeMonthLastDay = activeMonth.getLastDayOfMonth();
		var prevMonthLastDay = activeMonth.clone().decrement('month').getLastDayOfMonth();
		
		var week = [];
		var weeks = [];
		var startIndex = 0;
		
		// If the 1st of the month falls on a Sunday, rewind by a week so that
		// the calendar will begin with a row from the previous month
		if (dayOfWeek === 0) {
			startIndex = -7;
			numOfDays -= 7;
		}
		
		for (var i = startIndex; i < numOfDays; i++) {
			if (i % 7 === 0) {
				week = [];
				weeks.push(week);
			}
			
			var day = (i + 1) - dayOfWeek;
			var calendarDate = activeMonth.clone();
			
			// Previous month
			if (day < 1) {
				calendarDate.decrement('month');
				calendarDate.setDate(day + prevMonthLastDay);
				
			// Next month
			} else if (day > activeMonthLastDay) {
				calendarDate.increment('month');
				calendarDate.setDate(day - activeMonthLastDay);
				
			// Current month
			} else {
				calendarDate.setDate(day);
			}
			
			week.push(calendarDate);
		}
		
		return weeks;
	},
	
	_render: function () {
		var key = this.activeMonth.format('%Y%m');
		var calendarContent = this.calendarEl.retrieve(key);
		
		if (!calendarContent) {
			calendarContent = this._createCalendar(this.activeMonth);
			this.calendarEl.store(key, calendarContent);
		}
		
		this.calendarEl.getChildren().dispose();
		this.calendarEl.adopt(this._createControls(), calendarContent);

		//if this is a resetable calendar inject the reset button
		//NOTE: It is up to the instantiting class to bind events to the button
		if(this.options.reset){
			this.calendarEl.adopt(this.resetEl);
		}
        if (this.options.legend) {
            this.calendarEl.adopt(this.options.legend);
        }
		this.calendarEl.adopt(this.arrow);
	},
	
	dateClick: function () {
		this.toggleSelection();
	},
	
	getActiveMonth: function () {
		return this.activeMonth.clone();
	},
	
	getElementFromBookingDate: function (bookingDate) {
		
		var _getDayEl = function () {
			// dayElements needs to be dynamic because months can change
			var dayElements = this.calendarEl.getElements('td');
			for (var i=0, numOfDays=dayElements.length; i<numOfDays; i++) {
				var dayEl = dayElements[i];
				if (dayEl.retrieve('bookingDate').diff(bookingDate) === 0) {
					return dayEl;
				}
			}
		}.bind(this);
		
		var bookingDateEl = _getDayEl();
		
		// http://jira.jetsetter.com/browse/JETSETTER-2011
		// Support selecting dayEl from non-active months by going to that month
		// and then resetting it.
		var activeMonth = this.getActiveMonth(); // Remember original month
		var bookingDateMonth = bookingDate.clone().normalize('month');
		if (!bookingDateEl && bookingDateMonth.diff(activeMonth, 'month') !== 0) {
			this.selectMonth(bookingDateMonth);
			bookingDateEl = _getDayEl();
			this.selectMonth(activeMonth); // Reset to original active month
		}
		
		return bookingDateEl;
	},
	
	getSelectedDate: function () {
		return this.selectedEl ? this.selectedEl.retrieve('bookingDate').clone() : null;
	},
	
	getSelectedElement: function () {
		return this.selectedEl;
	},
	
	markSelectedDate: function (dayEl) {
		var date = dayEl.retrieve('bookingDate');
		dayEl.addClass('selected'); //.set('html', '<div class="indicator">' + date.get('date') + '</div>');
		
		return dayEl;
	},
	
	unmarkSelectedDate: function (dayEl) {
		var date = dayEl.retrieve('bookingDate');
		dayEl.removeClass('selected'); //.set('html', date.get('date'));
		
		return dayEl;
	},
	
	selectDate: function (dayEl) {
		this.deselectDate();
		this.selectedEl = this.markSelectedDate(dayEl);
	},
	
	deselectDate: function () {
		if (this.selectedEl) {
			this.unmarkSelectedDate(this.selectedEl);
			this.selectedEl = null;
		}
	},
	
	selectMonth: function (selectedMonth) {
		selectedMonth = selectedMonth.normalize('month');
		
		// Range: earliestMonth < selectedMonth < latestMonth
		// @TODO: Fix tripbuilder2 so i can reenable this check
		// if (selectedMonth.diff(this.activeMonth) === 0 || selectedMonth < this.earliestMonth || selectedMonth > this.latestMonth) {
		if (selectedMonth.diff(this.activeMonth) === 0) {
			return false;
		}
		
		this.activeMonth = selectedMonth;
		this._render();
	},
	
	selectPreviousMonth: function () {
		this.selectMonth(this.activeMonth.clone().decrement('month'));
	},
	
	selectNextMonth: function () {
		this.selectMonth(this.activeMonth.clone().increment('month'));
	},
	
	toElement: function () {
		return this.calendarEl;
	},
	
	toggleSelection: function (dayEl) {
		if (!this.selectedEl) {
			this.selectDate(dayEl);
			this.fireEvent('select', [this.getSelectedDate(), this.selectedEl]);
		} else if (dayEl === this.selectedEl) {
			var deselectedEl = this.selectedEl;
			var deselectedDate = this.getSelectedDate();
			
			this.deselectDate();
			this.fireEvent('deselect', [deselectedDate, deselectedEl]);
		} else {
            this.fireEvent('select', [this.getSelectedDate(), this.selectedEl]);
			this.selectDate(dayEl);
		}
	},
	
	updateControls: function (earliestMonth, latestMonth, force) {
		earliestMonth = earliestMonth.clone().normalize('month');
		latestMonth = latestMonth.clone().normalize('month');

		if (force || (earliestMonth != this.earliestMonth) || (latestMonth != this.latestMonth)) {
			this.earliestMonth = earliestMonth;
			this.latestMonth = latestMonth;
			
			var newControls = this._createControls();
            if (newControls) {
                newControls.replaces(this.calendarEl.getElement('.controls'));
            }
        }
	},

    setMonthsBeforeLoading: function(month) {
        this.monthsBeforeLoading = month;
    },

    setMonthsAfterLoading: function(month) {
        this.monthsAfterLoading = month;
    }
	
});

/*
 * MonthlyCalendar
 * Depends on MooTools More’s Date
 * 
 * Note: Member functions must run Date.normalize('month') on Date object arguments
 * 
 */
var TwoPaneMonthlyCalendar = new Class({

    Extends: MonthlyCalendar,
	
	options: {
		/*
		onDateClick: function () {},
		onSelect: function () {},
		onDeselect: function () {},
		onMonthChange: function () {},
		*/
		monthFormat: '%B',
		currentMonthFormat: '%B',
		reset: false
	},
	
	initialize: function (options) {
        this.parent(options);
        this.calendarEl.addClass('two-pane');
	},
	
	_createCalendar: function () {
        var activeMonth = this.activeMonth;
        var nextMonth = this.activeMonth.clone().increment('month', 1).normalize('month');

        var activeMonthCalendar = new Element('div').addClass('first-calendar').adopt(this._createMonthControl(activeMonth, true), this.parent(activeMonth));
        var nextMonthCalendar = new Element('div').addClass('next-calendar').adopt(this._createMonthControl(nextMonth, false), this.parent(nextMonth));

        var container = new Element('div').addClass('clearfix').adopt(activeMonthCalendar, nextMonthCalendar);
        return container;
	},

    _createMonthControl: function(month /* date object */, isFirst) {
        var activeMonth  = month;
        var monthFormat = this.options.monthFormat;

        // Controls container element
        var controlsEl = new Element('div', {
            'class': 'controls'
        });

        var renderNextLoading = false,
            renderPreviousLoading = false;

        if (this.monthsAfterLoading) {
            var nextMonth = new Date();
            nextMonth.setTime(activeMonth.getTime());
            nextMonth.setMonth(nextMonth.getMonth() + 1);
            if (nextMonth >= this.monthsAfterLoading) {
                renderNextLoading = true;
            }
        }

        if (this.monthsBeforeLoading) {
            var previousMonth = new Date();
            previousMonth.setTime(activeMonth.getTime());
            previousMonth.setMonth(previousMonth.getMonth() - 1);
            if (previousMonth < this.monthsBeforeLoading) {
                renderPreviousLoading = true;
            }
        }

        if (isFirst) {
            // Controls
            if (renderPreviousLoading) {
                var prevMonthLoading = new Element('div', {
                    'class' : 'prev-month loading-icon',
                    'title' : 'Loading',
                    'html'  : ''
                }).inject(controlsEl);
            } else if (activeMonth > this.earliestMonth) {
                var prevMonthEl = new Element('a', {
                    'class': 'prev-month action',
                    'title': 'Previous month',
                    'html' : '<span> &#10094;</span>'
                }).inject(controlsEl);
            }
        }

        // Show year only when it's not the current year
        var displayYear = (activeMonth.getFullYear() != new Date().getFullYear()) ? ' ' + activeMonth.getFullYear() : '';
        var current = new Element('span', {
            'class': 'current-month',
            'text': activeMonth.format(this.options.currentMonthFormat).toUpperCase() + displayYear
        }).inject(controlsEl);

        if (!isFirst) {
            if (renderNextLoading) {
                var nextMonthLoading = new Element('div', {
                    'class' : 'next-month loading-icon',
                    'title' : 'Loading',
                    'html'  : ''
                }).inject(controlsEl);
            } else if (activeMonth < this.latestMonth) {
                var nextMonthEl = new Element('a', {
                    'class': 'next-month action',
                    'title': 'Next month',
                    'html' : '<span> &#10095;</span>'
                }).inject(controlsEl);
            }
        }

        return controlsEl;
    },


    _createControls: function () {
        return '';
    }
	
});

var CalendarBoundTextfield = new Class({

	Extends: MonthlyCalendar,
	
	options: {
		earliestMonth: new Date(),
		latestMonth: new Date(),
		placeholder: Locale.get('Date.placeholder'),
		dateFormat: Locale.get('Date.shortDate'),
		monthFormat: '%B'
	},
	
	initialize: function (textFieldEl, options) {
		this.setOptions(options);
		
		this.textFieldEl = textFieldEl.addClass('calendar-date').set('autocomplete', 'off');
		var selectedDate = this._getDateFromTextField(textFieldEl);

		this.parent({
			activeMonth: (selectedDate && selectedDate.clone()) || new Date(),
			earliestMonth: this.options.earliestMonth,
			latestMonth: this.options.latestMonth,
			monthFormat: this.options.monthFormat
		});

		if(this.options.altClass){
			this.calendarEl.addClass(this.options.altClass);
		}
		
		this.addEvents({
			dateClick: function (event, element) {
				if (this.isDateSelectable(element)) {
					this.selectDate(element);
					this.fireEvent('select', [this.getSelectedDate(), element]);
					
					var dateString = this.getSelectedDate().format(this.options.dateFormat);
					this.textFieldEl.set('value', dateString).removeClass('placeholder');
					
					this.hideCalendar();
				}
			}.bind(this),
			'dateMouseover': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.addClass('hover');
				}
			}.bind(this),
			'dateMouseout': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.removeClass('hover');
				}
			}.bind(this)
		});
		
		this.textFieldEl.getParent().adopt($(this).addClass('popup-calendar'));
		
		if (selectedDate) {
			this.selectDate(this.getElementFromBookingDate(selectedDate));
		}
		
		
		setTimeout(function () {
			// @TODO: Is there a way to define this using options.dateFormat?
			this.textFieldEl.setPlaceholder(this.options.placeholder);
		}.bind(this), 0); // Firefox needs this delay
		
		
		// Store a reference to onBlur so that it can be selectively removed
		this.textFieldEl.store('onBlur', this.hideCalendar.bind(this));
		
		this.textFieldEl.addEvents({
			'focus': function () {
				this.showCalendar();

				var offset = this.textFieldEl.getOffsetFromViewportBottom(),
					calHeight = this.calendarEl.getSize().y;

				if(offset < calHeight){
					this.calendarEl.addClass('popup-calendar-above');
				}
				else{
					this.calendarEl.removeClass('popup-calendar-above');
				}


				this.textFieldEl.select();
			}.bind(this),
			'blur': this.textFieldEl.retrieve('onBlur'),
			'keydown': function (event) {
				switch (event.key) {
					case 'delete':
					case 'backspace':
						// Clear dates if hitting delete or backspace keys
						this.reset();
                        event.preventDefault();
						break;
					
					case 'tab':
					case 'esc':
					case 'enter':
						// Don't fall through
						break;
						
					default:
						if (!event.control && !event.alt && !event.meta) {
							event.preventDefault();
						}
				}
			}.bind(this)
		});
		
		
		// Hide calendar when clicking on anything other than the calendar
		document.addEvent('mousedown', function (event) {
			var element = $(event.target);
			//we check for element in the IF statement because older IE's do not return an element for some events
			if (element && $(this) === element.getParent('.monthly-calendar') || this.textFieldEl === element) {
				// Temporarily prevent the calendar from hiding
				this._removeBlurEvent();
			} else {
				this.hideCalendar();
			}
		}.bind(this));
		
	},
	
	_getDateFromTextField: function (textFieldEl) {
		var dateString = textFieldEl.get('value');
		if (dateString) {
			//format is chosen by Locale
			var dateFields = dateString.split('/');
			var isDateFieldValid = dateFields.every(function (field) {
				return !!field.toInt();
			});
			
			if (!isDateFieldValid) {
				return null;
			}
			
			return new Date().parse(dateString);
		}
		
		return null;
	},
	
	_addBlurEvent: function () {
		this.textFieldEl.addEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	_removeBlurEvent: function () {
		this.textFieldEl.removeEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	isDateSelectable: function (dayEl) {
		return ((dayEl.hasClass('available') || dayEl.hasClass('standby')) && !dayEl.hasClass('selected'));
	},
	
	showCalendar: function () {
		// @TODO: revert to month of the currently selected date, if available, or revert to the current month
		$(this).show();
		this.fireEvent('calendarOpen');
	},
	
	hideCalendar: function () {
		// Reset the blur event that hides the calendar
		this._addBlurEvent()._removeBlurEvent();
		
		$(this).hide();
		this.fireEvent('calendarClose');
	},

	reset: function (){
		this.deselectDate();
		this.fireEvent('deselect');
		this.textFieldEl.set('value', '');

        if (Jetsetter.persistentDates) {
            Jetsetter.persistentDates.clearPersistedDates();
        }
	}
	
});

var TwoPaneCalendarBoundTextfield = new Class({

	Extends: TwoPaneMonthlyCalendar,
	
	options: {
		earliestMonth: new Date(),
		latestMonth: new Date(),
		placeholder: Locale.get('Date.placeholder'),
		dateFormat: Locale.get('Date.shortDate'),
		monthFormat: '%B'
	},
	
	initialize: function (textFieldEl, options) {
		this.setOptions(options);
		
		this.textFieldEl = textFieldEl.addClass('calendar-date').set('autocomplete', 'off');
		var selectedDate = this._getDateFromTextField(textFieldEl);
		
		if(this.options.altClass){
			var monthFormat = '%B';
		}
		else{
			var monthFormat = '%b';
		}

		this.parent({
			activeMonth: (selectedDate && selectedDate.clone()) || new Date(),
			earliestMonth: this.options.earliestMonth,
			latestMonth: this.options.latestMonth,
			monthFormat: monthFormat
		});

		if(this.options.altClass){
			this.calendarEl.addClass(this.options.altClass);
		}
		
		this.addEvents({
			dateClick: function (event, element) {
				if (this.isDateSelectable(element)) {
					this.selectDate(element);
					this.fireEvent('select', [this.getSelectedDate(), element]);
					
					var dateString = this.getSelectedDate().format(this.options.dateFormat);
					this.textFieldEl.set('value', dateString).removeClass('placeholder');
					
					this.hideCalendar();
				}
			}.bind(this),
			'dateMouseover': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.addClass('hover');
				}
			}.bind(this),
			'dateMouseout': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.removeClass('hover');
				}
			}.bind(this)
		});
		
		this.textFieldEl.getParent().adopt($(this).addClass('popup-calendar'));
		
		if (selectedDate) {
			this.selectDate(this.getElementFromBookingDate(selectedDate));
		}
		
		
		setTimeout(function () {
			// @TODO: Is there a way to define this using options.dateFormat?
			this.textFieldEl.setPlaceholder(this.options.placeholder);
		}.bind(this), 0); // Firefox needs this delay
		
		
		// Store a reference to onBlur so that it can be selectively removed
		this.textFieldEl.store('onBlur', this.hideCalendar.bind(this));
		
		this.textFieldEl.addEvents({
			'focus': function () {
				this.showCalendar();

				var offset = this.textFieldEl.getOffsetFromViewportBottom(),
					calHeight = this.calendarEl.getSize().y;

				if(offset < calHeight){
					this.calendarEl.addClass('popup-calendar-above');
				}
				else{
					this.calendarEl.removeClass('popup-calendar-above');
				}


				this.textFieldEl.select();
			}.bind(this),
			'blur': this.textFieldEl.retrieve('onBlur'),
			'keydown': function (event) {
				switch (event.key) {
					case 'delete':
					case 'backspace':
						// Clear dates if hitting delete or backspace keys
						this.reset();
                        event.preventDefault();
						break;
					
					case 'tab':
					case 'esc':
					case 'enter':
						// Don't fall through
						break;
						
					default:
						if (!event.control && !event.alt && !event.meta) {
							event.preventDefault();
						}
				}
			}.bind(this)
		});
		
		
		// Hide calendar when clicking on anything other than the calendar
		document.addEvent('mousedown', function (event) {
			var element = $(event.target);
			//we check for element in the IF statement because older IE's do not return an element for some events
			if (element && $(this) === element.getParent('.monthly-calendar') || this.textFieldEl === element) {
				// Temporarily prevent the calendar from hiding
				this._removeBlurEvent();
			} else {
				this.hideCalendar();
			}
		}.bind(this));
		
	},
	
	_getDateFromTextField: function (textFieldEl) {
		var dateString = textFieldEl.get('value');
		if (dateString) {
			//format is chosen by Locale
			var dateFields = dateString.split('/');
			var isDateFieldValid = dateFields.every(function (field) {
				return !!field.toInt();
			});
			
			if (!isDateFieldValid) {
				return null;
			}
			
			return new Date().parse(dateString);
		}
		
		return null;
	},
	
	_addBlurEvent: function () {
		this.textFieldEl.addEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	_removeBlurEvent: function () {
		this.textFieldEl.removeEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	isDateSelectable: function (dayEl) {
		return ((dayEl.hasClass('available') || dayEl.hasClass('standby')) && !dayEl.hasClass('selected'));
	},
	
	showCalendar: function () {
		// @TODO: revert to month of the currently selected date, if available, or revert to the current month
		$(this).show();
		this.fireEvent('calendarOpen');
	},
	
	hideCalendar: function () {
		// Reset the blur event that hides the calendar
		this._addBlurEvent()._removeBlurEvent();
		
		$(this).hide();
		this.fireEvent('calendarClose');
	},

	reset: function (){
		this.deselectDate();
		this.fireEvent('deselect');
		this.textFieldEl.set('value', '');

        if (Jetsetter.persistentDates) {
            Jetsetter.persistentDates.clearPersistedDates();
        }
	}
	
});

var Autocomplete = new Class({
	
	Implements: [Options, Events],
	
	options: {
		/*
		onSelectionMade: function () {}
		*/
		startSearchingAtCharNum: 3,
		asyncRequest: null,
		theme: 'light', // light/dark
		numOfResults: 12
	},
	
	initialize: function (textFieldEl, options) {

		this.setOptions(options);
		
		this.textFieldEl = $(textFieldEl).setPlaceholder().setProperty('autocomplete', 'off');
		this.resultsListEl = new Element('ul', {
			'class': 'autocomplete-dropdown autocomplete-' + this.options.theme
		}).inject(this.textFieldEl, 'after');
		
		// Extending MooTools for "input" event
		Element.NativeEvents.input = 2;
		Element.Events.input = {
			base: 'input',
			condition: function (e) {
				this.fireEvent('input', e, 1);
				return false;
			}
		};

        this._setupOnBlur();
		
		// Make new data request only if input is changed
		this.textFieldEl.addEvents({
			'input:pause(100)': function (event) {
				if (this.getSearchQuery().length < this.options.startSearchingAtCharNum) {
					this.hideResults();
				} else {
					this.getResults();
				}
				
			}.bind(this),
			'blur': this.textFieldEl.retrieve('onBlur'),
			'focus': function (event) {
				this.hasFocus = true;
			}.bind(this)
		});
		
		
		// Handle browser differences with holding down arrow keys
		var keyEventName = '';
		if (Browser.firefox) {
			keyEventName = 'keypress';
		} else {
			keyEventName = 'keydown';
		}
		this.textFieldEl.addEvent(keyEventName, function (event) {

			switch (event.key) {
				case 'up':
				case 'down':
					if (this.resultsListEl.getChildren().length < 1) {
						this.getResults();
						break;
					} else {
						this.showResults();
					}
					
					var previouslySelectedEl = this.getHighlightedResult();
					var selectedEl = null;
					
					if (event.key == 'up') {
						selectedEl = previouslySelectedEl && previouslySelectedEl.getPrevious() || this.resultsListEl.getLast();
					} else {
						selectedEl = previouslySelectedEl && previouslySelectedEl.getNext() || this.resultsListEl.getFirst();
					}
					
					this.highlightResult(selectedEl);
					
					break;

                case 'tab':
                    this._onTab(event);
                    break;

				case 'enter':
                    this._onEnter(event);
					break;
				
				case 'esc':
					this.hideResults();
					break;

                default:
                    if (event.key != '') {
                        this._onTextKey(event);
                    }
                    break;
			}
		}.bind(this));
		
		
		// For IE (and potentially other browsers that don't support onInput), fire the
		// 'input' event manually to trigger autocomplete
		// @TODO: Check for onInput support instead of browser detection:
		//        http://perfectionkills.com/detecting-event-support-without-browser-sniffing/ 
		if (Browser.ie) {
			this.textFieldEl.addEvent('keyup', function (event) {
				switch (event.key) {
					case 'up':
					case 'down':
					case 'enter':
					case 'esc':
						return false;
					default:
						this.textFieldEl.fireEvent('input');
				}
			}.bind(this));
		}

		this.formEl = this.textFieldEl.getParent('form').addEvent('submit', function (event) {
            return this._onSubmit(event);
		}.bind(this));
		
		
		this.resultsListEl.addEvents({
			// Prevent the dropdown from hiding when clicking on the results,
			// while preserving the ability to hide the dropdown on blur and on
			// form submit
			'mouseenter': function () {
				this._removeBlurEvent();
			}.bind(this),
			'mouseleave': function () {
				this._addBlurEvent();
			}.bind(this),
			
			'click:relay(li)': function (event, element) {
				this.selectResult(element);
                this.fireEvent('resultClicked', [element]);
            }.bind(this),
			'click:relay(li a)': function (event) {
				event.preventDefault();
			}
		});
		
		this.hideResults();
		
	},

    _setupOnBlur: function() {
        // Store a reference to a onBlur.bind(this) so that I can remove it selectively
        this.textFieldEl.store('onBlur', function () {
            this.hasFocus = false;
            this.hideResults();
        }.bind(this));
    },

    _onSubmit: function(event) {
        // Prevent empty form submits
        if (this.getSearchQuery().trim() === '') {
            return false;
        }

        // Blur to hide the dropdown
        this._resetTextField();
        this.textFieldEl.blur();

        this.fireEvent('submit', event);
    },

    _onTab: function(event) {
        return true; // default no-op
    },

    _onEnter: function(event) {
        var highlightedResult = this.getHighlightedResult();
        if (highlightedResult) {
            event.preventDefault();
            this.selectResult(highlightedResult);
        }
    },

    _onTextKey: function(event) {
        return true; // default no-op
    },

	_resetTextField: function () {
		this.textFieldEl.removeClass('autocomplete-loading');
		this._removeBlurEvent()._addBlurEvent();
	},
	
	_addBlurEvent: function () {
		this.textFieldEl.addEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	_removeBlurEvent: function () {
		this.textFieldEl.removeEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	selectResult: function (element) {
		this.hideResults();
		this.fireEvent('selectionMade', element);
		this.textFieldEl.focus();
	},

    getResultElements: function() {
        return this.resultsListEl.getElements('li');
    },

    getFirstResult: function() {
        var lis = this.resultsListEl.getElements('li');
        return lis && lis[0];
    },
	
	getSearchQuery: function () {
		return this.textFieldEl.get('value');
	},
	
	getResults: function () {
		var query = this.getSearchQuery();
		if (!query.trim()) {
			return this;
		}
		
		this.textFieldEl.addClass('autocomplete-loading');
		
		
		if (this.options.asyncRequest) {
			// Use stored response if available
			var query = this.getSearchQuery();
			var cachedData = this.resultsListEl.retrieve(query);
			if (cachedData) {
				this.processData(cachedData, true);
			} else {
				// Cancel any existing requests before making a new one
				if (this.req) {
					this.req.cancel();
				}
				
				this.options.asyncRequest.call(this);
			}
		}
		
		return this;
	},
	
	processData: function (data, noCache) {

        if (!data) {
            return;
        }

		if (!noCache) {
			this.resultsListEl.store(this.getSearchQuery(), data);
		}
		
		this.buildResults(data);
		
		if (data.length > 0) {
			this.showResults();
		} else {
			this.hideResults();
		}
	},
	
	createResultEl: function (data) {
		return new Element('li', {
			'html': data
		});
	},
	
	buildResults: function (data) {
		this.resultsListEl.empty();
		
		if (data.length > this.options.numOfResults) {
			data = data.slice(0, this.options.numOfResults);
		}
		
		data.each(function (resultData) {
			this.resultsListEl.adopt(this.createResultEl(resultData));
		}, this);
		
		return this;
	},
	
	showResults: function () {
		// Only show the dropdown if the textfield is in focus
		if (!this.hasFocus) {
			return this;
		}

//		if (this.overlayShim) {
//			this.overlayShim.show();
//		}

		//TODO: Temp ASW Fix, Make PUBSUB global
		if(window.Jetsetter){
			EventService.publish('/autocomplete/open');
		}
		
		// If the mouse pointer is at where the autocomplete results is going to
		// show up, we don't want to highlight anything so that hitting "enter"
		// will not unintentionally go to the higlighted item.
		//
		// We do this by attaching the results mouseover event handler only if the
		// mouse starts to move.
		this.resultsListEl.addEvent('mousemove:relay(li)', function (e, elem) {
			this.resultsListEl.removeEvents('mousemove');

			// highlight the result we moved onto since mouseover wont be called on it
			this.highlightResult(elem);
			
			this.resultsListEl.addEvent('mouseover:relay(li)', function (event, element) {
				this.highlightResult(element);
			}.bind(this));
		}.bind(this)).show();

		var bottomOffset = this.textFieldEl.getOffsetFromViewportBottom(),
			topOffset = this.textFieldEl.getOffsetFromViewportTop(),
			listHeight = this.resultsListEl.getSize().y;

		if(bottomOffset < listHeight && topOffset >= listHeight){
			this.resultsListEl.setStyle('top', -listHeight + 'px');
		}
		else{
			this.resultsListEl.erase('style');
		}

		this._resetTextField();
        this.resultsShown = true;
	},
	
	hideResults: function () {
		if (this.overlayShim) {
			this.overlayShim.hide();
		}

		//TODO: Temp ASW Fix, Make PUBSUB global
		if(window.Jetsetter){
			EventService.publish('/autocomplete/closed');
		}

		this.resultsListEl.hide().removeEvents('mousemove');
		this._resetTextField();
        this.resultsShown = false;
	},
	
	highlightResult: function (resultEl) {
		if (!resultEl) {
			return this;
		}
		
		this.unhighlightResult();
		resultEl.addClass('selected');

		return this;
	},

	unhighlightResult: function () {
		var highlightedEl = this.getHighlightedResult();
		if (highlightedEl) {
			highlightedEl.removeClass('selected');
		}

		return this;
	},

	getHighlightedResult: function (results) {
		// Assume nothing is selected if the dropdown isn't active
		if (!this.resultsListEl.isDisplayed()) {
			return null;
		}
		
		return this.resultsListEl.getElement('.selected');
	},
	
	truncate: function (str, maxLength) {
		var matches = str.match(/<b>.*?<\/b>/g);
		var numOfMatches = (matches && matches.length) || 0;
		
		// 7 for the number of chars in "<b></b>"
		maxLength = (maxLength + numOfMatches * 7) || 0;
		
		// Return simple truncation if shorter 
		if (str.length <= maxLength || numOfMatches < 1) {
			return str.truncate(maxLength);
		}
		
		// If the string is just one char shorter than the max, no need to truncate
		// since the ellipsis will take up the same or more space
		if (str.length - maxLength == 1) {
			return str;
		}
		
		// Walk the string from the end
		var numOfRemovedTags = 0;
		while (str.length != maxLength) {
			if (str.length > 3 && str.lastIndexOf('</b>') == str.length - 4) {
				maxLength -= 4;
				str = str.slice(0, -4);
				numOfRemovedTags++;
			} else if (str.length > 2 && str.lastIndexOf('<b>') == str.length - 3) {
				maxLength -= 3;
				str = str.slice(0, -3);
				numOfRemovedTags++;
			} else {
				str = str.slice(0, -1);
			}
		}
		
		// See if we need to remove an open tag or append a closing tag
		if (str.length > 2 && str.lastIndexOf('<b>') == str.length - 3) {
			str = str.slice(0, -3);
		} else if (numOfRemovedTags % 2 !== 0) {
			str += '</b>';
		}
		
		return str + '…';
	}
	
});

/**
 * @class LazyImageLoader
 * @author Marvin Tam
 * 
 * The img tag needs to look like this:
 * <img src="/static/image/layout/blank.png" data-src="[actual src]" width="[actual width]" height="[actual height]">
 *
**/

var LazyImageLoader = new Class({
	
	Implements: [Events, Options],
	
	options: {
		scrollThrottle: 200,

		// How many pixels below the viewport to start loading?
		// (The higher the number, the sooner it loads before it gets scrolled
		// into view)
		buffer: 0 
	},

	// The set of images to be lazy-loaded
	elements: [],
	
	initialize: function (elements, options) {
		this.elements = elements;
		this.setOptions(options);
		
		// No lazy loading for iOS
		if (navigator.userAgent.test(/iPhone|iPod|iPad|Android/g)) {
			this.elements.each(function (el) {
                this._loadImage(el);
			}, this);
			return false;
		}
		
		// Cache window height
		this.windowHeight = window.getSize().y;

		// Save references to the event handlers to we can remove it later
		this._onScroll = this._triggerLoad.bind(this);
		window.addEvent('scroll:throttle(' + this.options.scrollThrottle + ')', this._onScroll);

		this._onResize = function () {
			this.windowHeight = window.getSize().y;
			this._triggerLoad();
		}.bind(this);
		window.addEvent('resize:pause(200)', this._onResize);

		this._loadImages();
	},

	_triggerLoad: function () {
		// http://jira.jetsetter.com/browse/JETSETTER-5253
		// Can't figure out why this happens in IE, but the try-catch masks the
		// issue
		//
		try {
			this._loadImages();
		} catch (e) {}

		if (this.elements.length === 0) {
			window.removeEvent('scroll:throttle(' + this.options.scrollThrottle + ')', this._onScroll);
			window.removeEvent('resize:pause(200)', this._onResize);
		}
	},

    _loadImage: function(el) {
        if (el.get('src')) { return; /* skip images that already have a src attribute */ }
        var path = el.get('data-path');
        var width = parseInt(el.get('width'), 10);
        var height = parseInt(el.get('height'), 10);
        if (path) {
            el.set('src', Jetsetter.CDN_HOST + "/static/" + Jetsetter.JetsetUtil.getDynamicCropUrl(path, width, height, Jetsetter.devicePixelRatio));
        } else if (el.get('data-src')) {
            el.set('src', el.get('data-src'));
        }
    },

	_loadImages: function () {
		var scrollPositionY = window.getScroll().y
		var topThreshold = scrollPositionY - this.options.buffer;
		var bottomThreshold = scrollPositionY + this.options.buffer + this.windowHeight;
		
		// Don't run the loop when scrolling around images that have already been loaded
		if (this.elements.length && 
				(this.elements[0].getPosition().y > bottomThreshold ||
				this.elements[this.elements.length - 1].getPosition().y < topThreshold)) {
			return false;
		}
		
		this.elements = this.elements.filter(function (el) {
			var yPosition = el.getPosition().y;
			if (yPosition < bottomThreshold && yPosition >= topThreshold) {
				setTimeout(function () {
                    this._loadImage(el);
                }.bind(this), 0);
				
				// Remove image from queue after loading
				return false;
			} else {
				return true;
			}
		}, this);
	}
	
});

var AJAXButton = new Class({

	initialize: function (label, progressMessage) {
		
		var scope = this;
		
		// TODO: Move this to an event-based model.
		this.clickCallback = function () {};
		this.label = label;
		this.progressMessage = progressMessage;
		this.valid = true;
		
		this.element = new Element('a', {href: '#', text: this.label});
		
		this.element.addEvent('click', function () {
			
			if (scope.valid == true) {
				scope.invalidate();
				scope.clickCallback();
			}
			
			return false;
			
		});
		
	},
	
	toElement: function () {
	
		return this.element;
		
	},
	
	invalidate: function () {
		
		this.valid = false;
		this.element.setStyle('cursor', 'wait');
		if (this.progressMessage != undefined) {
			this.element.set('text', this.progressMessage);
		}
		
		/* TODO: Move away from different classes for different browsers */
		if (!Browser.ie) {
			this.element.addClass('invalid');
		} else {
			this.element.addClass('invalidButton');
		}
		
		
	},
	
	validate: function () {
		
		this.valid = true;
		this.element.setStyle('cursor', 'auto');
		this.element.set('text', this.label);
		
		/* TODO: Move away from different classes for different browsers */
		this.element.removeClass('invalidButton');
		this.element.removeClass('invalid');
		
	}
	
});
var AddFavorite = new Class ({

	Implements: [Options, Events],

	options: {
		reload: false
	},

	initialize: function (rootEl, options) {
		this.setOptions(options);
		this.rootEl = rootEl;
		this.property = this.rootEl.get('data-property');
		this.showTooltip = true;
		this.textEl = this.rootEl.getElement('.text') || this.rootEl;

        this.favoritesService = (options && options.favoritesService) || new FavoritesService();

		this._toDefaultState();

		if (Cookie.read('j_cli') && JSON.decode(Base64.decode(Cookie.read('j_cli')))) {
			var customListIds = JSON.decode(Base64.decode(Cookie.read('j_cli')));
			if (customListIds && customListIds.propertyId && _.indexOf(customListIds.propertyId, parseInt(this.property)) != -1) {
				this._toAddedState();
			}
		}

		var self = this;

		self.rootEl.addEvent('click', function() {
			self.toggleFav();
		});

	},

	_toDefaultState: function () {
		this.rootEl.removeClass('add-to-favs-added');
		this.textEl.set('html', '<span class="icon icon-favs"></span>' + Locale.get('Copy.pdp-add-to-favorites'));
		return this;
	},

	_toAddedState: function () {
		this.rootEl.addClass('add-to-favs-added');
		this.textEl.set('html', '<span class="icon icon-favs"></span>' + Locale.get('Copy.pdp-favorite'));
		return this;
	},

	addFav: function () {
		Jetsetter.secureLogin({
			dismissOnLogin: true,
            access: 'secure',
            forceScreen: 'SecureLogin',
			onCloseEnd: function () {
				
 			},
 			onLogin: function () {
                this.favoritesService.add({
                    guid : Jetsetter.user.guid,
                    id   : this.property,
                    onSuccess: function(data) {
                        this.rootEl.set('data-favorite-id', data.id);
                        this._toAddedState();
                        try {
                            var cookieValue = this._getCookieValue();
							Cookie.write('j_cli', Base64.encode(JSON.encode({
                                show        : (cookieValue.show || 0) + 1,
                                propertyId  : (cookieValue.propertyId || []).concat([data.product.id])
                            })), {
								domain: Jetsetter.cookieDomain,
								path: '/',
								duration: 365
							});
                        } catch (e) {

                        }

                        if (this.options.reload) {
                            window.location.reload();
                        } else {
                            Jetsetter.NotificationCenter.success({
                                message: 'Property added to favorites.'
                            });
                        }
                    }.bind(this),
                    onFailure: function() {
                        Jetsetter.NotificationCenter.error({
                            message: 'Uh oh, something went wrong.',
                            cta: 'Try Again?',
                            onCtaClick: function(){
                                this.addFav();
                            }.bind(this)
                        });
                    }.bind(this)
                });

				omniture.trackClickWithSiteSection('Add to Favorites click');
				_gaq.push(['_trackEvent', 'Favorites', 'Add', 'Click']);
 			}.bind(this)
		});
	},

	removeFav: function () {

        this.favoritesService['delete']({
            id   : this.rootEl.get('data-favorite-id'),
            guid : Jetsetter.user.guid,
            onSuccess: function(data) {
                var cookieValue = this._getCookieValue();
                Cookie.write('j_cli', Base64.encode(JSON.encode({
                    show       : cookieValue.show ? cookieValue.show - 1 : 0,
                    propertyId : _.filter(cookieValue.propertyId || [], function(i) { return i != data.product.id; })
                })), {
                    domain: Jetsetter.cookieDomain,
                    path: '/',
                    duration: 365
                });

                this._toDefaultState();

                if(this.options.reload){
                    window.location.reload();
                } else {
                    Jetsetter.NotificationCenter.success({
                        message: 'Property removed from favorites.'
                    });
                }
            }.bind(this),
            onFailure: function() {
                Jetsetter.NotificationCenter.error({
                    message: 'Uh oh, something went wrong.',
                    cta: 'Try Again?',
                    onCtaClick: function(){
                        this.removeFav();
                    }.bind(this)
                });
            }.bind(this)
        });

		_gaq.push(['_trackEvent', 'Favorites', 'Remove', 'Click']);
	},

    _getCookieValue: function() {
        if(Cookie.read('j_cli') && typeof (JSON.decode(Base64.decode(Cookie.read('j_cli'))) || {}).show !== 'undefined'){
            return JSON.decode(Base64.decode(Cookie.read('j_cli')));
        }
        else{
            return {};
        }
    },

	getCount: function (){
		if(Cookie.read('j_cli') && typeof (JSON.decode(Base64.decode(Cookie.read('j_cli'))) || {}).show !== 'undefined'){
			return JSON.decode(Base64.decode(Cookie.read('j_cli'))).show;
		}
		else{
			return 0;
		}
	},

	toggleFav: function () {
		var self = this;

		switch(self.rootEl.hasClass('add-to-favs-added')){
			case true:
				self.removeFav();
				break;
			case false:
				self.addFav();
				break;
		}
	}


});
/**
*	@class AddToCalendarTooltip
*	@author tpayne
*	A tool tip for adding to a list of calendars
*/

var AddToCalendarTooltip = new Class({

	instance: null,

	initialize: function () {
		
		var scope = this;
		
		this.MAX_WIDTH = 181;
		
		this.container = new Element('div', {'class': 'tooltip entireCalendarTooltip'}).inject(document.body);
		this.container.addEvent('click', function () {
		
			scope.hide();
			
		});

		this.myFx = new Fx.Tween(this.container, {
		    duration: 200,
		    transition: Fx.Transitions.Elastic.easeOut
		});
		
		this.arrow = new Element('div', {'class': 'arrow'}).inject(this.container);
		this.content = new Element('div', {'class': 'tooltip-content add-to-calendar bottomTooltip'}).inject(this.container);
		
		var addToCalendarTitleDiv = new Element('div', {'class': 'addToCalendarTitle'}).inject(this.content);
			new Element('strong', {'html': 'Add to my calendar'}).inject(addToCalendarTitleDiv);
			
		var addToCalendarFirstRowDiv = new Element('div', {'class': 'addToCalendarFirstRow'}).inject(this.content);
			outlookA = new Element('a', {'href': '#'}).inject(addToCalendarFirstRowDiv);
				new Element('img', {'class':'image', 'src': 'http://cdn.jetsetter.com/static/images/layout/cal_icon_outlook.jpg', 'border': '0'}).inject(outlookA);
			outlookLinkA = new Element('a', {'href': '#', 'class':'link leftcol outlook', 'html': 'Outlook'}).addEvent('click', function() {
				_gaq.push(['_trackEvent', 'Calendar', 'Add-Outlook', 'Click']);
				return true;
			}).inject(addToCalendarFirstRowDiv);
			
			iCalA = new Element('a', {'href': '#'}).inject(addToCalendarFirstRowDiv);
				new Element('img', {'class':'image', 'src': 'http://cdn.jetsetter.com/static/images/layout/cal_icon_ical.jpg', 'border': '0'}).inject(iCalA);
			iCalLinkA = new Element('a', {'href': '#', 'class':'link rightcol ical', 'html': 'iCal'}).addEvent('click', function() {
				_gaq.push(['_trackEvent', 'Calendar', 'Add-iCal', 'Click']);
				return true;
			}).inject(addToCalendarFirstRowDiv);
			
		var addToCalendarSecondRowDiv = new Element('div', {'class': 'addToCalendarSecondRow'}).inject(this.content);
			googleA = new Element('a', {'href': '#', 'target': '_new'}).inject(addToCalendarSecondRowDiv);
				new Element('img', {'class':'image', 'src': 'http://cdn.jetsetter.com/static/images/layout/icons_cals_google.jpg', 'border': '0'}).inject(googleA);
			googleLinkA = new Element('a', {'href': '#', 'target': '_new', 'class':'link leftcol google', 'html': 'Google'}).addEvent('click', function() {
				_gaq.push(['_trackEvent', 'Calendar', 'Add-Google', 'Click']);
				return true;
			}).inject(addToCalendarSecondRowDiv);
			
			yahooA = new Element('a', {'href': '#'}).inject(addToCalendarSecondRowDiv);
				new Element('img', {'class':'image', 'src': 'http://cdn.jetsetter.com/static/images/layout/icons_cals_yahoo.jpg', 'border': '0'}).inject(yahooA);
			yahooLinkA = new Element('a', {'href': '#', 'target': '_new', 'class':'link rightcol yahoo', 'html': 'Yahoo!'}).addEvent('click', function() {
				_gaq.push(['_trackEvent', 'Calendar', 'Add-Yahoo', 'Click']);
				return true;
			}).inject(addToCalendarSecondRowDiv);
		
		this.container.setStyle('display', 'none');

		this.timeout = null;

	},
	
	show: function (element, timeOut) {

		var scope = this;
		
		clearTimeout(this.timeout);

		this.timeout = setTimeout(function () {
			
			scope._show(element);
			
		}, timeOut || 0);
		
	},
	
	_show: function (element) {
		
		var pos = element.getPosition();
		var size = element.getSize();
		
		this.container.set('opacity', 1);
		this.container.setStyle('display', 'block');
		
		// first check is to see if the container is too large
		this.container.setStyle('width', 'auto');
		var containerSize = this.container.getSize();
		
		// set to MAX_WIDTH or let it size itself
		if (containerSize.x >= this.MAX_WIDTH) {
			this.container.setStyle('width', this.MAX_WIDTH + 'px');
			this.container.setStyle('height', '150px');
		} else {
			this.container.setStyle('width', 'auto');
		}
		
		// since our size could be off now, we need to check it again
		containerSize = this.container.getSize();
		
		var x = pos.x + Math.round((size.x - containerSize.x) / 2);
		var y = pos.y + 15;

		this.container.setStyle('left', x + 'px');
		this.container.setStyle('top', y + 'px');
		
		var id = (element.getParent().get('id').replace('id', ''));
		
		outlookA.set('href', $('outlook'+id).get('value'));
		outlookLinkA.set('href', $('outlook'+id).get('value'));
		
		iCalA.set('href', $('iCal'+id).get('value'));
		iCalLinkA.set('href', $('iCal'+id).get('value'));
		
		googleA.set('href', $('google'+id).get('value'));
		googleLinkA.set('href', $('google'+id).get('value'));

		yahooA.set('href', $('yahoo'+id).get('value'));
		yahooLinkA.set('href', $('yahoo'+id).get('value'));
		 		
	},
	
	hide: function (delay) {
		
		var scope = this;
		var delay = delay || 0;
		
		clearTimeout(this.timeout);
		
		this.timeout = setTimeout(function () {
			
			scope.myFx.start('opacity', 0).chain(function () {
				this.element.setStyle('display', 'none');
			});
			
		}, delay);
		
	}

});
var BackToTop = new Class({
	
	Implements: [Events, Options],

	options: {
		showAt: 0,
		winSize: 1120
	},

	initialize: function(options){
		this.setOptions(options);

		this.options.showAt = $(document.body).getScrollSize().y / 2;

		this.button = new Element('a',{
			'id': 'back-to-top'
		}).inject($(document.body));

		this.fx = new Fx.Scroll($(document.body),{
			offset:{
				x: 0,
				y: 0
			}
		});

		this.winSize = $(window).getSize().x;
		this.fadeLock = false;

		if(!Browser.ie){
			this.shouldShow();	
		}
		else{
			this.button.fade('hide');
		}

		window.addEvent('scroll:throttle(100)',function(){
			this.toggle();
		}.bind(this));

		window.addEvent('resize:throttle(100)',function(){
			this.winSize = $(window).getSize().x;
			this.toggle();
		}.bind(this));

		this.button.addEvent('click', function(){
			this.fx.toTop().chain(function(){
				_gaq.push(['_trackEvent', 'Homepage', 'BackToTop', 'Click']);
				this.shouldShow();
			}.bind(this));
		}.bind(this));
	},

	shouldShow: function(){
		var curPos = window.getScroll().y;

		if(this.winSize > this.options.winSize && curPos > this.options.showAt){
			return true;
		}
		else{
			return false;
		}
	},
	//terrible function name i know, rename as you wish
	toggle: function(){
		if(this.shouldShow()){
			if(!this.fadeLock){
				this.fadeLock = true;
				this.button.fade('in');
				setTimeout(function(){
					this.fadeLock = false;
				}.bind(this),300);
			}
		}
		else{
			if(!this.fadeLock){
				this.fadeLock = true;
				this.button.fade('out');
				setTimeout(function(){
					this.fadeLock = false;
				}.bind(this),300);
			}
		}
	}


});
/**
*	@class BaseForm
*	@author Marvin Tam
*   
*	The base class for forms that prevent dupe submissions.
*	
*   Depends on this.formEl, this.submitButtonEl and this.submitForm()
*   @TODO: Explicitly passing in these as params might be a better idea
*/

var BaseForm = new Class({
	
	Implements: [Events, Options],
	
	enableForm: function () {
		this.bindSubmitFunction();
		this.submitButtonEl.set('disabled', false);
		this.submitButtonEl.removeClass('disabled');
		
		this.fireEvent('formEnable');
	},
	
	disableForm: function () {
		this.formEl.removeEvents('submit').addEvent('submit', function (event) {
			event.stop();
		});
		this.submitButtonEl.set('disabled', true);
		
		this.fireEvent('formDisable');
	},
	
	bindSubmitFunction: function () {
		// Remove form submit action to prevent double form submissions, reenable 
		// the form if returned from errors.
		//
		// To reenable the form from within async callbacks, enableForm() needs
		// to be manually invoked.
		this.formEl.removeEvents('submit').addEvent('submit', function (event) {
			event.stop();
			this.disableForm();
			
			if (this.submitForm() === false) {
				this.enableForm();
			}
		}.bind(this));
	}
	
});

/**
 * Deprecated. Use PropertyDateCalendars instead when building new features.
 * @type {Class}
 */
var BookingDatesSelector = new Class({
	
	Implements: [Options, Events],
	
	options: {
		placeholder: Locale.get('Date.placeholder'),
		dateFormat: Locale.get('Date.shortDate'),
        checkinLegend : null,
        checkoutLegend : null,
        allowReset : true
	},
	
	initialize: function (checkInEl, checkOutEl, options) {

		this.setOptions(options);

        this.checkInEl = checkInEl;
        this.checkOutEl = checkOutEl;

		if(typeof this.options.placeholder === 'object'){
			this.options.checkinPlaceholder = this.options.placeholder.checkin;
			this.options.checkoutPlaceholder = this.options.placeholder.checkout;
		}
		else{
			this.options.checkinPlaceholder = this.options.placeholder;
			this.options.checkoutPlaceholder = this.options.placeholder;
		}

		//create fake elems so that we can show whatever date format we want
		checkInEl.set('name', '');
		checkOutEl.set('name', '');

		this.realCheckInEl = new Element('input', {
			type: 'hidden',
			name: 'checkin'
		}).inject(checkInEl, 'after');

		this.realCheckOutEl = new Element('input', {
			type: 'hidden',
			name: 'checkout'
		}).inject(checkOutEl, 'after');

		var currentDate = new Date().normalize('day');
		var inventoryCutOffDays = 0;

		this.earliestCheckInDate = currentDate.clone().increment('day', inventoryCutOffDays);
		this.latestCheckInDate = currentDate.clone().increment('year', 1);

        var calendarClass = CalendarBoundTextfield;
        if (this.options.twoPane) {
            calendarClass = TwoPaneCalendarBoundTextfield;
        }

		this.checkInCalendar = new calendarClass(checkInEl, {
			earliestMonth: this.earliestCheckInDate.clone(),
			latestMonth: this.latestCheckInDate.clone(),
			placeholder: this.options.checkinPlaceholder,
			dateFormat: this.options.dateFormat,
            monthFormat: this.options.monthFormat,
            legend: this.options.checkinLegend,
			reset: this.options.allowReset,
			altClass: this.options.altClass
		});

		this.earliestCheckOutDate = currentDate.clone().increment('day', inventoryCutOffDays + 1);
		this.latestCheckOutDate = currentDate.clone().increment('year', 1).increment('day', 1);
		this.checkOutCalendar = new calendarClass(checkOutEl, {
			earliestMonth: this.earliestCheckOutDate.clone(),
			latestMonth: this.latestCheckOutDate.clone(),
			placeholder: this.options.checkoutPlaceholder,
			dateFormat: this.options.dateFormat,
            monthFormat: this.options.monthFormat,
            legend: this.options.checkoutLegend,
			reset: this.options.allowReset,
			altClass: this.options.altClass
		});

        this.datePersist = null;
        // UGLY HACK. this persist dates instantiation needs to move to the search page code and not this generic place
        // @todo: fix this ugly hack ^
        if (!('property' in Jetsetter)) { // Jetsetter.property will be set only on the PDP page. we do not want this instance to interfere with the one in product.js on property pages
            this.datePersist = Jetsetter.persistentDates || new PersistentDates();
        }

		//listen to date selected to set the hidden form elem to the correct value
		this.checkInCalendar.addEvents({
			select: function (date) {
				this.setDateFieldValue(date, this.realCheckInEl);
                if (this.options.autoOpenCheckout && !this.getCheckOutDate()) {
                    setTimeout(function() {
                        this.checkOutCalendar.showCalendar();
                    }.bind(this), 100);
                }
                if (this.datePersist) {
                    this.datePersist.persistCheckIn(date);
                }
                this.fireEvent('selectionMade');
                this.fireEvent('checkInSelected');
			}.bind(this),
			deselect: function () {
				this.setDateFieldValue(null, this.realCheckInEl);
			}.bind(this),
            calendarOpen: function() {
                if (Jetsetter.ab20381) {
                    Jetsetter.ABTests.metaTest.track(Jetsetter.ab20381, "open calendar");
                }
            }
		});

		this.checkOutCalendar.addEvents({
			select: function (date) {
				this.setDateFieldValue(date, this.realCheckOutEl);
                if (this.datePersist) {
                    this.datePersist.persistCheckOut(date);
                }
                this.fireEvent('selectionMade');
                this.fireEvent('checkOutSelected');
			}.bind(this),
			deselect: function () {
				this.setDateFieldValue(null, this.realCheckOutEl);
			}.bind(this)
		});

		//if dates are already set, set the hidden form elements
		var checkInDate = this.checkInCalendar._getDateFromTextField(checkInEl) || (this.datePersist && this.datePersist.checkinDate);
		if(checkInDate){
			this.setDateFieldValue(checkInDate, this.realCheckInEl);
		}

		var checkOutDate = this.checkOutCalendar._getDateFromTextField(checkOutEl) || (this.datePersist && this.datePersist.checkoutDate);
		if(checkOutDate){
			this.setDateFieldValue(checkOutDate, this.realCheckOutEl);
		}

		// Hide the other calendar when the current is in focus (when tabbing between fields)
		checkInEl.addEvent('focus', function () {
			this.checkOutCalendar.hideCalendar();
		}.bind(this));
		checkOutEl.addEvent('focus', function () {
			this.checkInCalendar.hideCalendar();
		}.bind(this));

		//reset and hide both calendars if the reset button is clicked
		this.options.allowReset && this.checkInCalendar.resetEl.addEvent('click', function(){
			this.checkInCalendar.reset();
			this.checkOutCalendar.reset();

			this.realCheckInEl.set('value', '');
			this.realCheckOutEl.set('value', '');

			//resetting all dates to original values
			this.earliestCheckInDate = currentDate.clone().increment('day', inventoryCutOffDays);
			this.latestCheckInDate = currentDate.clone().increment('year', 1);
			this.earliestCheckOutDate = currentDate.clone().increment('day', inventoryCutOffDays + 1);
			this.latestCheckOutDate = currentDate.clone().increment('year', 1).increment('day', 1);

			//reset calendars to current month
			this.checkInCalendar.selectMonth(currentDate.clone().normalize('month'));
			this.checkOutCalendar.selectMonth(currentDate.clone().normalize('month'));

			this.checkInCalendar.hideCalendar();
			this.checkOutCalendar.hideCalendar();

            if (Jetsetter.persistentDates) {
                Jetsetter.persistentDates.clearPersistedDates();
            }

		}.bind(this));

		this.options.allowReset && this.checkOutCalendar.resetEl.addEvent('click', function(){
			this.checkInCalendar.reset();
			this.checkOutCalendar.reset();

			this.realCheckInEl.set('value', '');
			this.realCheckOutEl.set('value', '');

			this.earliestCheckInDate = currentDate.clone().increment('day', inventoryCutOffDays);
			this.latestCheckInDate = currentDate.clone().increment('year', 1);
			this.earliestCheckOutDate = currentDate.clone().increment('day', inventoryCutOffDays + 1);
			this.latestCheckOutDate = currentDate.clone().increment('year', 1).increment('day', 1);

			this.checkInCalendar.selectMonth(currentDate.clone().normalize('month'));
			this.checkOutCalendar.selectMonth(currentDate.clone().normalize('month'));

			this.checkInCalendar.hideCalendar();
			this.checkOutCalendar.hideCalendar();

            if (Jetsetter.persistentDates) {
                Jetsetter.persistentDates.clearPersistedDates();
            }

		}.bind(this));


		// If the check in calendar is showing December, the check out calendar should follow suit.
		this.checkInCalendar.addEvents({
			'calendarOpen': function () {
				this._setCheckOutIndicator();
			}.bind(this),
			'monthChange': function (activeMonth) {

				this.checkOutCalendar.selectMonth(activeMonth);

				// Maintain indicators
				this._setCheckInIndicator();
				this._setCheckOutIndicator();

				this._showAvailableCheckInDates();
				this._showAvailableCheckOutDates();
                this.showSelectedRange();

            }.bind(this),
			'deselect': function () {
				this._removeIndicator(this.checkOutCalendar);

				//if the user clears the check in calendar we should reset the checkout date range
				this.earliestCheckOutDate = currentDate.clone().increment('day', inventoryCutOffDays + 1);
				this.latestCheckOutDate = currentDate.clone().increment('year', 1).increment('day', 1);

				this._showAvailableCheckOutDates();
                this.showSelectedRange();

            }.bind(this)
		});

		this.checkOutCalendar.addEvents({
			'calendarOpen': function () {
				this._setCheckInIndicator();
			}.bind(this),
			'monthChange': function (activeMonth) {
				this.checkInCalendar.selectMonth(activeMonth);

				// Maintain indicators
				this._setCheckInIndicator();
				this._setCheckOutIndicator();

				this._showAvailableCheckInDates();
				this._showAvailableCheckOutDates();
                this.showSelectedRange();

            }.bind(this),
			'deselect': function () {
				this._removeIndicator(this.checkInCalendar);
                this.showSelectedRange();

            }.bind(this)
		});

		this.checkInCalendar.addEvent('select',function(date,elem){
			//checkout date is less than checkin date or more than 28 days after checkin so we reset checkout
			if(this.getCheckOutDate() !== null && (this.getCheckOutDate() < date || date.diff(this.getCheckOutDate()) > 28)){
				//console.log('checkout is less than checkin');

				this.checkOutCalendar.reset();
			}

			//checkout dates should conform to the 28 day limit
			this.latestCheckOutDate = date.clone().increment('day', 28);

			var month = (this.earliestCheckOutDate.clone().normalize('month') >= date.clone().normalize('month')) ? this.earliestCheckOutDate.clone().normalize('month') : date.clone().normalize('month');

			this.checkOutCalendar.selectMonth(month);

			this._showAvailableCheckOutDates();

            this.showSelectedRange();

		}.bind(this));


		this.checkOutCalendar.addEvent('select', function(date, elem){

			//if the checkin date is already selected and the user reselects a checkout before the checkin
			//this is a bug in the original calendar selection code
			if(this.getCheckInDate() !== null && this.getCheckInDate() > date){
				//console.log('checkin date is greater than checkout so we reset');
				this.checkInCalendar.reset();
			}

			//console.log(this.latestCheckInDate);

			this._showAvailableCheckOutDates();

            this.showSelectedRange();
		}.bind(this));


		this._showAvailableCheckInDates();
		this._showAvailableCheckOutDates();
        this.showSelectedRange();

    },
	
	_setIndicator: function (calendar, date) {
		this._removeIndicator(calendar);
		
		// Highlight newly selected element
		indicatorEl = calendar.getElementFromBookingDate(date);
		if (indicatorEl) {
			$(calendar).store('indicatorEl', calendar.markSelectedDate(indicatorEl));
		}
		//console.log($(calendar).retrieve('indicatorEl'));
	},
	
	_removeIndicator: function (calendar) {
		// Unmark previously highlighted element, if available
		var indicatorEl = $(calendar).retrieve('indicatorEl');
		if (indicatorEl) {
			calendar.unmarkSelectedDate(indicatorEl);
		}
	},
	
	// (On the check out calendar)
	_setCheckInIndicator: function () {
		var checkInDate = this.checkInCalendar.getSelectedDate();
		if (checkInDate) {
			this._setIndicator(this.checkOutCalendar, checkInDate);
		}
	},
	
	// (On the check in calendar)
	_setCheckOutIndicator: function () {
		var checkOutDate = this.checkOutCalendar.getSelectedDate();
		if (checkOutDate) {
			this._setIndicator(this.checkInCalendar, checkOutDate);
		}
	},

    _dateRange: function(start, end) {
        var range = [start.clone().normalize('day')];
        if (start && end && (end > start)) {
            var cursorDate = new Date(start.getTime());
            while(cursorDate.getTime() != end.getTime()) {
                cursorDate.setDate(cursorDate.getDate() + 1);
                range.push(cursorDate.clone().normalize('day'));
            }
        }
        return range;
    },

    showSelectedRange: function() {
        var checkin = this.getCheckInDate();
        var checkout = this.getCheckOutDate();
        var selectedRange = null;
        if (checkin && checkout) {
            selectedRange = _.map(this._dateRange(checkin, checkout), function(d) { return d.toLocaleDateString(); });
        }

        $(this.checkInCalendar).getElements('td').each(function (dayEl) {
            dayEl.removeClass('selected-range').removeClass('selected-range-start').removeClass('selected-range-end');
            var bookingDate = dayEl.retrieve('bookingDate');
            var selectedIndex = _.indexOf(selectedRange, bookingDate.toLocaleDateString());
            if (selectedIndex > -1) {
                dayEl.addClass('selected-range');
                if (selectedIndex === 0) {
                    dayEl.addClass('selected-range-start');
                } else if (selectedIndex == selectedRange.length - 1) {
                    dayEl.addClass('selected-range-end');
                }
            }
        });

        $(this.checkOutCalendar).getElements('td').each(function (dayEl) {
            dayEl.removeClass('selected-range').removeClass('selected-range-start').removeClass('selected-range-end');
            var bookingDate = dayEl.retrieve('bookingDate');
            var selectedIndex = _.indexOf(selectedRange, bookingDate.toLocaleDateString());
            if (selectedIndex > -1) {
                dayEl.addClass('selected-range');
                if (selectedIndex === 0) {
                    dayEl.addClass('selected-range-start');
                } else if (selectedIndex == selectedRange.length - 1) {
                    dayEl.addClass('selected-range-end');
                }
            }
        });
    },

    _showAvailableCheckInDates: function () {
		$(this.checkInCalendar).getElements('td').each(function (dayEl) {
			var bookingDate = dayEl.retrieve('bookingDate');
			if (bookingDate >= this.earliestCheckInDate && bookingDate <= this.latestCheckInDate) {
				dayEl.addClass('available');
			}
		}, this);
	},

	_showAvailableCheckOutDates: function () {
        $(this.checkOutCalendar).getElements('td').each(function (dayEl) {
			var bookingDate = dayEl.retrieve('bookingDate');
			if (bookingDate >= this.earliestCheckOutDate && bookingDate <= this.latestCheckOutDate) {
				dayEl.addClass('available');
			}
			else{
				dayEl.removeClass('available');
			}
		}, this);
	},
	
	getCheckInDate: function () {
		return this.checkInCalendar.getSelectedDate();
	},
	
	getCheckOutDate: function () {
		return this.checkOutCalendar.getSelectedDate();
	},

    setCheckInDate: function(date) {
        this.checkInCalendar.selectDate(this.checkInCalendar.getElementFromBookingDate(date));
        this.setDateFieldValue(date, this.realCheckInEl);
        this.checkInEl.set('value', date.format(this.options.dateFormat));
        this.showSelectedRange();
    },

    setCheckOutDate: function(date) {
        this.checkOutCalendar.selectDate(this.checkOutCalendar.getElementFromBookingDate(date));
        this.setDateFieldValue(date, this.realCheckOutEl);
        this.checkOutEl.set('value', date.format(this.options.dateFormat));
        this.showSelectedRange();
    },

	setDateFieldValue: function (date, formEl) {
		var value = (typeOf(date) === 'date' && moment(date).format("YYYY-MM-DD")) || '';
		formEl.set('value', value);
	},

    setMonthsAfterLoading: function(month) {
        this.checkInCalendar.setMonthsAfterLoading(month);
        this.checkOutCalendar.setMonthsAfterLoading(month);
    },

    setMonthsBeforeLoading: function(month) {
        this.checkInCalendar.setMonthsBeforeLoading(month);
        this.checkOutCalendar.setMonthsBeforeLoading(month);
    },

    clearMonthsLoading: function() {
        this.checkInCalendar.setMonthsBeforeLoading(null);
        this.checkOutCalendar.setMonthsBeforeLoading(null);
        this.checkInCalendar.setMonthsAfterLoading(null);
        this.checkOutCalendar.setMonthsAfterLoading(false);
    }
	
});

var CalTooltip = new Class({

	Extends: HoverTooltip,

	initialize: function (rootEl) {
		this.rootEl = rootEl;

		this.parent(rootEl, {
			className: 'add-to-cal clearfix',
			tooltipContent: this.buildHtml()
		});
	},

	buildHtml: function () {
		//to make google work the dates need to be in the correct format
		var data = {
			alias: this.rootEl.get('data-alias'),
			title: this.rootEl.get('data-title'),
			startDate: this.rootEl.get('data-startdate'),
			endDate: this.rootEl.get('data-enddate'),
			link: Jetsetter.HOST + this.rootEl.get('data-alias'),
			googleStart: this.rootEl.get('data-googleStart'),
			googleEnd: this.rootEl.get('data-googleEnd')
		},
		source = '<div id="cal-test" class="cal-reminder-tooltip clearfix">\
				<h4>Add to Calendar</h4>\
				<ul class="clearfix">\
					<li class="outlook">\
						<a href="/calendar/create-event?alias={{alias}}&title={{title}}&startDate={{startDate}}&endDate={{endDate}}"><span class="icon"></span> <span>Outlook</span></a>\
					</li>\
					<li class="ical last">\
						<a href="/calendar/create-event?alias={{alias}}&title={{title}}&startDate={{startDate}}&endDate={{endDate}}"><span class="icon"></span> <span>iCal</span></a>\
					</li>\
					<li class="google last-row">\
						<a href="https://www.google.com/calendar/event?action=TEMPLATE&text={{title}}+on+Jetsetter&dates={{googleStart}}/{{googleEnd}}&details=Jetsetter+presents+{{title}}:+{{link}}?ep=ugoogle"><span class="icon"></span> <span>Google</span></a>\
					</li>\
					<li class="yahoo last-row last">\
						<a href="http://calendar.yahoo.com/?v=60&VIEW=d&TITLE={{title}}+on+Jetsetter&ST={{googleStart}}$ET={{googleEnd}}&DUR={$DURATION}&URL={{link}}&DESC=Jetsetter+presents+{{title}}:+{{link}}?ep=uyahoo"><span class="icon"></span> <span>Yahoo</span></a>\
					</li>\
				</ul>\
			</div>',
		template = Handlebars.compile(source);

		return template(data);
	}

});
var DestinationsAutocomplete = new Class({
	
	Extends: Autocomplete,
	
	initialize: function (textFieldEl) {
		this.parent(textFieldEl, {
			selectionReplacesQuery: false,
			truncateAtChar: 40,
			asyncRequest: this.asyncRequest
		});
	},
	
	asyncRequest: function () {
		new TagService().lookupGeoByPrefix({
			geoPrefix: this.getSearchQuery(),
			onSuccess: function(data) {
				this.processData(data);
			}.bind(this)
		});
	},
	
	createResultEl: function (resultData) {
		return new Element('li', {
			'title': 'Add destination',
			'html': resultData.fqn + ' <span class="icon">Add</span>'
		}).store('data', {
			'name': resultData.fqn,
			'value': resultData.woeId
		});
	}
	
});
/**
*	@class DropDownList
*	@author Dominik Hofmann
*	A drop down list.
*/

var DropDownList = new Class({

	initialize: function (replaceElement) {
		
		var scope = this;
		
		this.events = new Element('br');
		
		this.stack = [];
		this.container = new Element('div', {id: replaceElement.id, 'class': 'dropdown'});
		this.label = new Element('div').inject(this.container);
		this.itemContainer = new Element('ul').inject(this.container);
		this.arrowIcon = new Element('span', {'class': 'arrow'}).inject(this.container);
		this.selectedIndex = 0;
		this.expanded = false;
		
		replaceElement.getChildren().each(function (element, index) {
			
			this.addRecord(element.get('value'), element.get('text'));
			
		}, this);
		
		this.container.replaces(replaceElement);
		
		this.container.addEvent('click', function (e) {
			if (!scope.expanded) {
				scope.expand();
				return false;
			}	
		});
		
		$(document).addEvent('click', function () {
			if (scope.expanded == true) {
				scope.collapse();
			}
		});
		
		this.renderItems();
		this.renderSelection();
		//this.expand();
		
	},
	
	addRecords: function () {
		
		var args = Array.prototype.slice.call(arguments, 0);
		
		args.each(function (record, index) {

			this.addRecord(record);
			
		}, this);
	},
	
	addRecord: function (value, label) {
		this.stack.push({value: value, label: label});
		return this.stack[this.stack.length - 1];
	},
	
	getSelectedItem: function () {
		return this.stack[this.selectedIndex];
	},
	
	renderItems: function () {
		
		var scope = this;
	
		this.itemContainer.empty();
		
		this.stack.each(function (record, index) {
		
			var item = new Element('li', {html: '<a href="#">' + record.label + '</a>'}).inject(this.itemContainer);
			item.addEvent('click', function () {
				scope.selectItem(index);
				return false;
			});
			
		}, this);
		
	},
	
	renderSelection: function () {
		this.label.set('text', this.stack[this.selectedIndex].label);
	},
	
	selectItem: function (index) {
		this.selectedIndex = index;
		this.events.fireEvent('selectionupdate');
		this.renderSelection();
		this.collapse();
	},
	
	expand: function () {
		
		var scope = this;
		
		this.container.addClass('dropdown-expanded');
		this.events.fireEvent('expand');
		this.expanded = true;
		
	},
	
	collapse: function () {
		this.container.removeClass('dropdown-expanded');
		this.events.fireEvent('collapse');
		this.expanded = false;
	}
	
});
/*
	@author Marvin Tam
	
	Dropdown list that mimics <select>'s behavior as closely as possible. The class
	maintains a more styleable dropdown list in parallel with the existing <select>.
	
	(<optgroup> isn't implemented yet)
	
	From:
		<select style="display: none">
			<option value="US">United States</option>
			<option selected value="CA">Canada</option>
		</select>
	
	To:
		<span class="select">
			<span class="selected">Canada</span>
			<span class="options">
				<span>United States</span> <!-- Element.store('value', 'US') -->
				<span class="selected">Canada</span> <!-- Element.store('value', 'CA') -->
			</span>
		</span>

	@GOTCHAs:
	- Make sure you set a "value" attribute on all <option>s
*/
var Dropdown = new Class({
	
	Implements: [Events, Options],
	
	options: {
		/*
		onChange: function () {}
		*/
	},

	initialize: function (selectEl, rootEl, options) {
        selectEl.store('dropdown-ui', this);
		this.setOptions(options);
		var selectElId = selectEl.get('id');
		this.selectEl = selectEl.removeProperty('id');

        // what a user typed
        this.typedString = '';
        this.typedStringClearTimeout = null;

		if (Browser.ie6) {
			this.selectEl.setStyles({
				'font-size': 0,
				'width': 0
			});
		} else {
			this.selectEl.hide();
		}

		window.addEvent('keydown', function(event) {
            if (this.rootEl.hasClass('select-proxy-open')) {
                if (event.key) {
                    if (event.key.length == 1) {
                        // only respect single keypresses
                        this.typedString += event.key;
                        clearTimeout(this.typedStringClearTimeout);
                        this.typedStringClearTimeout = setTimeout(function() {
                            this.typedString = '';
                        }.bind(this), 2000);
                        this.selectMatchingValue(this.typedString);
                        return;
                    } else if (event.key == 'enter') {
                        this._hide();
                    } else if (event.key == 'backspace') {
                        this.typedString = this.typedString.slice(0, -1);
                        this.selectMatchingValue(this.typedString);
                    }
                    event.stop();
                }
            }
        }.bind(this));

		// Set up dropdown skeleton
		this.rootEl = rootEl || new Element('span', {
			'id': selectElId,
			'class': 'select-proxy'
		});
		
		this.selectedEl = this.rootEl.getElement('.selected') || new Element('span', {
			'class': 'selected'
		}).inject(this.rootEl);
		
		this.listEl = this.rootEl.getElement('.options') || new Element('span', {
			'class': 'options'
		}).inject(this.rootEl);
		
		
		if (this.listEl.getChildren().length == 0) {
			// Populate new dropdown from <select>
			this._build();
		}
		
		// Set default value
		this.set('value', this.selectEl.get('value'));
		
		if (!rootEl) {
			this.rootEl.inject(this.selectEl, 'after');
		}
		
		if (Browser.ie) {
			this.listEl.set('unselectable', 'on');
			this.selectedEl.set('unselectable', 'on');
		}
		
		this.rootEl.addEvents({
            'toggle' : function() {
                this._toggle();
            }.bind(this),
			'mousedown:relay(.selected)': function (event, element) {
				this._toggle();
			}.bind(this),
			'mouseover:relay(.option)': function (event, element) {
                this.listEl.getElements('.option').removeClass('hover');
				element.addClass('hover');
            }.bind(this),
			'mouseout:relay(.option)': function (event, element) {
				element.store('mouseIsDown', false);
				element.removeClass('hover');
			},
			'mousedown:relay(.option)': function (event, element) {
				element.store('mouseIsDown', true);
				event.stop();
			}.bind(this),
			'mouseup:relay(.option)': function (event, element) {
				if(element.retrieve('mouseIsDown')) {
					this._updateSelectedValue(element);
					this._hide();
					element.store('mouseIsDown', false);
				}
			}.bind(this)
		});
		
		document.addEvent('mousedown', function (event) {
            //if (!this.rootEl || !this.rootEl.getElement) { return; }
			var options = $(this.rootEl).getElement('.options');
			if (event.target !== this.selectedEl && (!options || event.target !== options)) {
				this._hide();
			}
		}.bind(this));
	},
	
	toElement: function () {
		return this.selectEl;
	},

	_hide: function () {
		this.listEl.hide();
		this.rootEl.removeClass('select-proxy-open');
        this.typedString = '';
        clearTimeout(this.typedStringClearTimeout);
    },
	
	_toggle: function () {
		this.listEl.toggle();
		this.rootEl.toggleClass('select-proxy-open');
		if(this.listEl.isDisplayed()) {
			this._onShow();
		} else {
            this.typedString = '';
            clearTimeout(this.typedStringClearTimeout);
        }
	},

	_onShow: function() {
		this.listEl.setStyle('height', 'auto');
		this.listEl.setStyle('overflow-y', 'visible');

		var listBottom = this.listEl.getPosition().y + this.listEl.getSize().y;
		var windowBottom = window.getScroll().y + window.getSize().y;
		if(listBottom > windowBottom) {
			this.listEl.setStyle('height', windowBottom - this.listEl.getPosition().y - 10);
			this.listEl.setStyle('overflow-y', 'scroll');
		}
	},
	
	_updateSelectedValue: function (element) {
		var selectedValue = element.retrieve('value');
		if (selectedValue != this.get('value')) {
			var val = element.get('text');
			this.selectedEl.set('text', val);
			
			// Update <select> as well
			this.selectEl.getElements('option').some(function (optionEl) {
				if (optionEl.get('value') == selectedValue) {
					optionEl.set('selected', true);
					this.selectEl.fireEvent('change', selectedValue);
				}
			}.bind(this));

			this._highlightSelectedValue();
			this.fireEvent('change', selectedValue);
		}
	},

	_highlightSelectedValue: function() {
		this.listEl.getElements('.option').each(function(li) {
			if(li.retrieve('value') == this.get('value')) {
				li.addClass('selected-option');
			} else {
				li.removeClass('selected-option');
			}
		}.bind(this));
	},

    selectMatchingValue: function(string) {
        if (!string || string.length < 1) {
            return;
        }
        var els = this.selectEl.getElements('option');
        this.listEl.getElements('.option').removeClass('hover');
        var foundOne = false;
        _.each(els, function(el, index) {
            if (!foundOne && (el.get('value').toLowerCase().indexOf(string) === 0)) {
                this.set('value', el.get('value'));
                var listItemEl = this.listEl.getElements('.option')[index];
                listItemEl.addClass('hover');
                this.listEl.scrollTop = (listItemEl.offsetTop - this.listEl.offsetTop);
                foundOne = true;
            }
        }.bind(this));
    },
	
	get: function (property) {
		if (property == 'value') {
			return this.selectEl.get('value');
		}
	},
	
	set: function (property, value) {
		if (property == 'value') {
			var optionEl = this.selectEl.getElement('[value=' + value + ']');
			if (optionEl) {
				optionEl.set('selected', true);
				this.selectedEl.set('text', optionEl.get('text'));
			}
		}
		
		return this;
	},

	getSelectedIndex: function () {
		return this.selectEl.selectedIndex;
	},
	
	_build: function () {
		this.selectEl.getElements('option').each(function (optionEl) {
			var optionLabel = optionEl.get('text');
			var listItemEl = new Element('span', {
				'class': 'option',
				'text': optionLabel
			}).store('value', optionEl.get('value'));
			
			listItemEl.inject(this.listEl);
		}, this);

		this._highlightSelectedValue();
	},
	
	rebuild: function () {
		this.listEl.empty();
		this._build();
	}
	
});

/**
*	@class EmailReminderCancelTooltip
*	@author tpayne
*	A tool tip for adding to a list of calendars
*/

var EmailReminderCancelTooltip = new Class({

	instance: null,

	initialize: function () {
		
		var scope = this;
		
		this.MAX_WIDTH = 220;
		
		this.container = new Element('div', {'class': 'tooltip entireEmailTooltip'}).inject(document.body);
		this.container.addEvent('click', function () {
		
			scope.hide();
			
		});
		this.myFx = new Fx.Tween(this.container, {
		    duration: 200,
		    transition: Fx.Transitions.Elastic.easeOut
		});
		
		this.arrow = new Element('div', {'class': 'arrow'}).inject(this.container);
		this.content = new Element('div', {'class': 'tooltip-content'}).inject(this.container);
		
		emailReminderCancelTitle = new Element('div', {'class': 'emailReminderTitle'}).inject(this.content);	
			
		var emailReminderCancelContainer = new Element('div', {'class': 'emailReminderActionContainer'}).inject(this.content);
		var emailReminderCancelA = new Element('a', {'class': 'emailReminderCancelA', 'href': '/account/emailpreferences', 'html': 'Manage email reminders'}).addEvent('click', function() {
			_gaq.push(['_trackEvent', 'Account', 'EmailReminders', 'Cancel']);
			return true;
		}).inject(emailReminderCancelContainer);
		
		this.container.setStyle('display', 'none');

		this.timeout = null;

	},
	
	show: function (element, timeOut) {

		var scope = this;
		
		clearTimeout(this.timeout);

		this.timeout = setTimeout(function () {
			
			scope._show(element);
			
		}, timeOut || 0);
		
	},
	
	_show: function (element) {
		
		var pos = element.getPosition();
		var size = element.getSize();
		
		this.container.set('opacity', 1);
		this.container.setStyle('display', 'block');
		
		// first check is to see if the container is too large
		this.container.setStyle('width', 'auto');
		var containerSize = this.container.getSize();
		
		// set to MAX_WIDTH or let it size itself
		if (containerSize.x >= this.MAX_WIDTH) {
			this.container.setStyle('width', this.MAX_WIDTH + 'px');
			this.container.setStyle('height', '150px');
		} else {
			this.container.setStyle('width', 'auto');
		}
		
		// since our size could be off now, we need to check it again
		containerSize = this.container.getSize();
		
		var x = pos.x + Math.round((size.x - containerSize.x) / 2);
		var y = pos.y + 15;

		this.container.setStyle('left', x + 'px');
		this.container.setStyle('top', y + 'px');
		
		var title;
		if (element.getNext()) {
			title = element.getNext().get('value');
		}
		if (typeof title == 'undefined') {
			title = $('cancelTitle').get('value');	
		}

		emailReminderCancelTitle.set('html', title);
	},
	
	hide: function (delay) {
		
		var scope = this;
		var delay = delay || 0;
		
		clearTimeout(this.timeout);
		
		this.timeout = setTimeout(function () {
			
			scope.myFx.start('opacity', 0).chain(function () {
				this.element.setStyle('display', 'none');
			});
			
		}, delay);
		
	}

});
/**
*	@class EmailReminderTooltip
*	@author tpayne
*	A tool tip for adding to a list of calendars
*/

var EmailReminderTooltip = new Class({

	instance: null,

	initialize: function () {
		
		var scope = this;
		
		this.MAX_WIDTH = 195;
		
		this.container = new Element('div', {'class': 'tooltip entireEmailTooltip'}).inject(document.body);
		this.container.addEvent('click', function () {
			scope.hide();
		});
		this.myFx = new Fx.Tween(this.container, {
		    duration: 200,
		    transition: Fx.Transitions.Elastic.easeOut
		});
		
		this.arrow = new Element('div', {'class': 'arrow'}).inject(this.container);
		this.content = new Element('div', {'class': 'tooltip-content email-reminder'}).inject(this.container);
		
		this.emailReminderTitle = new Element('div', {
			'class': 'emailReminderTitle'
		}).inject(this.content);
			
		var emailReminderButtonDiv = new Element('div', {
			'class': 'emailReminderActionContainer'
		}).inject(this.content);
		
		this.emailReminderButtonA = new Element('button', {
			'type': 'button',
			'class': 'emailReminderButtonA',
			'text': 'Email me reminder'
		}).addEvent('click', function () {
		}).inject(emailReminderButtonDiv);
		
		// new Element('div', {'class': 'emailReminderButton', 'html': 'Email me reminder'}).inject(this.emailReminderButtonA); 
		
		this.container.setStyle('display', 'none');

		this.timeout = null;

	},
	
	show: function (element, timeOut) {

		var scope = this;
		
		clearTimeout(this.timeout);

		this.timeout = setTimeout(function () {
			
			scope._show(element);
			
		}, timeOut || 0);
		
	},
	
	_show: function (element) {
		
		var pos = element.getPosition();
		var size = element.getSize();
		
		this.container.set('opacity', 1);
		this.container.setStyle('display', 'block');
		
		// first check is to see if the container is too large
		this.container.setStyle('width', 'auto');
		var containerSize = this.container.getSize();

		// set to MAX_WIDTH or let it size itself
		if (containerSize.x >= this.MAX_WIDTH) {
			this.container.setStyle('width', this.MAX_WIDTH + 'px');
			this.container.setStyle('height', '150px');
		} else {
			this.container.setStyle('width', 'auto');
		}
		
		// since our size could be off now, we need to check it again
		containerSize = this.container.getSize();
		
		var x = pos.x + Math.round((size.x - containerSize.x) / 2);
		var y = pos.y + 15;

		this.container.setStyle('left', x + 'px');
		this.container.setStyle('top', y + 'px');
		
		var id;
		if (element.getParent() && element.getParent().get('id')) {
			id = (element.getParent().get('id').replace('id', ''));
		}
		if (typeof id == 'undefined') {
			// If we can't find the id, then let's assume there is only one.
			id = $('id').get('value');	
		}
		
		this.emailReminderButtonA.set('id', 'emailReminderButtonA' + id);
		
		var title;
		if (element.getNext()) {
			title = element.getNext().get('value');
		}
		if (typeof title == 'undefined') {
			title = $('activeTitle').get('value');	
		}

		this.emailReminderTitle.set('html', title);
	},
	
	hide: function (delay) {
		
		var scope = this;
		var delay = delay || 0;
		
		clearTimeout(this.timeout);
		
		this.timeout = setTimeout(function () {
			
			scope.myFx.start('opacity', 0).chain(function () {
				this.element.setStyle('display', 'none');
			});
			
		}, delay);
		
	}

});
var EmailTooltip = new Class({

	Extends: HoverTooltip,

	initialize: function(rootEl){

		this.rootEl = rootEl;
		
		this.parent(rootEl, {
			className: 'email-tooltip',
			tooltipContent: 'Remind me when sale starts',
			tooltipHover: false
		});

		this.rootEl.addEvent('click',function(){
			switch(this.rootEl.hasClass('icon-email-clicked')){
				case true:
					//already clicked - lets cancel
					//this.rootEl.removeClass('icon-email-clicked');
					document.location = '/account/emailpreferences';
					break;
				case false:
					//not clicked - lets remind them
					this.sendReq();

					break;
			}

		}.bind(this));

	},

	sendReq: function(){
		new UserService().addUserSaleNotification({
			saleNotificationTypeId: 1,
			saleId: this.rootEl.get('data-id'),
			onSuccess: function () {
				this.rootEl.addClass('icon-email-clicked');
				this.setContent('Notification will be sent on <strong>' + this.rootEl.get('data-startdate') + '</strong>.');
			}.bind(this),
			onFailure: function(err, message) {
				alert(message);
			}.bind(this)
		});
	}
});


var FavsTooltip = new Class ({

	Implements: Events,

	initialize: function (rootEl) {
		this.rootEl = rootEl;

		var self = this,
			close = self.rootEl.getElement('.hide');

			if(Cookie.read('j_cli')){
				this.cookie = JSON.decode(Base64.decode(Cookie.read('j_cli')));
			}
			else{
				this.cookie = {};
				this.createCookie();
			}
			
		rootEl.position({
			relativeTo: $('secondary-nav'),
		    position: {
		    	x: 'left',
		    	y: 'bottom'
		    },
		    offset: {
		    	x: -90
		    }
		});
				
		close.addEvent('click', function (e){
			e.stop();
			self.hide();
		});
	},

	show: function () {
		if(JSON.decode(Base64.decode(Cookie.read('j_cli'))).show < 4){
			this.cookie = JSON.decode(Base64.decode(Cookie.read('j_cli')));
			this.rootEl.setStyle('display', 'block');
			new Fx.Tween(this.rootEl).start('opacity', 0, 1);
			this.cookie.show = parseInt(this.cookie.show) + 1;
			Cookie.write('j_cli', Base64.encode(JSON.encode(this.cookie)), {
				domain: Jetsetter.cookieDomain,
				path: '/',
				duration: 365
			});
		}
	},

	neverShow: function () {
		this.cookie = JSON.decode(Base64.decode(Cookie.read('j_cli')));
		this.cookie.show = 4;

		Cookie.write('j_cli', Base64.encode(JSON.encode(this.cookie)), {
			domain: Jetsetter.cookieDomain,
			path: '/',
			duration: 365
		});
	},

	createCookie: function () {
		this.cookie.show = 0;

		Cookie.write('j_cli', Base64.encode(JSON.encode(this.cookie)), {
			domain: Jetsetter.cookieDomain,
			path: '/',
			duration: 365
		});
	},

	hide: function () {
		if(this.rootEl.getStyle('display') === 'block'){
			var closeEffect = new Fx.Tween(this.rootEl)
			.start('opacity', 1, 0).chain(function () {
				this.rootEl.setStyle('display', 'none');
			}.bind(this));
			
		}
		
		if(!arguments[0]){
			this.neverShow();	
		}
	}

});

var FreeformModal = new Class({
	
	Extends: Modal,
	
	initialize: function (content, options) {
		this.parent(options || {});

//		this.parent({
//			'id': 'freeform-modal',
//			'title': (type == 'error') ? 'Error' : 'Notification',
//			'dismissable': false
//		});
//
//		this.messageEl = new Element('div', {
//			'class': 'message',
//			'html': (message.contains('<p>')) ? message : '<p>' + message + '</p>'
//		});
//
//		var okButtonEl = new Element('button', {
//			'type': 'button',
//			'text': 'OK',
//			'class': 'cta-button'
//		}).addEvent('click', function () {
//			this.close();
//		}.bind(this));

        this.canvas.adopt(content);
	}
	
});

Fx.PriceTween = new Class({
	
	Extends: Fx,
	
	options: {
		duration: 500,
		transition: Fx.Transitions.Expo.easeOut,
		link: 'cancel',
		numberFormat: {},
		elasticDecimals: false // Show decimals when value is a decimal
	},
	
	initialize: function (priceEl, options) {
		this.priceEl = priceEl;
		
		var locale = Locale.get('Number');
		this.options.numberFormat = {
			decimal: locale.decimal,
			group: locale.group,
			decimals: locale.currency.decimals,
			prefix: (options || {}).currencySymbol || locale.currency.prefix
		};
		this.setOptions(options);
	},
	
	set: function (now) {
		this.value = now;
		this.priceEl.set('text', now.format(this.options.numberFormat));
		
		return now;
	},
	
	start: function (from, to) {
		if (arguments.length === 1) {
			to = from;
			from = this.priceEl.get('text').toCurrencyValue();
		}
		
		if (this.options.elasticDecimals) {
			this.options.numberFormat.decimals = (to % 1 !== 0) ? 2 : 0;
		}
		
		// Set a data attribute for QA automation
		this.priceEl.set('data-value', to);
		
		return this.parent(from, to);
	}
	
});

// Seriously fancy shaking animation
// @TODO: Figure out how to extend base Fx and use a Sine graph instead of moving left/right manually
// @TODO: After that, extend Element with shake()
Fx.Shake = new Class({
	
	Extends: Fx.Tween,
	
	options: {
		'unit': 'px',
		'duration': 70,
		'transition': 'linear',
		'link': 'chain',
		
		'offset': 4,
		'numOfShakes': 6
	},
	
	initialize: function (element, options) {
		this.parent(element, options);
	},
	
	start: function () {
		
		var offset = this.options.offset;
		
		this.element.setStyle('position', 'relative');
		for (var i=0; i<this.options.numOfShakes; i++) {
			this.parent('left', offset);
			offset = -(offset);
		}
		this.parent('left');
		
		return this;
	}
	
});

var GalleryDots = new Class({
	
	Implements: [Events, Options],
	
	options: {
		/*
		onChange: function (index) {}
		*/
		numOfDots: 0,
		defaultIndex: 0
	},
	
	initialize: function (rootEl, options) {
		this.rootEl = rootEl.addClass('gallery-dots unselectable');
		this.setOptions(options);
		
		// Build the elements
		for (var i=0; i<this.options.numOfDots; i++) {
			var dotEl = new Element('a', {
				'class': 'dot',
				'text': '•',
				'data-index': i + 1
			});
			
			if (i === this.options.numOfDots - 1) {
				dotEl.addClass('last');
			} else if (i === this.options.defaultIndex) {
				dotEl.addClass('selected');
			}
			
			rootEl.adopt(dotEl);
		}
		
		this.rootEl.addEvent('click:relay(a)', function (event, element) {
			event.preventDefault();
			
			if (!element.hasClass('selected')) {
				var index = rootEl.getChildren().indexOf(element);
				this.select(index);
				this.fireEvent('change', index);
			}
		}.bind(this));
		
	},
	
	select: function (index) {
		this.rootEl.getElement('.selected').removeClass('selected');
		this.rootEl.getElement(':nth-child(' + (index + 1) + ')').addClass('selected');
	}
	
});

var GeoAutocomplete = new Class({
	
	initialize: function (elText, elList, elError) {
		
		// @TODO: Refactor out an AutoComplete class, make this extend AutoComplete
		var self = this;
		
		elText.addEvent('keydown', function(event) {
			if (elError != null) {
				elError.set('html', '');
			}
			var str = elText.get('value');
			if (event.key.length == 1) {
				str += event.key;
			}
			if (str.length < 3) {
				elList.setStyle('display', 'none');
				return;
			}
			var selected = elList.getElement('.highlight');
			var selectedIndex = elList.getElements('li').indexOf(selected);
			var next = null;
			switch (event.key) {
			case 'up':
				if (selectedIndex == 0) {
					return;
				}
				next = selected.getPrevious();
				break;
			case 'down':
				if (selectedIndex == elList.getElements('li').length - 1) {
					return;
				}

				if (selected == null) {
					next = elList.getElement(':nth-child(first)');
				} else {
					next = selected.getNext();
				}
				break;
			case 'enter':
				if (selected != null) {
					self.selectGeo(elList, selected, geo[elList.getElements('li').indexOf(selected)].woeId);
				} else {
					if (elList.getChildren().length === 0) {
						break;
					}

					var bounce = setInterval(function() {
						var selected = elList.getElement('.highlight');
						if (selected == null) {
							selected = elList.getElement(':first-child');
							selected.addClass('highlight');
						} else {
							selected.removeClass('highlight');
							if (!selected.getNext()) {
								clearInterval(bounce);
							} else {
								selected.getNext().addClass('highlight');
							}
						}
					}, 50);
				}
				break;
			}

			if (selected != null) {
				selected.removeClass('highlight');
			}

			if (next != null) {
				next.addClass('highlight');
			}

			var alphanumeric = /[a-zA-Z0-9_-]/;
			if(event.key != 'backspace' && event.key != 'delete' && (event.key.length > 1 || alphanumeric.test(event.key) == false)) {
				return;
			}

			clearTimeout(this.requestTimeout);
			this.requestTimeout = setTimeout(function () {
				new TagService().lookupGeoByPrefix({
					geoPrefix: str,
					
					onSuccess: function(geo) {
						elList.set('html', '');
						if (geo.length == 0) {
							if (elError != null) {
								elList.setStyle('display', 'none');
								elError.set('html', 'No results found for your search');
							}
						} else {
							for (var i = 0; i < geo.length; i++) {
								if (geo[i].name == null) {
									continue;
								}
								new Element('li', {
									'html':geo[i].fqn}
								).addEvent('mouseenter', function() {
									$(this).addClass('highlight');
								}).addEvent('mouseleave', function() {
									$(this).removeClass('highlight');
								}).addEvent('click', function (i) {
									return function () {
										self.selectGeo(elList, $(this), geo[i].woeId);
									};
								}(i)).inject(elList);
							}
							elList.setStyle('display', 'block');
						}
					}.bind(this),

					onFailure: function(xhr) {
						if (elError != null) {
							elError.set('html', '');
						}
					}.bind(this)					
				});
			}, 250);
		});
	},

	selectGeo: function (elList, selected, woeId) {
		elList.setStyle('display', 'none');
		selected.getParent().fireEvent('chosen', [woeId, selected.get('html')])
		
		new Request.JSON({
			url: '/geoasync.php',
			data: {
				'action': 'track-select',
				'woeId': woeId
			}
		}).post();
	}
	
});

var HoveredTooltip = new Class({
	
	Implements: [Events, Options],

	options: {
		altClass: '',
		type: 'top',
		position: 'topRight',
		egde: 'bottomRight',
		timneout: 0,
		rollover: true
	},

	initialize: function(options){
		this.setOptions(options);
		this.showTimeout;
		this.hideTimeout;

		this.container = new Element('div', {
			'class': 'hovered-tooltip ' + this.options.altClass,
			html: '<div class="arrow"></div>'
		});

		this.content = new Element('div', {
			'class': 'tooltip-content'
		}).inject(this.container);

		this.container.hide().inject(document.body);
	},

	show: function(content, elem){
		this.hide();

		elem.addEvents({
			'mouseenter': function(e){
				clearTimeout(this.hideTimeout);
				e.stop();

				this.showTimeout = setTimeout(function(){
					// Insert Element or string
					if (typeOf(content) === 'element') {
						this.content.empty().adopt(content);
					} else {
						this.content.set('html', content);
					}
					
					this.container.show();
					this.container.position({
						relativeTo: elem,
						position: this.options.position,
						edge: this.options.edge
					});
				}.bind(this), this.options.timeout);
			}.bind(this),

			'mouseleave': function(e){
				e.stop();

				if(this.options.rollover){
					clearTimeout(this.showTimeout);
				} else {
					this.hide();
				}
			}.bind(this),

			'mouseover': function(e){
				e.stop();
			}
		});

		this.container.addEvents({
			'mouseenter': function(e){
				e.stop();
			}.bind(this),

			'mouseleave': function(e){
				e.stop()
			}.bind(this),

			'mouseover': function(e){
				e.stop();
			}
		});

		document.addEvent('mouseover', function(){
			clearTimeout(this.showTimeout);
			this.hideTimeout = setTimeout(function(){
				this.hide();
			}.bind(this), this.options.timeout);
		}.bind(this));
	},

	hide: function(){
		this.container.hide();
	}

});
var NotificationModal = new Class({
	
	Extends: Modal,
	
	initialize: function (message, type) {
		
		this.parent({
			'id': 'notification-modal',
			'title': (type == 'error') ? 'Error' : 'Notification',
			'dismissable': false
		});
		
		this.messageEl = new Element('div', {
			'class': 'message',
			'html': (message.contains('<p>')) ? message : '<p>' + message + '</p>'
		});
		
		var okButtonEl = new Element('button', {
			'type': 'button',
			'text': 'OK',
			'class': 'cta-button'
		}).addEvent('click', function () {
			this.close();
		}.bind(this));
		
		this.canvas.adopt([
			this.messageEl,
			okButtonEl
		]);
		
	}
	
});

var PhotoFBLike = new Class({
	
	Implements: [Events, Options],

	options: {
		'fade': 'standard'	
	},

	initialize: function(rootEl, options){
		this.setOptions(options);
		this.rootEl = rootEl;
		this.id = rootEl.get('data-id');
		this.type = rootEl.get('data-type');
		this.alias = rootEl.get('data-alias');

		this.href = Jetsetter.HOST + "/image/" + this.type + "/" + this.alias + "/" + this.id;
				
		this.like = new Element('div', {
			'class': 'fb-photo-like',
			'html': '<div class="grey"></div><div class="info"><p>Like this photo?</p><div class="like-wrap" data-href="'+ this.href +'"></div></div>'
		}).inject(rootEl);

		if(this.options.fade !== 'standard'){
			this.like.set('tween', {
				'duration': this.options.fade
			});			
		}

		rootEl.addEvent('mouseover',function(){
			this.show();
		}.bind(this));

		rootEl.addEvent('mouseout',function(){
			this.hide();
		}.bind(this));

		this.like.getElement('.like-wrap').addEvent('click', function(){
			this.edgeCreate();
		}.bind(this));
		
	},

	show: function(){
		this.like.fade('in');
	},

	hide: function(){
		this.like.fade('out');
	},

	edgeCreate: function(){
		var self = this;
		FB.getLoginStatus(function (response) {
			//logged in and connected
			if(response.authResponse && response.status === 'connected'){
				FB.api('/4810297/likes','post',{url: this.href}, function(){
					//console.log(arguments);
				});
			}
			//not logged in or not connected to the JS app
			else{
				FB.login(function (response) {
					if (response.authResponse) {
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
						window.location.reload();
					} else {
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
					}
				}, {
					scope: 'email,publish_stream,offline_access'
				});	
			}
		});	
		
	}


});
var ProgressBar = new Class({
	
	initialize: function(rootEl){
		this.rootEl = rootEl;
		this.leftCap = rootEl.getElement('.left-cap');
		this.extender = rootEl.getElement('.extender');
		this.rightCap = rootEl.getElement('.right-cap');
		this.progressFx = new Fx.Tween(this.extender);
	},

	updateProgress: function(percent){
		var fullWidth = this.rootEl.getSize().x - this.leftCap.getSize().x - this.rightCap.getSize().x,
			barWidth = fullWidth * (percent / 100);
		
		this.progressFx.start('width', barWidth);
	}

});
var PromoBanner = new Class({
	
	Implements: [Options, Events],
	
	options: {
		'message': '',
		'actionLabel': '',
		'closeLabel': 'Close'
	},

	initialize: function (rootEl, options) {
		this.rootEl = rootEl;
		this.setOptions(options);
		
		// Hide using negative margins
		this.bannerHeight = this.rootEl.show().getSize().y;
		this.rootEl.setStyle('margin-top', -(this.bannerHeight));
		
		this.rootEl.getElement('.banner-wrapper').set('html',
			'<p>' + this.options.message + '<a class="action">' + this.options.actionLabel + '</a></p>' +
			'<a class="close">' + this.options.closeLabel + '</a>'
		);

		this.rootEl.addEvents({
			'click:relay(.action)': function (event) {
				this.fireEvent('action');
			}.bind(this),
			'click:relay(.close)': function (event) {
				this.fireEvent('close');
				this.slideOut();
			}.bind(this)
		});
	},
	
	show: function () {
		this.rootEl.show().setStyle('margin-top', 0);
	},
	
	slideIn: function () {
		this.rootEl.tween('margin-top', 0).get('tween').chain(function() {
			this.fireEvent('slideIn');
		}.bind(this));
	},
	
	slideOut: function () {
		this.rootEl.tween('margin-top', -(this.bannerHeight)).get('tween').chain(function() {
			this.fireEvent('slideOut');
		}.bind(this));
	}
	
});
var PublicRegModal = new Class({
	
	Extends: Modal,
	
	initialize: function (options) {
		this.parent(Object.merge(options || {}, {
			id: 'public-reg-modal',
			scrollable: true,
			dismissable: options && options['dismissable'] || false,
			'class': options && options['class'] || ''
		}));

		this.buildHtml();

		this.emailForm = this.canvas.getElement('form');
		this.emailEl = this.emailForm.getElement('.email');
		this.emailField = new InviteEmailField(this.emailEl, {
			'tooltipType': 'top',
			'existingMemberCheck': false
		});
		this.fbWrap = this.canvas.getElement('#facebook-signup');
		this.fbLoader = this.fbWrap.getElement('.loader-wrap');
		this.fbImageEl = this.fbWrap.getElement('img');
		this.fbCallout = this.fbWrap.getElement('p.fb-callout');
		this.fbCta = this.fbWrap.getElement('.facebook-cta');
		this.clouds = this.canvas.getElement('.clouds-popout');
		this.attractions = this.canvas.getElement('.attractions-popout');
		//for some reason calling getSize() on the element return an object of 0,0 will have to figure this out so were not using magic numbers
		this.cloudsInitialY = -161;

		//check for public promo alias
		if (!this.options.promoAlias) {
			if (Jetsetter.session && Jetsetter.session.pl && Jetsetter.session.pl.promo) {
				this.options.promoAlias = Jetsetter.session.pl.promo;
			}
		}

		//set promoalias if provided
		if(this.options.promoAlias){
			new Element('input', {
				type: 'hidden',
				name: 'promoAlias',
				value: this.options.promoAlias
			}).inject(this.emailForm, 'bottom');
		}

		this.emailForm.addEvent('submit', function(e){
			this.emailField.validateField();
			this.validateForm(e);
		}.bind(this));

		window.addEvent('fbReady', function(){
			this.fbLoader.fade('out');
			this.setFbState();
		}.bind(this));

		//5 second timeout for fb connect
		setTimeout(function(){
			if(!FB){
				this.fbLoader.fade('out');
			}
		}.bind(this), 5000)

		window.addEvent('scroll', function(){
			var curPos = window.getScroll().y === 0 ? 1 : window.getScroll().y,
				docHeight = document.getScrollSize().y,
				winHeight = window.getSize().y,
				scrollPercentage = (curPos / (docHeight - winHeight)) * 100,
				newHeight = this.cloudsInitialY + scrollPercentage * (6/5);
			
			this.clouds.setStyle('top', newHeight);
			this.clouds.setStyle('height', Math.abs(newHeight));

		}.bind(this));

		this.addEvent('showEnd', function(){
			// based on previous visit cookie
			_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'Opened-' + (Cookie.read('j_prvv') ? 'existing' : 'new')]);
		});
				
	},

	buildHtml: function(){
		var data = {},
			source =   '<div class="clouds-popout"></div>\
						<div class="attractions-popout"></div>\
						<div class="modal-header">\
							<h3>The worlds greatest vacations. Members-only prices.</h3>\
						</div>\
						<div class="wrap clearfix">\
							<div id="email-signup">\
								<form>\
									<p>Get access to the world’s greatest vacations. Membership is free.</p>\
									<div class="input-wrap">\
										<input type="text" name="emailAddress" class="email" placeholder="example@address.com" />\
										<input type="submit" value="Enter" class="cta-button" />\
									</div>\
								</form>\
							</div>\
							<div id="facebook-signup" class="not-connected">\
								<div class="loader-wrap">\
									<div class="loader"></div>\
								</div>\
								<div class="profile-wrap">\
									<div class="mask"></div>\
									<img src="" />\
								</div>\
								<p class="fb-callout">Hi there!</p>\
								<h3>Welcome to Jetsetter</h3>\
								<div class="fbconnect-wrapper">\
									<p class="personalized">Connect with Facebook for a more personalized Jetsetter experience.</p>\
									<a class="facebook-cta"></a>\
								</div>\
							</div>\
						</div>\
						<p id="terms">By continuing you agree to the <a onclick="window.open(\'/terms-of-service\', \'_blank\', \'menubar=no,width=650,height=700,toolbar=no,scrollbars=yes,resizable=yes\')">terms and conditions</a>.</p>',
			template = Handlebars.compile(source);
		this.canvas.set('html', template(data));
	},

	validateForm: function(event){
		event.preventDefault();
		if (this.emailField.get('state') !== 'valid') {
			this.emailField.updateDisplayState();
			return false;
		}

		Jetsetter.Auth.authenticate({
			type: 'email',
			email: this.emailForm.toQueryObject().emailAddress,
			onSuccess: function(json){
				this.emailField.isValid = true;
				if((json.data.promoAlias) && (! Cookie.read('j_tut'))) {
					window.location.hash = "#" + 'tour';
					_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'RegisterEmail']);
				} else {
					_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'LoginEmail']);
				}

				setTimeout(function(){
					window.location.reload(true);
				}, json.data.promoAlias ? 300 : 0);
			}.bind(this),
			onFailure: function(json){
				this.emailField.isValid = false;
				var errorMsg = (!this.emailField.isValid) ? json.error.message : '';
				this.emailField.showTooltip(errorMsg);
			}.bind(this)
		});
	},

	setFbState: function(){
		FB.getLoginStatus(function (response) {
			if (response.authResponse) {
				this.setFbUser();
				this.fbCta.addEvent('click', function(){
					this.fbLogin();
				}.bind(this));
			} else {
				this.fbCta.addEvent('click', function(){
					FB.login(function (response) {
						if (response.authResponse) {
							this.fbLogin();
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
						} else {
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
						}
					}.bind(this), {
						'scope': 'email,publish_stream,offline_access'
					});
				}.bind(this));
			}
		}.bind(this));

	},

	setFbUser: function(){
		FB.api('/me', function(user){
			this.fbImageEl.set('src', 'http://graph.facebook.com/' + user.id + '/picture');
			this.fbCallout.set('text', 'Hi there, ' + user['first_name'] + '!');
			// Let's not show anything different for when the user is connected to fb.
			//this.fbWrap.removeClass('not-connected');
		}.bind(this));

	},

	fbLogin: function(){
		Jetsetter.Auth.authenticate({
			type: 'facebook',
			onSuccess: function(json){
				if(json.data.promoAlias){
					_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'FBRegister']);
					window.location.hash = "#" + 'tour';
				} else {
					_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'FBLogin']);
				}
				
				setTimeout(function(){
					window.location.reload(true);
				}, json.data.promoAlias ? 300 : 0);
			}.bind(this),
			onFailure: function(json){
				_gaq.push(['_trackEvent', 'Modal', 'PublicReg', 'FBRegister-Failed']);
				this.fireEvent('loginFail', user);
			}.bind(this)
		});
	},

	hidePopouts: function(){
		this.clouds.hide();
		this.attractions.hide();
	}

});

PublicRegModal.shouldShow = function () {
	if(Jetsetter.user.isPublic && Jetsetter.ENTITY_ID !== 2){
		if (Jetsetter.session.pl.mt >= 0) {
			if (!Jetsetter.session.pl.timestamp || Jetsetter.session.pl.timestamp == 0) {
				Jetsetter.session.pl.timestamp = new Date().format('%s');
				Cookie.write('j_sess', JSON.encode(Jetsetter.session), {
					'domain': Jetsetter.cookieDomain
				});
			}

			// All in seconds
			var currentTime = ((new Date()).getTime() / 1000).toInt();
			var cookieElapsedTime = currentTime - Jetsetter.session.pl.timestamp;
			if ((Jetsetter.session.pl.mt == 0) || (cookieElapsedTime >= Jetsetter.session.pl.mt)) {
				if($(document.body).get('id') != 'product-details'){
					return false;
				} else {
					return true;
				}
			}
		} else {
			if($(document.body).get('id') != 'product-details'){
				return false;
			} else {
				return true;
			}
		}
	}

	return false;
};

PublicRegModal.allowPublic = true;

var PublicSignupBar = new Class({
	
	Implements: Events,

	initialize: function(rootEl){
		var self = this;

		self.rootEl = rootEl;
		self.catchPoint = rootEl.getPosition().y - 12;
		self.holder = rootEl.getParent('.public-bar-holder');
		self.emailEl = rootEl.getElement('input');
		self.submitEl = rootEl.getElement('.cta-button');

		window.addEvent('scroll', function () {
			var curPos = window.getScroll().y;
			
			if(curPos > self.catchPoint){
				self.holder.addClass('docked')
			}
			else{
				self.holder.removeClass('docked');
			}
		});

		self.emailField = new InviteEmailField(self.emailEl, {
			'tooltipType': 'none',
			'existingMemberCheck': false
		});

		self.submitEl.addEvent('click', function(event){
			event.preventDefault();
			
			self.emailField.validateField();
				
			if (self.emailField.get('state') !== 'valid') {
				self.emailField.updateDisplayState();
				return false;
			}
			else{
				Jetsetter.Auth.authenticate({
					type: 'email',
					email: self.emailEl.get('value'),
					promoAlias: ((Jetsetter.session && Jetsetter.session.pl) ? Jetsetter.session.pl.promo : ''),
					onSuccess: function(json){
						Jetsetter.user = new User();	
						window.location.reload();
					}.bind(this),
					onFailure: function(json){

					}.bind(this)
				});
			}
		}.bind(this));
	}	
});
var PullDownMenu = new Class({
	
	Implements: [Events, Options],
	
	options: {
		hoverDelay: 250
	},
	
	initialize: function (attachTo, dropdownEl, options) {
		
		this.setOptions(options);
		
		this.attachTo = attachTo;
		this.dropdownEl = dropdownEl;
		this.anchor = this.attachTo.getFirst();
		
		this.timeout = null;
		
		this.attachTo.addEvents({
			'mouseenter': this.show.bind(this),
			'mouseleave': this.hide.bind(this)
		});
		
	},
	
	show: function () {
		if (this.timeout) {
			clearTimeout(this.timeout);
		}
		
		this.timeout = setTimeout(function () {
			this.anchor.addClass('active');
			this.dropdownEl.show();
		}.bind(this), this.options.hoverDelay);

		this.fireEvent('showEnd');
	},
	
	hide: function () {
		if (this.timeout) {
			clearTimeout(this.timeout);
		}
		
		this.timeout = setTimeout(function () {
			this.anchor.removeClass('active');
			this.dropdownEl.hide();
		}.bind(this), this.options.hoverDelay);
	}
	
});
var RangeSlider = new Class({

	Implements: [Events, Options],

	options: {
		/*
		onDrag: function () {},
		onChange: function () {},
		*/
		minKnob: new Element('div'),
		maxKnob: new Element('div'),
		rangeIndicator: new Element('div'),

		// Min and max possible values of the slider
		sliderValues: {
			min: null,
			max: null
		},
		
		// Initial values of the slider knobs
		knobValues: {
			min: null,
			max: null
		}
	},

	maxWidth: 0,
	knobOffset: 0,
	knobSize: null,
	knobValues: null,
	percentages: {
		min: 0,
		max: 100
	},

	initialize: function (rootEl, options) {
		this.setOptions(options);
		this.rootEl = rootEl.addClass('range-slider').adopt([
			this.options.rangeIndicator.addClass('range-indicator'),
			this.options.minKnob.addClass('min knob'),
			this.options.maxKnob.addClass('max knob')
		]);

		this.maxWidth = this.rootEl.measure(function(){
			return this.getSize().x
		});

		this.knobSize = this.options.minKnob.measure(function(){
			return this.getSize()
		});

		//this.knobSize   = this.options.minKnob.getSize();

		// Account for the negative margin that centers the knob
		this.knobOffset = this.options.minKnob.getStyle('margin-left').toInt();

		// @TODO: set disabled state when there (max - min) = 0 (unlikely to happen)

		// Set up drag knobs
		var dragOptions = {
			limit: {
				y: [0, 0] // Movement on the x-axis only
			},
			onDrag: function (element) {
				this._setValues(element);
				this.fireEvent('drag', [this.knobValues, this.percentages]);
			}.bind(this),
			onComplete: this._onChange.bind(this)
		};
		this.minKnobDrag = new Drag(this.options.minKnob, dragOptions);
		this.maxKnobDrag = new Drag(this.options.maxKnob, dragOptions);


		// Set knob position on click
		//var rootElPosition = rootEl.getPosition();

		var rootElPosition = rootEl.measure(function(){
			return this.getPosition();
		});


		rootEl.addEvent('click', function (event) {
			// Don't do anything with clicks on the knob
			if ($(event.target).hasClass('knob')) {
				return true;
			}

			var clickX = event.page.x - rootElPosition.x;
			
			// Make sure click is within bounds
			if (clickX < 0) {
				clickX = 0;
			} else if (clickX > this.maxWidth) {
				clickX = this.maxWidth;
			}

			var minKnobX = this.getMinKnobPosition();
			var maxKnobX = this.getMaxKnobPosition();
			var midX = minKnobX + (maxKnobX - minKnobX) / 2;
			var percentage = clickX / this.maxWidth * 100;
			var knobEl = null;

			if (clickX < midX) {
				knobEl = this.options.minKnob;
			} else {
				knobEl = this.options.maxKnob;
			}

			knobEl.setStyle('left', percentage + '%');
			this._setValues(knobEl);
			this._onChange(knobEl);	
		}.bind(this));

		// Set default knob positions
		this.knobValues = {
			min: this.options.knobValues.min || this.options.sliderValues.min,
			max: this.options.knobValues.max || this.options.sliderValues.max
		};
		
		this.setMinKnobPosition(this.knobValues.min);
		this.setMaxKnobPosition(this.knobValues.max);

		this._setKnobLimits();

		this.fireEvent('init', [this.knobValues, this.percentages]);
	},

	_setValues: function (knobEl) {
		var knobType = (knobEl.hasClass('min')) ? 'min' : 'max';

		this.knobValues[knobType] = this._getKnobValue(knobEl);
		this.percentages[knobType] = this._getKnobPercentage(knobEl);
		this._setRangeIndicator();
	},

	_onChange: function () {
		this._setKnobLimits();

		this.fireEvent('change', [this.knobValues, this.percentages]);
	},

	_getKnobPosition: function (knobEl) {
		return knobEl.measure(function(){
			return knobEl.getPosition(this.rootEl).x - this.knobOffset;
		}.bind(this));
		//return knobEl.getPosition(this.rootEl).x - this.knobOffset;
	},

	_getKnobPercentage: function (knobEl) {
		return this._getKnobPosition(knobEl) / this.maxWidth * 100;
	},

	_getKnobValue: function (knobEl) {
		var minValue = this.options.sliderValues.min,
			maxValue = this.options.sliderValues.max;

		return minValue + ((maxValue - minValue) * (this._getKnobPosition(knobEl) / this.maxWidth));
	},

	_setKnobLimits: function () {
		// Prevent knobs from overlapping
		this.minKnobDrag.setOptions({
			limit: {
				x: [0, this.getMaxKnobPosition() - this.knobSize.x]
			}
		});
		this.maxKnobDrag.setOptions({
			limit: {
				x: [this.getMinKnobPosition() + this.knobSize.x, this.maxWidth]
			}
		});
	},

	_setRangeIndicator: function () {
		var width = this.percentages.max - this.percentages.min;
		this.options.rangeIndicator.setStyles({
			'left': this.percentages.min + '%',
			'width': width + '%'
		});
	},

	_setKnobPosition: function (knobEl, value) {
		// @TODO: the check for 0 is unnecessary if we just disable the slider when there's no range
		// var valueDelta = this.options.sliderValues.max - this.options.sliderValues.min,
		var valueDelta = (this.options.sliderValues.max - this.options.sliderValues.min) === 0 ? 1 : this.options.sliderValues.max - this.options.sliderValues.min
			percentage = (value - this.options.sliderValues.min) / valueDelta.toInt() * 100;

		knobEl.setStyle('left', percentage + '%');
		this._setValues(knobEl);
	},

	getMinKnobPosition: function () {
		return this._getKnobPosition(this.options.minKnob);
	},

	getMaxKnobPosition: function () {
		return this._getKnobPosition(this.options.maxKnob);
	},

	setMinKnobPosition: function (value) {
		return this._setKnobPosition(this.options.minKnob, value);
	},

	setMaxKnobPosition: function (value) {
		return this._setKnobPosition(this.options.maxKnob, value);
	}

});

var ReminderTooltips = new Class({

	initialize: function(options){
		

		$(document.body).addEvent('mouseover:relay(span.icon-mail)',function(e, elem){
			new EmailTooltip(elem,{
				'className': 'email-reminder-tooltip'
			});
		});


	}
});
/**
*	@class RightTooltip
*	@author Marvin Tam
*	A customized version of Tooltip, which is currently only used in the registration modals.
*/

var RightTooltip = new Class({
	
	Extends: Tooltip,
	
	initialize: function (attachTo) {
		this.parent(attachTo);
		
		this.container.addClass('right-tooltip');
		this.content = new Element('div', {
			'class': 'inner-content'
		}).inject(this.content);
		
	},
	
	setPosition: function (element) {
		// In the case when element has display:none, like in password placeholder case
		element = element.isDisplayed() ? element : element.getParent();
		
		var pos = element.getPosition(this.attachTo);
		
		var attachElSize = element.getSize();
		var tooltipSize = this.container.getSize();
		
		this.container.setStyles({
			'left': pos.x + Math.round(attachElSize.x + 10),
			'top': pos.y + ((attachElSize.y - tooltipSize.y) / 2)
		});
	}
	
});

var ScrollPoints = new Class({

	Implements: [Events, Options],

	options: {
		intentTime: 150
	},
	
	initialize: function(selector, options){
		this.setOptions(options);

		this.selector = selector;
		this.changePoints = {};
		this.intentTime = this.options.intentTime;

		$$(selector).each(function(elem){
			this.changePoints[elem.get('id')] = {
				y: elem.getPosition().y,
				height: elem.getSize().y + elem.getStyle('margin-bottom').toInt()
			}
		}.bind(this));

        window.addEvent('scroll', function () {
            this.scrollEvent();
        }.bind(this));

		//figure out top and bottom elements
		Object.each(this.changePoints, function(value, key, object){
			if(!this.topMost || value.y < this.topMost.y){
				this.topMost = value;
				this.topMost.key = key;
			}

			if(!this.bottomMost || value.y > this.bottomMost.y){
				this.bottomMost = value;
				this.bottomMost.key = key;
			}
		}.bind(this));
	},

	scrollEvent: function(){
		clearTimeout(this.timeout);

		this.found = false;

		var curPos = window.getScroll().y;
		var changePointY = curPos + window.getSize().y / 2;

		Object.each(this.changePoints, function(value, key, object){
			if(changePointY > value.y && changePointY < (value.y + value.height)){
				this.found = true;
				// Only fire onchange
				if (this.lastKey !== key) {
					this.timeout = setTimeout(function(){
						this.fireEvent('hitPoint', key, object);
                        this.updateHistory(key);
						this.lastKey = key;
					}.bind(this),this.intentTime);
				}
			}
		}.bind(this));

		//we're above or below the scroll points - set to bottom or top
		if(!this.found){
			if(changePointY < this.topMost.y){
				this.timeout = setTimeout(function(){
					this.fireEvent('hitPoint', this.topMost.key);
					this.lastKey = this.topMost.key;
				}.bind(this),this.intentTime);
			} else if(changePointY > this.bottomMost.y) {
				this.timeout = setTimeout(function(){
					this.fireEvent('hitPoint', this.bottomMost.key);
					this.lastKey = this.bottomMost.key;
				}.bind(this),this.intentTime);
			}
		}
	},

    /**
     * Updates History state. Update won't happen on initial page load or during popstate event
     * @param key
     */
    updateHistory: function(key) {
        var hash = History.getHash();

        var firstScroll = _.isEmpty(hash) && _.isEmpty(this.lastKey) && !_.isEmpty(key);
        var nextScroll  = !_.isEmpty(this.lastKey) && !_.isEmpty(key) && !_.isEmpty(hash) && (this.lastKey === hash);

        if ((firstScroll || nextScroll)) {
            var uri = new URI();
            var title = '';
            if (window.neighborhoodNav) { /* @todo: stop referencing a globally set variable here. ugly ugly! */
                title = " - " + window.neighborhoodNav.rootEl.getElement('.selected').getElement('a').get('html');
            }

            if (window.history && window.history.pushState) {
                window.history.pushState({'key': key}, document.title + title, uri.set('fragment', key).toString());
            }
        }
    }

});
var ScrollbarMenu = new Class({
	
	Implements: [Events, Options],

	options: {
		fps: 60,
		offset: 140
	},

	initialize: function(selector, options){
		// setup animation framerate
		this.setOptions(options);
		window.requestAnimFrame = function(ScrollMenu){
		    return (
		        window.requestAnimationFrame       || 
		        window.webkitRequestAnimationFrame || 
		        window.mozRequestAnimationFrame    || 
		        window.oRequestAnimationFrame      || 
		        window.msRequestAnimationFrame     || 
		        function(/* function */ callback){
		            window.setTimeout(callback, 1000 / ScrollMenu.options.fps);
		        }
		    );
		}(this);

		this.selector = selector;
		this.scrollFx = new Fx.Scroll($(document.body),{
			wheelStops: false
		});
		this.fading = false;
		this.html = '<div class="wrap tenor">\
						<p class="closed-text">Viewing</p>\
						<div class="list">\
							<header>Jump to</header>\
							<ul></ul>\
						</div>\
						<div class="closed-icon"></div>\
					 </div>\
					 <div class="arrow"></div>';


		// <li><a><span class="icon"></span>2-Up</a></li>

		this.container = new Element('div', {
			id: 'scrollbar-menu',
			'class': 'clearfix unselectable',
			'html': this.html
		});

		this.list = this.container.getElement('ul');
		this.sections = $$(this.selector);
		this.sections.each(function(section){
			new Element('li', {
				'data-id': section.get('id'),
				'data-icon': section.get('data-icon'),
				html: '<a><span class="icon icon-'+ section.get('data-icon') +'"></span>'+ section.get('data-title') +'</a>'
			}).inject(this.list);
		}.bind(this));
		this.listItems = this.list.getElements('li');
		this.openItems = this.container.getElements('.closed-text, .closed-icon');
		this.closedText = this.openItems[0];
		this.closedIcon = this.openItems[1];

		this.container.inject($(document.body));
		this.container.addEvent('click', function(e){
			e.stopPropagation();
			if(this.container.hasClass('open')){
				this.close();
			} else {
				this.open();
				_gaq.push(['_trackEvent', 'Path', 'Menu', 'Show']);
			}
		}.bind(this));

		this.listWrap = this.container.getElement('.list');
		this.listHeight = this.listWrap.measure(function(){
			return this.getSize().y;
		});
		this.listMargin = this.listWrap.measure(function(){
			return -(this.getSize().y / 2 - 15);
		});

		//animation settings
		this.container.set('tween', {
			duration: 200,
			link: 'cancel'
		});
		this.listWrap.set('tween', {
			duration: 200,
			link: 'ignore'
		});
		this.openItems.set('tween', {
			duration: 200,
			link: 'ignore'
		});
		


		var style = document.createElement('style');
			style.type = 'text/css';

			if(Browser.ie){
				style.styleSheet.cssText = '#scrollbar-menu.open .wrap{height:'+ this.listHeight.toInt() +'px; margin-top:'+ this.listMargin +'px}';

			} else {
				style.set('html', '#scrollbar-menu.open .wrap{height:'+ this.listHeight.toInt() +'px; margin-top:'+ this.listMargin +'px}');
			}

			document.head.insertBefore(style, null);

		this.list.addEvent('click:relay(li)', function(e,elem){
			e.stopPropagation();
			this.scrollFx.start(0, $(elem.get('data-id')).getPosition().y - this.options.offset);

			_gaq.push(['_trackEvent', 'Path', 'Menu', elem.get('data-id')]);
		}.bind(this));

		document.addEvent('click', function(e){
			this.close();
		}.bind(this));

		// Trigger points for each homepage section
		var scrollPoints = new ScrollPoints(this.selector, {intentTime: 0});
		scrollPoints.addEvent('hitPoint', function(key, object){
			var scrollbarListItem = this.list.getElement('li[data-id="'+ key +'"]'),
				sectionItem = $(key);

			// set correct style for current section
			this.listItems.removeClass('active');
			scrollbarListItem.addClass('active');

			// Set Icon
			var icon = scrollbarListItem.get('data-icon');
			this.closedIcon.erase('class');
			this.closedIcon.addClass('closed-icon');
			this.closedIcon.addClass('icon-' + icon);

			// Set Text
			this.closedText.set('text', sectionItem.get('data-title').truncate(11, '…'));
		}.bind(this));

		// super duper awesome browser animation functions (fallback is set fps as setInterval)
		window.animLoop = function(timestamp){
			this.fireEvent('animLoop');
			if(this.scrollPosition !== window.getScroll().y && !this.hidden){
				if(Browser.ie){
					clearTimeout(this.ieTimeout);
					delete this.ieTimeout;
					this.container.hide();
				}

				this.setPosition();
				this.close();
				this.fireEvent('painting');
			} else {
				if(Browser.ie){
					if(!this.ieTimeout){
						this.ieTimeout = setTimeout(function(){
							this.container.show();
						}.bind(this), 300);
					}
				}
			}
			requestAnimFrame(animLoop, this.container);
		}.bind(this);

		requestAnimFrame(animLoop, this.container);
	},

	setPosition: function(){
		element_offset = 0;

		//console.log(document.body.scrollTop);

		var target = this.container,
	    scrollbar_button_height = 15, // (depends on browser chrome, unfortunately)
	    window_height = window.getSize().y,
	    max_target_offset = window_height - target.getSize().y,
	    scroll_position = window.getScroll().y,
	    body_height = document.getScrollSize().y,
	    // ratio of full body height to full height of scroll area 
	    // which does not include the buttons.
	    scroll_scale_factor = body_height / (window_height - (scrollbar_button_height * 2)),
	    offset = 0;

	    if (body_height <= window_height) { // If there's no scrollbar.
	        offset = max_target_offset / 2 - element_offset; // Position halfway down the window
	    } else {
	        offset = scrollbar_button_height 
	            + (scroll_position + window_height/2) / scroll_scale_factor; // mid-window position reduced to scroll area scale
	            - element_offset; // offset for chosen 'position' based on element height - see notes below
	    }

	    /* Some catches for when element height might mean it would get positioned outside the window */
	    if (offset < 0) { // Top bounds
	        offset = 0; // Fix it to the top of the window
	    } else if (offset > max_target_offset) { // Bottom bounds
	        offset = max_target_offset; // Fix it to the bottom of the window
	    }

	    var position = scroll_position + offset,
	    	winPer = scroll_position / body_height,
	    	newPos = (window_height - (scrollbar_button_height * 2)) * winPer,
	    	scrollbar_height = ((window_height / body_height) * window_height) - (scrollbar_button_height),
	    	push_down = (scrollbar_height - 31) / 2 > 0 ? (scrollbar_height - 31) / 2 : 0,
	    	setPos = newPos + push_down;
	    
	    target.setStyle('top', setPos);
	    this.scrollPosition = scroll_position;
	},

	open: function(){
		this.container.addClass('open');
		this.listWrap.fade('hide');
		this.openItems.fade('hide');

		var fromBottom = window.getSize().y - this.container.getStyle('top').toInt() - this.container.getSize().y, 
			fromTop = this.container.getStyle('top').toInt();

		if(window.Header && window.Header.options && window.Header.options.fixed){
			fromTop -= $$('header#main')[0].getSize().y;
		}
		
		if(fromBottom - 15 < (this.listHeight / 2)){
			this.container.getElement('.wrap').setStyle('margin-top', -(this.listHeight - fromBottom));
		} else if(fromTop - 30 < (this.listHeight / 2)){
			this.container.getElement('.wrap').setStyle('margin-top', -fromTop + 20 > 0 ? 0 : -fromTop + 20);
		}

		setTimeout(function(){
			this.listWrap.fade('in');
		}.bind(this), 200);
	},

	close: function(){
		this.listWrap.fade('hide');
		this.container.removeClass('open');

		this.container.getElement('.wrap').erase('style');

		setTimeout(function(){
			this.openItems.fade('in');
		}.bind(this), 200);
	},

	show: function(){
		if(!this.fadeLock){
			this.hidden = false;
			this.fadeLock = true;
			this.container.fade('in').get('tween').chain(function(){
				this.fadeLock = false;
			}.bind(this));
		}
	},

	hide: function(){
		if(!this.fadeLock){
			this.fadeLock = true;
			this.container.fade('out').get('tween').chain(function(){
				this.fadeLock = false;
				this.hidden = true;
			}.bind(this));
		}
	}
    
});
var SearchAutocomplete = new Class({

    Extends: Autocomplete,

    options: {
        requestParams: {
            'action': 'autocomplete'
        },
        // Request params added to properties only (not general searches, eg New York)
        propertyRequestParams: {},
        truncateAtChar: 37,
        searchSource: '',
        selectionReplacesQuery: true
    },

    vanities: [],

    selectedResult : null,

    initialize: function (textFieldEl, options) {
        var options = Object.merge(options || {}, {
            asyncRequest: this.asyncRequest
        });
        this.parent(textFieldEl, options);

        this.SearchService = new SearchService();
        this.dynamicCropper = new DynamicCropperLinkGenerator();

        if (this.options.searchSource) {
            new Element('input', {
                type: 'hidden',
                name: 'source',
                value: this.options.searchSource
            }).inject(this.formEl);
        }

        // Default search type is organic, unless specifically overridden
        // by an autocomplete result
        this.searchTypeEl = this.formEl.getElement('input[name=type]') || new Element('input', {
            'type': 'hidden',
            'name': 'type',
            'value': 'Organic'
        }).inject(this.formEl);

        textFieldEl.addEvent('keyup', function(e) {
            if (e.key && e.key.length == 1) {
                this.selectedResult = null;
            }
        }.bind(this));

        this.addEvent('selectionMade', function (selectedEl) {
            if (this.options.selectionReplacesQuery) {
                // Fill text field with selected result
                var data = selectedEl.retrieve('data');
                if (data) {
                    textFieldEl.set('value', data.name.stripTags());
                }
            }

            this.selectedResult = selectedEl;

            this.searchTypeEl.set('value', 'Dropdown');
        });
    },

    getSelectedResult: function() {
        return this.selectedResult;
    },

    asyncRequest: function () {
        var requestParams = this.options.requestParams;
        var query  = this.getSearchQuery();

        this.SearchService.autocomplete(({
            term: query,
            onSuccess: function(data) {
                this.vanities.each(function(vanity) {
                    var query = this.getSearchQuery().toLowerCase();
                    if (vanity.tag.toLowerCase().contains(query) || vanity.terms.contains(query)) {
                        data.push(vanity);
                    }
                }.bind(this));
                this.processData(data);
            }.bind(this),
            onFailure: function(error) {
                new ErrorService().logError("Failed to get autocomplete because " + JSON.stringify(error));
                // nothing
            }

        }));
    },

    createResultEl: function (resultData) {
        if (resultData.geo) {
            return this.createResultElGeo(resultData);
        } else if (resultData.tag) {
            return this.createResultElTag(resultData);
        } else if (resultData.product) {
            return this.createResultElProduct(resultData);
        } else {
            // invalid data
        }
    },

    createResultElGeo : function(resultData) {
        var geo = resultData.geo;
        var link = this.buildSearchUrl(geo);
        var displayName = this.truncate(geo, this.options.truncateAtChar).stripTags();
        return new Element('li').adopt(
                new Element('a', {
                    'href'  : link,
                    'title' : displayName,
                    'class' : 'geo',
                    'html'  : '<span class="icon"></span> ' + displayName,
                    'tabIndex': -1
                })
            ).store('data', {
                link    : link,
                name    : resultData.geo
            });
    },

    createResultElProduct: function(resultData) {
        var product = resultData.product;
        var clickUrl = product.url;
        if(_.size(this.options.propertyRequestParams)) {
            var paramsStr = _.map(this.options.propertyRequestParams, function(val, name) {
                return name + '=' + val;
            }).join('&');
            clickUrl += (clickUrl.indexOf('?') == -1 ? '?' : '') + paramsStr;
        }
        var searchName = product.name;
        if (searchName.indexOf(" - ") !== -1) {
            searchName = searchName.substring(0, searchName.indexOf(" - "));
        }
        var displayName = this.truncate(product.name, this.options.truncateAtChar).stripTags();
        return new Element('li').adopt(
                new Element('a', {
                    'href'  : clickUrl,
                    'title' : displayName,
                    'class' : product.type,
                    'html'  : '<span class="icon"></span> ' + displayName,
                    'tabindex': -1
                })
            ).store('data', {
                link        : clickUrl,
                name        : searchName
            });
    },

    createResultElTag: function(resultData) {
        var tag = resultData.tag;
        var link = resultData.link || this.buildSearchUrl(tag);
        var displayName = resultData.displayName || this.truncate(tag, this.options.truncateAtChar).stripTags(); // no pun intended
        return new Element('li').adopt(
                new Element('a', {
                    'href'  : link,
                    'title' : displayName,
                    'class' : 'tag',
                    'html'  : '<span class="icon"></span> ' + displayName,
                    'tabIndex': -1
                })
            ).store('data', {
                link    : link,
                name    : resultData.tag
            });
    },

    buildSearchUrl : function(term) {

        var url = "/search?q="+encodeURIComponent(term)

        if (Jetsetter.persistentDates) {
            var persistedCheckin = Jetsetter.persistentDates.getCheckIn();
            var persistedCheckout = Jetsetter.persistentDates.getCheckOut();
            if (persistedCheckin && persistedCheckout) {
                url += "&checkin=" + encodeURIComponent(moment(persistedCheckin.toDateObject()).format("YYYY-MM-DD")) + "&checkout=" + encodeURIComponent(moment(persistedCheckout.toDateObject()).format("YYYY-MM-DD"));
            }
        }

        if (Jetsetter.user.publicCheckout) {
            url += '&pch=1';
        }

        if (Jetsetter.user.publicPricing) {
            url += '&sptk=1';
        }

        return url;

    },

    followUrl: function (element, params) {
        var search = new URI(element.retrieve('data').link);
        Object.each(params, function(value, key) {
            search.setData(key, value);
        });

        if (!search.pch && Jetsetter.user.publicCheckout) {
            search.pch = '1';
        }

        if (!search.sptk && Jetsetter.user.publicPricing) {
            search.sptk = '1';
        }

        document.location = search.toString();
        return this;
    }

});

var SearchTooltip = new Class ({

	Implements: Events,

	initialize: function (rootEl) {
		this.rootEl = rootEl;

		var self = this,
			close = self.rootEl.getElement('.hide');

		this.cookie = JSON.decode(Cookie.read('j_stt'));

		//console.log($('splash'));

		if(this.cookie){
			if(this.cookie.show === "true" && parseInt(this.cookie.count) < 9){
				this.incrementCount();
				setTimeout(function() {
					self.show();
				}, 2000);
			}
			else{
				if(this.rootEl.getStyle('display') === 'block'){
					this.rootEl.setStyle('display', 'none');
				}
				this.neverShow();
			}
		}
		else{
			this.createCookie();
			setTimeout(function() {
				self.show();
			}, 2000);

			//console.log(this.cookie.show, this.cookie.count);
		}

		this.setCityName();
		
		close.addEvent('click', function (e){
			e.stop();
			self.hide();
		});

		self.rootEl.getElement('p a').addEvent('click', function (e){
			self.neverShow();
		});
	},

	show: function () {
		this.rootEl.setStyle('display', 'block');
		new Fx.Tween(this.rootEl).start('opacity', 0, 1);
	},

	incrementCount: function () {
		this.cookie.count = parseInt(this.cookie.count) + 1;

		Cookie.write('j_stt', JSON.encode(this.cookie),{
			duration: 365
		});
	},

	createCookie: function () {
		this.cookie = {
			"show": "true",
			"count": "0"
		}

		Cookie.write('j_stt', JSON.encode(this.cookie),{
			duration: 365
		});
	},

	neverShow: function () {
		this.cookie.show = "false";

		Cookie.write('j_stt', JSON.encode(this.cookie),{
			duration: 365
		});

		//console.log(Cookie.read('j_stt'));
	},

	setCityName: function () {
		var link = this.rootEl.getElement('p a'),
			city = this.getRandomCity(),
			cityEscaped = city.toEscapedQuery();

		link.set('text', city);
		link.set('href', '/search?q=' + cityEscaped + '&source=tooltip&type=tooltip');
	},

	hide: function () {
		if(this.rootEl.getStyle('display') === 'block'){
			var closeEffect = new Fx.Tween(this.rootEl)
			.start('opacity', 1, 0).chain(function () {
				this.rootEl.setStyle('display', 'none');
			}.bind(this));
			
		}

		self.fireEvent('closeEnd');
		
		this.neverShow();
	},

	getRandomCity: function() {
		var cities = ['New York City','Las Vegas','Miami', 
					'Los Angeles','Paris, France','Mexico', 
					'Caribbean','Beaches & Islands','San Francisco',
					'Chicago','Wine Country, California','Romantic',
					'Family-Friendly','Hawaii'];

		return cities[new Date().getDate() % cities.length];
	}

});

SearchTooltip.shouldShow = function () {
	var j_stt = Cookie.read('j_stt');

	if(j_stt){
		j_stt = JSON.decode(j_stt);

		if(j_stt.show === "true" && parseInt(j_stt.count) < 9){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}
};

var SlidingCountdown = new Class({
	
	Implements: [Options, Events],
	
	options: {
		'target': new Date().increment('day', 1).decrement('second', 30)
	},
	
	initialize: function (container, options) {
		
		this.setOptions(options);
		
		if (new Date().diff(this.options.target, 'ms') < 0) {
			return;
		}

		this.container = container.addClass('sliding-countdown') || new Element('div', {'class': 'sliding-countdown'});

		if(this.options.theme){
			this.container.addClass('sliding-countdown-' + this.options.theme);
		}
		
		this.hours = new SlidingCountdownUnit(new Element('div').inject(this.container), Object.merge(this.options, {
			'unit': 'hour',
			'separator': true
		}));
		
		this.minutes = new SlidingCountdownUnit(new Element('div').inject(this.container), Object.merge(this.options, {
			'unit': 'minute',
			'separator': true
		}));
		
		this.seconds = new SlidingCountdownUnit(new Element('div').inject(this.container), Object.merge(this.options, {
			'unit': 'second',
			'separator': false
		}));
		
		this.intervalId = setInterval(function () {
			
			var time = new Date();
			
			if (time.diff(this.options.target, 'ms') < 0) {
				clearInterval(this.intervalId);
			}
			
			this.hours.fireEvent('tick', time);
			this.minutes.fireEvent('tick', time);
			this.seconds.fireEvent('tick', time);
		}.bind(this), 250);
	}
});

var SlidingCountdownUnit = new Class({
	
	Implements: [Options, Events],
	
	options: {
		'transition': 'tick',
		'separator': false
	},
	
	label: null,
	
	initialize: function (container, options) {
		
		this.setOptions(options);

		this.container = container.addClass('sliding-countdown-unit') || new Element('div', {'class': 'sliding-countdown-unit'});
		
		var diff = this._getDiff();
		this.msdValue = parseInt(diff / 10);
		this.lsdValue = diff % 10;
		
		var lsdInterval;
		switch(this.options.unit) {
			case 'hour':
				lsdInterval = 60 * 60;
				break;
			case 'minute':
				lsdInterval = 60;
				break;
			case 'second':
				lsdInterval = 1;
				break;
		}

		var msdInterval = lsdInterval / 10;
		
		if (this.options.separator == true) {
			new Element('div', {
				'class': 'sliding-countdown-separator'
			}).inject(this.container);
		}
		
		var digitsContainer = new Element('div', {
			'class': 'sliding-countdown-unit-digits'
		}).inject(this.container);
		
		// Assumes 2 digits
		this.msd = new SlidingCountdownDigit(new Element('div').inject(digitsContainer), Object.merge(this.options, {
			'count': 6,
			'default': this.msdValue % 6,
			'interval': msdInterval
		}));
		this.lsd = new SlidingCountdownDigit(new Element('div').inject(digitsContainer), Object.merge(this.options, {
			'count': 10,
			'default': this.lsdValue % 10,
			'interval': lsdInterval
		}));

		var imgSrc = this.options.theme ? '/static/images/layout/sliding-countdown/' + this.options.theme + '-counter-gloss.png' : '/static/images/layout/sliding-countdown/counter-gloss.png';
		
		new Element('img', {
			'src': imgSrc,
			'class': 'sliding-countdown-gloss'
		}).inject(digitsContainer);
		
		this.addEvent('tick', this.tick.bind(this));
	},
	
	tick: function (time) {
		var diff = this._getDiff();
		
		var msdValue = parseInt(diff / 10);
		if (msdValue != this.msdValue) {
			this.msd.fireEvent('tick', msdValue);
			this.msdValue = msdValue;
		}
		
		var lsdValue = diff % 10;
		if (lsdValue != this.lsdValue) {
			this.lsd.fireEvent('tick', lsdValue);
			this.lsdValue = lsdValue;
		}
		
	},
	
	_getDiff: function () {
		var diff = null;
		var seconds = new Date().diff(this.options.target, 'second');
		switch(this.options.unit) {
			case 'hour':
				diff = parseInt(seconds / (60 * 60));
				break;
			case 'minute':
				diff = parseInt(seconds / 60);
				break;
			case 'second':
				diff = seconds % 60;
				break;
		}
		
		return diff;
	}
});

var SlidingCountdownDigit = new Class({
	
	Implements: [Options, Events],
	
	options: {
		'transition': 'tick',
		'count': 9
	},
	
	initialize: function (container, options) {
		
		this.setOptions(options);
		
		this.container = container.addClass('sliding-countdown-digit') || new Element('div', {'class': 'sliding-countdown-digit'});
		
		this.digitList = new Element('ul').inject(this.container);
		
		var center = this.options.count / 2;
		for (var i = this.options.count - 1; i >= 0; i--) {
			var j = (i + center) % this.options.count;
			new Element('li', {
				'class': 'digit-' + j
			}).inject(this.digitList);
		}
		
		this.currentVal = 0;
		
		this.digitHeight = parseFloat(this.digitList.getChildren()[0].getStyle('height'));
		this.marginTop = (-1 * (center - 1) * this.digitHeight);
		
		this.digitList.setStyle('margin-top', this.marginTop + 'px');
		
		if (this.options.transition == 'tick') {
			this.digitList.set('tween', {
				'property': 'margin-top',
				'duration': 100
			});
		} else if (this.options.transition == 'slide') {
			this.digitList.set('tween', {
				'property': 'margin-top',
				'duration': this.options.interval * 1000,
				'transition': 'linear'
			});
		}
		
		this._slideTo(this.options['default']);
		
		this.addEvent('tick', this.tick.bind(this));
	},
	
	_slideTo: function (value) {
		value = value % this.options.count;
		/*this.digitList.getChildren().each(function (e) {
			console.log(e.get('html'));
		});*/
		
		this.digitList.get('tween').start(this.marginTop - this.digitHeight + 'px').chain(function() {
			this.digitList.grab(this.digitList.getChildren()[0], 'bottom');
			this.digitList.setStyle('margin-top', this.marginTop + 'px');
			this.currentVal = ((this.currentVal - 1) + this.options.count) % this.options.count;
			if (this.currentVal != value) {
				this._slideTo(value);
			}
		}.bind(this));
	},
	
	tick: function (value) {
		this._slideTo(value);
	}
});
var SlidingTabs = new Class({
	
	Implements: Events,

	initialize: function (container) {
		
		this.locked = false;
	
		this.container = container.addClass('slidingTabs') || new Element('div', {'class': 'slidingTabs'});
		this.frame = new Element('div', {'class': 'frame'}).inject(this.container);
		this.tabContainer = new Element('ul').inject(this.frame);
		this.highlight = new Element('div', {
			'class': 'tabHighlight',
			'tween': {
				'duration': 250,
				'transition': Fx.Transitions.Quad.easeInOut
			}
		}).inject(this.frame);
	
		this.tabRecords = [];
		this.tabs = [];
		
		this.selectedTab;
		
	},
	
	init: function () {
	
		this.render();
		this.selectTab(this.tabs[0], true);
		
	},
	
	lock: function () {
		this.locked = true;
	},
	
	unlock: function () {
		this.locked = false;
	},
	
	addTab: function (label, scope, callback, defaultStyle, overStyle, selectedStyle) {
		
		defaultStyle = defaultStyle || '';
		overStyle = overStyle || 'over';
		selectedStyle = selectedStyle || 'selected';
		
		this.tabRecords.push({label: label, scope: scope, callback: callback, defaultStyle: defaultStyle, overStyle: overStyle, selectedStyle: selectedStyle});
		
	},
	
	render: function () {
		var scope = this;
		
		this.tabContainer.empty();
		
		this.tabRecords.each(function (tabRecord, index) {
			
			var tabElement = new Element('li', {'class': tabRecord.defaultStyle});
			tabElement.recordIndex = index;
			
			if (index == scope.tabRecords.length - 1) tabElement.addClass('last');
			
			new Element('div', {'class': 'icon'}).inject(tabElement);
			new Element('label', {'text': tabRecord.label}).inject(tabElement);
			
			tabElement.addEvent('click', function () {
				if (scope.selectedTab != this) {
					scope.selectTab(this);
				}
			});
			
			tabElement.addEvent('mouseenter', function () {
				if (scope.selectedTab != this) {
					this.addClass(tabRecord.overStyle);
				}
			});
			
			tabElement.addEvent('mouseleave', function () {
				if (scope.selectedTab != this) {
					this.removeClass(tabRecord.overStyle);
				}
			});
			
			tabElement.inject(scope.tabContainer);
			
			scope.tabs.push(tabElement);
			
		});
	},
	
	selectTab: function (theTab, quiet) {
		
		if (!this.locked) {
		
			if (this.selectedTab) {
				this.selectedTab.removeClass(this.tabRecords[this.selectedTab.recordIndex].selectedStyle);
				if (Browser.ie6) this.selectedTab.removeClass(this.tabRecords[this.selectedTab.recordIndex].defaultStyle + '-selected');
			}

			theTab.removeClass(this.tabRecords[theTab.recordIndex].overStyle);
			theTab.addClass(this.tabRecords[theTab.recordIndex].selectedStyle);
			if (Browser.ie6) theTab.addClass(this.tabRecords[theTab.recordIndex].defaultStyle + '-selected');
		
			this.selectedTab = theTab;
		
			var highlightTarget = this.selectedTab.getPosition(this.selectedTab.getParent()).x;
			if (!quiet) this.highlight.tween('left', highlightTarget);
			else this.highlight.setStyle('left', highlightTarget);
		
			this.fireEvent('tabSelected', this.tabRecords[this.selectedTab.recordIndex].label);
		
			var callback = this.tabRecords[this.selectedTab.recordIndex].callback;
			if (callback) callback.apply(this.tabRecords[this.selectedTab.recordIndex].scope);
		
		}
		
	},
	
	selectTabByIndex: function (index) {
		
		this.selectTab(this.tabs[index]);
		
	}
	
	
});
var StaffAutocomplete = new Class({
	
	Extends: Autocomplete,
	
	initialize: function (textFieldEl, data) {
		this.parent(textFieldEl, {
			selectionReplacesQuery: false,
			truncateAtChar: 40,
			asyncRequest: this.asyncRequest,
			startSearchingAtCharNum: 1
		});
		
		this.buildHtml();

		this.staffList = data;

		this.addEvent('selectionMade', function(elem){
			window.location = elem.retrieve('link');
		});
	},
	
	getResults: function () {
		var query = this.getSearchQuery().toLowerCase(),
			results = [];

		this.staffList.each(function(staff){
			if(staff.name.toLowerCase().contains(query)){
				results.push(staff);
			}
		});

		this.processData(results, true);
	},

	buildHtml: function(){		
		var source = '<img src="{{thumb}}" />\
					  <div class="info">\
						<h3>{{name}}</h3>\
						<h4>{{title}}</h4>\
					  </div>';
		
		this.template = Handlebars.compile(source);
	},
	
	createResultEl: function (resultData) {
		return new Element('li', {
			'title': resultData.name,
			'class': 'staff-autocomplete clearfix',
			'html':  this.template(resultData)
		}).store('link', resultData.profileUrl);
	}
	
});
var TabbedGroup = new Class({
	
	Implements: [Events, Options],

	initialize: function(tabsEl, contentWrapEl){
		this.tabs = tabsEl.getChildren();
		this.contents = contentWrapEl.getChildren();
		this.selected = this.tabs[0];

		this.tabsEl = tabsEl;
		this.contentWrapEl = contentWrapEl;

		var self = this;
		
		tabsEl.addEvent('click:relay(a)',function(e,elem){
			this.switchTab(elem);
		}.bind(this));
		
	},

	switchTab: function(elem){
		//remove the correct class
		if(this.selected.get('data-id') == 0){
			this.selected.removeClass('first-selected');
		}
		else if(this.selected.get('data-id') == this.tabs.length - 1){
			this.selected.removeClass('last-selected');
		}
		else{
			this.selected.removeClass('selected');
		}

		//apply the correct class
		if(elem.get('data-id') == 0){
			elem.addClass('first-selected')
		}
		else if(elem.get('data-id') == this.tabs.length - 1){
			elem.addClass('last-selected');
		}
		else{
			elem.addClass('selected');
		}

		this.selected = elem;

		this.contents.hide();
		this.contentWrapEl.getElement('#tab' + elem.get('data-id')).show();
	}



});
/**
*	@class TextField
*	@author Marvin Tam
*   
*	A custom text field with built-in support for highlighted, active and 
*	validation states.
*	
*	Note that this depends on a wrapper element to work correctly.
*/

var TextField = new Class({
	
	isValid: false,
	
	initialize: function (element) {
		
		Object.append(element, this);
		
		element.addEvents({
			// Flag for revalidation on change
			change: function () {
				this.isValid = false;
			},
			focus: function () {
				this.resetState();
			}
		});
		
		// @TODO: Figure out a good way to detach this automatically when the element is gone
		// Clear the highlighted state and tooltip
		$(document).addEvent('mousedown', function (event) {
			// IE needs the element.get check after coming back from the share modal
			if (element.get && element.get('value') === '') {
				element.resetState();
			}
		});
		
		return element;
	},
	
	updateState: function (tipMsg) {
		var parentEl = this.getParent();
		if (!parentEl) {
			return this;
		}
		
		var passwordPlaceholderEl = this.retrieve('passwordPlaceholderEl');
		
		parentEl.addClass('working');
		
		if (this.isValid) {
			parentEl.addClass('checked');
			this.removeClass('highlight');
			
			if (passwordPlaceholderEl) {
				passwordPlaceholderEl.removeClass('highlight');
			}
			
			this.tip && this.tip.hide();
		} else {
			parentEl.removeClass('checked');
			this.addClass('highlight');
			
			if (passwordPlaceholderEl) {
				passwordPlaceholderEl.addClass('highlight');
			}
			
			
			if (tipMsg) {
				var offsetParent = (passwordPlaceholderEl) ? 
					passwordPlaceholderEl.getOffsetParent() :
					this.getOffsetParent();
				
				this.tip = this.tip || new RightTooltip(offsetParent);
				this.tip.show(tipMsg, this);
			}
		}
		
		parentEl.removeClass('working');
		return this;
	},
	
	resetState: function () {
		this.removeClass('highlight');
		var passwordPlaceholderEl = this.retrieve('passwordPlaceholderEl');
		if (passwordPlaceholderEl) {
			passwordPlaceholderEl.removeClass('highlight');
		}
		this.tip && this.tip.hide();
		return this;
	},
	
	testValueWith: function (testerFunction) {
		
		// Returns true if the function satisfies the specified conditions
		this.isValid = testerFunction.call(this, this.get('value').clean());
		
		return this;
	}

});

var TwoPaneCalendarBoundTextfield = new Class({

	Extends: TwoPaneMonthlyCalendar,
	
	options: {
		earliestMonth: new Date(),
		latestMonth: new Date(),
		placeholder: Locale.get('Date.placeholder'),
		dateFormat: Locale.get('Date.shortDate'),
		monthFormat: '%B'
	},
	
	initialize: function (textFieldEl, options) {
		this.setOptions(options);
		
		this.textFieldEl = textFieldEl.addClass('calendar-date').set('autocomplete', 'off');
		var selectedDate = this._getDateFromTextField(textFieldEl);
		
		if(this.options.altClass){
			var monthFormat = '%B';
		}
		else{
			var monthFormat = '%b';
		}

		this.parent({
			activeMonth: (selectedDate && selectedDate.clone()) || new Date(),
			earliestMonth: this.options.earliestMonth,
			latestMonth: this.options.latestMonth,
			monthFormat: monthFormat
		});

		if(this.options.altClass){
			this.calendarEl.addClass(this.options.altClass);
		}
		
		this.addEvents({
			dateClick: function (event, element) {
				if (this.isDateSelectable(element)) {
					this.selectDate(element);
					this.fireEvent('select', [this.getSelectedDate(), element]);
					
					var dateString = this.getSelectedDate().format(this.options.dateFormat);
					this.textFieldEl.set('value', dateString).removeClass('placeholder');
					
					this.hideCalendar();
				}
			}.bind(this),
			'dateMouseover': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.addClass('hover');
				}
			}.bind(this),
			'dateMouseout': function (event, element) {
				if (this.isDateSelectable(element)) {
					element.removeClass('hover');
				}
			}.bind(this)
		});
		
		this.textFieldEl.getParent().adopt($(this).addClass('popup-calendar'));
		
		if (selectedDate) {
			this.selectDate(this.getElementFromBookingDate(selectedDate));
		}
		
		
		setTimeout(function () {
			// @TODO: Is there a way to define this using options.dateFormat?
			this.textFieldEl.setPlaceholder(this.options.placeholder);
		}.bind(this), 0); // Firefox needs this delay
		
		
		// Store a reference to onBlur so that it can be selectively removed
		this.textFieldEl.store('onBlur', this.hideCalendar.bind(this));
		
		this.textFieldEl.addEvents({
			'focus': function () {
				this.showCalendar();

				var offset = this.textFieldEl.getOffsetFromViewportBottom(),
					calHeight = this.calendarEl.getSize().y;

				if(offset < calHeight){
					this.calendarEl.addClass('popup-calendar-above');
				}
				else{
					this.calendarEl.removeClass('popup-calendar-above');
				}


				this.textFieldEl.select();
			}.bind(this),
			'blur': this.textFieldEl.retrieve('onBlur'),
			'keydown': function (event) {
				switch (event.key) {
					case 'delete':
					case 'backspace':
						// Clear dates if hitting delete or backspace keys
						this.reset();
                        event.preventDefault();
						break;
					
					case 'tab':
					case 'esc':
					case 'enter':
						// Don't fall through
						break;
						
					default:
						if (!event.control && !event.alt && !event.meta) {
							event.preventDefault();
						}
				}
			}.bind(this)
		});
		
		
		// Hide calendar when clicking on anything other than the calendar
		document.addEvent('mousedown', function (event) {
			var element = $(event.target);
			//we check for element in the IF statement because older IE's do not return an element for some events
			if (element && $(this) === element.getParent('.monthly-calendar') || this.textFieldEl === element) {
				// Temporarily prevent the calendar from hiding
				this._removeBlurEvent();
			} else {
				this.hideCalendar();
			}
		}.bind(this));
		
	},
	
	_getDateFromTextField: function (textFieldEl) {
		var dateString = textFieldEl.get('value');
		if (dateString) {
			//format is chosen by Locale
			var dateFields = dateString.split('/');
			var isDateFieldValid = dateFields.every(function (field) {
				return !!field.toInt();
			});
			
			if (!isDateFieldValid) {
				return null;
			}
			
			return new Date().parse(dateString);
		}
		
		return null;
	},
	
	_addBlurEvent: function () {
		this.textFieldEl.addEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	_removeBlurEvent: function () {
		this.textFieldEl.removeEvent('blur', this.textFieldEl.retrieve('onBlur'));
		return this;
	},
	
	isDateSelectable: function (dayEl) {
		return ((dayEl.hasClass('available') || dayEl.hasClass('standby')) && !dayEl.hasClass('selected'));
	},
	
	showCalendar: function () {
		// @TODO: revert to month of the currently selected date, if available, or revert to the current month
		$(this).show();
		this.fireEvent('calendarOpen');
	},
	
	hideCalendar: function () {
		// Reset the blur event that hides the calendar
		this._addBlurEvent()._removeBlurEvent();
		
		$(this).hide();
		this.fireEvent('calendarClose');
	},

	reset: function (){
		this.deselectDate();
		this.fireEvent('deselect');
		this.textFieldEl.set('value', '');

        if (Jetsetter.persistentDates) {
            Jetsetter.persistentDates.clearPersistedDates();
        }
	}
	
});

/*
 * MonthlyCalendar
 * Depends on MooTools More’s Date
 * 
 * Note: Member functions must run Date.normalize('month') on Date object arguments
 * 
 */
var TwoPaneMonthlyCalendar = new Class({

    Extends: MonthlyCalendar,
	
	options: {
		/*
		onDateClick: function () {},
		onSelect: function () {},
		onDeselect: function () {},
		onMonthChange: function () {},
		*/
		monthFormat: '%B',
		currentMonthFormat: '%B',
		reset: false
	},
	
	initialize: function (options) {
        this.parent(options);
        this.calendarEl.addClass('two-pane');
	},
	
	_createCalendar: function () {
        var activeMonth = this.activeMonth;
        var nextMonth = this.activeMonth.clone().increment('month', 1).normalize('month');

        var activeMonthCalendar = new Element('div').addClass('first-calendar').adopt(this._createMonthControl(activeMonth, true), this.parent(activeMonth));
        var nextMonthCalendar = new Element('div').addClass('next-calendar').adopt(this._createMonthControl(nextMonth, false), this.parent(nextMonth));

        var container = new Element('div').addClass('clearfix').adopt(activeMonthCalendar, nextMonthCalendar);
        return container;
	},

    _createMonthControl: function(month /* date object */, isFirst) {
        var activeMonth  = month;
        var monthFormat = this.options.monthFormat;

        // Controls container element
        var controlsEl = new Element('div', {
            'class': 'controls'
        });

        var renderNextLoading = false,
            renderPreviousLoading = false;

        if (this.monthsAfterLoading) {
            var nextMonth = new Date();
            nextMonth.setTime(activeMonth.getTime());
            nextMonth.setMonth(nextMonth.getMonth() + 1);
            if (nextMonth >= this.monthsAfterLoading) {
                renderNextLoading = true;
            }
        }

        if (this.monthsBeforeLoading) {
            var previousMonth = new Date();
            previousMonth.setTime(activeMonth.getTime());
            previousMonth.setMonth(previousMonth.getMonth() - 1);
            if (previousMonth < this.monthsBeforeLoading) {
                renderPreviousLoading = true;
            }
        }

        if (isFirst) {
            // Controls
            if (renderPreviousLoading) {
                var prevMonthLoading = new Element('div', {
                    'class' : 'prev-month loading-icon',
                    'title' : 'Loading',
                    'html'  : ''
                }).inject(controlsEl);
            } else if (activeMonth > this.earliestMonth) {
                var prevMonthEl = new Element('a', {
                    'class': 'prev-month action',
                    'title': 'Previous month',
                    'html' : '<span> &#10094;</span>'
                }).inject(controlsEl);
            }
        }

        // Show year only when it's not the current year
        var displayYear = (activeMonth.getFullYear() != new Date().getFullYear()) ? ' ' + activeMonth.getFullYear() : '';
        var current = new Element('span', {
            'class': 'current-month',
            'text': activeMonth.format(this.options.currentMonthFormat).toUpperCase() + displayYear
        }).inject(controlsEl);

        if (!isFirst) {
            if (renderNextLoading) {
                var nextMonthLoading = new Element('div', {
                    'class' : 'next-month loading-icon',
                    'title' : 'Loading',
                    'html'  : ''
                }).inject(controlsEl);
            } else if (activeMonth < this.latestMonth) {
                var nextMonthEl = new Element('a', {
                    'class': 'next-month action',
                    'title': 'Next month',
                    'html' : '<span> &#10095;</span>'
                }).inject(controlsEl);
            }
        }

        return controlsEl;
    },


    _createControls: function () {
        return '';
    }
	
});

var UKBanner = new Class({
	
	Extends: PromoBanner,

	initialize: function(rootEl, options){
		var self = this;

		self.parent(rootEl, {
			'message': "Welcome! We've routed you to our regional site, Jetsetter.co.uk. To go back to Jetsetter.com, ",
			'actionLabel': "click here"
		});

		var cookie = Cookie.read('j_uk');

		if(cookie){
			self.cookie = JSON.decode(cookie);	
		}
		else{
			self.cookie = {
				'views': 0
			}
		}


		if(self.cookie.views < 11){
			if(self.cookie.views == 0){
				setTimeout(function () {
					self.slideIn();
				}, 1500);
			}
			else{
				self.show();	
			}

			self.cookie.views = parseInt(self.cookie.views) + 1;

			Cookie.write('j_uk', JSON.encode(self.cookie), {
				domain: Jetsetter.cookieDomain,
				path: '/',
				duration: 365
			});
		}

		self.addEvents({
			'action': function() {
				Jetsetter.setEntityAndRedirect(1)
			},
			'close': function() {
				self.cookie.views = 11;

				Cookie.write('j_uk', JSON.encode(self.cookie), {
					domain: Jetsetter.cookieDomain,
					path: '/',
					duration: 365
				});
				
				self.fireEvent('closeEnd');
			}
		});

	}

});

UKBanner.shouldShow = function () {
	var redirect = Cookie.read('j_redirected');

	if(redirect){
		var j_uk = Cookie.read('j_uk');

		if(j_uk){
			j_uk = JSON.decode(j_uk);
			if(j_uk.views < 10){
				return true;
			}
			else{
				return false;
			}
		}
		else{
			if(Jetsetter.CHANNEL_ID === 10){
				return true;
			}
			else{
				return false;
			}
		}
			
	}
	else{
		return false;	
	}
};
var ValidateableField = new Class({
	
	Implements: [Events, Options],

	options: {
		/* validateWith: function() */
		tooltipType: 'top',
		setPlaceholder: true
	},

	initialize: function(inputEl, options){
		this.inputEl = inputEl;
		this.setOptions(options);

		if(!this.options.validateWith){
			throw new Error("ERROR: Must include validateWith function");
			return false;
		}

		if(this.options.setPlaceholder){
			this.inputEl = inputEl.set('value', '').setPlaceholder();
		}

		this.inputEl.addEvents({
			'input': function () {
				this.state = 'validating';
				// this.validateField();
			}.bind(this),
			'blur': function () {
				if (this.state != 'valid') {
					this.validateField();
				}
			}.bind(this),
			'focus': function () {
				this.reset();
			}.bind(this)
		});

		if (Browser.ie) {
			this.inputEl.addEvent('keyup', function (event) {
				switch (event.key) {
					case 'up':
					case 'down':
					case 'enter':
					case 'esc':
						return false;
					default:
						this.inputEl.fireEvent('input');
				}
			}.bind(this));
		}
		
		this.reset();

	},

	validateField: function(){
		var message = this.options.validateWith(this.inputEl.get('value'));

		if(message !== true){
			this.invalidate(message)
		} else {
			this.state = 'valid';
		}
	},

	invalidate: function(message){
		this.state = 'invalid';
		this.inputEl.addClass('highlight');
		this.showTooltip(message);
	},

	reset: function(){
		this.inputEl.removeClass('highlight');
		this.hideTooltip();
	},

	showTooltip: function (message) {		
		if (this.options.tooltipType != 'none') {
			this.tooltip = this.tooltip || (function (that) {
				var attachTo = that.inputEl.getParent();
				return (that.options.tooltipType == 'top') ? new Tooltip(attachTo) : new RightTooltip(attachTo);
			})(this);
			this.tooltip.show(message, this.inputEl);
		}
		
	},
	
	hideTooltip: function () {
		if (this.tooltip) {
			this.tooltip.hide();
		}
	}

});
var iPadModal = new Class({
	
	Extends: Modal,

	initialize: function(cloneEl, options){
		//var clone = cloneEl.clone().show();
		this.parent(Object.merge(options || {}, {
			id: 'ipad-modal',
			dismissable: false
		}));

		this.buildHtml();

		this.setOrientation();
		
		this.show();

		_gaq.push(['_trackEvent', 'Modal', 'iPad', 'Opened']);
		
		this.download = this.canvas.getElement('.cta-button');
		this.no = this.canvas.getElement('.no');

		this.download.addEvent('click', function(){
			this.writeCookie();
			_gaq.push(['_trackEvent', 'Modal', 'iPad', 'Click-iTunes']);
			document.location = 'http://itunes.apple.com/us/app/jetsetter-for-ipad/id416813861';
		}.bind(this));

		this.no.addEvent('click', function(){
			this.writeCookie();
			this.close();
		}.bind(this));

		window.addEvent('orientationchange', function(){
			this.setOrientation();
		}.bind(this));


	},

	buildHtml: function(){
		var data = {
				'h2': 'Introducing the Jetsetter iPad App',
				'p': 'Awarded <b>Best iPad Travel App</b> by Apple\'s App Store Rewind 2011',
				'src': Jetsetter.CDN_HOST + '/static/images/splash/ipad-modal.jpg'
			},
			source = '<div class="info clearfix">\
						<div class="text">\
							<h2>{{{h2}}}</h2>\
							<p>{{{p}}}</p>\
							<div class="actions">\
								<a class="cta-button">Download Now</a>\
								<a class="no">No thanks, continue to site</a>\
							</div>\
						</div>\
						<img src="{{src}}" />\
					</div>',
			template = Handlebars.compile(source);
		
		this.canvas.set('html',template(data));
	},

	writeCookie: function(){
		this.cookie = JSON.decode(Cookie.read('j_ipad'));

		if(this.cookie){
			this.cookie.count++;
			this.cookie.last_seen = new Date().toString();
			if(this.cookie.count > 3){
				this.cookie.show = false;
			}
		}
		else{
			this.cookie = {
				'last_seen': new Date().toString(),
				'show': true,
				'count': 1
			}
		}

		Cookie.write('j_ipad', JSON.encode(this.cookie),{
			duration: 365
		});
	},

	setOrientation: function(){
		this.orientation = window.orientation;
		var className = '';

		if(this.orientation === 0 || this.orientation === 180){
			className = 'ipad-vertical';
		}
		else{
			className = 'ipad-horizontal';
		}

		$(document.html).addClass(className);
	}

});

iPadModal.shouldShow = function(){
	if(!Browser.Platform.iPad){
		return false;
	}

	var cookie = JSON.decode(Cookie.read('j_ipad'));

	if(cookie){
		var lastSeen = Date.parse(cookie.last_seen),
			count = cookie.count;
				
		if(count < 3 && lastSeen.diff(new Date(), 'day') > 7 && cookie.show){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}

	
};

iPadModal.whitelist = ['property-details','splash','multisale'];

var HomesModal = new Class({
	
	Extends: Modal,

	initialize: function(options){

		this.parent(Object.merge(options || {}, {
			id: 'homes-modal',
			dismissable: true
		}));

		this.buildHtml();

		_gaq.push(['_trackEvent', 'Modal', 'Homes', 'ClickThrough']);

		this.canvas.getElement('.cta-button').addEvent('click', function(){
			_gaq.push(['_trackEvent', 'Modal', 'Homes', 'ClickThrough']);
		});

		this.writeCookies();
	},

	buildHtml: function(){
		var data = {},
			source =   '<h2>Introducing Jetsetter Homes</h2>\
						<div class="hero">\
							<div class="info">\
								<h3>There’s no place like<br/> someone else’s home.<br/> Get $500 off your <br/> first booking.*</h3>\
								<a href="/homes" class="cta-button">Learn More &rarr;</a>\
							</div>\
						</div>\
						<ul class="features">\
							<li>\
								<span class="icon icon-logo"></span>\
								<p>Hassle-free.<br/> Book a Home directly<br/> through Jetsetter.</p>\
							</li>\
							<li>\
								<span class="icon icon-booking"></span>\
								<p>Real-time bookings.<br/> Rates and nights<br/> are guaranteed as<br/> presented on-site.</p>\
							</li>\
							<li class="last">\
								<span class="icon icon-verified"></span>\
								<p>Jetsetter Verified.<br/> All Homes are verified<br/> just like our Hotels and<br/> Resorts.</p>\
							</li>\
						</ul>\
						<div class="fineprint">* Receive $500 off your first purchase of a Jetsetter Home with a minimum five-night stay until October 31, 2011.  Discount will automatically appear upon checkout.</div>',
			template = Handlebars.compile(source);

		this.canvas.set('html', template(data));
	},

	writeCookies: function(){
		var sessionCookie = Cookie.read('j_hmses'),
			shownCookie = Cookie.read('j_hms');

		if(!sessionCookie){
			Cookie.write('j_hmses', true);

			shownCookie++;

			Cookie.write('j_hms', shownCookie, {
				duration: 365
			});
		}		
	}

});

HomesModal.shouldShow = function(){	
	var sessionCookie = Cookie.read('j_hmses'),
		shownCookie = Cookie.read('j_hms');

	if(shownCookie){
		if(shownCookie < 2){
			if(sessionCookie){
				return false;
			}
			else{
				return true;
			}
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}
};

var MemorialBanner = new Class({
	
	initialize: function(){
		this.buildHtml();

		this.bannerEl.inject($('page-content'), 'top');
	},

	buildHtml: function(){		
		this.bannerEl = new Element('div',{
			'id': 'memorial-banner',
			'class': 'unselectable',
			'html': "<p>All of our proceeds from today's Jetsetter sales will be donated to charities that have had a positive effect on Downtown New York since 9/11. <a target='_blank' href='http://passport.jetsetter.com/index.php/2011/09/09/jetsetter-remembers'>Click here</a> to learn more, and to find out how to help</p>"
		});
	}
});

var VirginModal = new Class({
	
	Extends: Modal,

	initialize: function(linkEl, options){
		this.parent(Object.merge(options || {}, {
			id: 'virgin-modal',
			dismissable: true
		}));

		this.type = linkEl.get('class') || 'all';

		this.buildHtml();
		this.mapEl = this.container.getElement('.map-wrap img');
		this.selectEl = this.container.getElement('.select-wrap select');

		this.selectEl.addEvent('change', function(){
			this.setImageForKey(this.selectEl.getSelected().get('value'));
		}.bind(this));

		this.imageContext = Jetsetter.CDN_HOST + '/static/images/marketing/virgin/VirginMap-';

		//get selected option on startup
		this.setImageForKey(this.selectEl.getSelected().get('value'));
	},

	buildHtml: function(){
		var data = {},
			source =   '<h1>Virgin Flight Routes</h1>\
						<div class="select-wrap">\
							<select>\
								{{#if all}}\
									<option value="Boston">Boston</option>\
									<option value="Chicago">Chicago</option>\
									<option value="Dallas">Dallas</option>\
									<option value="FortLauderdale">Fort Lauderdale</option>\
									<option value="LasVegas">Las Vegas</option>\
									<option value="LosAngeles">Los Angeles</option>\
									<option value="NewYork">New York</option>\
									<option value="Orlando">Orlando</option>\
									<option value="PalmSprings">Palm Springs</option>\
									<option value="Philadelphia">Philadelphia</option>\
									<option value="SanDiego">San Diego</option>\
									<option value="SanFrancisco">San Francisco</option>\
									<option value="Seattle">Seattle</option>\
									<option value="WashingtonDC">Washington D.C.</option>\
								{{/if}}\
								{{#if long}}\
									<option value="Boston">Boston</option>\
									<option value="Chicago">Chicago</option>\
									<option value="FortLauderdale">Fort Lauderdale</option>\
									<option value="LasVegas">Las Vegas</option>\
									<option value="LosAngeles">Los Angeles</option>\
									<option value="NewYork">New York</option>\
									<option value="Orlando">Orlando</option>\
									<option value="PalmSprings">Palm Springs</option>\
									<option value="Philadelphia">Philadelphia</option>\
									<option value="SanDiego">San Diego</option>\
									<option value="SanFrancisco">San Francisco</option>\
									<option value="Seattle">Seattle</option>\
									<option value="WashingtonDC">Washington D.C.</option>\
								{{/if}}\
								{{#if medium}}\
									<option value="Dallas">Dallas</option>\
									<option value="LasVegas">Las Vegas</option>\
									<option value="LosAngeles">Los Angeles</option>\
									<option value="SanDiego">San Diego</option>\
									<option value="SanFrancisco">San Francisco</option>\
									<option value="Seattle">Seattle</option>\
								{{/if}}\
								{{#if short}}\
									<option value="LasVegas">Las Vegas</option>\
									<option value="LosAngeles">Los Angeles</option>\
									<option value="PalmSprings">Palm Springs</option>\
									<option value="SanDiego">San Diego</option>\
									<option value="SanFrancisco">San Francisco</option>\
									<option value="Seattle">Seattle</option>\
								{{/if}}\
							</select>\
						</div>\
						<div class="map-wrap">\
							<img src="" height="350" width="500" />\
						</div>',
			template = Handlebars.compile(source);
		
		//set correct list
		data[this.type] = true;

		this.canvas.set('html', template(data));
	},

	setImageForKey: function(key){
		this.mapEl.set('src', this.imageContext + key + '.jpg');
	}
});
var iPhoneBanner = new Class({
	
	Implements: Events,

	initialize: function(){
		this.buildHtml();
		this.bannerEl.slide('hide');
		_gaq.push(['_trackEvent', 'Banner', 'iPhone', 'Show']);

		this.bannerEl.addEvents({
			'click:relay(.cta-button)': function () {
				_gaq.push(['_trackEvent', 'Banner', 'iPhone', 'ClickThrough']);
			},
			'click:relay(.close)': this.close.bind(this)
		}).set('tween', {
			transition: Fx.Transitions.Quint.easeIn
		});
		
		setTimeout(function(){
			this.bannerEl.slide('in');
		}.bind(this),2000);

		this.writeCookie(true);
	},

	buildHtml: function(){
		var data = {
				'src': Jetsetter.CDN_HOST + '/static/images/marketing/iphone/iphone-banner-phones.png' 
			},
			source = '<div id="marketing-banner" class="iphone-banner unselectable">\
						<h2>Travel made travel-sized</h2>\
					  	<img src="{{src}}"  width="257" height="128"/>\
					  	<h3>Introducing the <br/> New Jetsetter <br/> iPhone App</h3>\
					  	<a href="http://itunes.apple.com/us/app/jetsetter/id416813139" class="cta-button">Download Now</a>\
					  	<a class="close"><span class="text">Close</span></a>\
					  </div>',
			template = Handlebars.compile(source);

		this.bannerEl = new Element('div',{
			'class': 'iphone-banner-wrap',
			'html': template(data)
		});

		this.bannerEl.inject($('page-content'), 'before');	
	},

	close: function () {
		_gaq.push(['_trackEvent', 'Banner', 'iPhone', 'Close']);
		this.writeCookie(false);
		this.bannerEl.slide('out');
	},

	writeCookie: function(show){
		this.cookie = JSON.decode(Cookie.read('j_ipb'));
		
		if(this.cookie){
			this.cookie.show = show;

			this.cookie.count++;
			if(this.cookie.count > 20){
				this.cookie.show = false;
			}
		}
		else{
			this.cookie = {
				'show': show,
				'count': 1
			}
		}
		
		Cookie.write('j_ipb', JSON.encode(this.cookie),{
			duration: 365
		});

	}

});

iPhoneBanner.shouldShow = function (){
	var cookie = JSON.decode(Cookie.read('j_ipb'));

	if(cookie){
		var count = cookie.count;
				
		if(count < 20 && cookie.show){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}
};


var iPhoneInterstitial = new Class({
	
	//Extends: Modal,

	initialize: function(cloneEl, options){
		//var clone = cloneEl.clone().show();
		/*this.parent(Object.merge(options || {}, {
			id: 'iphone-interstitial',
			dismissable: false
		}));*/

		//this.buildHtml();
		this.canvas = $$('div.canvas.clearfix')[0];

		//this.setOrientation();
		
		//this.show();

		_gaq.push(['_trackEvent', 'Interstitial', 'iPhone', 'Opened']);
		
		this.download = this.canvas.getElement('.cta-button');
		this.no = this.canvas.getElement('.no');

		this.download.addEvent('click', function(){
			this.writeCookie();
			_gaq.push(['_trackEvent', 'Interstitial', 'iPhone', 'Clicked-iTunes']);
			setTimeout(function() {
				document.location = 'http://itunes.apple.com/us/app/jetsetter/id416813139';
			}, 250);
		}.bind(this));

		this.no.addEvent('click', function(){
			this.writeCookie();
			//this.close();
			var uri = new URI();
			var returnUri = uri.getData('return');
			if (returnUri) {
				document.location = unescape(returnUri);
			} else {
				history.go(-1);
			}
		}.bind(this));

		/*window.addEvent('orientationchange', function(){
			this.setOrientation();
		}.bind(this));*/


	},

	buildHtml: function(){
		var data = {
				'h2': 'Introducing<br/> the new<br/> Jetsetter<br/> iPhone App',
				'src': Jetsetter.CDN_HOST + '/static/images/marketing/iphone/iphone-interstitial.jpg'
			},
			source = '<div class="info clearfix">\
						<div class="text clearfix">\
							<h2>{{{h2}}}</h2>\
							<ul>\
								<li><span>This is not final text</span></li>\
								<li><span>This is not final text</span></li>\
								<li><span>This is not final text</span></li>\
								<li><span>This is not final text</span></li>\
								<li><span>This is not final text</span></li>\
							</ul>\
						</div>\
						<img src="{{src}}" />\
						<div class="actions">\
							<a class="cta-button">Download the Jetsetter App now</a>\
							<a class="no">No thanks.</a>\
						</div>\
					</div>',
			template = Handlebars.compile(source);
		
		this.canvas.set('html',template(data));
		
	},

	writeCookie: function(){
		this.cookie = JSON.decode(Cookie.read('j_iphone'));

		if(this.cookie){
			this.cookie.count++;
			this.cookie.last_seen = new Date().toString();
			if(this.cookie.count > 3){
				this.cookie.show = false;
			}
		}
		else{
			this.cookie = {
				'last_seen': new Date().toString(),
				'show': true,
				'count': 1
			}
		}

		Cookie.write('j_iphone', JSON.encode(this.cookie),{
			duration: 365
		});
	},

	setOrientation: function(){
		this.orientation = window.orientation;
		var className = '';

		if(this.orientation === 0 || this.orientation === 180){
			className = 'iphone-vertical';
		}
		else{
			className = 'iphone-horizontal';
		}

		$(document.html).addClass(className);
	}

});

iPhoneInterstitial.shouldShow = function(){
	if(!Browser.Platform.iPhone){
		return false;
	}


	var cookie = JSON.decode(Cookie.read('j_iphone'));

	if(cookie){
		var lastSeen = Date.parse(cookie.last_seen),
			count = cookie.count;
				
		if(count < 3 && lastSeen.diff(new Date(), 'day') > 7 && cookie.show){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}	
};

iPhoneInterstitial.ehitelist = ['property-details','splash','multisale'];

var iPhoneModal = new Class({
	
	Extends: Modal,

	initialize: function(options){

		this.parent(Object.merge(options || {}, {
			id: 'iphone-modal',
			dismissable: false
		}));

		this.buildHtml();

		_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'Show']);

		this.canvas.getElementById('close-button').addEvent('click', function() {
			this.close();
			this.endShowing();
			_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'Close']);
		}.bind(this));
		
		this.canvas.getElementById('app-store').addEvent('click', function() {
			document.location = 'http://bit.ly/IYFhTn';
			_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'Click']);
		}.bind(this));

		var shake = function(el) {
			new Fx.Shake(el).start().chain(function () {
				el.setStyles({
					'position': '',
					'left': ''
				});

				setTimeout(function () {
					el.focus();
				}, 0);
			});
		};
		
		var sendText = function(event) {
			event.stop();
			
			var phoneNumberContainer = this.canvas.getElementById('ipm8');
			var phoneNumber = this.canvas.getElementById('phone-number');
			var contactPhoneNumber = phoneNumber.get('value').clean();
			if (!contactPhoneNumber) {
				shake(phoneNumberContainer);
				return;
			}
		
			var messagingService = new MessagingService();
			messagingService.sendTextMessage({
				recipientGuid: Jetsetter.user.guid,
				recipientPhone: contactPhoneNumber,
				body: 'Get the Jetsetter iPhone app now in the app store: http://bit.ly/IYFhTn',
				onSuccess: function (data) {
					if (data) {
						this.canvas.getElementById('ipm7').hide();
						this.canvas.getElementById('ipm8').hide();
						this.canvas.getElementById('ipm7a').show();
						this.canvas.getElementById('ipm8a').show();
						this.endShowing();
						_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'TextSent']);
					} else {
						shake(phoneNumberContainer);
						_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'TextFailed']);				
					}
				}.bind(this),
				onFailure: function() {
					shake(phoneNumberContainer);
					_gaq.push(['_trackEvent', 'Modal', 'iPhone', 'TextFailed']);
				}
			});
			
		}.bind(this);	
		
		this.canvas.getElementById('text-me').addEvent('click', sendText);
		this.canvas.getElementById('ipm-send-again').addEvent('click', sendText);
		this.canvas.getElementById('phone-number').addEvent('keydown', function(event) {
			if (event.key == 'enter') {
				sendText(event);
			}
		}.bind(this));

		this.writeCookie();
	},
	
	buildHtml: function(){
		var data = {},
			source =   '<div id="ipm1">\
							<div id="ipm2">\
								<div id="ipm4">\
									<p id="intro">Introducing Jetsetter for iPhone</p>\
									<p id="message">Travel Made Travel Sized</p>\
									<p id="info">An exclusive collection of trips you can\'t afford to miss-experienced through high-definition photography and insider reviews. Book immediately at members-only rates, wherever you are.</p>\
									<div id="app-store"></div>\
								</div>\
								<div id="ipm5">\
									<div id="iphones"></div>\
									<div id="close-button"></div>\
								</div>\
							</div>\
							<div id="ipm3">\
								<div id="ipm6"></div>\
								<div id="ipm7">\
									<p>Text me a link to the app</p>\
								</div>\
								<div id="ipm8">\
									<input id="phone-number" type="text" placeholder="Your Phone Number" />\
									<input id="text-me" type="submit" value="" />\
								</div>\
								<div id="ipm7a" style="display:none"><span id="ipm-check-phone">Check your phone.</span><span id="ipm-check-phone-sub">A link to the Jetsetter app has been sent to you.</span></div>\
								<div id="ipm8a" style="display:none"><button id="ipm-send-again">Send again</button></div>\
							</div>\
						</div>',
			template = Handlebars.compile(source);

		this.canvas.set('html', template(data));
	},

	writeCookie: function(){
		this.cookie = JSON.decode(Cookie.read('j_ipm'));

		if(this.cookie){
			this.cookie.count++;
			this.cookie.last_seen = new Date().toString();
			if(this.cookie.count > 3){
				this.cookie.show = false;
			}
		}
		else{
			this.cookie = {
				'last_seen': new Date().toString(),
				'show': true,
				'count': 1
			}
		}

		Cookie.write('j_ipm', JSON.encode(this.cookie),{
			duration: 365
		});
	},
	
	endShowing: function() {
		this.cookie = JSON.decode(Cookie.read('j_ipm'));
		if (this.cookie) {
			this.cookie.show = false;
			Cookie.write('j_ipm', JSON.encode(this.cookie),{
				duration: 365
			});	
		} else {
			this.writeCookie();
		}
	}

});

iPhoneModal.shouldShow = function(){
	// disabled per JETSETTER-7177
	return false;

	var cookie = JSON.decode(Cookie.read('j_ipm'));

	if(cookie){
		var lastSeen = Date.parse(cookie.last_seen),
			count = cookie.count;
				
		if(count < 3 && lastSeen.diff(new Date(), 'day') > 7 && cookie.show){
			return true;
		}
		else{
			return false;
		}
	}
	else{
		return true;
	}
};
/*
	Screens to be used in conjunction with SlideShow.
*/
var Screen = new Class({
	
	Implements: [Events, Options],
	
	initialize: function (rootEl, options) {
		this.setOptions(options);
		this.rootEl = rootEl.store('instance', this);
	},
	
	setFocus: function () {
		
	},
	
	setTitle: function (title) {
		this.titleEl = this.titleEl || this.rootEl.getFirst('h2');
		if (this.titleEl) {
			this.titleEl.set('text', title);
		}
		return this;
	},
	
	setMessage: function (message) {
		this.messageEl = this.messageEl || this.rootEl.getFirst('.message');
		
		// If the message isn't in a <p>, (naively) add it
		if (this.messageEl) {
			this.messageEl.set('html', (message.contains('<p>')) ? message : '<p>' + message + '</p>');
		}
		return this;
	},
	
	toElement: function () {
		return this.rootEl;
	}
	
});


Screen.SlideShowHelpers = new Class({
	
	getReturnUrl: function () {
		// Get current url ?return=
		var currentUri = new URI();
		var queryParams = currentUri.get('data');
		var returnUrl = Jetsetter.HOST + '/sales';
		
		// Make sure it isn't looping on /(s)login
		if (queryParams['return']) {
			var returnUri = new URI($(document.body).get('id') == 'login' ? queryParams['return'].decode64() : queryParams['return']);
			if (!returnUri.get('file').test(/s?login/)) {
				returnUrl = returnUri.toString();
			}
		}
		
		// Preserve hash for #tour and such
		return returnUrl + location.hash;
	},
	
	showScreenById: function (id, options) {
		var screenEl = this.rootEl.getElement('#' + id);
		var index = this.modalScreens.slides.indexOf(screenEl);

		if (index !== -1) {
			this.modalScreens.show(index, options || {
				transition: (this.modalScreens.index < index) ? 'stylizedPushLeft' : 'stylizedPushRight'
			});
		}
		
		return this;
	},
	
	setFocus: function () {
		this.modalScreens.current.retrieve('instance').setFocus();
	}
	
	
});

// @TODO: This should be namespaced to something more specific to login/reg
Screen.Utils = new Class({
	
	getReturnUrl: function () {
		// Get current url ?return=
		var currentUri = new URI();
		var queryParams = currentUri.get('data');
		var returnUrl = Jetsetter.HOST + '/sales';
		
		// Make sure it isn't looping on /(s)login
		if (queryParams['return']) {
			var returnUri = new URI($(document.body).get('id') == 'login' ? queryParams['return'].decode64() : queryParams['return']);
			if (!returnUri.get('file').test(/s?login/)) {
				returnUrl = returnUri.toString();
			}
		}
		
		// Preserve hash for #tour and such
		return returnUrl + location.hash;
	},
	
	getRequestData: function (formEl) {
		var data = formEl.toQueryObject();
		data['return'] = this.getReturnUrl();
		
		return data;
	},
	
	validateEmail: function (element, ignoreEmpty) {
		if (ignoreEmpty && !element.get('value').clean()) {
			return true;
		}
		
		element.testValueWith(function (value) {
			return value.validateAsEmail();
		}).updateState('Please enter a valid email address.');
		
		return element.isValid;
	},
	
	validatePassword: function (element, ignoreEmpty) {
		if (ignoreEmpty && !element.get('value').clean()) {
			return true;
		}
		
		element.testValueWith(function (value) {
			return value.length >= 7;
		}).updateState('Please enter a password that is at least 7 characters.');

		return element.isValid;
	},
	
	showLockOutMessage: function (element) {
		element.isValid = false;
		element.updateState('Too many attempts. Try again later.');
		_gaq.push(['_trackEvent', 'Checkout', 'Login', 'Click']);
		
		return this;
	}
	
});

var ForgotPasswordScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Screen.Utils],
	
	initialize: function (rootEl) {
		this.parent(rootEl);
		
		this.rootEl = rootEl;
		this.messageEl = this.rootEl.getElement('.message');
		this.originalMessage = this.messageEl.get('html');
		
		this.emailFieldEl = new TextField(rootEl.getElement('input[type=email]').setPlaceholder());
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.requestPasswordReset();
		}.bind(this));
		
	},
	
	requestPasswordReset: function () {
		if (!this.validateEmail(this.emailFieldEl)) {
			return false;
		}
		
        new UserService().addUserPasswordReset({
            emailAddress: this.formEl.getElement('input[name=email]').get('value'),
            onSuccess: function() {
				this.formEl.hide();
				var msgHtml = '<p>An email with a link to reset your password has been sent to <span class="email">'
					+ this.emailFieldEl.get('value') + '</span>.</p>';
				this.messageEl.set('html', msgHtml).set('opacity', 0).tween('opacity', 1);
            }.bind(this),
            onFailure: function(errorCode, message) {
				switch (errorCode) {
					// Invalid email address
					case 128:
						this.emailFieldEl.isValid = false;
						this.emailFieldEl.updateState('Please enter a valid email address');
						break;
					
					// Not a Jetsetter member
					case 401:
						this.emailFieldEl.isValid = false;
						this.emailFieldEl.updateState('Unrecognized email address');
						break;
					
					case 420:
						this.showLockOutMessage(this.emailFieldEl);
						break;
                    default:
                        this.emailFieldEl.updateState('Please enter a valid email address');
                        break;
				}
            }.bind(this)
        });
	},
	
	setFocus: function () {
		setTimeout(function () {
			this.emailFieldEl.focus();
		}.bind(this), 0);
	},
	
	reset: function () {
		this.formEl.show();
		this.messageEl.set('html', this.originalMessage);
	}
	
});

var LoginScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Options, Screen.Utils],

	options: {},
	
	loginAttempts: 0,
	secure: false,
	
	initialize: function (rootEl, options) {
		this.setOptions(options);
		this.parent(rootEl);
		
		this.emailFieldEl = new TextField(rootEl.getElement('input[type=email]'));
		this.emailFieldEl.addEvents({
			blur: function (event) {
				this.validateEmail($(event.target), true);
			}.bind(this)
		});
		
		if (rootEl.getElement('input[type=password]')) {
			this.secure = true;
			this.passwordFieldEl = new TextField(rootEl.getElement('input[type=password]'));
		}
		
		// Prefill email from j_sess cookie or options
		if(this.options.emailAddress && this.options.emailAddress !== ''){
			this.emailFieldEl.set('value', this.options.emailAddress);
		} else if(Jetsetter.user.email) {
			this.emailFieldEl.set('value', Jetsetter.user.email);
			this.emailFieldEl.isValid = true;
		}
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.login();
		}.bind(this));
		
		this.submitButtonEl = this.formEl.getElement('button[type=submit]').set('disabled', false);
	},
	
	login: function () {
		if (!this.validateEmail(this.emailFieldEl)) {
			return false;
		}
		
		if (this.secure) {
			// Make sure password field is not blank
			this.passwordFieldEl.testValueWith(function (value) {
				return value.length > 0;
			}).updateState('Please enter a password.');
			if (!this.passwordFieldEl.isValid) {
				return false;
			}
		}
			
		this.submitButtonEl.set('disabled', true);

		Jetsetter.Auth.authenticate(Object.merge(this.getRequestData(this.formEl), {
			type: 'email',
			onSuccess: function(json){
				this.fireEvent('login');
			}.bind(this),
			onFailure: function(json){
				var errorCode = json.error.code,
					errorMessage = json.error.message;
				// If there's a redirect target to an invite link, go there.
				if (errorCode == 410) {
					this.loginAttempts++;
				}
				if (this.loginAttempts >= 3) {
					this.fireEvent('loginAttemptLimitReached', this.emailFieldEl.get('value'));
				} else {
					this.emailFieldEl.isValid = false;
					this.emailFieldEl.updateState(errorMessage);
				}
				this.submitButtonEl.set('disabled', false);
			}.bind(this)
		}));
	},
	
	setFocus: function () {
		// Focus on the first empty field
		var focusOnEl = (!this.emailFieldEl.get('value')) ? this.emailFieldEl : this.passwordFieldEl;
		
		setTimeout(function () {
			try {
				focusOnEl.focus();
			} catch (ex) {}
		}, 0);
	}
	
});

var RegistrationScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Options, Screen.Utils],
	
	options: {
		regMethod: null,
		promoId: null,
		referrerGuid: null,
		emails: {
			daily: false,
			weekly: false
		}
	},
	
	initialize: function (rootEl, options) {
		this.setOptions(options);
		if (!(this.options.promoId || this.options.referrerGuid)) {
			this.options.promoId = 24; // request invitation
		}
		
		this.parent(rootEl);
		
		this.emailFieldEl = new TextField(rootEl.getElement('input[type=email]'));
		this.emailFieldEl.addEvents({
			blur: function (event) {
				this.validateEmail($(event.target), true);
			}.bind(this)
		});
		
		if (rootEl.getElement('input[type=password]')) {
			this.passwordFieldEl = new TextField(rootEl.getElement('input[type=password]'));
			this.passwordFieldEl.addEvents({
				blur: function (event) {
					this.validatePassword($(event.target), true);
				}.bind(this)
			});
		}
		
		this.tosEl = rootEl.getElement('.tos').addEvents({
			'click:relay(.tos-link)': function (event) {
				event.preventDefault();
				window.open('/terms-of-service', '_blank', 'menubar=no,width=650,height=700,toolbar=no,scrollbars=yes,resizable=yes');
			},
			'click:relay(input)': function () {
				if (this.tosTooltip) {
					this.tosTooltip.hide();
				}
			}.bind(this)
		});
		
		// Temp measure to expose a hook to redirect to /login for SEM
		rootEl.addEvent('click:relay(a)', function (event, element) {
			var uri = new URI(element.get('href'));
			if (element.get('href').contains('login')) {
				event.preventDefault();
				
				var email = this.emailFieldEl.get('value').trim();
				this.fireEvent('login', email);
			}
		}.bind(this));
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.register();
		}.bind(this));
		
		this.submitButtonEl = this.formEl.getElement('button[type=submit]').set('disabled', false);
		
	},
	
	validateEmail: function (element, ignoreEmpty) {
		// If previously validated
		if (element.isValid) {
			return true;
		}
		
		if (ignoreEmpty && !element.get('value').clean()) {
			return true;
		}
		
		element.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('Please enter an email address.');
		
		
		// Don't bother hitting the service if email is not entered
		if (!element.isValid) {
			return false;
		}
		
		element.getParent().removeClass('checked').addClass('working');
		// @NOTE: Can't do this without making the email validation callback trigger submit again
		// @TODO: Maybe make the validation synchronous for submitting
		// element.isValid = false;
		var req = new Request.JSON({
			url: '/user/validateemail',
			data: {
				'email': element.get('value').clean()
			},
			onSuccess: function (json) {
				if (!json.success) {
					var status = json.errors[0][0].toInt();
					var message = '';
					switch (status) {
						case 400:
							message = 'Please enter a valid email address.';
							break;
						case 505:
							message = 'This email is already registered! To log in to Jetsetter, <a href="#login-screen">click here</a>.';
							this.fireEvent('registeredEmailFound', this.emailFieldEl.get('value'));
							break;
						
						default:
							message = json.errors[0][1];
					}
				}
				
				element.testValueWith(function () {
					return json.success;
				}).updateState(message);
			}.bind(this)
		}).get();
	},
	
	register: function () {
		this.submitButtonEl.set('disabled', true);
		
		this.validateEmail.isValid || this.validateEmail(this.emailFieldEl);
		if (!this.emailFieldEl.isValid || (this.passwordFieldEl && !this.validatePassword(this.passwordFieldEl))) {
			this.submitButtonEl.set('disabled', false);
			return false;
		}
		
		// Terms of services 
		var tosCheckboxEl = this.tosEl.getElement('input');
		if (!tosCheckboxEl.get('checked')) {
			this.tosTooltip = this.tosTooltip || new Tooltip(tosCheckboxEl.getOffsetParent());
			this.tosTooltip.show('You must agree to Jetsetter’s terms and conditions.', tosCheckboxEl, 300);
			this.submitButtonEl.set('disabled', false);
			return false;
		}

		Jetsetter.Auth.authenticate(Object.merge(this.formEl.toQueryObject(), {
			'type': 'email',
			'promoId': this.options.promoId,
			'referrerGuid': this.options.referrerGuid,
			'method': this.options.regMethod,
			'travelSaleReminder': this.options.emails.daily ? 'on' : 'off',
			'travelUpcomingSales': this.options.emails.weekly ? 'on' : 'off',
			onSuccess: function(json){
				this.fireEvent('registrationComplete');
			}.bind(this),
			onFailure: function(json){
				var status = json.error.code;
				this.emailFieldEl.isValid = false;
				switch (status) {
					case 400:
						this.emailFieldEl.updateState('Please enter a valid email address.');
						break;
					case 505:
						this.emailFieldEl.updateState('This email is already registered! To log in to Jetsetter, <a href="#login-screen">click here</a>.');
						this.fireEvent('registeredEmailFound', this.emailFieldEl.get('value'));
						break;
					default:
						var message = json.error.message;
						this.emailFieldEl.updateState(message);
						break;
				}
				this.submitButtonEl.set('disabled', false);
			}.bind(this)
		}));
	},
	
	setFocus: function () {
		// Focus on the first empty field
		var focusOnEl = (!this.emailFieldEl.get('value')) ? this.emailFieldEl : this.passwordFieldEl;
		
		setTimeout(function () {
			try {
				focusOnEl.focus();
			} catch (ex) {}
		}, 0);
	}
	
});

var RequestMembershipScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Screen.Utils],
	
	initialize: function (rootEl) {
		this.parent(rootEl);
		
		// Request membership
		var requestRootEl = rootEl.getElement('.primary-pane');
		this.requestEmailEl = new TextField(requestRootEl.getElement('input.email').setPlaceholder());
		this.requestFormEl = requestRootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.requestMembership();
		}.bind(this));
		this.requestMessageEl = rootEl.getElement('.message');
		this.originalRequestMessage = this.requestMessageEl.get('html');
		
		// Know a Jetsetter?
		var crashPartyRootEl = rootEl.getElement('.secondary-pane');
		this.crashPartyEmailEl = new TextField(crashPartyRootEl.getElement('input.email').setPlaceholder());
		this.crashPartyFormEl = crashPartyRootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.crashParty();
		}.bind(this));
		
		
		this.requestSubmitButtonEl = requestRootEl.getElement('button[type=submit]').set('disabled', false);
		this.crashPartysubmitButtonEl = crashPartyRootEl.getElement('button[type=submit]').set('disabled', false);
	},
	
	requestMembership: function () {
		if (!this.validateEmail(this.requestEmailEl)) {
			return false;
		}
		
		this.requestSubmitButtonEl.set('disabled', true);
		var req = new Request.JSONP({
			url: Jetsetter.SECURE_HOST + '/loginasync.php',
			data: this.getRequestData(this.requestFormEl),
			onSuccess: function (json) {
				if (json.success) {
					// Been previously invited or granted membership
					if (json.data && json.data.location) {
						location.replace(json.data.location);
					} else {
						// Show feedback
						this.requestFormEl.hide();
						this.requestMessageEl.set('html', '<p>Membership request received!</p><p>From time to time, Jetsetter invites a few lucky individuals to join our exclusive community of passionate travelers. We’ll let you know as soon as you’ve made the list.</p>');
						this.requestMessageEl.set('opacity', 0).tween('opacity', 1);
					}
				} else {
					var errorCode = json.errors[0][0];
					switch (errorCode) {
						case 505:
							this.requestEmailEl.isValid = false;
							this.requestEmailEl.updateState('Email address already registered. <a href="#sign-in">Sign in here</a>.');
							this.fireEvent('registeredEmailFound', this.requestEmailEl.get('value'));
							break;
						case 420:
							this.showLockOutMessage(this.requestEmailEl);
							break;
					}
					
					this.requestSubmitButtonEl.set('disabled', false);
				}
			}.bind(this)
		}).send();
	},
	
	crashParty: function () {
		if (!this.validateEmail(this.crashPartyEmailEl)) {
			return false;
		}
		
		this.crashPartysubmitButtonEl.set('disabled', true);
		var req = new Request.JSONP({
			url: Jetsetter.SECURE_HOST + '/loginasync.php',
			data: this.getRequestData(this.crashPartyFormEl),
			onSuccess: function (json) {
				if (json.success) {
					location.replace(json.data.location);
					return false;
				} else {
					var errorCode = json.errors[0][0];
					switch (errorCode) {
						case 401:
							this.crashPartyEmailEl.isValid = false;
							this.crashPartyEmailEl.updateState('Unrecognized email address');
							this.crashPartysubmitButtonEl.set('disabled', false);
							break;
							
						case 420:
							this.showLockOutMessage(this.crashPartyEmailEl);
							break;
					}
					this.requestSubmitButtonEl.set('disabled', false);
				}
			}.bind(this)
		}).send();
	},
	
	reset: function () {
		this.requestFormEl.show();
		this.requestMessageEl.set('html', this.originalRequestMessage);
	},
	
	setFocus: function () {
		setTimeout(function () {
			this.requestEmailEl.focus();
		}.bind(this), 0);
	}
	
});

var ResetPasswordScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Screen.Utils],
	
	initialize: function (rootEl) {
		this.parent(rootEl);

        this.userService = new UserService();

		var passwordFieldEls = rootEl.getElements('input[type=password]');
		
		if (passwordFieldEls.length === 0) {
			return this;
		}
		
		this.newPasswordFieldEl = new TextField(passwordFieldEls[0].setPlaceholder());
		this.confirmPasswordFieldEl = new TextField(passwordFieldEls[1].setPlaceholder());
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.resetPassword();
		}.bind(this));
		
		this.submitButtonEl = this.formEl.getElement('button[type=submit]').set('disabled', false);
		
	},
	
	resetPassword: function () {
		
		if (this.validatePassword(this.newPasswordFieldEl) && this.validatePassword(this.confirmPasswordFieldEl)) {
			if (this.newPasswordFieldEl.get('value') !== this.confirmPasswordFieldEl.get('value')) {
				this.confirmPasswordFieldEl.isValid = false;
				this.confirmPasswordFieldEl.updateState('Passwords do not match.');
				return false;
			}
		} else {
			return false;
		}
		
		this.submitButtonEl.set('disabled', true);

        var requestData = this.getRequestData(this.formEl);

        this.userService.resetPassword(_.extend(requestData, {
            onSuccess: function(response) {
                Jetsetter.Auth.emailAuth({
                    email: requestData.emailAddress,
                    onSuccess: function() {
                        this.fireEvent('passwordReset');
                    }.bind(this), onFailure: function() {
                        this.fireEvent('passwordReset');
                    }.bind(this)
                })
            }.bind(this),
            onFailure: function(err) {
                this.confirmPasswordFieldEl.isValid = false;
                this.confirmPasswordFieldEl.updateState('There was an error resetting your password. Please contact support at support@jetsetter.com if this problem persists.');

                this.submitButtonEl.set('disabled', false);
                new ErrorService().logError('failed to reset password because ' + JSON.stringify(err));
            }.bind(this)
        }));

	}
	
});

var SetPasswordScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Screen.Utils],
	
	initialize: function (rootEl) {
		this.parent(rootEl);
		
		this.emailFieldEl = new TextField(rootEl.getElement('input[type=email]'));
		
		// Prefill email from j_sess cookie
		if (Jetsetter.user.email) {
			this.emailFieldEl.set('value', Jetsetter.user.email);
			this.emailFieldEl.isValid = true;
		}
		
		if (rootEl.getElement('input[type=password]')) {
			this.secure = true;
			this.passwordFieldEl = new TextField(rootEl.getElement('input[type=password]'));
		}
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.setPassword();
		}.bind(this));
		
		this.submitButtonEl = this.formEl.getElement('button[type=submit]').set('disabled', false);
	},
	
	setPassword: function () {
		if (!this.validateEmail(this.emailFieldEl)) {
			return false;
		}
		
		// Make sure password field is not blank
		this.passwordFieldEl.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('Please enter a password.');
		if (!this.passwordFieldEl.isValid) {
			return false;
		}
			
		this.submitButtonEl.set('disabled', true);
		Jetsetter.Auth.authenticate(Object.merge(this.getRequestData(this.formEl), {
			type: 'email',
			onSuccess: function(json){
				this.fireEvent('login');
			}.bind(this),
			onFailure: function(json){
				var errorCode = json.error.code,
					errorMessage = json.error.message;
				switch (errorCode) {
					// TODO: handle errors
					default:
						this.emailFieldEl.isValid = false;
						this.emailFieldEl.updateState(errorMessage);
						break;
				}
				
				this.submitButtonEl.set('disabled', false);
			}.bind(this)
		}));
	},
	
	setFocus: function () {
		// Focus on the first empty field
		var focusOnEl = (!this.emailFieldEl.get('value')) ? this.emailFieldEl : this.passwordFieldEl;
		
		setTimeout(function () {
			try {
				focusOnEl.focus();
			} catch (ex) {}
		}, 0);
	}
	
});

var SignupSubscriberScreen = new Class({
	
	Extends: Screen,
	
	Implements: [Events, Screen.Utils],
	
	initialize: function (rootEl) {
		this.parent(rootEl);
		
		this.emailFieldEl = new TextField(rootEl.getElement('input[type=email]'));
		
		this.formEl = rootEl.getElement('form').addEvent('submit', function (event) {
			event.preventDefault();
			this.setEmail();
		}.bind(this));
		
		this.submitButtonEl = this.formEl.getElement('button[type=submit]').set('disabled', false);
	},
	
	setEmail: function () {
		if (!this.validateEmail(this.emailFieldEl)) {
			return false;
		}
				
		this.submitButtonEl.set('disabled', true);
		
		Jetsetter.Auth.authenticate(Object.merge(this.getRequestData(this.formEl), {
			type: 'email',
			onSuccess: function(json){
				this.fireEvent('login');
			}.bind(this),
			onFailure: function(json){
				var errorCode = json.error.code,
					errorMessage = json.error.message;
				switch (errorCode) {
					// TODO: handle errors
					default:
						this.emailFieldEl.isValid = false;
						this.emailFieldEl.updateState(errorMessage);
						break;
				}
				
				this.submitButtonEl.set('disabled', false);
			}.bind(this)
		}));
	}
	
});

// @TODO: This class was not a good idea. Ask mtam if you need to add stuff in here
var Social = {
	
	InviteEmail: new Class({
		
		getNewEmailEl: function () {
			
			var emailEl = new TextField(
				new Element('input', {
					'class': 'email text',
					'type': 'text',
					'autocorrect': 'off',
					'autocapitalize': 'off',
					'name': 'emailAddresses[]',
					'placeholder': 'email@example.com'
				})
			).setPlaceholder();
			
			return new Element('div', {
				'class': 'email-wrapper'
			}).adopt(emailEl);
			
		},
		
		// Note that Chrome 6 does native validation on <input type="email">, which prevents
		// onsubmit (which calls this function) from firing
		getValidEmailFields: function () {
			
			// Reset error message
			this.hideErrorMessage();
			
			// Get filled in emails
			var emailFieldEls = this.formEl.getElements('input').filter(function (emailEl) {
				return (emailEl.get('value').trim() != '');
			}, this);
			
			// Make sure at least one email field is filled-in
			if (emailFieldEls.length === 0) {
				this.formEl.getElement('input').focus();
				this.showErrorMessage('Please provide at least one email address:');
				
				return false;
			}
			
			// Validate all email addresses
			var numOfInvalidEmails = 0;
			emailFieldEls.each(function (emailEl) {
				emailEl.isValid = emailEl.get('value').validateAsEmail();
				
				if (!emailEl.isValid) {
					emailEl.updateState();
					numOfInvalidEmails++;
				}
				
			});
			
			if (numOfInvalidEmails > 0) {
				this.showErrorMessage('Please correct the highlighted email address' + ((numOfInvalidEmails > 1) ? 'es' : '') + ' below:');
				return false;
			}
			
			return emailFieldEls;
		},
		
		showErrorMessage: function (message) {
			this.errorMessageEl.set('text', message).show();
		},
		
		hideErrorMessage: function () {
			this.errorMessageEl.set('text', '').hide();
		}
		
	})
	
};

/**
*	@class InviteEmailForm
*	@author Marvin Tam
*	
*	The base form for sending email invitations.
*/

var InviteEmailForm = new Class({
	
	Extends: BaseForm,
	
	Implements: Social.InviteEmail,
	
	options: {
		'message': '',
		'requestParams': {}
	},
	
	initialize: function (attachTo, options) {
		
		this.setOptions(options);
		
		var errorMessageEl = new Element('p', {
			'class': 'error'
		}).hide();
		
		var addMoreButtonEl = new Element('a', {
			'id': 'add-more',
			'class': 'action',
			'type': 'button',
			'text': 'add more'
		});
		
		var emailContainerEl = new Element('div', {
			'class': 'emails'
		}).adopt(
			this.getNewEmailEl(),
			this.getNewEmailEl(),
			this.getNewEmailEl()
		);
		
		var textAreaEl = new Element('textarea', {
			'name': 'message',
			'text': this.options.message
		});
		
		var submitButtonEl = new Element('button', {
			'class': 'submit large-button',
			'type': 'submit',
			'text': 'Send Emails'
		});
		
		var formEl = new Element('form', {
			'class': 'clearfix'
		}).adopt(
			errorMessageEl,
			new Element('div', {
				'class': 'emails-wrapper fl'
			}).adopt(
				new Element('label', {
					'text': 'Email Addresses'
				}),
				emailContainerEl,
				addMoreButtonEl
			),
			new Element('div', {
				'class': 'message-wrapper fr'
			}).adopt(
				new Element('label', {
					'html': 'Message <span>(Edit or remove the note)</span>'
				}),
				textAreaEl
			),
			new Element('div', {
				'class': 'button-wrapper fr tenor'
			}).adopt(submitButtonEl),
			new Element('p', {
				'class': 'details fl',
				'text': 'Your friend will receive a message with a link to this page. Recipients who are not Jetsetter members will receive an invitation to join.'
			})
		);
		
		attachTo.adopt(formEl);
		
		
		this.formEl = formEl;
		this.submitButtonEl = submitButtonEl;
		this.errorMessageEl = errorMessageEl;
		this.textAreaEl = textAreaEl;
		
		// Set up events
		addMoreButtonEl.addEvent('click', function () {
			// Limit to 5 email fields
			var numOfEmailFields = emailContainerEl.getChildren().length;
			if (numOfEmailFields < 5) {
				this.getNewEmailEl().inject(emailContainerEl).hide().reveal({
					'duration': 'short'
				});
				
				this.fireEvent('emailFieldAdd');
				
				if (numOfEmailFields == 4) {
					addMoreButtonEl.destroy();
				}
			}
		}.bind(this));
		
		this.addEvent('formDisable', function () {
			this.submitButtonEl.set('text', 'Sending Emails…');
			this.submitButtonEl.getParent().addClass('sending');
		});
		
		this.addEvent('formEnable', function () {
			this.submitButtonEl.set('text', 'Send Emails');
			this.submitButtonEl.getParent().removeClass('sending');
		});
		
		this.bindSubmitFunction();
		
	},
	
	submitForm: function () {
		
		this.fireEvent('submitStart');
		
		var emailFieldEls = this.getValidEmailFields();
		if (!emailFieldEls) {
			return false;
		}
		
		var messageValue = this.textAreaEl.get('value').clean();
		messageValue = (messageValue == this.textAreaEl.get('placeholder')) ? '' : messageValue;
		
		if(this.options.requestParams.type == 'EmailInvite') {
	        new InviteService().sendEmailInvites({
	            emailAddresses: emailFieldEls.get('value'),
	            message: messageValue,
	            propertyId: this.options.requestParams.propertyId,
	            saleId: this.options.requestParams.saleId,
	            onSuccess: function(){
					this.fireEvent('invitesSent', emailFieldEls.length);
	            }.bind(this),
	            onFailure: function() {
					var errorHandler = new ErrorHandler();
					this.showErrorMessage(errorHandler.errors[13].message);
					this.enableForm();
	            }.bind(this)
	        });
	    } else if(this.options.requestParams.type == 'SweepstakesInvite') {
	    	// TODO:
	    }
	}
	
});

var AsyncEmailValidator = new Class({
	
	validate: function (emails, callback) {
		if (typeOf(emails) == 'string') {
			emails = [emails];
		}

		new InviteService().canInvite({
			emailAddresses: emails, 
			onSuccess: function(data) {
				// tracking for people typing in existing emails
				emails.each(function(email){
					if(data[email] === 'existing'){
						_gaq.push(['_trackEvent', 'Validation', 'Email', 'Existing']);
					}
				});

				this.fireEvent('validationComplete', data);
                callback && callback(null, data);
			}.bind(this),
			onFailure: function(code, message) {
				// log error but do not notify user
                new ErrorService().logError("Failed to validate email address with canInvite service: " + code + " " + message);
                callback && callback(message);
            }
		});
	}
	
});


/* @TODO: Merge with TextField class */
var InviteEmailField = new Class({
	
	Implements: [Options, Events, AsyncEmailValidator],
	
	options: {
		requestDelay: 150,
		tooltipType: 'right', // top/right/none
		existingMemberCheck: true,
		setPlaceholder: true
	},
	
	// States: empty, invalid, duplicate, existing, valid, validating
	state: 'empty',
	
	initialize: function (emailEl, options) {
		this.emailEl = emailEl;
		this.setOptions(options);

		if(this.options.setPlaceholder){
			this.emailEl = emailEl.set('value', '').setPlaceholder();
		}
		
		this.addEvents({
			'validationComplete': function (data) {
				var state = data[this.get('value')];
				this.set('state', state).updateDisplayState();
			}.bind(this)
		});
		
		this.emailEl.addEvents({
			'input': function () {
				this.set('state', 'validating');
			}.bind(this),
			'blur': function () {
                this.validateField();
				this.updateDisplayState();
			}.bind(this),
			'focus': function () {
				this.reset();
			}.bind(this)
		});
		
		if (Browser.ie) {
			this.emailEl.addEvent('keyup', function (event) {
				switch (event.key) {
					case 'up':
					case 'down':
					case 'enter':
					case 'esc':
						return false;
					default:
						this.emailEl.fireEvent('input');
				}
			}.bind(this));
		}
		
		this.reset();
	},

    /**
     * validate field with some side-effects, which are to highlight the field if it is invalid.
     * This code is a bit sloppy. Please feel free to refactor as long as you know you can do it correctly.
     * Passing a callback into this method is the most reliable way to read the true validation response.
     * @param callback
     */
	validateField: function (callback) {
		var value = this.get('value');
        var state = 'validating';
		if (!value) {
            state = 'empty';
		} else {
			if (value.validateAsEmail()) {

                if (Jetsetter.user && Jetsetter.user.email == value) {
                    // if the email supplied is the same as the one on the current user, consider it valid and skip the existing member check
                    state = 'valid';

                } else if (this.options.existingMemberCheck) {

                    // if we're checking for existing members, do that async call
					clearTimeout(this.reqTimeout);
					this.reqTimeout = setTimeout(function () {
						this.validate(value, callback);
					}.bind(this), this.options.requestDelay);
                    return;  // return here because this.validate() will trigger validationComplete and call the callback by itself

				} else {
                    state = 'valid';
				}
				
			} else {
                state = 'invalid';
			}
		}

        this.set('state', state).updateDisplayState();

        // construct an object of email => state. in this case it will be only one email field
        var data = {};
        data[value] = state;

        // fire validation event
        this.fireEvent('validationComplete', data);

        // call the callback if it exists
        callback && callback(null, data);
	},

	get: function (property) {
		if (property == 'value') {
			return this.emailEl.get('value').clean();
		} else if (property == 'state') {
			return this.state;
		}
	},
	
	set: function (property, value) {
		if (property == 'state') {
			this.state = value;
		}
		
		return this;
	},
	
	highlight: function () {
		this.emailEl.addClass('highlight');
		
		return this;
	},
	
	reset: function () {
		this.emailEl.removeClass('highlight');
		this.hideTooltip();
		
		return this;
	},
	
	updateDisplayState: function () {
		var state = this.get('state');
		switch (state) {
			case 'empty':
			case 'valid':
				this.reset();
				break;
			
			case 'existing':
				this.showTooltip('Already a member');
				break;
			
			case 'invalid':
				this.showTooltip('Invalid email address');
				break;
			
			case 'duplicate':
				this.showTooltip('Duplicate email');
				break;
			
			default:
				return this;
		}
		
		this.fireEvent('validationChange', this);
		
		return this;
	},
	
	showTooltip: function (message) {
		
		this.highlight();
		
		if (this.options.tooltipType != 'none') {
			this.tooltip = this.tooltip || (function (that) {
				var attachTo = that.emailEl.getParent();
				return (that.options.tooltipType == 'top') ? new Tooltip(attachTo) : new RightTooltip(attachTo);
			})(this);
			this.tooltip.show(message, this.emailEl);
		}
		
	},
	
	hideTooltip: function () {
		if (this.tooltip) {
			this.tooltip.hide();
		}
	}
	
});

var InviteBanner = new Class({
	
	Implements: [Events, Options],
	
	initialize: function (rootEl, options) {
		
		this.setOptions(options);

		rootEl.show();

		this.writeCookie();
		
		var closeEl = rootEl.getElement('a.close');
		closeEl.addEvent('click', function () {
			_gaq.push(['_trackEvent', 'Invite', 'Banner', 'Close']);
			this.fireEvent('close');
			this.neverShow();
			rootEl.destroy();
		}.bind(this));
		
		var emailEl = rootEl.getElement('input.email');
		var emailField = new InviteEmailField(emailEl, {
			'tooltipType': 'top',
			'existingMemberCheck': true
		});

		var screensEl = rootEl.getElement('.screens');
		if(screensEl){
			screensEl.getElement('.confirmation button').addEvent('click', function (event) {
				screensEl.removeClass('sent-invite');
				setTimeout(function () {
					emailEl.focus();
				}, 0);
			});	
		}
		
		var sendButtonEl = rootEl.getElement('input[type=submit]');
		
		var formEl = rootEl.getElement('form');
		formEl.addEvent('submit', function (event) {
			event.preventDefault();
			
			if (emailField.get('state') !== 'valid') {
				emailField.updateDisplayState();
				return false;
			}

			var email = [emailField.get('value')];

			emailEl.set('value', 'Sending...');
			
			sendButtonEl.set('text', 'Sending…').disable();
			emailEl.disable();
			
			var req = new Request.JSON({
				url: '/invitationasync.php',
				data: {
					'type': 'banner',
					'guid': Jetsetter.user.guid,
					'emailAddresses': email,
					'message': "Isn't it time for a vacation? Here's an invitation to join Jetsetter, where you'll have access to the world's greatest travel experiences at members-only prices."
				},
				onSuccess: function (json) {
					if (json.success) {
						if(screensEl){
							screensEl.addClass('sent-invite');	
						}
						emailEl.enable();
						emailEl.set('value', '');
						emailField.set('state', 'empty');
						emailField.showTooltip("Invite sent!");
						emailEl.addClass('valid-highlight');
						// GA tracking
						GA.trackInvites(1, 'banner');
						
					} else {
						req.onFailure();
					}
					sendButtonEl.set('text', 'Send Invitation').enable();
				},
				onFailure: function () {
					sendButtonEl.set('text', 'Send Invitation').enable();
					emailEl.set('value', email);
				}
			}).post();
					
		});
	},

	writeCookie: function(){
		var j_hpinv = JSON.decode(Cookie.read('j_hpinv'));
		//cookie is present
		if(j_hpinv){
			j_hpinv.views++;

			if(j_hpinv.views >= 10){
				j_hpinv.show = false;
			}

			Cookie.write('j_hpinv', JSON.encode(j_hpinv));
		}
		//cookie isnt present
		else{
			j_hpinv = {
				views: 1,
				show: true
			}
			Cookie.write('j_hpinv', JSON.encode(j_hpinv));
		}
	},

	neverShow: function(){
		var j_hpinv = JSON.decode(Cookie.read('j_hpinv'));

		j_hpinv.show = false;
		Cookie.write('j_hpinv', JSON.encode(j_hpinv));
	}
	
});

InviteBanner.shouldShow = function(){
	var cookie = JSON.decode(Cookie.read('j_hpinv'));

	if(cookie){
		return cookie.show;
	}
	else{
		return true;
	}

	
};

var ABTest = new Class({
	
	Implements: [Options, Events],

	options: {},

	abTestService: null,

	initialize: function(options) {
		this.setOptions(options);
		this.abTestService = new ABTestService();
	},

	inVariation: function (testName) {
		if (typeof g_abTests === 'undefined') {
			return false;
		}

		for (var i = 0; i < g_abTests.length; i++) {
			if (g_abTests[i].name == testName) {
				for (var j = 0; j < g_abTests[i].variations.length; j++) {
					for (var k = 0; k < g_abTests[i].variations[j].ranges.length; k++) {
						if (g_abTests[i].variations[j].ranges[k].rangeStart <= Jetsetter.user.partition &&
							g_abTests[i].variations[j].ranges[k].rangeEnd >= Jetsetter.user.partition) {
							var ids = new Array(3);
							ids['testId'] = g_abTests[i].id;
							ids['variationId'] = g_abTests[i].variations[j].id;
							ids['rangeId'] = g_abTests[i].variations[j].ranges[k].id;
							return ids;
						}
					}
				}
			}
		}

		return false;
	},

	executeForVariation: function (testName) {
		if (!Jetsetter.user.guid && !Jetsetter.user.visitorId) {
			return false;
		}

		var ids = this.inVariation(testName);
		if(ids.length > 0) {
			var currUri = new URI(window.location);
			var refUri = new URI(document.referrer);
			var trackerEvents = [];
			trackerEvents.include({
				eventType: 'ABTest',
				key1: Jetsetter.user.guid,
				key2: Jetsetter.user.partition,
				key3: Jetsetter.TRACKER_SITE,
				key4: encodeURIComponent(refUri.get('directory') + refUri.get('file')),
				key5: encodeURIComponent(currUri.get('directory') + currUri.get('file')),
				key6: encodeURIComponent(currUri.get('query')),
				key25: Jetsetter.user.visitorId,
				key32: Jetsetter.CHANNEL_ID,	
				key34: 'paticipated',
				key37: ids['testId'],
				key38: ids['variationId'],
				key39: ids['rangeId']
			});
			
			Jetsetter.tracker.trackEvent(trackerEvents[0]);
			return true;
		}

		return false;
	},

	convert: function (testName) {
		if (!Jetsetter.user.guid && !Jetsetter.user.visitorId) {
			return false;
		}
		
		var ids = this.inVariation(testName);
		if(ids.length > 0) {
			var currUri = new URI(window.location);
			var refUri = new URI(document.referrer);
			var trackerEvents = [];
			trackerEvents.include({
				eventType: 'ABTest',
				key1: Jetsetter.user.guid,
				key2: Jetsetter.user.partition,
				key3: Jetsetter.TRACKER_SITE,
				key4: encodeURIComponent(refUri.get('directory') + refUri.get('file')),
				key5: encodeURIComponent(currUri.get('directory') + currUri.get('file')),
				key6: encodeURIComponent(currUri.get('query')),
				key25: Jetsetter.user.visitorId,
				key32: Jetsetter.CHANNEL_ID,	
				key34: 'converted',
				key37: ids['testId'],
				key38: ids['variationId'],
				key39: ids['rangeId']
			});
			
			Jetsetter.tracker.trackEvent(trackerEvents[0]);
		}

		return false;
	}
});
Jetsetter.ABTests = {
    'metaTest'  : {

        // retrieve the recipe for this test depending on the passed in partition
        recipe: function(partition) {
            var urlmatches = window.location.href.match(/metaTest=([AB])/);
            if (urlmatches && urlmatches.length > 1) {
                return urlmatches[1];
            }

            return "A";
        },

        // track the test in omniture
        track: function(recipe, additional) {
            return;
            var eVar20 = 'JS Site Meta R5 - Recipe '+recipe;
            if (additional) {
                omniture.trackClickWithSiteSection(additional, 'eVar35', {
                    eVar20 : eVar20
                });
            } else {
                omniture.trackClick(eVar20, 'eVar20');
            }
        },

        // function intended to take care of any required async depencies for this ab test and then call the callback when they are ready
        supply: function(callback) {
            return Jetsetter.userGeoModel.supply(callback);
        }
    },

    'hybridTest' : {
        recipe: function(partition) {

            try {
                var uri = new URI();
                if (uri.getData('hybridTest')) {
                    return uri.getData('hybridTest');
                }
            } catch (e) {}

            if (partition === 0 || (partition > 0 && partition <= 499)) {
                return "A";
            } else if (partition >= 500 && partition <= 999) {
                return "B";
            }
            return null;
        },
        track: function(recipe, additional) {
            var eVar20 = 'SERP Hybrid - Recipe ' + recipe;
            omniture.trackClick(eVar20, 'eVar20');
        }
    }
};
var API = new Class({

    Implements: [Options, Events],

    options: {
        serviceHostname: location.hostname,
        defaultApiVersion: 'v3',
        servicePathPrefix: '/api-proxy/'
    },

    initialize: function(options){
        this.setOptions(options);
        // set default service urls
        if (this.options.serviceURL === undefined) {
            this.options.serviceURL = 'http://' + this.options.serviceHostname + this.options.servicePathPrefix;
        }
        if (this.options.secureServiceURL === undefined) {
            this.options.secureServiceURL = 'https://' + this.options.serviceHostname + this.options.servicePathPrefix;
        }

        this.reqs = {};
    },

    request: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback){
        // check if jsonp is required when building urls
        if (location.hostname != this.options.serviceHostname) {
            // always required if hostnames are different
            this._doJSONPRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        } else if (secure && (location.protocol == 'http:')) {
            // also required if this is a secure request and the current page is http
            this._doJSONPRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        } else {
            this._doJSONRequest(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
        }
    },

    // regular get/post request
    _doJSONRequest: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        var req = new Request.JSON({
            url: this.appendCacheBustingParam(this._getUrl(secure, apiVersion, path)),
            headers: this._getHeaders(apiVersion),
            data: data,
            onSuccess: function (json) {
                this.handleSuccess(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json);
            }.bind(this),
            onError: function (text, error) {
                this.handleError(onFailureCallback, 999, error);
                new ErrorService().logError("code 999: "+JSON.stringify(error));
            }.bind(this),
            onFailure: function (xhr) {
                this.handleError(onFailureCallback, 1000, 'Unable to connect.  Please check your Internet connection and try again.');
            }.bind(this)
        })[type]();

        var serviceEndpoint = new URI(this._getUrl(secure, apiVersion, path)).get('directory').split('/');
        this.reqs[serviceEndpoint[3] + '/' + serviceEndpoint[4]] = req;
    },

    _doJSONPRequest: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        var isV4 = (apiVersion == 'v4');
        var url = this._getUrl(secure, apiVersion, path);
        var headers = this._getHeaders(apiVersion);
        data = Object.merge(data || {}, {'method': type});
        data = isV4 ? Object.merge(headers, data) : '';
        url =  isV4 ? url : url + this.getSlashDelimitedParams(Object.merge({'rnd' /* add cache busting parameter */: Math.floor(Math.random() * 1000)}, Object.merge(headers, data)));

        // jsonp request
        var req = new Request.JSONP({
            url: url,
            data: data,
            onComplete: function (json) {
                this.handleSuccess(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json);
            }.bind(this)
        }).send();
    },

    _getHeaders: function(apiVersion){
        var headers = {
            'apikey'     : Jetsetter.API_KEY,
            'csurftoken' : Jetsetter.user.visitorId
        };

        var session = Jetsetter.session;

        if (apiVersion == 'v4'){
            if (session && session.st) {
                headers.sessionToken = session.st;
            } else if (session && session.stv4) {
                headers.sessionToken = session.stv4;
            }
        } else {
            headers.sessionId = session && session.st ? session.st : null;
        }

        /* TODO: Figure out how to do assumed user
         if (Jetsetter.user.isAssumed) {
         var rawSession = Jetsetter.user._getRawSession();
         Object.merge(headers, { 'assumerId' : rawSession.st });
         }*/

        return headers;
    },

    // build url
    _getUrl: function(secure, apiVersion, path){
        var url;

        if (secure) {
            url = this.options.secureServiceURL + apiVersion + path;
        } else if (location.protocol == 'https:') {
            url = this.options.secureServiceURL + apiVersion + path;
        } else {
            url = this.options.serviceURL + apiVersion + path;
        }

        return url;
    },

    appendCacheBustingParam: function(url) {
        return  url + ((url.indexOf('?') != -1) ? '&' : '?') + 'rnd=' + Math.floor(Math.random() * 10000);
    },

    get: function(options){
        this.request('get', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    post: function(options){
        this.request('post', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    put: function(options){
        this.request('put', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    'delete': function(options){
        this.request('delete', options.apiVersion || this.options.defaultApiVersion, options.path, options.secure, options.data, options.onSuccess, options.onFailure);
    },

    getSlashDelimitedParams: function (queryObject) {
        return _.chain(queryObject)
            .map(function(value, key) {
                if(value === true) {
                    value = 1;
                } else if(value === false) {
                    value = 0;
                }
                return [key, value];
            })
            .filter(function(keyValue) {
                var value = keyValue[1];
                return value !== null && value !== '' && typeof value != 'undefined';
            })
            .map(function(keyValue) {
                return '/' + keyValue[0] + '/' + encodeURIComponent(keyValue[1]);
            })
            .reduce(function(memo, param) {
                return memo + param;
            }, '')
            .value();
    },

    handleSuccess: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback, json) {
        if (json.call1 !== undefined) {
            // chained request - check if any of the requests had errors
            var error = null;
            Object.each(json, function(value, key) {
                if ((value === undefined) || (value.status != 0) || (value.data === undefined)) {
                    error = value;
                }
            });
            if(error == null){
                var responseData = (apiVersion == 'v4' && json && json.data) || json;
                onSuccessCallback && onSuccessCallback(responseData);
            } else if ((error.code !== undefined) && ((error.code == 103) || (error.code == 104))) {
                this.handleSessionExpired(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            } else {
                this.handleError(onFailureCallback, error.code, error.msg);
            }
        } else {
            // normal request
            if((json.status !== undefined) && (json.status == 0) && (json.data !== undefined)) {
                var responseData = (apiVersion == 'v4' && json && json.data) || json;
                var metadata = apiVersion == 'v4' && _.omit(json, 'data', 'status');
                onSuccessCallback && onSuccessCallback(responseData, metadata);
            } else if ((json.code !== undefined) && ((json.code == 103) || (json.code == 104))) {
                this.handleSessionExpired(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            } else {
                var error = json.error || json;
                this.handleError(onFailureCallback, error.code, error.msg);
            }
        }
    },

    handleError: function(onFailureCallback, code, rawMessage) {

        // array of error codes from v4 that we want to pass back to the user instead of showing a generic error message
        var v4PassThroughErrors = [
            238, // CCInvalidTypeError
            239, // CCInvalidCvvError
            240, //
            248, // InvalidCCOwnerError
            249, // CCNotFoundError
            250, // UnableToChargeCCError
            251, // PropertyInventoryNeedsApprovalError
            252, // InventoryIsNotAvailableError
            253, // UnableToPurchaseError
            228, // MaxActiveHoldOrdersReachedError
            229, // VoucherOrderLimitReachedError
            226, // InvalidAmountError

            238, // CCInvalidTypeError
            239, // CCInvalidCvvError
            240, // CCInvalidExpirationDateError
            241, // CCInvalidExpirationDateYearError
            242, // CCInvalidExpirationMonthError
            243, // CCInvalidExpirationYearError
            244, // CCInvalidNumberLengthError
            245, // CCInvalidNumberError
            246, // CCUnableToAddError
            247  // CCInvalidBillingAddressPostalCodeError

        ];

        // certain error codes we will use the message from the server
        if (rawMessage && (_.contains(v4PassThroughErrors, code) ||
            (code == 109) || (code == 110) || (code == 229) || (code == 400) || (code == 401) || (code == 500) || (code == 501)
            || (code == 502) || (code == 504) || (code == 505) || (code == 800) || (code == 744) || (code == 766)
            || (code == 767) || (code == 762) || (code == 763) || (code == 764) || (code == 765) || (code == 768) || ((code >= 701) && (code <= 715))
            || (code == 1000))) {
            var message = rawMessage + ' Please contact member services if you need assistance by calling 1-877-573-8872. Reference error code #' + code;
        } else {
            var message = 'There was an error processing your request. Please contact member services if you need assistance by calling 1-877-573-8872. Reference error code #' + code;
        }

        if (!onFailureCallback) {
            // default handling of error
            new NotificationModal(message, 'error').show();
            throw new Error("ERROR " + code + ": " + rawMessage);
        } else {
            onFailureCallback(code, message);
        }
    },

    handleSessionExpired: function(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback) {
        Jetsetter.secureLogin({
            dismissOnLogin: true,
            access: 'secure',
            forceAuthentication: true,
            onLogin: function () {
                // retry request
                this.request(type, apiVersion, path, secure, data, onSuccessCallback, onFailureCallback);
            }.bind(this)
        });
    }
});

// drop that API in like its hot
API = new API();

var AdminImageReporter = new Class({
	
	initialize: function(elements){
		this.elements = elements;
		this.button = new Element('div', {
			'id': 'admin-image-reporter'
		}).inject(document.body, 'bottom');

		this.button.fade('hide');

		this.button.addEvents({
			'mouseover': function(e){
				e.stop();
			}.bind(this),
			'mouseout': function(e){
				e.stop();
			}.bind(this)
		});

		$(document.body).addEvent('mouseover', function(){
			this.button.fade('out');

			this.button.removeClass('sent');
			this.button.removeClass('error');
		}.bind(this));

		$(document.body).addEvent('mouseover:relay(img)', function(e, elem){
			e.stop();
			this.button.position({
				relativeTo: elem
			});

			this.curElem = elem;

			this.button.fade('in');
		}.bind(this));

		this.button.addEvent('click', function(){
			this.sendReport();
		}.bind(this));

		this.applyPageFixes();
	},

	sendReport: function(){
		if(this.curElem){
			var req = new Request.JSON({
				url: '/static/report',
				data: {
					imageUrl: this.curElem.get('src'),
					pageUrl: location.href
				},
				onSuccess: function (json) {
					if(json.success){
						this.button.addClass('sent');

						setTimeout(function(){
							this.button.removeClass('sent');
						}.bind(this), 3000);	
					} else {
						this.button.addClass('error');

						setTimeout(function(){
							this.button.removeClass('error');
						}.bind(this), 3000);
					}
				}.bind(this)
			}).post();
		}
	},

	applyPageFixes: function(){
		switch($(document.body).get('id')){
			case 'product-details':
				//main pdp gallery
				$('screen-gallery').getElements('.full-area').hide();
				break;
			case 'travel-expert':
				//main hero gallery
				var postcards = $('postcards');
				if(postcards){
					var hoverArea = postcards.getElement('.postcard-mask');
					hoverArea.addEvent('mouseover', function(e){
						e.stop();
						this.button.position({
							relativeTo: hoverArea
						});

						postcards.getElements('.postcards li').each(function(elem){
							if(elem.isVisible()){
								this.curElem = elem;
							}
						}.bind(this));

						this.curElem.set('src', this.curElem.get('data-image'));

						this.button.fade('in');
					}.bind(this));
				}

				//small expert carousel
				var experts = $('experts')
				if(experts){
					experts.getElements('div.list-item .mask, div.list-item .mask-alternate').addEvent('mouseover', function(e){
						e.stop();
						var expert = e.target;

						this.button.position({
							relativeTo: expert
						});

						this.curElem = expert.getPrevious('img');
						this.button.fade('in');
					}.bind(this));
				}

				//expert bio pic
				var bio = $('bio-hero');
				if(bio){
					bio.getElement('.mask').addEvent('mouseover', function(e){
						e.stop();

						this.button.position({
							relativeTo: bio
						});

						this.curElem = bio.getElement('.expert-shot');

						var src = this.curElem.getStyle('background-image');

						src = src.substring(4, src.length);
						src = src.substring(0, src.length - 1);

						this.curElem.set('src', src);

						this.button.fade('in');
					}.bind(this))
				}
				break;
			case 'presale':
			//top hero image
				var hero = $('page-content').getElement('.presale-top');
				hero.addEvent('mouseover', function(e){
					e.stop()

					this.button.position({
						relativeTo: bio
					});

					this.curElem = hero.getElement('img');

					this.button.fade('in');
				}.bind(this));
				break;
		}
	}

});
var AdminToolbar = new Class ({
	
	Implements: Options,

	options: {
		isAssumed: false	
	},

	initialize: function (options) {

		this.setOptions(options);
		
		Jetsetter.adminToolbar = this;
		
		this.username = '';
		this.assumedUsername = '';
		this.returnTrip = '';
		this.endTime = null;
		this.timeout = null;
		
		this.hidden = false;
		this.warned = false;
	
		if(this.options.isAssumed){
			this.checkSessionExpiration();	
		}
		else{
			var curLocation = new URI();
			
			switch (location.hostname) {
				case 'www.jetsetter.com':
				case 'www.jetsetter.co.uk':
					curHost = 'jetsetter.com';
					break;
				default:
					curHost = curLocation.get('host').replace('.co.uk', '.com');
					break;
			}

			this.returnTrip += curLocation.get('scheme') + '://admin.' + curHost;
			this.showToolbar();
		}

		//AdminImageReporter
		this.imageReporterToggle = $('image-reporter-switch');
		this.imageReporterCookie = Cookie.read('j_aim') ? (Cookie.read('j_aim') === 'true' ? true : false) : null;

		//cookie exists 
		if(this.imageReporterCookie !== null){
			this.imageReporterToggle.set('text', 'Image Reporter ' + (this.imageReporterCookie ? '(On)' : '(Off)'));
		} else { // cookie doesnt exist...so create it
			this.imageReporterCookie = false;
			Cookie.write('j_aim', false, {duration: 365, domain: Jetsetter.cookieDomain});
			this.imageReporterToggle.set('text', 'Image Reporter (Off)');
		}

		this.imageReporterToggle.addEvent('click', function(){
			Cookie.write('j_aim', this.imageReporterCookie ? false : true, {duration: 365, domain: Jetsetter.cookieDomain});
			window.location.reload();
		}.bind(this));

        /**
         * Allows dragging images into the admin toolbar to view the parameters used to generate the cropped version
         */
        this.toolBarEl.addEventListener('dragover', function(e) { e.preventDefault(); }, true)
		this.toolBarEl.addEventListener('drop', function (e) {
            e.preventDefault();
            e.stopPropagation();

		    try {
		        var html = e.dataTransfer.getData("text/html");
		        var div = new Element('<div>').set('html', html);
		        var img = div.getFirst("img");
		        if (!img) {
		            throw Error("Unable to find img tag in " + div.getChildren()[1].outerHTML);
		        }
		        var srcUri = new URI(img.get('src'));
		        var file = srcUri.get('file');
		        var rot13d = Jetsetter.JetsetUtil.rot13(file);
		        var decoded = Base64.decode(rot13d);

		        alert(srcUri + "\n\n" + file + "\n\n" + rot13d + "\n\n" + decoded);
		    } catch (ex) {
		        alert("Unable to parse img src: " + ex.message)
		    }
		}, false);
	},
	
	checkSessionExpiration: function () {
		
		var returnTrip = Cookie.read('j_surt');
		if (returnTrip) {
			this.returnTrip = returnTrip.decode64();
		}
		
		this.assumedUsername = Cookie.read('j_sufn');
		if (this.assumedUsername.indexOf('-') > -1) {
			this.assumedUsername = this.assumedUsername.substring(0,this.assumedUsername.indexOf('-'));
		}
		
		//Assume-User session has not expired
		if (this.assumedUsername && this.assumedUsername != '') {
			this.showToolbar();
			this.setTimer();
		} else {
			this.endSession();
		}
		
	},
	
	showToolbar: function () {
		
		var source = '<div class="left clearfix">\
							<a href="{{returnUrl}}" class="logo">Admin</a>\
					  </div>\
					  <div class="right clearfix {{#if isAssumed}} assumed {{/if}}">\
					  		<div class="username">Logged In As: {{username}}</div>\
					  		{{#if isAssumed}}\
					  			<div id="timer"></div>\
					  			<a id="end-session">End Session</a>\
					  		{{/if}}\
					  		<a id="image-reporter-switch" class="no-ie">Image Reporter</a>\
					  		<a id="hide-toolbar">Hide</a>\
					  </div>',
			template = Handlebars.compile(source),
			html = template({
				returnUrl: this.returnTrip,
				username: this.options.isAssumed ? this.assumedUsername : Jetsetter.user.email,
				isAssumed: this.options.isAssumed
			});

		this.toolBarEl = new Element('div', {'id':'admin-toolbar', 'class': 'clearfix', html: html})
			.inject(document.body,'top');
		
		Jetsetter.adminToolbar.toolBarEl = this.toolBarEl;
		
		//offset background image
		$(document.body).setStyle('background-position','0 45px');

		$('hide-toolbar').addEvent('click', function(){
			$(document.body).setStyle('background-position','0 0');
			Jetsetter.adminToolbar.toolBarEl.dispose();
		});

		if(this.options.isAssumed){
			$('end-session').addEvent('click',function(){
				Jetsetter.adminToolbar.endSession();
			});
		}
		
	},
	
	setTimer: function () {
		var timeout = Cookie.read('j_suex');
		
		if (timeout) {
			this.endTime = new Date().parse(timeout);
		} else {
			var startTime = new Date();
			this.endTime = startTime.clone();
			this.endTime.increment('minute',30);
			if ( !(Cookie.read('j_suex')) ) {
				Cookie.write('j_suex', this.endTime.format(), {duration:.025});
			}
		}
		
		Jetsetter.adminToolbar.warned = false;
		this.checkTime();
	},
	
	checkTime: function () {
		var interval = 60000;
		
		var now = new Date();
		
		var timeout = Cookie.read('j_suex');
		
		var endTime = new Date().parse(timeout);
		
		var diff = now.diff(endTime, 'minute');
		
		if($('timer')) {
			$('timer').set('html', diff + ' Minutes Remaining');
		}
		if (diff <= 0) {
			this.endSession();
		}
		if (diff <= 5 && !Jetsetter.adminToolbar.warned) {
			alert('you will be logged out of assume-user mode in ' + diff + ' minutes.');
			Jetsetter.adminToolbar.warned = true;
		}
		
		this.timeout = window.setTimeout('Jetsetter.adminToolbar.checkTime()', interval);
		
	},
	
	endSession: function () {
		this.deleteCookie('j_suex'); //expiration
		this.deleteCookie('j_issu'); // boolean
		this.deleteCookie('j_sufn'); //first name
		this.deleteCookie('j_suem'); //email
		this.deleteCookie('j_suid'); //id?
		this.deleteCookie('j_sust'); //id?
		this.deleteCookie('j_surt');// return url
		
		document.location.href = Jetsetter.adminToolbar.returnTrip;
	},

	deleteCookie: function (name) {
		var d = new Date();
		d.decrement('day', 1);
		document.cookie = name + '=; expires=' + d.toGMTString() + "; path=/; domain=.jetsetter.com";
	}
	
}); 

var AnonymousBrowse = new Class({
	
	options: {},

	initialize: function () {
		this.options = this._getCookieData();

		if (this.options.promoAlias === 'adwords' || this.options.promoAlias === 'adwords2') {
			_gaq.push(
				['c._setAccount', 'UA-12185313-1'],
				['c._trackPageview', '/3769997341/test']
			);
		}

		// Build guest access bars
		//@TODO remove this buy with me specific bar once 
		//the promo is over
		if (this.options.promoAlias === 'bwm') {
			var barEl = this._getBwmBarEl();
			var miniBarEl = this._getBwmMiniBarEl();
		} else if (Cookie.read('j_pcad')) {
			var j_pcad = JSON.decode(Cookie.read('j_pcad'));
			if (true || j_pcad.closed) {
				return;
			}
			var barEl = this._getSemBarEl(j_pcad);
			var miniBarEl = this._getSemMiniBarEl(j_pcad);
		} else if (this.options.promoAlias === 'webbys2011') {
			var barEl = this._getWbyBarEl();
			var miniBarEl = this._getWbyMiniBarEl();	
		} else {
			var barEl = this._getBarEl();
			var miniBarEl = this._getMiniBarEl();
		}
		
		// @TODO: remove 'new-header' stuff after sitewide switch
		var headerEl = $('header') || $('new-header');
		if (!headerEl) {
			return;
		}
		new Element('div', {
			'class': ['guest-access-bar-wrapper', this.options.promoAlias].join(' ')
		}).adopt(barEl, miniBarEl).inject(headerEl, 'after');
		
		
		var barElOffset = barEl.getCoordinates().bottom -
		    miniBarEl.getDimensions(true).height;
		var isRegistrationModalOpen = false;
		
		// Set greeting from cookie
		barEl.getElement('.greeting').set('html', this.options.headerText);
		
		// Initialize the registration modal to get a handle to the instance
		var message = '<p>Lucky for you, our mutual friends at ' + this.options.name +
			' have arranged for an invitation. As a member of Jetsetter, you’ll get ' +
			'exclusive access to private deals on the world’s greatest vacations.</p>';
		
		var anonymousRegistrationModal = new AnonymousRegistrationModal({
			'title': 'Like what you see? See more.', 
			'message': message,
			'action': Jetsetter.SECURE_HOST + '/register?task=register',
			'returnPath': window.location.pathname,
			'promoId': this.options.promoId,
			'promo': this.options.promoAlias
		}).addEvents({
			
			registrationComplete: function () {
				barEl.dispose();
				miniBarEl.dispose();
			},
			
			hideBegin: function () {
				isRegistrationModalOpen = false;
			},
			
			hideComplete: function () {
				// Trigger scroll event to hide the mini guest bar conditionally
				$(window).fireEvent('scroll');
				miniBarEl.getFirst().removeClass('form-open');
			},
			
			showBegin: function () {
				isRegistrationModalOpen = true;
				miniBarEl.getFirst().addClass('form-open');
				miniBarEl.show();
			},
			
			showComplete: function () {
				// Set the mini guest bar to be the same as the modal's (fixed/absolute)
				miniBarEl.setStyle('position', this.content.getStyle('position'));
			},
			onPositionSet: function () {
				miniBarEl.setStyle('position', this.content.getStyle('position'));
			}
			
		});
		
		$(window).addEvent('scroll', function () {
			if (window.getScroll().y > barElOffset) {
				miniBarEl.show();
			} else if (!isRegistrationModalOpen){
				miniBarEl.hide();
			}
		});
		
		// Buttons on the guest bar that opens the registration modal
		$$('.guest-access-bar .register-action').addEvent('click', function () {
			anonymousRegistrationModal.show();
		});
		
		// Create a button that closes the registration modal
		var closeActionEl = new Element('a', {'class': 'action close-action', 'text': 'Close'});
		closeActionEl.addEvent('click', function (event) {
			event.stop();
			anonymousRegistrationModal.hide();
		});
		miniBarEl.getFirst().adopt(closeActionEl);
		Jetsetter.registrationModal.closeButton = closeActionEl;
		
		
		// Pop the modal for actions that require login
		var promoEl = $('campaign-promo');
		if (promoEl) {
			promoEl.addEvent('click', function () {
				Jetsetter.registrationModal.show();
				return false;
			});
		}
		
		var inviteLinkEl = $('invite');
		if (inviteLinkEl) {
			inviteLinkEl.addEvent('click', function () {
				Jetsetter.registrationModal.show();
				return false;
			});
		}
		
		if (Cookie.read('j_pcad')) {
			var j_pcad = JSON.decode(Cookie.read('j_pcad'));
			
			var target = new Date((parseInt(this.options.timestamp) + this.options.expiration) * 1000);
			if (new Date().diff(target, 'ms') < 0) {
				this.showRegistrationModal();
			}

			new SlidingCountdown($('countdown'), {
				'target': target
			});
			$('guest-access-bar').getElement('.close').addEvent('click', function() {
				j_pcad.closed = new Date().format('%s');
				Cookie.write('j_pcad', JSON.encode(j_pcad), {
					'domain': Jetsetter.cookieDomain
				});
				$$('.guest-access-bar-wrapper').hide();
			})
		}
	},

	_getCookieData: function () {
		// Parse data from session.al cookie
		var data = Object.map(Jetsetter.session.al, function (value, key, obj) {
			return (typeOf(value) === 'string') ?
				value.replace(/\+/g, ' ') :
				value;
		});

		return {
			headerText: data.bar,
			promoAlias: data.promoAlias,
			expiration: data.expiration,
			name: data.name,
			promoAlias: data.promo,
			promoId: data.promo_id,
			timestamp: data.timestamp
		};
	},
	
	_getBarEl: function () {
		return new Element('div', {
			'id': 'guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<p class="greeting"></p>\
				<div class="rail">\
					<p class="copy">Jetsetter is a members-only site, and we hope you enjoy this quick peek at its features. Want more than a peek?</p>\
					<a class="register-action action"><span class="text">For a free membership, register now</span> <span class="arrow">&rarr;</span></a>\
				</div>'
		});
	},

	//@TODO remove these once the buy with me promo is over
	_getBwmBarEl: function () {
		return new Element('div', {
			'id': 'guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<p class="greeting"></p>\
				<div class="rail">\
					<p class="copy">Your BuyWithMe by Gilt membership is your ticket to the worlds greatest vacations at members-only prices</p>\
					<a class="register-action action"><span class="text">Sign in now with your BuyWithMe e-mail</span> <span class="arrow">&rarr;</span></a>\
				</div>'
		});
	},
	 
	_getBwmMiniBarEl: function () {
		return new Element('div', {
			'id': 'mini-guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<div>\
					<div class="jetsetter-logo">Jetsetter</div>\
					<div class="rail">\
						<p>Browsing as a guest</p>\
						<a class="register-action action"><span class="text">Sign in to your account now</span> <span class="arrow">&rarr;</span></a>\
					</div>\
				</div>'
		});
	},

	//@TODO remove these once the webbys promo is over
	_getWbyBarEl: function () {
		return new Element('div', {
			'id': 'guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<p class="greeting"></p>\
				<div class="rail">\
					<p class="copy">Jetsetter is a members-only site, and we hope you enjoy this quick peek at its features. Want more than a peek?</p>\
					<a class="register-action action"><span class="text">For a free membership, register now</span> <span class="arrow">&rarr;</span></a>\
				</div>'
		});
	},
	 
	_getWbyMiniBarEl: function () {
		return new Element('div', {
			'id': 'mini-guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<div>\
					<div class="jetsetter-logo">Jetsetter</div>\
					<div class="rail">\
						<p>Browsing as a guest</p>\
						<a class="register-action action"><span class="text">For full access, register now</span> <span class="arrow">&rarr;</span></a>\
					</div>\
				</div>'
		});
	},
	
	_getMiniBarEl: function () {
		return new Element('div', {
			'id': 'mini-guest-access-bar',
			'class': 'guest-access-bar clearfix',
			'html':
				'<div>\
					<div class="jetsetter-logo">Jetsetter</div>\
					<div class="rail">\
						<p></p>\
						<a class="register-action action"><span class="text">For full access, register now</span> <span class="arrow">&rarr;</span></a>\
					</div>\
				</div>'
		});
	},

	_getSemBarEl: function (j_pcad) {
		return new Element('div', {
			'id': 'guest-access-bar',
			'class': 'guest-access-bar clearfix sem-opt',
			'html':
				'<p class="greeting unselectable"></p>\
				<span class="asterisk">* Available to new members only</span>\
				<div class="rail">\
					<div id="countdown"></div>\
				</div>\
				<div class="close"></div>'
		});
	},
	 
	_getSemMiniBarEl: function (j_pcad) {
		return new Element('div', {
			'id': 'mini-guest-access-bar',
			'class': 'guest-access-bar clearfix sem-opt',
			'html':
				'<div>\
					<div class="jetsetter-logo">Jetsetter</div>\
					<div class="rail">\
						<p></p>\
						<a class="register-action action"><span class="text">Register now</span> <span class="arrow">&rarr;</span></a>\
					</div>\
				</div>'
		});
	},
	
	// This function is really "decide if we want to show the modal or not", not just show
	// @TODO: use after buywithme promo is over
	/*
	_original_showRegistrationModal: function () {
		// All in seconds
		var currentTime = ((new Date()).getTime() / 1000).toInt();
		var cookieElapsedTime = currentTime - this.options.timestamp;
		var timeLimit = (this.options.expiration >= 0) ? this.options.expiration : 30;
		
		// Show the mandatory registration modal after the time limit has elapsed
		// (The modal will not show up on load if the expiration is set to 0)
		if (timeLimit != 0 && cookieElapsedTime > timeLimit) {
			var message = '<p>Our mutual friends at ' + this.options.name +
				' thought you would be interested in joining Jetsetter to get' +
				' exclusive access to private deals on primo vacations.</p>' +
				'<p><strong>Your preview of this site has ended. Please accept' +
				' this invitation to become a Jetsetter member.</strong></p>';
			
			Jetsetter.registrationModal.closeButton.destroy();
			Jetsetter.registrationModal.setMessage(message);
			
			setTimeout(function () {
				Jetsetter.registrationModal.show();
			}, 300);
		}
	}
	*/

	showRegistrationModal: function () {
		// All in seconds
		var currentTime = ((new Date()).getTime() / 1000).toInt();
		var cookieElapsedTime = currentTime - this.options.timestamp;
		var timeLimit = (this.options.expiration >= 0) ? this.options.expiration : 30;
		
		// Show the mandatory registration modal after the time limit has elapsed
		// (The modal will not show up on load if the expiration is set to 0)
		if (timeLimit != 0 && cookieElapsedTime > timeLimit) {
			var message = '<p>Our mutual friends at ' + this.options.name +
				' thought you would be interested in joining Jetsetter to get' +
				' exclusive access to private deals on primo vacations.</p>' +
				'<p><strong>Your preview of this site has ended. Please accept' +
				' this invitation to become a Jetsetter member.</strong></p>';
			
			if (this.options.promoAlias === 'bwm') {
				// Remove the expiry after popping the login modal once
				var session = Jetsetter.session;
				session.al.expiration = 0;
				Cookie.write('j_sess', JSON.encode(session), {
					'domain': Jetsetter.cookieDomain
				});

				// Reinit user object
				Jetsetter.user = new User();

			} else {
				Jetsetter.registrationModal.closeButton.destroy();
				Jetsetter.registrationModal.setMessage(message);
			}
			
			setTimeout(function () {
				Jetsetter.registrationModal.show();
			}, 300);
		}
	}
	
});

var Auth = new Class({

	Implements: [Options, Events],

	options: {
		// type
		// email
		// password
		// facebookId
		// promoAlias
		// promoId
		// referrerGuid
		// invitationId
		// userSearchReferralId
	},

	initialize: function(options){
		this.setOptions();

		//check for public promo alias
		if (!this.options.promoAlias) {
			if (Jetsetter.session && Jetsetter.session.pl && Jetsetter.session.pl.promo) {
				this.options.promoAlias = Jetsetter.session.pl.promo;
			}
		}
	},

	authenticate: function(options){
		options = Object.merge(options, this.options);

		switch(options.type){
			case 'email':
				this.emailAuth(options);
				break;
			case 'facebook':
				this.facebookAuth(options);
				break;
			default:
				//fail out with error about type required
				break;
		}
	},
	

	emailAuth: function(options){
		var onSuccess = options.onSuccess,
			onFailure = options.onFailure;

		delete options.onSuccess;
		delete options.onFailure;

        options.rnd = Math.floor(Math.random() * 10000);

		new Request.JSONP({
			url: Jetsetter.SECURE_HOST + '/auth/login',
			data: options,
			onSuccess: function (json) {
				if(json.success){
					this._handleAuthResponse(json, onSuccess);
				} else {
					onFailure(json);
				}
			}.bind(this)
		}).send();
	},

	facebookAuth: function(options){
		FB.getLoginStatus(function (response) {
			if (response.authResponse) {
				fbAuth(response.authResponse.accessToken, response.authResponse.signedRequest);
			} else {
				FB.login(function (response) {
					if (response.authResponse) {
						fbAuth(response.authResponse.accessToken, response.authResponse.signedRequest);
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
					} else {
						_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
					}
				}.bind(this), {
					'scope': 'email,publish_stream,offline_access'
				});
			}
		}.bind(this));


		var self = this;
		function fbAuth(accessToken, signedRequest){
			FB.api('/me', function (user) {
				new Request.JSONP({
					url: Jetsetter.SECURE_HOST + '/auth/login',
					data: Object.merge(user, {
						'fbUserId': user.id,
						'access_token': accessToken,
						'signed_request': signedRequest
					}),
					onSuccess: function (json) {
						if(json.success){
							self._handleAuthResponse(json, options.onSuccess, user);
						} else {
							options.onFailure(json, user);
						}
					}
				}).send();
			});
		}
	},

	_handleAuthResponse: function(json, onSuccess, user) {
		if (json.success) {
			Jetsetter.user = new User();

			var asyncs = {};

			// If this was a registration
			if (json.data.promoAlias) {
				Cookie.write('j_register_event', json.data.promoAlias, {
					'domain': Jetsetter.cookieDomain,
					'duration': 1
				});

				// Stuff in here will affect ALL registration screens
				asyncs.trackRegistration = function(callback) {
					GA.trackRegistration(json.data.promoAlias);
					setTimeout(function(){
						callback(null, null);
					},250);
				};
				
				Jetsetter.user.guid = json.data.guid;
				
				asyncs.doubleclick = function(callback) {
					var axel = Math.random() + "";
					var a = axel * 10000000000000;
					var e = new Element('iframe', {
						src: 'http://fls.doubleclick.net/activityi;src=3081328;type=jsreg570;cat=jsmem724;u1=' + json.data.guid + ';ord=' + a + '?',
						width: "1", height: "1", frameborder: "0", style: "display:none",
						events: {
							load: function() {
								callback(null, null);
							}
						}
					});
					document.getElementsByTagName('body')[0].appendChild(e);
				};
			} else {
				asyncs.trackLogin = function(callback) {
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Success']);
					// Delay firing login event so that pixel can fire
					setTimeout(function() {
						callback(null, null);
					}.bind(this), 500);
				}
			}

			var eventFired = false;
			async.parallel(asyncs, function(err, results) {
				if (!eventFired) {
					eventFired = true;
					onSuccess(json, user);
				}
			});
			setTimeout(function() {
				if (!eventFired) {
					eventFired = true;
					onSuccess(json, user);
				}
			}, 1000);
		} else {
			var errorCode = json.error.code,
				errorMessage = json.error.message;
			// If there's a redirect target to an invite link, go there.
			if (json.data && json.data.location) {
				_gaq.push(['_trackEvent', 'Account', 'Login-send-to-reg', 'Failure']);
				location.replace(json.data.location);
			} else {
				if (errorCode == 410) {
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
					this.loginAttempts++;
				}
				if (this.loginAttempts >= 3) {
					_gaq.push(['_trackEvent', 'Account', 'Login-send-to-forgot-password', 'Failure']);
					onFailure(json, user);
				} else {
					onFailure(json, user);
					_gaq.push(['_trackEvent', 'Account', 'Login', 'Failure']);
				}
			}			
		}
	},

	logout: function () {
		location.replace('/auth/logout');
	},

    resetSessionCookies: function(options){
        var req = new Request.JSON({
            url: '/auth/resetsessioncookies?rnd=' + Math.floor(Math.random() * 10000),
            onSuccess: function () {
                options.onSuccess && options.onSuccess();
            },
            onFailure: function () {
                options.onFailure && options.onFailure(103, "Could not reset session cookie");
            }
        }).get();
    }
})
var GlassBadgeMenu = new Class({

	initialize: function(triggerEl, menuEl, data){
		this.triggerEl = triggerEl;
		this.menuEl = menuEl;
		this.menu = this.menuEl.getElement('ul');
		this.badge = this.triggerEl.getElement('span');
		this.cookie = JSON.decode(Cookie.read('j_bdge'));
		this.hasSetCookie = false;
		this.data = data;
		this.showTimeout;
		this.hideTimeout;
		this.timeout = 200;

		this.hydrateMenu(data);
	},

	hydrateMenu: function(badgeMenuItems){
		var self = this;

		badgeMenuItems.each(function(item){
			// tracking
			item.url += '?nm=badgemenu';

			if(item.promoted){
				var html = '<a href="' + item.url + '">' + item.title + '<span></span></a>';

				if(self.cookie){
					if(!self.cookie.viewedPromotedItems.contains(item.id)){
						var className = 'promoted';
					}
					else{
						var className = '';
					}
				}
				else{
					var className = 'promoted';
				}
			}
			else{
				var html = '<a href="' + item.url + '">' + item.title + '</a>',
					className = '';
			}

			new Element('li',{
				'class': className,
				'html': html
			}).inject(self.menu, 'bottom');
		});
	},

	setCookie: function(){
		var self = this;

		if(self.cookie){
			self.data.each(function(item){
				if(item.promoted && !self.cookie.viewedPromotedItems.contains(item.id)){
					self.cookie.viewedPromotedItems.push(item.id);
				}
			});
		}
		else{
			self.cookie = {
				viewedPromotedItems: []
			}

			self.data.each(function(item){
				if(item.promoted){
					self.cookie.viewedPromotedItems.push(item.id);
				}
			});
		}

		Cookie.write('j_bdge', JSON.encode(self.cookie), {duration: 365});
	}
})



var BadgeMenu = new Class({
	
	Implements: Events,
	
	initialize: function(rootEl, data){
		var self = this;

		self.rootEl = rootEl;
		self.badge = rootEl.getElement('.badge');
		self.menu = rootEl.getElement('ul');
		self.timeoutDuration = 250;
		self.showTimeout;
		self.hideTimeout;
		self.cookie = JSON.decode(Cookie.read('j_bdge'));
		self.data = data;
		self.hasSetCookie = false;

		self.hydrateMenu(data);

		self.rootEl.addEvents({
			mouseenter: function(){
				clearTimeout(self.hideTimeout);
				self.showTimeout = setTimeout(function(){
					self.show();					
				},self.timeoutDuration);
			},
			mouseleave: function(){
				clearTimeout(self.showTimeout);
				self.hideTimer = setTimeout(function(){
					self.hide();
				},self.timeoutDuration);
			}
		});

		if(Browser.ie6) {
			self.overlayShim = new IframeShim(self.menu, {
				'display': false
			});
		}

	},

	hydrateMenu: function(badgeMenuItems){
		var self = this;

		badgeMenuItems.each(function(item){
			
			if(item.promoted){
				var html = '<a href="' + item.url + '">' + item.title + '<span></span></a>';

				if(self.cookie){
					if(!self.cookie.viewedPromotedItems.contains(item.id)){
						var className = 'promoted';
					}
					else{
						var className = '';
					}
				}
				else{
					var className = 'promoted';
				}
			}
			else{
				var html = '<a href="' + item.url + '">' + item.title + '</a>',
					className = '';
			}

			new Element('li',{
				'class': className,
				'html': html
			}).inject(self.menu, 'bottom');
		});
	},

	show: function(){
		this.rootEl.addClass('active');
		this.menu.show();

		if(this.overlayShim){
			this.overlayShim.show();
		}

		if(!this.hasSetCookie){
			this.setCookie(this.data);
			this.badge.hide();
			this.hasSetCookie = true;
		}
	},

	hide: function(){
		this.rootEl.removeClass('active');
		this.menu.hide();

		if(this.overlayShim){
			this.overlayShim.hide();
		}
	},

	setCookie: function(){
		var self = this;

		if(self.cookie){
			self.data.each(function(item){
				if(item.promoted && !self.cookie.viewedPromotedItems.contains(item.id)){
					self.cookie.viewedPromotedItems.push(item.id);
				}
			});
		}
		else{
			self.cookie = {
				viewedPromotedItems: []
			}

			self.data.each(function(item){
				if(item.promoted){
					self.cookie.viewedPromotedItems.push(item.id);
				}
			});
		}

		Cookie.write('j_bdge', JSON.encode(self.cookie), {duration: 365});
	}
});
var BaseTracker = new Class({
	
	Implements: [Events,Options],

	options: {

	},

	initialize: function(){

	},

	trackEvent: function(data){
		
	},
	
	addToQueue: function(data){
		
	},

	fireQueue: function(){
		
	},

	trackOrder: function (order) {

	},
	
	trackRegistration: function (promoAlias) {

	},
	
	trackInvites: function (numOfInvites, type) {

	}

});


var EventServiceSingleton = new Class({
	
	initialize: function(){
		if(window.EventService){
			return false;
		}
		this.cache = {};
	},

	publish: function(topic, args){
		var self = this;

		self.cache[topic] && Array.each(self.cache[topic], function(callback){
			// not an arra, lets make it one
			if(args && !args.length){
				args = [args];
			}
			callback.apply(this, args || []);
		});
	},

	subscribe: function(topic, callback){
		var self = this;

		if(!self.cache[topic]){
			self.cache[topic] = [];
		}

		self.cache[topic].push(callback);
		return [topic, callback];
	},

	unsubscribe: function(handle){
		var self = this;

		var t = handle[0];

		self.cache[t] && Array.each(self.cache[t], function(idx){
			if(this == handle[1]){
				self.cache[t].splice(idx, 1);
			}
		});
	}

});
var Header = new Class({

    Implements: Options,

    options: {
        fixed: true
    },

    initialize: function(headerEl, options){
        this.setOptions(options);

        this.headerEl = headerEl;
        this.linkMenu = this.headerEl.getElement('nav ul');
        this.searchForm = this.headerEl.getElement('form');
        this.accountMenuEl = this.headerEl.getElement('#account-menu');
        this.accountToggleEl = this.headerEl.getElement('#auth-menu-account');
        this.authMenuLogin = this.headerEl.getElement('#auth-menu-login');
        this.authMenuBecome = this.headerEl.getElement('#auth-menu-become');
        this.authMenuInvite = this.headerEl.getElement('#auth-menu-invite');
        this.searchCta = this.headerEl.getElement('.search-cta');
        this.searchCancel = this.headerEl.getElement('.search-cancel');
        this.container = this.headerEl.getElement('.page-container');
        this.destinationInputEl = this.headerEl.getElement('.search .destination');
        this.destinationInputEl.addEvent('focus', function(){
            this.destinationInputEl.removeClass('highlight');
        }.bind(this));

        this.minimalWhitelist = ['checkout'];
        this.showMinimal = this.minimalWhitelist.contains($(document.body).get('id'));

        // add minimal header
        if(this.showMinimal){
            $(document.html).addClass('minimal');
        }

        if(this.options.fixed){
            this.setupFixed();
        }

        if(!this.showMinimal){
            this.linkbin = new Linkbin(this.headerEl);

            var badgeMenuEl = $('custom-menu');
            if (badgeMenuEl) {
                var contentService = new ContentService();

                var cachedMenuItems = lscache.get('customMenuItems');
                if (!cachedMenuItems) {
                    contentService.getCustomMenuItems({
                        options: null,
                        limit: null,
                        order: 'rank',
                        onSuccess: function(data) {
                            lscache.set('customMenuItems', data, 60 /* 60 mins == 1 hr */);
                            this.badgeMenu = new GlassBadgeMenu(this.linkMenu.getElement('li'), badgeMenuEl, data);
                        }.bind(this),
                        onFailure: function(code, message) {
                            // log error but do not notify user
                            throw new Error("ERROR " + code + ": " + message);
                        }
                    });
                } else {
                    this.badgeMenu = new GlassBadgeMenu(this.linkMenu.getElement('li'), badgeMenuEl, cachedMenuItems);
                }
            }

            var truncateAt, placeholder;
            switch(Jetsetter.page.width){
                case 995:
                    truncateAt = 30;
                    placeholder = 'Type a Destination or Hotel';
                    break;
                case 960:
                    truncateAt = 25;
                    placeholder = 'Destination or Hotel';
                    break;
                case 918:
                    truncateAt = 22;
                    placeholder = 'Destination or Hotel';
                    break;
                default:
                    truncateAt = 22;
                    placeholder = 'Destination or Hotel';
                    break;
            }

            this.destinationInputEl.set('placeholder', placeholder);

            this.autocomplete = headerSearchAutocomplete = new HeaderSearchAutocomplete(this.destinationInputEl, {
                searchSource: 'TopNav-nofollow',
                propertyRequestParams: { nm: 'Search-TopNav' },
                theme: 'dark',
                truncateAtChar: truncateAt
            });

            this.autocomplete.addEvent('selectionMade', function (el) {
                // Omniture tracking
                var position = el.getAllPrevious('li').length;
                var feature = 'Autocomplete click: ' + headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')';
                var data = el.retrieve('data');


                var search = new URI(el.getElement('a').get('href')),
                    data = search.get('data');

                data.type = 'Dropdown';

                if(this.options.searchSource){
                    data.source = this.options.searchSource;
                }

                search.set('data', data);

                window.location = search.toString();

                _gaq.push(['_trackEvent', 'Autocomplete', 'click', headerSearchAutocomplete.getSearchQuery() + ' (' + position + ')']);
            });

            if(this.accountMenuEl && this.accountToggleEl){
                var cliCookie = Cookie.read('j_cli');
                if (cliCookie) {
                    var cliCookieValue = JSON.decode(cliCookie.decode64());
                    if (cliCookieValue && cliCookieValue.propertyId) {
                        this.accountMenuEl.getElement('.favorite span').set('text', _.size(cliCookieValue.propertyId));
                    } else {
                        this.accountMenuEl.getElement('.favorite span').destroy();
                    }
                } else {
                    this.accountMenuEl.getElement('.favorite span').destroy();
                }

                this.accountMenuEl.hide();
                this.accountMenuEl.addEvents({
                    'mouseenter': function(e){
                        e.stop();
                    },

                    'mouseleave': function(e){
                        e.stop()
                    },

                    'mouseover': function(e){
                        e.stop();
                    },

                    'click:relay(li)': function(e, elem){
                        if(elem.hasClass('fb')){
                            e.stop();
                            this.fbLogin();
                        }
                    }.bind(this)
                });

                this.accountToggleEl.addEvents({
                    'mouseenter': function(e){
                        e.stop();
                        if(!this.menuLock){
                            EventService.publish('/linkbin/hide');
                            this.accountMenuEl.show();
                        }
                    }.bind(this),

                    'mouseleave': function(e){
                        e.stop();
                    },

                    'mouseover': function(e){
                        e.stop();
                    }
                });

                document.addEvent('mouseover', function(){
                    this.menuLock = false;
                    this.accountMenuEl.hide();
                }.bind(this));
            }
        }
    },

    fbLogin: function(){
        Jetsetter.Auth.authenticate({
            type: 'facebook',
            onSuccess: function(json){
                _gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
                window.location.reload();
            }.bind(this),
            onFailure: function(json){
                _gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
                window.location.reload();
            }.bind(this)
        });
    },

    setupFixed: function(){
        var headerPos = this.headerEl.getPosition().y;

        window.addEvent('scroll', function(){
            var curPos = window.getScroll().y;

            if(curPos > headerPos){
                if(!this.headerEl.hasClass('fixed')){
                    this.headerEl.addClass('fixed');
                }
            } else {
                if(this.headerEl.hasClass('fixed')){
                    this.headerEl.removeClass('fixed');
                }
            }
        }.bind(this));
    }

});
var HeaderSearchAutocomplete = new Class({

	Extends: SearchAutocomplete,

    initialize: function(textFieldEl, options) {
        this.parent(textFieldEl, options);
        this.dynamicCropper = new DynamicCropperLinkGenerator();
    },

    createResultElProduct: function(resultData) {
        var resultEl = this.parent(resultData);
        if (resultData.product.image && resultData.product.image.path) {
            var imageUrl = Jetsetter.CDN_HOST + '/' + this.dynamicCropper.generateLink(resultData.product.image.path, 272, 136);
            new Element('div', {
                'class': 'image',
                'title': resultData.product.name.stripTags()
            })
                .adopt(
                    new Element('div',{
                        'class': 'envelope'
                    }).adopt([
                            new Element('img', {
                                'data-src': imageUrl,
                                width: 272,
                                height: 136,
                                alt: ''
                            }),
                            new Element('div', {
                                'class': 'overlay'
                            })
                        ])
                )
                .inject(resultEl, 'top')
                .hide();
        }
        return resultEl;
    },

	buildResults: function (data) {
		this.parent(data);
		if (data.length > 0) {
			var viewMoreEl = new Element('li', {
				'class': 'more'
			}).adopt(
				new Element('a', {
					'class': 'more',
					'href': '/search?q=' + this.getSearchQuery(),
					'html': '<span class="icon"></span>View All Search Results <span class="arrow">&rarr;</span>'
				})
			);
			this.resultsListEl.adopt(viewMoreEl);
		}
	},

	highlightResult: function (resultEl) {
		if (resultEl.hasClass('selected')) {
			return this;
		}

		clearTimeout(this.selectTimeout);
		this.selectTimeout = setTimeout(function () {
			var imageEl = resultEl.getElement('.image img');
			if (!imageEl) {
				return false;
			}

			// Lazy load image
			if (!imageEl.get('src')) {
				imageEl.onload = function () {
					this._showImage(resultEl);
				}.bind(this);

				// Load image
				imageEl.set('src', imageEl.get('data-src'));
			} else {
				this._showImage(resultEl);
			}
		}.bind(this), 750);

		return this.parent(resultEl);
	},

	_showImage: function (resultEl) {
		var imageWrapperEl = resultEl.getElement('.image');
		if (!imageWrapperEl) {
			return this;
		}

		// Show only one image at a time
		if (this.lastShownResultEl) {
			this._hideImage(this.lastShownResultEl);
		}
		this.lastShownResultEl = resultEl;

		var slideFx = new Fx.Slide(imageWrapperEl.show(), {
			duration: 250,
			transition: Fx.Transitions.Quint.easeOut
		})
		.hide()
		.slideIn()
		.chain(function () {
			setTimeout(function () {
				this._startImageAnimation(imageWrapperEl.getElement('img'));
			}.bind(this), 250);
		}.bind(this));
	},

	_hideImage: function (resultEl) {
		var imageWrapperEl = resultEl.getElement('.image');
		if (!imageWrapperEl) {
			return this;
		}

		var slideFx = new Fx.Slide(imageWrapperEl, {
			duration: 250,
			transition: Fx.Transitions.Quint.easeOut
		})
		.slideOut()
		.chain(function () {
			this._resetImageAnimation(imageWrapperEl.getElement('img'));
		}.bind(this));
	},

	_startImageAnimation: function (imageEl) {
		this.distance = this.distance || (imageEl.getSize().y - imageEl.getParent().getSize().y);

		imageEl.set('tween', {
			duration: 3000,
			transition: Fx.Transitions.Quad.easeOut
		})
		.tween('top', [0, -this.distance]);

		return this;
	},

	_resetImageAnimation: function (imageEl) {
		imageEl.get('tween').cancel();
		imageEl.setStyle('top', 0);

		return this;
	}

});

var Linkbin = new Class({

	Implements: Events,

	initialize: function(headerEl){
		this.headerEl = headerEl;
		this.triggers = this.headerEl.getElements('nav li');
		this.linkbin = this.headerEl.getElement('#linkbin');
		this.nub = this.headerEl.getElement('nav .nub');
		this.bins = this.linkbin.getElements('section');
        this.eventSection = this.linkbin.getElement('section.events');
		this.collectionsList = this.linkbin.getElement('.collections');
		this.timeout = 250;
		this.showTimeout;
		this.hideTimeout;

		this.getContent();
		
		this.linkbin.hide();

		// so anything can hide the linkbin
		EventService.subscribe('/linkbin/hide', function(){
			this.hide();
		}.bind(this));

		this.triggers.each(function(trigger, i){
			trigger.addEvents({
				'mouseenter': function(e) {
					clearTimeout(this.hideTimeout);
					e.stop();

					if(document.readyState && document.readyState != 'interactive' && document.readyState != 'complete') {
						return;
					}

					EventService.publish('/badge-menu/hide');

					this.showTimeout = setTimeout(function(){
						this.nub.show();
						this.bins.hide();
						this.bins[i].show();

						// To make the article elements occupy their natural
						// width, we need to make the linkbin wide enough
						// so that any number of articles will fit side by
						// side, and then sum their widths to calculate a good
						// linkbin width.
						this.linkbin.setStyle('width', 1024);
						this.linkbin.show();

						var binWidth = _.reduce(this.bins[i].getElements('article'), function(memo, article) {
							return memo + article.getWidth();
						}, 0) + 1;
						this.linkbin.setStyle('width', binWidth);

						var halfTriggerWidth = trigger.getSize().x / 2;
						var triggerLeft = trigger.getPosition(this.headerEl.getElement('.page-container')).x;

						var linkbinLeft = triggerLeft + halfTriggerWidth - (binWidth / 2);
						linkbinLeft = linkbinLeft < 0 ? 0 : linkbinLeft;
						this.linkbin.setStyle('left', linkbinLeft);

						var nubLeft = triggerLeft + halfTriggerWidth - 10;
						this.nub.setStyle('left', nubLeft);
						// Don't transition the first time (move instantly to the right position)
						setTimeout(function() {
							if(this.nub.isVisible()) {
								this.nub.addClass('nub-transition');
							}
						}.bind(this), 1);

						this.triggers.removeClass('active');
						trigger.addClass('active');
					}.bind(this), this.linkbin.isVisible() ? 0 : this.timeout);
				}.bind(this),

				'mouseleave': function(e){
					e.stop();
					clearTimeout(this.showTimeout);
				}.bind(this),

				'mouseover': function(e){
					e.stop();
				}
			});
		}.bind(this));

		// Prevent mouse events over the nub rail, auth menu and linkbin from
		// getting passed through to the document
		// (below we detect mouse over the document to hide the linkbin)
		this.nubRail = this.headerEl.getElement('nav > div');
		this.nubRail.addEvents({
			'mouseenter': function(e){
				e.stop();
			}.bind(this),

			'mouseleave': function(e){
				e.stop()
			}.bind(this),

			'mouseover': function(e){
				e.stop();
			}
		});

		this.authMenu = this.headerEl.getElement('.auth-menu');
		this.authMenu.addEvents({
			'mouseenter': function(e){
				e.stop();
			}.bind(this),

			'mouseleave': function(e){
				e.stop()
			}.bind(this),

			'mouseover': function(e){
				e.stop();
			}
		});

		this.linkbin.addEvents({
			'mouseenter': function(e){
				e.stop();
			}.bind(this),

			'mouseleave': function(e){
				e.stop()
			}.bind(this),

			'mouseover': function(e){
				e.stop();
			}
		});

		document.addEvent('mouseover', function(){
			clearTimeout(this.showTimeout);
			this.hideTimeout = setTimeout(function(){
				this.hide();
			}.bind(this), this.timeout);
		}.bind(this));

		this.linkbin.getElements('section li').each(function(elem) {
			var prefix = 'menu-link-';
			if((elem.get('name') || '').indexOf(prefix) == 0) {
				elem.addEvent('mouseover', function() {
					var i = elem.get('name').substring(prefix.length);
					var link = elem.getParent('section').getElement('a[name=menu-image-link-' + i + ']');
					link.getSiblings().hide();
					link.show();
				});
			}
		});
	},

	getContent: function(){
		// Populate linkbin per region user is in 
		var j_ms = Cookie.read('j_ms'), region = controlGroup = '';
		if (j_ms) {
			region = j_ms.split('_')[0];
			controlGroup = j_ms.split('_')[1];
		}

        var cachedEvents = lscache.get('currentActiveEvents');
        if (!cachedEvents) {
            var eventsService = new EventsService();
            eventsService.getEvents({
                regionWoeId : region,
                mosaic      : true,
                onSuccess: function(data) {
                    lscache.set('currentActiveEvents', data, 2 /* 2 minute */);
                    return this._processEventsResponse(data);
                }.bind(this),

                onFailure: function(code, message) {
                    // log error but do not notify user
                    throw new Error("ERROR " + code + ": " + message);
                }
            });
        } else {
            return this._processEventsResponse(cachedEvents);
        }
	},

    _processEventsResponse: function(data) {
        if (data.length == 0) {
            return;
        }

        // Add Tracking to Active Sales
        data.each(function(event, index) {
            var url = event.url;
            if (event.products && event.products.length == 1) {
                url = event.products[0].url;
            }

            event.activeUrl = url +'?nm=linkbin&cl='+ index;
        });

        //fill in active and upcoming sales
        var firstCol = data.slice(0, 4),
            secondCol = data.slice(4, 8),
            thirdCol = data.slice(8, 12),
            saleBins = this.eventSection.getElements('ul');

        this.createList(firstCol, saleBins[0]);
        this.createList(secondCol, saleBins[1]);
        this.createList(thirdCol, saleBins[2]);
    },

	createList: function(events, bin){
		events.each(function(event){
			if(!event.subtitle){
				var tempArr = event.title.split('-');
				event.title = tempArr[0];
				if(tempArr[1]){
					event.subtitle = tempArr[1];
				} else {
					event.subtitle = '';
				}
			}

			if(!event.subtitle){
				event.subtitle = event.products && event.products[0] && event.products[0].description || '';
			}

			new Element('li', {
				html: '<a title="'+ event.title +'" href="'+ event.activeUrl +'"><span class="title">'+ event.title.truncate(25, '…', ' ') +'</span><span class="subtitle">'+ event.subtitle.truncate(25, '…', ' ') +'</span></a>'
			}).inject(bin, 'bottom');
		}.bind(this));
	},

	hide: function(){
		// Turn off transitions for nub, so that it will instantly jump
		// to the right position the first time it is shown
		this.nub.removeClass('nub-transition');
		this.nub.hide();

		this.linkbin.hide();
		this.triggers.removeClass('active');
	}

});
var Linkbin2 = new Class({
	
	Implements: Events,
	
	initialize: function (container) {
		
		this.idsToElements = {};
		
		this.hideTimer;
		this.showTimer;
		
		this.currentTrigger;
		
		this.container = container;
		
		this.container.addEvent('mouseenter', this.resetHideTimer.bind(this));
		this.container.addEvent('mouseleave', this.startHideTimer.bind(this));
		
		this.addEvent('sectionChange', function (id) {
			var bins = this.container.getChildren();
			
			bins.removeClass('visible');
			$(id).addClass('visible');			
		}.bind(this));
		
		this.visible = false;
		
	},
	
	show: function (triggerElement) {
		Object.each(this.idsToElements, function (element, id) {
			if (this.idsToElements[id] == triggerElement) {
				this.fireEvent('sectionChange', id);
				return true;
			}
		}, this);
		
		if (this.currentTrigger && this.currentTrigger != triggerElement) {
			this.currentTrigger.removeClass('active');
		}
		
		this.currentTrigger = triggerElement;
		triggerElement.addClass('active');
		
		this.fireEvent('show', this.currentTrigger);
		this.container.show();
		this.visible = true;
		
		if (this.overlayShim) {
			this.overlayShim.show();
		}

	},
	
	hide: function (triggerElement) {
		if (triggerElement) triggerElement.removeClass('active');
		this.container.hide();
		this.visible = false;

		if (this.overlayShim) {
			this.overlayShim.hide();
		}
	},
	
	addTrigger: function (triggerElement, id) {
		this.idsToElements[id] = triggerElement;
		
		triggerElement.addEvent('mouseenter', this.startShowTimer.bind(this, triggerElement));
		triggerElement.addEvent('mouseleave', this.startHideTimer.bind(this, triggerElement));
		
	},
	
	startShowTimer: function (triggerElement) {
	
		if (!this.visible) {
			
			this.resetHideTimer();
			this.showTimer = setTimeout(this.show.bind(this, triggerElement), 250);
			
		} else {
			
			this.show(triggerElement);
			this.resetHideTimer();
		}
		
	},
	
	startHideTimer: function (triggerElement) {

		triggerElement = triggerElement;
		if (triggerElement.event) triggerElement = this.currentTrigger;
		
		if (this.visible) {	
			this.hideTimer = setTimeout(this.hide.bind(this, triggerElement), 250);
		} else {
			this.resetHideTimer();
			this.resetShowTimer();
			this.hide(triggerElement);
		}
	},
	
	resetShowTimer: function () {
		clearTimeout(this.showTimer);
	},
	
	resetHideTimer: function () {
		clearTimeout(this.hideTimer);
	},
	
	toElement: function () {
		return this.container;
	}
	
});

var ModuleManager = new Class({
	
	Implements: Events,

	options: {},

	initialize: function(){

		//this is hack for when the module is not part of a predefined class -- we shouldn't really be doing stuff without classes
		this.windowOverrides = ['PostStayBanner', 'ExitSurvey', 'FBPhotoLike'];
		
		this.testers = {
			'PostStayBanner': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'ExitSurvey': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'InviteBanner': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'EmailReminder': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'FBPhotoLike': (function () {
				return false;
			}()),
			'UKBanner': (function () {
				return Jetsetter.ENTITY_ID === 3 ? true : false;
			}()),
			'SlidingCountdown': (function () {
				return Jetsetter.ENTITY_ID === 1 ? true : false;
			}()),
			'ExpertModal': (function () {
				return false;
			}()),
			'iPhoneBanner': (function () {
				return false;
			}()),
			'iPhoneModal': (function () {
				return Jetsetter.ENTITY_ID === 1 ? true : false;
			}()),
			'AdminImageReporter': (function () {
				var cookie = Cookie.read('j_aim');
				if(cookie){
					return cookie === 'true' ? true : false;
				} else {
					return false
				}
			}()),
			'iPhoneInterstitial': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'iPadModal': (function () {
				return Jetsetter.ENTITY_ID !== 2 ? true : false;
			}()),
			'CollectionsModal': (function () {
				return Jetsetter.ENTITY_ID === 1;
			}()),
			'HomesModal': (function () {
				//return Jetsetter.ENTITY_ID === 1 ? true : false;
				return false;
			}()),
			'MemorialBanner': (function() {
				var whitelist = ['splash'];
				var showOnPage = whitelist.contains($(document.body).get('id'));

				if(!showOnPage || Jetsetter.ENTITY_ID !== 1){
					return false;
				}
				else{
					var date = new Date(),
						day = date.get('date'),
						month = date.get('month');

					if(month === 8 && day === 11){
						return true;
					}
					else{
						return false;						
					}
				}
			}()),
			'PromoDiscount': (function () {
				return Jetsetter.ENTITY_ID == 1 ? true : false;
			}())
		}


		this.setConfig();

	},

	setConfig: function(){
		Object.each(this.testers, function(value, key){

			if(window[key] || this.windowOverrides.contains(key)){
				Jetsetter.modules[key] = value;
			}
			else{
				Jetsetter.modules[key] = false
			}
		}.bind(this));
	}

});
var NavInvite = new Class({
	
	initialize: function (attachTo, popUpEl) {
		
		this.defaultScreenEl = popUpEl.getElement('.default-screen');
		this.sentScreenEl = popUpEl.getElement('.sent-screen');
		
		var anchor = attachTo.getFirst().erase('href');
		
		attachTo.addEvents({
			'click:relay(a.action)': function (event) {
				popUpEl.show();
				this.showDefaultScreen();
			}.bind(this),
			'mouseenter': function () {
				anchor.addClass('active');
			},
			'mouseleave': function () {
				if (!popUpEl.isDisplayed()) {
					anchor.removeClass('active');
				}
			}
		});
		
		document.addEvent('mousedown', function (event) {
			var element = $(event.target);
			while (element && element !== attachTo) {
				element = element.getParent();
			}
			
			if (!element) {
				popUpEl.hide();
				anchor.removeClass('active');
			}
		});
		
		
		// Email input
		this.emailEl = this.defaultScreenEl.getElement('input');
		this.emailField = new InviteEmailField(this.emailEl, {
			tooltipType: 'top'
		});
		
		// Send invite
		this.formEl = this.defaultScreenEl.getElement('form');
		this.sendButtonEl = this.formEl.getElement('button');
		
		this.formEl.addEvent('submit', function (event) {
			event.preventDefault();
			
			if (this.emailField.get('state') !== 'valid') {
				this.emailField.updateDisplayState();
				return false;
			}
			
			this.sendButtonEl.set('text', 'Sending…').disable();
			this.formEl.addClass('sending');
			var req = new Request.JSON({
				url: '/invitation',
				data: {
					'type': 'nav',
					'guid': Jetsetter.user.guid,
					'emailAddresses': [this.emailField.get('value')]
				},
				onSuccess: function (json) {
					if (json.success) {
						this.emailEl.set('value', '');
						this.emailField.set('state', 'empty');
						
						this.showSentScreen();
						
						
						// Regular GA tracking
						GA.trackInvites(1, 'nav-widget');
						
					} else {
						req.onFailure();
					}
				}.bind(this),
				onFailure: function () {
					this.showDefaultScreen();
				}.bind(this)
			}).post();
		}.bind(this));
		
		// Sent screen
		this.sentScreenEl.getElement('button').addEvent('click', this.showDefaultScreen.bind(this));
		
	},
	
	showDefaultScreen: function () {
		this.sentScreenEl.hide();
		this.defaultScreenEl.show();
		
		this.formEl.removeClass('sending');
		this.emailEl.focus();
		this.sendButtonEl.enable().set('text', 'Send').enable();
	},
	
	showSentScreen: function () {
		this.defaultScreenEl.hide();
		this.sentScreenEl.show();
	}
	
});
/*
window.addEvent('domready', function () {
	var inviteLinkEl = $('invite-link');
	if (!inviteLinkEl) {
		return;
	}
	if (bucket == 'nav-widget' || location.hash == '#nav-widget') {
		new NavInvite(inviteLinkEl, $('nav-invite'));
		
		// Nav invite vs invite page GWO test
		// Init the test only if triggered on the header link
		inviteLinkEl.getElement('a').addEvent('click', function (event) {
			event.preventDefault();
			
			_gaq.push(
				['inviteTest._setAccount', 'UA-12185313-1'],
				['inviteTest._trackPageview', '/2340697611/test']
			);
		});
	}
});
*/


var NotificationCenter = new Class({

	Implements: [Options, Events],

	options: {
		timeout: 3500,
		animationTime: 600,
		animation: 'fade'
	},

	initialize: function(rootEl){
		this.rootEl = rootEl;
		this.rootEl.addClass(this.options.animation);

		this.notificationQueue = [];

		this.rootEl.addEvent('click:relay(.close)', function(e, elem){
			this.close();
		}.bind(this));

		// Move the bar down if the admin bar is showing
		if(Jetsetter.user.isAdmin){
			this.rootEl.setStyle('top', 30);
		}
	},

	createNotification: function(notification){
		// if there is already a notification being presented queue it
		if(this.curNotification){
			this.notificationQueue.push(notification);
			return;
		}

		this.buildNotification(notification);
	},

	buildNotification: function(notification){
		var html = '<div class="notification {{type}} past">\
						<div class="logo"></div>\
						<a class="close"></a>\
						<p class="message tenor">{{message}} {{#if cta}}<a class="cta tenor" {{#if ctaLink}}href="{{ctaLink}}"{{/if}}>{{cta}}</a>{{/if}}</p>\
					</div>',
			template = Handlebars.compile(html),
			notificationEl = Elements.from(template(notification));


		this.curNotification = notificationEl.inject(this.rootEl, 'top');

		// If the user hovers over the message wait for them to manually close it
		this.curNotification.addEvent('mouseenter', function(){
			clearTimeout(this.notificationTimeout);
		}.bind(this));

		// If code included onCtaClick then call it when the user clicks on CTA, also close the notification
		if(notification.onCtaClick){
			this.curNotification.addEvent('click:relay(.cta)', function(){
				notification.onCtaClick();
				this.close();
			}.bind(this));
		}

		// Animate notification in
		setTimeout(function(){
			notificationEl.removeClass('past');

			// Wait until notification is done animating
			setTimeout(function(){

				// Set a timeout for the notification to disappear
				var timeout = _.isUndefined(notification.timeout) ? this.options.timeout : notification.timeout;
				if(timeout > 0) {
					this.notificationTimeout = setTimeout(function(){
						this.close();		
					}.bind(this), timeout);
				}
			}.bind(this), this.options.animationTime)
		}.bind(this), 50);
	},

	success: function(notification){
		notification.type = 'success';
		this.createNotification(notification);
	},

	error: function(notification){
		notification.type = 'error';
		this.createNotification(notification);
	},

	info: function(notification){
		notification.type = 'info';
		this.createNotification(notification);
	},

	close: function(){
		// Clear the current notification timeout so it doesnt get called twice
		clearTimeout(this.notificationTimeout);

		// Animate the notification out
		this.curNotification.addClass('past');

		// Wait until the animation is done
		setTimeout(function(){

			// Destroy the notification element and set it to null
			this.curNotification.destroy();
			this.curNotification = null;

			// If there are still notifications waiting to be presented, present the next one
			if(this.notificationQueue.length > 0){
				this.createNotification(this.notificationQueue.pop());
			}
		}.bind(this), this.options.animationTime);
	}

})


// 	var NotificationCenter = new Class({
		
// 		Implements: [Options, Events],

// 		initialize: function (){
// 			if(!Jetsetter.NotificationCenter){
// 				var self = this;

// 				self.rootEl = $(document);
// 				self.browserType = Browser.name === 'ie' ? (Browser.ie9 ? 'ie9' : 'lt9') : Browser.name;
// 				self.notifications = [];
// 				self.timeout = 2000;
// 				self.allowLink = self.rootEl.getElement('#chrome-allow');
// 			}


// 		},

// 		checkAllowed: function(){
// 			var self = this,
// 				allowed = false;
// 			switch(self.browserType){
// 				case 'chrome':
// 					if(window.webkitNotifications.checkPermission() != 0){
// 						self.allowLink = self.rootEl.getElement('#chrome-allow');
// 						self.allowLink.setStyle('background', 'red');

// 						self.allowLink.addEvent('click:once', function(){
// 							self.setAllowed();
// 						});								
// 					}
// 					else{
// 						allowed = true;
// 					}
// 					break;
// 				case 'ie9':
// 					if(window.external.msIsSiteMode()){
// 						allowed = true;
// 					}
// 					break;
// 			}

// 			return allowed;
// 		},

// 		setAllowed: function(){
// 			if(this.browserType === 'chrome'){
// 				window.webkitNotifications.requestPermission();
// 			}
// 		},

// 		addNotifications: function(notifications){
// 			var self = this;

// 			self.notifications = notifications;

// 			Object.each(self.notifications, function(){
// 				self.createNotification(arguments[0], arguments[1]);
// 			});

// 		},

// 		createNotification: function(notification){

// 			var self = this;



// 			if(arguments[1]){
// 				var delta = new Date().diff(new Date(arguments[1]), 'second');
// 			}


// 			switch(self.browserType){
// 				case 'chrome':
// 					var n = window.webkitNotifications.createNotification('http://www.jetsetter.com/favicon.ico', notification.title, notification.message);

// 					if(this.checkAllowed()){
// 						setTimeout(function(){
// 							n.show();
// 						}, delta ? delta * 1000 : self.timeout);
// 					}
// 					break;
// 				case 'ie9':
// 					if(this.checkAllowed()){
// 						window.setTimeout("window.external.msSiteModeActivate()", delta ? delta * 1000 : self.timeout);	
// 					}
// 					break;
// 			}

// 		}

// 	});


// 	Jetsetter.NotificationCenter = new NotificationCenter();
	
	
// 	Jetsetter.NotificationCenter.addNotifications({
// 		"April 28, 2011 3:19:45 pm": {
// 			"title": "Sales Starting Now!",
// 			"message": "Jetsetter's 12pm Sales are Starting Now!"
// 		}

// 	});


// 	/*/
// 	Jetsetter.NotificationCenter.createNotification({
// 		"title": "whatever",
// 		"message": "whatever"
// 	});
// 	//*/

// 	//*/

// 	//console.log(window.external.msIsSiteMode(), Browser.name);

// 	if(Browser.ie9 && window.external.msIsSiteMode()){
// 		var g_ext = window.external;
// 	}
// });
/**
 * Persists dates across pages. Dates in URL take priority over dates in local storage
 *
 * Dependencies:
 *   - Mootools
 *   - History
 *   - lscache
 *   - Moment
 * @type {Class}
 */
var PersistentDates = new Class({
    url: null,

    checkinDate: null,
    checkoutDate: null,

    dateFormat: 'YYYY-MM-DD',
    cacheLifeSpan: 1440, /* 1440 minutes = 24 hours */

    doPersist: false,

    initialize: function(channel){

        this.url = new URI();
        if (channel == 'flash') {
            this.doPersist = false;
            // persist on flash only if came from the search page
            //this.doPersist = (document.referrer.indexOf('search') === -1);
        } else {
            // always persist on retail or if channel not passed in
            this.doPersist = true;
        }

        var urlCheckin = this._getCheckInFromUrl();
        var urlCheckout = this._getCheckOutFromUrl();

        if (urlCheckin) {
            this.checkinDate = urlCheckin;
        }

        if (urlCheckout) {
            this.checkoutDate = urlCheckout;
        }

        if (this.doPersist) {

            if (urlCheckin && urlCheckout) {
                this.checkinDate = urlCheckin;
                this.checkoutDate = urlCheckout;

                if (this.checkinDate && this.checkoutDate
                    && (this.checkinDate instanceof Date) && (this.checkoutDate instanceof Date)) {
                    this._persistCache('checkin', this.checkinDate);
                    this._persistCache('checkout', this.checkoutDate);
                }

            } else if (lscache && lscache.get('checkin') && lscache.get('checkout')) {
                this.checkinDate = lscache.get('checkin').toString().toDateObject();
                this.checkoutDate = lscache.get('checkout').toString().toDateObject();
            }
        }
    },

    _getCheckInFromUrl: function() {
        var urlCheckin = this.url.getData('checkin');
        if (typeof urlCheckin == 'object') {
            urlCheckin = _.find(urlCheckin, function(str) { return str != ''; });
        }
        return urlCheckin && urlCheckin.toDateObject();
    },

    _getCheckOutFromUrl: function() {
        var urlCheckout = this.url.getData('checkout');
        if (typeof urlCheckout == 'object') {
            urlCheckout = _.find(urlCheckout, function(str) { return str != ''; });
        }
        return urlCheckout && urlCheckout.toDateObject();
    },

    getCheckIn: function() {
        if (this.checkinDate && (this.checkinDate instanceof Date) && this.doPersist) {
            return moment(this.checkinDate).format(this.dateFormat);
        }
    },

    getCheckOut: function() {
        if (this.checkoutDate && (this.checkoutDate instanceof Date) && this.doPersist) {
            return moment(this.checkoutDate).format(this.dateFormat);
        }
    },

    _persistState: function(key, value) {
        try {
            var momented = moment(value);
            this.url.setData(key, momented.isValid() ? momented.format(this.dateFormat) : null);
            History.pushState(History.getState(), document.title, this.url.toString());
        } catch (e) {
            new ErrorService().logError(e);
        }
    },

    _persistCache: function(key, value) {
        lscache.set(key, moment(value).format(this.dateFormat), this.cacheLifeSpan);
    },

    persistCheckIn: function(date){
        if (date instanceof Date) {
            this.checkinDate = date;
        } else {
            this.checkinDate = date.toDateObject();
        }

        if (this.checkinDate && this.doPersist) {
            this._persistState('checkin', this.checkinDate);
            this._persistCache('checkin', this.checkinDate);
        }
    },

    persistCheckOut: function(date){
        if (date instanceof Date) {
            this.checkoutDate = date;
        } else {
            this.checkoutDate = date.toDateObject();
        }

        if (this.checkoutDate && this.doPersist) {
            this._persistState('checkout', this.checkoutDate);
            this._persistCache('checkout', this.checkoutDate);
        }
    },

    clearPersistedDates: function() {
        this.checkinDate = null;
        this.checkoutDate = null;
        lscache.remove('checkout');
        lscache.remove('checkin');
        this._persistState('checkin', null);
        this._persistState('checkout', null);
    }
});
var PopUpManager = new Class({
	
	Implements: Options,

	options: {},

	initialize: function(){
		var self = this;

		this.order = ['PublicRegModal', 'RegistrationPersonalizationModal', 'PostRegModal', 'CollectionsModal', 'UKBanner', 'PromoDiscount', 'iPhoneInterstitial','iPadModal','iPhoneBanner', 'iPhoneModal', 'ExpertModal', 'SniqueWelcomeModal', 'TALandingModal'];

		this.whitelist = ['splash'];

		this.setConfig();
	},

	setConfig: function(){
		var found = false;

		for (var i = 0; i < this.order.length; i++) {
			if(window[this.order[i]]){
				//get the state the popup thinks it should have
				var state = window[this.order[i]].shouldShow();

				//pick the correct whitelist (standard or override) and see if we should pop it on this page
				var curPopupWhitelist = (window[this.order[i]].whitelist) ? window[this.order[i]].whitelist : this.whitelist,
					showOnPage = curPopupWhitelist.contains($(document.body).get('id'));
				
				//if we shouldnt pop it on this page or we have a non logged in user dont pop it
				var allowPublic = (window[this.order[i]].allowPublic) ? window[this.order[i]].allowPublic : false;
				if (!showOnPage || (!allowPublic && Jetsetter.user.guid == '')) {
					state = false;
				}

				if(!found && state && Jetsetter.modules[this.order[i]] !== false){
					Jetsetter.popups[this.order[i]] = state;
					found = true;
				}
				else{
					Jetsetter.popups[this.order[i]] = false;
				}	
			}
			else{
				Jetsetter.popups[this.order[i]] = false;
			}
			
		}
				
	}



});

var PromoDiscount = new Class({
	
	Implements: [Events],
	
	applicationDetails: null,
	
	initialize: function () {
		// Disabling promo discounts for now
		this.applicationDetails = null;
		//this.applicationDetails = Cookie.read('j_pcad') ? JSON.decode(Cookie.read('j_pcad')) : null;
		this.addEvent('update', this._showPromoDiscount.bind(this));
		
		window.addEvent('domready', this._showBar.bind(this));
	},
	
	_showBar: function () {
		if (!this.isApplicable() || this.applicationDetails.closed) {
			return;
		}
		
		var headerEl = $('header') || $('new-header') || document.getElement('header#main');
		if (!headerEl) {
			return;
		}
		
		var barEl = new Element('div', {
			'id': 'guest-access-bar',
			'class': 'guest-access-bar clearfix sem-opt',
			'html':
				'<p class="greeting unselectable"><span class="clock"></span> Book within 24 hours and we’ll throw in an extra <span class="amount price">' + this.applicationDetails.amountText + ' off</span></p>' +
				(this.applicationDetails['MEMAGELTE'] ? '<span class="asterisk">* Available to new members only</span>' : '') +
				'<div class="rail">\
					<div id="countdown"></div>\
				</div>\
				<div class="close"></div>'
		});
		
		new Element('div', {
			'class': 'guest-access-bar-wrapper'
		}).adopt(barEl).inject(headerEl, 'after');
		
		var target = new Date(this.applicationDetails.expiration * 1000);
		new SlidingCountdown($('countdown'), {
			'target': target
		});

		$('guest-access-bar').getElement('.close').addEvent('click', function() {
			var j_pcad = JSON.decode(Cookie.read('j_pcad'));
			j_pcad.closed = new Date().format('%s');
			Cookie.write('j_pcad', JSON.encode(j_pcad), {
				'domain': Jetsetter.cookieDomain
			});
			$$('.guest-access-bar-wrapper').hide();
		})
	},
	
	isApplicable: function () {
		return this.applicationDetails != null;
	},
	
	getDiscountedTotal: function(total) {
		if (!this.applicationDetails) {
			return total;
		}
		
		var discountedTotal = null;
		if (this.applicationDetails.currency == '%') {
			discountedTotal = Math.ceil(total * (1 - this.applicationDetails.amount));
		} else {
			discountedTotal = Math.ceil(total - this.applicationDetails.amount);
		}
		
		if (discountedTotal < 0) {
			discountedTotal = total;
		}
		
		return discountedTotal;
	},
	
	_showPromoDiscount: function (target) {
		if (!this.applicationDetails) {
			return;
		}
		
		if (target) {
			switch (target) {
			case 'search':
				//this._applyToSearch();
				break;
			case 'our-price':
				//this._applyToOurPrice();
				break;
			case 'subtotal':
				this._applyToSubtotal();
				break;
			case 'tooltip':
				//this._applyToTooltip();
				break;
			case 'products':
				this._applyToProducts();
				break;
			}
		}
	},
	
	_applyToSearch: function() {
		
		$('search').addClass('sem');
		
		$$('#search .price').each(function (el, i) {
			var priceParts = this._parsePriceTag(el);
			
			var parentNodeEl;
			if (priceParts && (parentNodeEl = el.getParent('.price-type.per-night'))) {
				// Remove any previously-added elements
				parentNodeEl.getElements('.non-disc').destroy();
				
				if (this.applicationDetails.currency == '%') {
					el.set('html', priceParts.currency + priceParts.discountedTotal);
					
					('<div class="non-disc">Was <span class="price">' + priceParts.currency + priceParts.total + '</span> / night</div>').toElement().inject(parentNodeEl, 'bottom');
				} else {
					('<div class="non-disc">Plus <span class="price">' + priceParts.currency + this.applicationDetails.amount + ' off!</span></div>').toElement().inject(parentNodeEl, 'bottom');
				}
				parentNodeEl.addClass('sem');
			}
			
			// Mark updated price elements as updated
			if (parentNodeEl) {
				parentNodeEl.getElements('.price').addClass('upd');
			}

		}.bind(this));
	},
	
	_applyToOurPrice: function() {
		
		// Don't show discounted prices for flat discounts
		if (this.applicationDetails.currency != '%') {
			return;
		}
		
		$('product-pricing').addClass('sem');
		
		var parentNodeEl;
		var els = $$('#product-details .our-price .price');
		
		if (els.length == 0) { return; }
		
		var el = els[0];
		var priceParts = this._parsePriceTag(el);
		
		var parentNodeEl;
		if (priceParts && (parentNodeEl = el.getParent('.our-price'))) {
			// Remove any previously-added elements
			parentNodeEl.getElements('.non-disc').destroy();
			
			el.set('html', priceParts.currency + priceParts.discountedTotal);
			
			('<div class="non-disc">Was <span class="price">' + priceParts.currency + priceParts.total + '</span> / night</div>').toElement().inject(parentNodeEl, 'bottom')
		}
		
		// Mark updated price elements as updated
		if (parentNodeEl) {
			parentNodeEl.getElements('.price').addClass('upd');
		}
	},
	
	_applyToSubtotal: function() {
		var parentNodeEl;
		var els = $$('#product-details #subtotal .price');
		
		if (els.length == 0) { return; }
		
		$('product-details').addClass('sem');
		
		var el = els[0];
		var priceParts = this._parsePriceTag(el);
		
		var parentNodeEl;
		if (priceParts && (parentNodeEl = el.getParent('#subtotal'))) {
			// Remove any previously-added elements
			parentNodeEl.getElements('.non-disc').destroy();
			
			var discount;
			if (this.applicationDetails.currency == '%') {
				discount = Math.floor(priceParts.total / (1 - this.applicationDetails.amount) - priceParts.total);
			} else {
				discount = this.applicationDetails.amount;
			}
			
			('<div class="non-disc">Saved <span class="value price">' + priceParts.currency + discount + '</span></div>').toElement().inject(parentNodeEl, 'bottom')
		}
		
		// Mark updated price elements as updated
		if (parentNodeEl) {
			parentNodeEl.getElements('.price').addClass('upd');
		}
	},
	
	_applyToTooltip: function() {

		// Don't show discounted prices for flat discounts
		if (this.applicationDetails.currency != '%') {
			return;
		}
		
		var parentNodeEl;
		var els = $$('#product-details .tooltip-content .price');
		
		if (els.length == 0) { return; }
		
		els.each(function (el) {
			var priceParts = this._parsePriceTag(el);
			
			var parentNodeEl;
			if (priceParts && (parentNodeEl = el.getParent('.tooltip-content'))) {
				el.set('html', priceParts.currency + priceParts.discountedTotal);
			}
			
			// Mark updated price elements as updated
			if (parentNodeEl) {
				parentNodeEl.getElements('.price').addClass('upd');
			}
		}.bind(this));
	},
	
	_applyToProducts: function() {
		// Don't show discounted prices for flat discounts
		if (this.applicationDetails.currency != '%') {
			return;
		}
		
		$$('#product-details .price').each(function (el, i) {
			var priceParts = this._parsePriceTag(el);
			
			var parentNodeEl;
			if (priceParts && (parentNodeEl = el.getParent('.info'))) {
				// Remove any previously-added elements
				parentNodeEl.getElements('.non-disc').destroy();
				
				el.set('html', priceParts.currency + priceParts.discountedTotal + '/night');
			}
			
			// Mark updated price elements as updated
			if (parentNodeEl) {
				parentNodeEl.getElements('.price').addClass('upd');
			}

		}.bind(this));
	},
	
	_parsePriceTag: function (el) {
		// If we have already processed this price
		if (el.hasClass('upd')) {
			return null;
		}
		
		var matches = el.get('html').match(/(\$)([0-9,]+)/);
		if (!matches || matches.length != 3) {
			return;
		}
		
		var priceParts = {
			'original': matches[0],
			'currency': matches[1],
			'total': parseInt(matches[2].replace(',', ''))
		}

		priceParts.discountedTotal = this.getDiscountedTotal(priceParts.total);
		
		return priceParts;
	}
	
});

PromoDiscount.shouldShow = function () {
	var j_pcad = Cookie.read('j_pcad');

	if(j_pcad){
		return true;
	}
	else{
		return false;
	}
};

PromoDiscount.whitelist = ['splash', 'search', 'product-details', 'multisale'];

PromoDiscount.allowPublic = true;
var RoomListModal = new Class({

    Extends: Modal,

    options: {
        title: '',
        byline: '',
        images: [
            /*
             id: 0,
             caption: '',
             imageUrl: ''
             */
        ]
    },

    initialize: function (options) {

        this.parent({
            id: 'room-list-modal',
            overlayOpacity: 0.4,
            dismissable: true
        });
        this.setOptions(options);

        //this.addCloseButton();

        var chooseARoom = new Element('div', { 'class' : 'choose-a-room tenor', 'text' : 'Please Choose a Room'});
        var roomSelector = new Element('div', { 'class': 'room-selector' });
        var roomList = new Element('div', { 'class' : 'room-list' });
        var tableContainer = new Element('div', { 'class' : 'table-container' });

        this.rootEl = this.content.adopt(chooseARoom).adopt(roomSelector.adopt(roomList.adopt(tableContainer)));

        this.addEvent('showEnd', function() {
            this.container.show();
            this.setPosition();
        }.bind(this));

    },

    addCloseButton: function () {
        this.closeButton = new Element('a', {
            'class' : 'close close-modal',
            'html'  : '&nbsp;'
        }).inject(this.content, 'top');

        this.content.addEvent('click:relay(.close-modal)', this.close.bind(this));

        // Store the function so that it can be detached later
        this._onEsc = function (event) {
            if (event.key == 'esc') {
                this.close();
            }
        }.bind(this);
        document.addEvent('keyup', this._onEsc);
    },

    setRoomListController: function(roomListController) {
        this.roomListController = roomListController;
        this.roomListController.bind('rendered', function() {
            this.container && this.setPosition();
        }.bind(this));
    },

    toElement: function () {
        return this.rootEl;
    },

    show: function() {
        this.parent();
        this.container.hide();
        return this;
    }


});
var SourceTracker = new Class({

    trackSource: function(callback){
        var uri = new URI();
        if(uri.getData('taparam')
            || uri.getData('source_id')
            || uri.getData('nl_id')
            || uri.getData('partner_tracking_code')
            || uri.getData('supmt')
            || uri.getData('supai')) {
            var data = {
                'taparam': uri.getData('taparam'),
                'source_id': uri.getData('source_id'),
                'nl_id': uri.getData('nl_id'),
                'partner_tracking_code': uri.getData('partner_tracking_code'),
                'landing_page_ta_id': Jetsetter.taId,
                'supmt': uri.getData('supmt'),
                'supai': uri.getData('supai')
            }
            if(data.source_id && data.source_id instanceof Array && data.source_id.length > 0) {
                data.source_id = data.source_id[0];
            }
            var req = new Request.JSON({
                url: '/sources',
                data: data,
                onSuccess: function (json) {
                    try {
                        if (json.source_id == 45463) {
                            var aid = uri.getData('AID') || '';
                            var pid = uri.getData('PID') || '';
                            var sid = uri.getData('SID') || '';
                            json.partner_tracking_code = aid + ',' + pid + ',' + sid;
                        }
                        Cookie.write('j_source', JSON.encode(json), {
                            'domain': Jetsetter.cookieDomain,
                            'duration': 30
                        });

                        var tracker = new Tracker();
                        var currUri = new URI(window.location);
                        var refUri = new URI(document.referrer);
                        tracker.addToQueue({
                            eventType: 'sourcedLanding',
                            key3: Jetsetter.TRACKER_SITE,
                            key4: encodeURIComponent(refUri.get('directory') + refUri.get('file')),
                            key5: encodeURIComponent(currUri.get('directory') + currUri.get('file')),
                            key6: encodeURIComponent(currUri.get('query')),
                            key25: Jetsetter.user.visitorId,
                            key32: Jetsetter.CHANNEL_ID,
                            key35: this.serialize(json)
                        });
                        tracker.fireQueue();
                        callback(json);
                    } catch (e) {
                        new ErrorService().logError("Exception processing user source: " + e.message);
                    }
                }.bind(this),
                onFailure: function() {
                    new ErrorService().logError("Unknown exception calling sources service ");
                }.bind(this),
                onError: function(text, error) {
                    new ErrorService().logError("Exception calling sources service " + text + " - " + error);
                }.bind(this)
            }).post();
        }
    },

    serialize: function(obj) {
        var str = [];
        for(var p in obj){
            if (obj.hasOwnProperty(p)) {
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
            }
        }
        return str.join("&");
    }
});
var TourSlides = new Class({
	
	Extends: SlideShow,
	
	currentIndex: 1,
	
	initialize: function (attachTo) {
		
		var slidesHtml = [
			'<div class="slide slide-1 first">\
				<h3>' + Locale.get('Copy.tour-slide1-header') + '</h3>\
				<ul class="cols-2 clearfix">\
					<li><div class="image image-1"></div><p>' + Locale.get('Copy.tour-slide1-exclusive') + '</p></li>\
					<li class="last"><div class="image image-2"></div><p>' + Locale.get('Copy.tour-slide1-verified') + '</p></li>\
				</ul>\
			</div>',
			'<div class="slide slide-2">\
				<h3>' + Locale.get('Copy.tour-slide2-header') + '</h3>\
				<ul class="cols-3 clearfix">\
					<li><div class="image image-1"></div><h4>' + Locale.get('Copy.tour-slide2-dailysales-head') + '</h4><p>' + Locale.get('Copy.tour-slide2-dailysales') + '</p></li>\
					<li><div class="image image-2"></div><h4>' + Locale.get('Copy.tour-slide2-247-head') + '</h4><p>' + Locale.get('Copy.tour-slide2-247') + '</li>\
					<li class="last"><div class="image image-3"></div><h4>' + Locale.get('Copy.tour-slide2-tripplanner-head') + '</h4><p>' + Locale.get('Copy.tour-slide2-tripplanner') + '</p></li>\
				</ul>\
			</div>',
			'<div class="slide slide-3">\
				<h3>' + Locale.get('Copy.tour-slide3-header') + '</h3>\
				<ul class="cols-3 clearfix">\
					<li><div class="image image-1"></div><h4>' + Locale.get('Copy.tour-slide3-customize-head') + '</h4><p>' + Locale.get('Copy.tour-slide3-customize') + '</p></li>\
					<li><div class="image image-2"></div><h4>' + Locale.get('Copy.tour-slide3-hold-head') + '</h4><p>' + Locale.get('Copy.tour-slide3-hold') + '</p></li>\
					<li class="last"><div class="image image-3"></div><h4>' + Locale.get('Copy.tour-slide3-service-head') + '</h4><p>' + Locale.get('Copy.tour-slide3-service') + '</p></li>\
				</ul>\
			</div>',
			'<div class="slide slide-4">\
				<h3>' + Locale.get('Copy.tour-slide4-header') + '</h3>\
				<ul class="cols-3 clearfix">\
					<li><div class="image image-1"></div><h4>' + Locale.get('Copy.tour-slide4-askus-head') + '</h4><p>' + Locale.get('Copy.tour-slide4-askus') + '</p></li>\
					<li><div class="image image-2"></div><h4>' + Locale.get('Copy.tour-slide4-referrals-head') + '</h4><p>' + Locale.get('Copy.tour-slide4-referrals') + '</p></li>\
					<li class="last"><div class="image image-3"></div><h4>' + Locale.get('Copy.tour-slide4-social-head') + '</h4><p>' + Locale.get('Copy.tour-slide4-social') + '</p></li>\
				</ul>\
			</div>'
		];
		
		
		var slidesEl = new Element('div', {
			'class': 'slides',
			'html': slidesHtml.join('')
		});
		
		// Next button
		var nextContainerEl = new Element('div', {
			'class': 'next',
			'html': '<span class="copy">Up next:</span> '
		});
		

		this.nextButtonEl = new Element('a', {
			'html': 'How Jetsetter works <span class="arrow">&rarr;</span>'
		}).addEvents({
			'click': function () {
				if (this.transitioning) {
					return false;
				}
				// Update button copy for the *next* slide
				switch (this.currentIndex) {
					case 0:
						this._setButtonText('Booking your trip');
						break;
						
					case 1:
						this._setButtonText('Welcome to the club');
						break;
						
					case 2:
						nextContainerEl.getElement('.copy').destroy();
						this._setButtonText('Travel Now');
						break;
						
					case 3:
						this.fireEvent('tourEnd');
						return;
				}
				this.show('next');
			}.bind(this)
		}).inject(nextContainerEl);
		
		
		// Set up the container
		this.rootEl = new Element('div', {
			'id': 'tour-slides',
			'class': 'screen'
		}).adopt(
			slidesEl,
			nextContainerEl
		).inject(attachTo);
		
		this.parent(slidesEl, {
			transition: 'slideInLeft',
			duration: 900
		});
		
		this._setCurrentIndex();
		
	},
	
	show: function (slide, options) {
		this.parent(slide, options);
		this._setCurrentIndex();
		return this;
	},
	
	_setCurrentIndex: function () {
		this.currentIndex = (this.slides.indexOf(this.current)) % this.slides.length;
		
		// Tracking
		_gaq.push(['_trackEvent', 'Modal', 'Tour-Slide', (this.currentIndex + 1)]);
		
		return this;
	},
	
	_setButtonText: function (text) {
		this.nextButtonEl.set('html', text + ' <span class="arrow">&rarr;</span>');
		return this;
	},
	
	toElement: function () {
		return this.rootEl;
	}
	
	
});

var Tracker = new Class({
	
	Implements: [Events,Options],

	options: {

	},

	initialize: function(){
		this.setOptions();

		this.defaults = {
			key1: Jetsetter.user.guid ? Jetsetter.user.guid : '',
			key3: Jetsetter.TRACKER_SITE,
			//key4: encodeURIComponent(refUri.get('directory') + refUri.get('file')),
			//key5: encodeURIComponent(currUri.get('directory') + currUri.get('file')),
			//key6: encodeURIComponent(currUri.get('query')),
			key25: Jetsetter.user.visitorId,
			key32: Jetsetter.CHANNEL_ID
		};

		this.queue = [];
		this.curLoc = new URI(window.location);
		this.curRef = (document.referrer) ? new URI(document.referrer) : null;

		if(this.curRef){
			this.defaults.key4 = this.curRef.get('directory') + this.curRef.get('file');	
		}
		this.defaults.key5 = this.curLoc.get('directory') + this.curLoc.get('file');
		this.defaults.key6 = this.curLoc.get('query');
	},

	trackEvent: function(data){
		var trackerEvents = [];
		var trackerData = Object.merge(this.defaults,data);
		if(!trackerData.eventType){
			throw "tracker event must contain an eventType";
		}
		else{
			trackerEvents.push(trackerData);

			var req = new Request.JSON({
				url: '/tracker.php',
				data: {
					events: trackerEvents
				}
			}).post();	
		}
	},

    trackABTestEvent: function(abTestId, abTestRecipe) {
        return this.trackEvent({
            'eventType': 'abTest',
            'key35': abTestId,
            'key36': abTestRecipe
        });
    },
	
	addToQueue: function(data){
		var trackerData = Object.merge(Object.clone(this.defaults),data);
		if(!trackerData.eventType){
			throw "tracker event must contain an eventType";
		}
		else{
			this.queue.push(trackerData);	
		}
	},

	fireQueue: function(){
		var req = new Request.JSON({
			url: '/tracker.php',
			data: {
				events: this.queue
			}
		}).post();

		delete this.queue;

		this.queue = [];
	}

});
var User = new Class({
	
	initialize: function () {
		var session = this._getSession();
		Jetsetter.session = this.session = session;

        this.isBot = window && window.navigator && window.navigator.userAgent && /googlebot|gurujibot|yandexbot|slurp|msnbot|bingbot|facebookexternalhit/i.test(window.navigator.userAgent);

        this.email = (function () {
			var sessionEmail = session.em;
			var encodedEmail = (sessionEmail.substr(sessionEmail.indexOf('_') + 1)) || '';
			return encodedEmail.decode64();
		}());
		
		this.firstName = (function () {
			// Account for assume-user mode
			var firstName = Cookie.read('j_sufn') || session.fn || '';
			var dashPosition = firstName.indexOf('-');
			if (dashPosition > 0) {
				firstName = firstName.substring(0, dashPosition);
			}
			return firstName.replace(/\+/g, ' ');
		}());
		
		this.guid = (session.id.split('_')[1]) || '';

		// Only set jsPartition if user is not logged in
		//if (!this.guid && session.pt == -1) {
        if (!session.pt || (session.pt == -1)) {
            var jsPartition;

            if (Jetsetter.bucketStart && Jetsetter.bucketEnd) {
                var bucketStart = parseInt(Jetsetter.bucketStart, 10);
                var bucketEnd = parseInt(Jetsetter.bucketEnd, 10);
                if ((bucketStart || bucketStart === 0) && bucketEnd) {
                    // incorporate bucketEnd + 1 so that the random number is inclusive of bucketEnd
                    jsPartition = bucketStart + (Math.floor(Math.random() * ((bucketEnd + 1) - bucketStart)));
                }
            }

            if (!jsPartition) {
                // if we couldn't set partition according to buckets, set a random one at any range
                jsPartition = Math.floor(Math.random() * 1000);
            }

            session.pt = jsPartition;

            this.saveSession(session);
        }

		this.isAssumed = (Cookie.read('j_issu') == '1');
		// admin check depends on raw session, not assumed session
		if (this.isAssumed) {
			var rawSession = this._getRawSession();
			this.isAdmin = (rawSession.id.substr(rawSession.id.length - 1, rawSession.id.length) == 'r') && (rawSession.id != '') && (rawSession.st);
		} else {
			this.isAdmin = (session.id.substr(session.id.length - 1, session.id.length) == 'r') && this.hasIdentity() && this.hasInsecureToken();
		}
		this.isAnonymous = this._isInAnonymousBrowseMode();
		this.isPriceHidden = this.isAnonymous;		
		// this.nickname = session.nn,
		this.partition = session.pt;
		this.prefs = new UserPrefs();
		this.woeId = session.wid;
		this.visitorId = Cookie.read('j_vid') || '';
		this.isSubscriber = session.sub ? true : false;
		this.isLocked = !!session.locked;
		this.isPublic = (!this.hasIdentity() && !this.isAnonymous);

        var uri = new URI();
        if (uri.getData('pt')) {
            this.partition = parseInt(uri.getData('pt'), 10);
        }

		//Secure
		//Insecure
		//Insecure Facebook
		//Identity - Can be Subscriber
		//Anon/Cache Access
		//Public

		this.state = (function(User){
			if(!User.isPublic){
				if(User.hasSecureToken()){
					return 'secure';
				} else if(User.hasInsecureToken() && !User.isSubscriber){
					return 'insecure';
				} else if(User.hasInsecureToken() && User.isSubscriber){
					return 'facebook-subscriber';
				} else if(User.hasIdentity() && !User.isSubscriber){
					return 'identity';
				} else if(User.isSubscriber){
					return 'subscriber';
				} else if(User.isAnonymous){
					return 'anonymous';
				} else if(User.hasCacheAccess()){
					return 'cache-access';
				}
			} else {
				return 'public';
			}
		})(this);

		if (Cookie.read('j_pcad')) {
			this.isSemPromo = true;
			this.isPriceHidden = false;
		}

		this.affiliateParams = this._getAffiliateParams();
		if (Cookie.read('j_pco') || Cookie.read('j_pch')) {
			this.publicCheckout = true;
		}

        if (Cookie.read('j_sp')) {
            this.publicPricing = true;
        }

		if (!Cookie.read('j_vid')) {
            var uuid = Jetsetter.JetsetUtil.generateUuid();
            this.visitorId = uuid;
            Cookie.write('j_vid', this.visitorId, {
                'domain' : Jetsetter.cookieDomain,
                duration: 3650
            });
		}

        this._checkTracking();

		// This should only run once per session, use j_svc session cookie
		// to determine if the session is new
		/*
		this.newSessions = (Cookie.read('j_nsc') || 0).toInt();
		if (Cookie.read('j_svc') === null) {
			Cookie.write('j_svc', 0); // Session no longer new!
			
			Cookie.write('j_nsc', ++this.newSessions, {
				'duration': 365
			});
		}
		*/
	},

    /**
     * return whether or not this user is eligible to enter an ab test. tests some rudimentary things such as whether
     * or not the user has a partition and whether or not the user is a web crawler
     * @returns {boolean}
     */
    isABEligible: function() {
        if (this.isBot) { return false; }
        if (this.partition === null || this.partition === undefined) { return false; }
        if (this.partition === 0) { return true; } // 0 is a valid partition
        if (this.partition > 0 && this.partition <= 999) { return true; }
        return false;
    },

    // JETSETTER-20835 ... determine whether or not this user is eligible for the august $50 promo
    isEligibleForAugustPromo: function() {
        var uri = new URI();
        if (lscache.get('promo8redeemed'+this.guid)) {
            return false;
        }
        var userCreateDate = moment(this.session.createDate);
        if (userCreateDate.isBefore(uri.getData('promo8date') /* for testing */ || '2014-08-12 00:00:00')) {
            return true;
        }
        return false;
    },

	_checkTracking: function () {
		var uri = new URI();
		if (uri.getData('app_data')) {
			try {
				JSON.decode(uri.getData('app_data').decode64())
			} catch (e) {
				var req = new Request.JSON({
					url: '/user/trackappdata',
					data: {
						'app_data': uri.getData('app_data'),
						'visitor-id': this.visitorId,
						'guid': this.guid
					},
					onSuccess: function (json) {
						// do nothing
					}
				}).get();
			}
		}
	},
	
	_getSession: function () {
		// assume user support
		if (Cookie.read('j_issu') == '1') {
			// build session from assume user cookies
			return {
				'id': Cookie.read('j_suid'),   // Logged in cookie
				'fn': Cookie.read('j_sufn'),   // Full name
				'em': Cookie.read('j_suem'),   // Email
				'st': Cookie.read('j_sust'),   // Secure token
				'al': '',   // Anonymous browse mode object
				'pl': '',   // Public browse mode object
				'pt': Cookie.read('j_supt'),   // Partition
				'wid': -1,  // Woe id
				'nn': ''    // Nickname
			};
		} else {
			return this._getRawSession();
		}
	},

	_getRawSession: function () {
		return JSON.decode(Cookie.read('j_sess')) || this._getEmptySession();
	},

    _getEmptySession: function() {
        return {
            'id': '',   // Logged in cookie
            'fn': '',   // Full name
            'em': '',   // Email
            'st': '',   // Secure token
            'stv4': '', // Secure token v4
            'al': '',   // Anonymous browse mode object
            'pl': '',   // Public browse mode object
            'pt': -1,   // Partition
            'wid': -1,  // Woe id
            'nn': ''    // Nickname
        };
    },

	_getAffiliateParams: function () {
		var uri = new URI();
		if (uri.getData('evid') || uri.getData('promoAlias') || uri.getData('via')) {
			var affiliateParams = {};
			if (uri.getData('evid') || uri.getData('iata')) {
				affiliateParams['evid'] = uri.getData('evid') || uri.getData('iata');
			}
			if (uri.getData('promoAlias')) {
				affiliateParams['promoAlias'] = uri.getData('promoAlias');
			}
			if (uri.getData('via')) {
				affiliateParams['promoAlias'] = uri.getData('via');
			}
			if (uri.getData('opaid')) {
				affiliateParams['opaid'] = uri.getData('opaid');
			}
			return affiliateParams;
		} else {
			return null;
		}
	},
	
	_isInAnonymousBrowseMode: function () {
		// @TODO: This really is checking when to show the anonymous bar, not  anonymous state itself
		// So this should be separated out somehow.
		
		// Show the guest access bar when:
		//  - the user is NOT logged in (has "j_id" cookie)
		//  - the user has "j_al" cookie (sent by a promo that sets it)
		//  - NOT on pages with the modal already on (like /register and /invite)
		//  - NOT on pages that show up as a popup window
		var isPageExcluded = [
			'/terms-of-service',
			'/exitsurvey',
			'/login',
			'/slogin',
			'/win',
			'/fbpage',
			'/registration'
		].some(function (url) {
			return (location.pathname.indexOf(url) === 0);
		});
		
		
		if ((!this.session.id && this.session.al) && !Jetsetter.registrationModal && !isPageExcluded) {
			return true;
		} else {
			return false;
		}
	},
	
	// The nickname might not be set for currently logged in users before j_sess -> nn was added
	// 
	// @TODO: This launched on March 23 2011, max "Remember me" j_sess duration is 90 days.
	//        So we can remove this nickname business after June 23rd 2011.
	getNickname: function () {
		return Jetsetter.session.nn;
	},
	
	getInviteUrl: function () {
		return Jetsetter.HOST + '/invite/' + this.getNickname();
	},

	hasSecureToken: function () {
		// Refresh state
		this.session = this._getSession();

		if (this.session.st) {
			var secureTokenComponents = this.session.st.split('_');
			// test for older secure token prior to merging of auth systems with the api (new secure token has 4 parts, not 3)
			if (secureTokenComponents.length == 4) {
				var tokenExpiryTime = new Date((secureTokenComponents[3].toInt()) * 1000).increment('minute', 30);
				if (tokenExpiryTime > new Date()) {
					return true;
				}
			}
		}
		
		return false;
	},
	
	hasInsecureToken: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.st) {
			return true;
		}
		
		return false;
	},
	
	hasIdentity: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '' || Cookie.read('j_ca')) {
			return true;
		}
		
		return false;
	},

	// don't use this, hasIdentity should be migrated to hasCacheAccess when possible
	hasGuid: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '') {
			return true;
		}
		
		return false;
	},

	hasCacheAccess: function () {
		// Refresh state
		this.session = this._getSession();
		
		if (this.session.id != '' || Cookie.read('j_ca') || this.isAnonymous) {
			return true;
		}
		
		return false;
	},

    saveSession: function(session) {
        Cookie.write('j_sess', JSON.encode(session), {
            'domain': Jetsetter.cookieDomain,
            'duration': 30 * 3 // 3 months
        });
    },

    saveEmail: function(email) {
        Cookie.write('j_suem', email, {
            'domain': Jetsetter.cookieDomain,
            'duration': 30 * 3 // 3 months
        });
    },

    logout: function() {
        this.saveSession(this._getEmptySession());

        // the following 3 are carried over from PHP logout controller
        Cookie.dispose('j_cli', {
            domain: Jetsetter.cookieDomain
        });
        Cookie.dispose('j_ac', {
            domain: Jetsetter.cookieDomain
        });
        Cookie.dispose('j_isABTestable', {
            domain: Jetsetter.cookieDomain
        });

        // Cookie to ensure member is logged out from SSO - this cookie brought over from PHP
        Cookie.write('j_loggedout', '1', {
            domain: Jetsetter.cookieDomain,
            duration: 0 // session cookie
        });

        // this feels wrong...
        Jetsetter.user = new User();

        return Jetsetter.user;
    }
});

var WindowAutoExpander = new Class({

    'initialize': function() {
        this.clickHandler = _.bind(this.clickHandler, this);
    },

    start: function(sourceData) {
        if (!this.initialized) {
            if(this.isApplicable(sourceData)) {
                this.listen();
                this.initialized = true;
            }
        }
    },

    /**
     * determine whether or not the window auto expander should apply to this page.
     * Currently the expander should apply if:
     * - user is coming from a ta meta source
     * - AND their screen resolution is <= 1280x1024
     */
    isApplicable: function(sourceData /* nullable */) {

        if (!window || !window.screen || (window.screen.width == 0) || (window.screen.height == 0)) {
            // don't apply if we cant' determine the window size
            return false;
        }

        // don't apply for screen resolutions larger than 1280x1024
        if ((window.screen.width > 1280) && (window.screen.height > 1024)) {
            return false;
        }

        if (sourceData && sourceData.type && (sourceData.type == 'traq')) {
            return true;
        }

        var utm_campaign_matches = window.location.href.match(/utm_campaign=([\d\w_-]+)/);
        if (utm_campaign_matches && utm_campaign_matches.length > 1) {
            var utm_campaign = utm_campaign_matches[1].toLowerCase();
            if ((utm_campaign == 'kayak-ppc-m_b125_us') || ((utm_campaign != 'ta-ppc-mp_r_b01_us') && (utm_campaign.indexOf('ta-ppc') === 0))) {
                return true;
            }
        }
        var via_matches = window.location.href.match(/via=([\d\w_-]+)/);
        if (via_matches && via_matches.length > 1) {
            var via = via_matches[1].toLowerCase();
            if ((via == 'kayak-ppc-m_b125_us') || ((via != 'ta-ppc-mp_r_b01_us') && (via.indexOf("ta-ppc") === 0))) {
                return true;
            }
        }

        return false;

    },

    /**
     * listen for first click and expand window if necessary
     */
    'listen': function() {
        document.addEvent('click', this.clickHandler);
    },

    'clickHandler': function() {
        document.removeEvent('click', this.clickHandler);
        this.expand();
    },

    /**
     * expand window to full screen
     */
    'expand': function() {

        var newWidth = screen.availWidth || screen.width;
        var newHeight = screen.availHeight || (screen.height - 50);

        if (window.resizeTo && window.moveTo) {
            window.moveTo(0,0);
            window.resizeTo(newWidth, newHeight);
        }
    }

});
// additions to the composer.js library we are using

// Composer.eq will always return true on 2 different date objects. use the underscore version of equals function as it is superior.
Composer.eq = _.isEqual;
/**
*	@class Registration
*	@author Marvin Tam
*   
*	Registration is a container class that manages Registration.RegisterScreen
*   and Registration.LoginScreen. Both the Registration and Login screens extend
*   Registration.BaseForm.
*/

var Registration = new Class({
	
	Implements: [Options, Events],
	
	options: {
		fbOptimized: false
	},
	
	initialize: function (attachTo, options) {
		this.attachTo = attachTo;
		this.setOptions(options);
		
		// Switching screens
		this.attachTo.addEvent('click:relay(a)', function (event, element) {
			// @TODO: Look into wtf is IE doing with the href when doing Element.set('html', '<a href="#">foo</a>')
			var uri = new URI(element.get('href'));
			
			if (uri.get('file') === new URI().get('file')) {
				event.preventDefault();
				var hash = uri.get('fragment');
				switch (hash) {
					case 'login':
						this.showLoginScreen();
						break;
						
					case 'registration':
						this.showRegisterScreen();
						break;
				}
			}
		}.bind(this));
		
		// Registration screen events
		this.registerScreen = new Registration.RegisterScreen(this.attachTo, this.options).addEvents({
			'registrationComplete': function (data) {
				this.onRegistrationComplete(data);
				
				this.registerScreen.hide();
			}.bind(this),
				
			'loginComplete': this.refreshPage.bind(this),
				
			'loginFail': function (user) {
				this.showFbScreen(user);
			}.bind(this)
			
		});
			
		// Facebook screen events
		this.fbScreen = new Registration.FbScreen(this.attachTo, this.options).addEvents({
			'registrationComplete': function () {
				this.onRegistrationComplete();
				
				this.fbScreen.hide();
			}.bind(this),
				
			'loginComplete': this.refreshPage.bind(this)
			
		}).hide();
		
		
		// Login screen events
		var loginOptions = Object.merge(this.options, {
			backButtonUrl: (this.options.fbOptimized) ? '#fb-reg-widget' : '#registration'
		});

		// BuyWithMe
		var loginScreen = (this.options.promo === 'bwm') ?
			Registration.BwmLoginScreen :
			Registration.LoginScreen;
		
		this.loginScreen = new loginScreen(this.attachTo, loginOptions).addEvents({
			'loginComplete': this.refreshPage.bind(this)
		});
		
		this.showInitialScreen();
	},
	
	setTitle: function (title) {
		this.registerScreen.titleEl.set('html', title);
	},
	
	setMessage: function (message) {
		this.registerScreen.messageEl.set('html', message);
	},
	
	_hideAllScreens: function () {
		if (this.options.fbOptimized) {
			// this.fbLoginWidgetScreen.hide();
			this.fbRegWidgetScreen.hide();
		} else {
			this.registerScreen.hide();
			this.fbScreen.hide();
		}
		this.loginScreen.hide();
	},
	
	showInitialScreen: function () {
		// This is a shitty way to track which screen was init so that RegistrationModal
		// can figure out which element to set keyboard focus
		// @TODO: design this better
		this.currentScreen = null;
		
		// BuyWithMe
		if (this.options.promo === 'bwm') {
			this.showLoginScreen();
		} else if (location.hash == '#fb-reg') {
			this.onRegistrationComplete();
		} else if (location.hash == '#fblogin-error') {
			this.showLoginScreen();
			
			// Show a message and prefill email address when an existing member tries
			// to register from the Facebook-optimized reg screen
			if (this.options.emailAddress) {
				this.loginScreen.emailFieldEl.set('value', this.options.emailAddress);
				this.loginScreen.emailFieldEl.isValid = true;
			}
			$(this.loginScreen).getElement('p').set('text', 'You’re already a Jetsetter member. Please log in to continue.')
		} else {
			if (this.options.fbOptimized) {
				FB.getLoginStatus(function (response) {
					if (response.session) {
						// This is an edge case
						this.showLoginScreen();
					} else {
						this.showFbRegWidgetScreen();
					}
				}.bind(this));
			} else {
				this.showRegisterScreen();
			}
		}
	},
	
	showRegisterScreen: function () {
		this._hideAllScreens();
		this.currentScreen = this.registerScreen.show();
	},
	
	showLoginScreen: function (copyEmail) {
		// Copy the entered email address to the login form field
		if (this.registerScreen) {
			this.loginScreen.emailFieldEl.set('value', this.registerScreen.emailFieldEl.get('value'));
		}
		this._hideAllScreens();
		this.currentScreen = this.loginScreen.show();
	},
	
	showFbScreen: function (user) {
		this._hideAllScreens();
		this.currentScreen = this.fbScreen.show(user);
	},
	
	showFbRegWidgetScreen: function () {
		this._hideAllScreens();
		this.currentScreen = this.fbRegWidgetScreen.show();
	},
	
	showFbLoginWidgetScreen: function () {
		this._hideAllScreens();
		this.currentScreen = this.fbLoginWidgetScreen.show();
	},
	
	showTourScreen: function () {
		this.inviteScreen.hide();
		
		var tourScreen = new Registration.TourScreen(this.attachTo);
		this.currentScreen = tourScreen.addEvent('tourEnd', this.refreshPage.bind(this)).show();
		
		this.fireEvent('tourStart');
		
	},
	
	onRegistrationComplete: function () {
		// Show the invitation screen after registration is complete
		this._hideAllScreens();
		
		this.inviteScreen = new Registration.InviteScreen(this.attachTo);
		this.currentScreen = this.inviteScreen.addEvent('close', this.showTourScreen.bind(this)).show();
		
		this.fireEvent('registrationComplete');
	},
	
	refreshPage: function () {
		// Redirect to a specified page or refresh the page to show the cookied page state
		setTimeout(function () {
			location.replace(this.options.returnPath || Jetsetter.HOST + '/sales');
		}.bind(this), 500);
	},
	
	setFocus: function () {
		// this.currentScreen might not be available in fb reg mode
		if (this.currentScreen) {
			this.currentScreen.setFocus();
		}
	}
	
});


Registration.BaseForm = new Class({
	
	Extends: BaseForm,
	
	show: function () {

		this.rootEl.show();
		
		return this;
	},
	
	hide: function () {
		this.resetFields();
		this.rootEl.hide();
		
		return this;
	},
	
	resetFields: function () {
		this.rootEl.getElements('input.text').each(function (el) {
			el.resetState();
		});
		
		return this;
	},
	
	validatePassword: function (el) {
		el.testValueWith(function (value) {
			return value.length >= 7;
		}).updateState('Please enter a password that is at least 7 characters.');
		
		return el.isValid;
	},
	
	setFocus: function () {
		var focusOnEl = this.emailFieldEl.isValid ? this.passwordFieldEl : this.emailFieldEl;
		setTimeout(function () {
			focusOnEl.focus();
		}, 0);
	},
	
	toElement: function () {
		return this.rootEl;
	}
	
});

Registration.Utils = new Class({
	
	getQuotesElement: function () {
		// In a perfect world sans IE6, div.icon is not necessary
		return new Element('ul', {
			'class': 'quotes',
			'html':
				'<li class="first">\
					<div class="icon"></div>\
					<q>It can be easy to get caught up when faced with a luxury destination at an unbelievable price.</q>\
					<cite class="nytimes">-The New York Times</cite>\
				</li>\
				<li>\
					<div class="icon"></div>\
					<q>Mesmerizing photography makes the Web site an exciting destination on its own.</q>\
					<cite class="ap">—Associated Press</cite>\
				</li>\
				<li>\
					<div class="icon"></div>\
					<q>This is the first travel site where I actually trust the recommendations.</q>\
					<cite class="techcrunch">—TechCrunch</cite>\
				</li>'
		});
	}
	
});

// @TODO: Extend SecureLoginModal's registration screen.
Registration.RegisterScreen = new Class({
	
	Extends: Registration.BaseForm,
	
	Implements: Registration.Utils,
	
	initialize: function (attachTo, options) {
		this.setOptions(options);
		options = this.options;
		
		if (!(options.promoId || options.referrerGuid)) {
			throw 'RegistrationScreen: registration needs at least a promoId or a referrerGuid (from an inviter)';
		}
		
		// Set up markup
		this.rootEl = new Element('div', {'id': 'registration', 'class': 'screen clearfix'});
		this.formEl = new Element('form', {'method': 'post', 'class': 'clearfix'});
		
		this.titleEl = new Element('h2', {'text': options.title});
		this.messageEl = new Element('div', {'class': 'message', 'html': options.message});
		this.loginActionEl = new Element('p', {'html': 'Existing members <a href="#login">login here</a>'});
		
		new Element('div', {
			'class': 'form-wrapper'
		}).adopt(
			this.titleEl,
			this.messageEl,
			this.loginActionEl,
			this.formEl
		).inject(this.rootEl);
			
		if (window.FB) {
			var fbActionEl = new Element('button', {
				'type': 'button',
				'class': 'fb-connect',
				'text': 'Connect with Facebook'
			}).addEvent('click', function (event) {
				event.preventDefault();
				
				FB.getLoginStatus(function (response) {
					if (response.authResponse) {
						this.fbLogin(response.authResponse);
					} else {
						FB.login(function (response) {
							if (response.authResponse) {
								this.fbLogin(response.authResponse);
							}
						}.bind(this), {
							'scope': 'email,publish_stream,offline_access'
						});
					}
				}.bind(this));
			}.bind(this));
			
			this.formEl.adopt(
				new Element('fieldset', {
					'class': 'facebook',
					'html': '<h4>Simply use your Facebook identity to register:</h4>'
				}).adopt(fbActionEl)
			);
		}
		
		
		var registrationFieldset = new Element('fieldset', {'class': 'user-info'}).inject(this.formEl);
		new Element('h4', {'html': 'Or, fill out your details below:'}).inject(registrationFieldset);
		
		this.emailFieldEl = new TextField(
			new Element('input', {
				'id': 'emailAddress',
				'class': 'email input required text',
				'type': 'text',
				'autocorrect': 'off',
				'autocapitalize': 'off',
				'name': 'emailAddress',
				'maxlength': '50',
				'value': options.emailAddress || new URI().getData('email')
			})
		).setPlaceholder();
		new Element('div', {'class': 'text email'}).adopt(
			new Element('label', {'for': 'emailAddress', 'html': 'Email Address'}),
			this.emailFieldEl
		).inject(registrationFieldset);
		
		
		this.passwordFieldEl = new TextField(
			new Element('input', {
				'id': 'password',
				'class': 'input text',
				'type': 'password',
				'name': 'password',
				'maxlength': '20'
			})
		);
		new Element('div', {'class': 'text password'}).adopt(
			new Element('label', {'for': 'password', 'html': 'Password <span>(5 characters minimum)</span>'}),
			this.passwordFieldEl
		).inject(registrationFieldset);
		
		
		var tosEl = new Element('div', {
			'class': 'tos',
			'html': '\
				<label>\
					<input type="checkbox" class="checkbox" name="tos">\
					I agree to the <a href="/terms-of-service" tabindex="-1" title="See terms of service in a new window" data-access="public">terms of service</a>\
				</label>'
		}).inject(registrationFieldset);
		
		this.submitButtonEl = new Element('button', {
			'type': 'submit',
			'id': 'create-account-button',
			'class': 'submit large-button',
			'text': 'Create Account'
		}).inject(registrationFieldset);
	
		this.formEl.adopt(
			new Element('input', {'name': 'referrerGuid', 'type': 'hidden', 'value': options.referrerGuid}),
			new Element('input', {'name': 'invitationId', 'type': 'hidden', 'value': options.invitationId}),
			new Element('input', {'name': 'promoId', 'type': 'hidden', 'value': options.promoId}),
			new Element('input', {'name': 'promokey', 'type': 'hidden', 'value': options.promokey}),
			new Element('input', {'name': 'ep', 'type': 'hidden', 'value': options.ep}),
			new Element('input', {'name': 'return', 'type': 'hidden', 'value': options.returnPath}),
			new Element('input', {'name': 'userSearchReferralId', 'type': 'hidden', 'value': options.userSearchReferralId})
		);
		
		this.alertsEl = new Element('fieldset', {
			'class': 'alerts',
			'html':	'<label><input type="checkbox" class="checkbox" checked="checked" name="travelSaleReminder"> Sale reminders</label>\
				<p>We’ll e-mail you 15 minutes before a sale goes live. The rest will be up to you.</p>\
				<label><input type="checkbox" class="checkbox" checked="checked" name="travelUpcomingSales"> Weekly summaries</label>\
				<p>We’ll e-mail you every week with tantalizing previews of upcoming destinations.</p>'
		}).inject(this.formEl);
		
		
		this.getQuotesElement().inject(this.rootEl);
		
		
		// Events
		this.emailFieldEl.addEvents({
			blur: function (event) {
				this.validateEmail($(event.target), true);
			}.bind(this)
		});
		
		this.tosLinkEl = tosEl.getElement('a').addEvent('click', function (event) {
			event.preventDefault();
			window.open('/terms-of-service', '_blank', 'menubar=no,width=650,height=700,toolbar=no,scrollbars=yes,resizable=yes');
		});
		
		this.tosCheckboxEl = tosEl.getElement('input').addEvent('click', function () {
			this.tip && this.tip.hide();
		});
		
		this.rootEl.inject(attachTo);
		
		
		this.bindSubmitFunction();
		
	},
	
	toElement: function () {
		return this.rootEl;
	},
	
	validateEmail: function (element, ignoreEmpty) {
		// If previously validated
		if (element.isValid) {
			return true;
		}
		
		if (ignoreEmpty && !element.get('value').clean()) {
			return true;
		}
		
		element.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('Please enter an email address.');
		
		
		// Don't bother hitting the service if email is not entered
		if (!element.isValid) {
			return false;
		}
		
		element.getParent().removeClass('checked').addClass('working');
		// @NOTE: Can't do this without making the email validation callback trigger submit again
		// @TODO: Maybe make the validation synchronous for submitting
		// element.isValid = false;
		var req = new Request.JSON({
			url: '/user/validateemail',
			data: {
				'email': element.get('value').clean()
			},
			onSuccess: function (json) {
				var message = !json.success ? json.error.message : '';
				
				element.testValueWith(function () {
					return json.success;
				}).updateState(message);
			}.bind(element)
		}).get(); 
	},
	
	submitForm: function () {
		// Validate password only after the password is validated
		this.validateEmail.isValid || this.validateEmail(this.emailFieldEl);
		if (!this.emailFieldEl.isValid || !this.validatePassword(this.passwordFieldEl)) {
			this.submitButtonEl.set('disabled', false);
			return false;
		}
		
		if (!this.tosCheckboxEl.get('checked')) {
			this.tosCheckboxEl.tip = this.tosCheckboxEl.tip || new Tooltip(this.tosCheckboxEl.getOffsetParent());
			
			this.tosCheckboxEl.tip.show('You must agree to Jetsetter’s terms and conditions.', this.tosCheckboxEl);
			return false;
		}
		
		Jetsetter.Auth.authenticate(Object.merge(this.formEl.toQueryObject(), {
			'type': 'email',
			onSuccess: function(json){
				this.fireEvent('registrationComplete');
			}.bind(this),
			onFailure: function(json){
				var status = json.error.code;
				this.emailFieldEl.isValid = false;
				switch (status) {
					case 400:
						this.emailFieldEl.updateState('Please enter a valid email address.');
						break;
					case 505:
						this.emailFieldEl.updateState('This email is already registered! To log in to Jetsetter, <a href="#login">click here</a>.');
						this.fireEvent('registeredEmailFound', this.emailFieldEl.get('value'));
						break;
				}
				
				this.enableForm();
			}.bind(this)
		}));
	},
	
	fbLogin: function (authResponse) {
		Jetsetter.Auth.authenticate({
			type: 'facebook',
			onSuccess: function(json){
				this.fireEvent('loginComplete');
			}.bind(this),
			onFailure: function(json){
				this.fireEvent('loginFail', json);
			}.bind(this)
		});
	}
	
});

Registration.FbScreen = new Class({
	
	Extends: Registration.RegisterScreen,
	
	initialize: function (attachTo, options) {
		this.setOptions(options);
		options = this.options;
		
		// Set up markup
		this.rootEl = new Element('div', {'id': 'fb-registration', 'class': 'screen clearfix'}).adopt([
			new Element('a', {
				'class': 'back',
				'html': '&larr; Back',
				'href': '#registration'
			}),
			new Element('h2', {
				'text': 'You’re almost done!'
			}),
			new Element('p', {
				'class': 'message',
				'text': 'Simply choose a password below and you’ll be on your way to becoming a Jetsetter.'
			})
		]);
		
		
		var nameWrapper = new Element('div', {'class': 'clearfix name'}).inject(this.rootEl);
			this.imageEl = new Element('img', {'src': 'https://graph.facebook.com/1/picture'}).inject(nameWrapper);
			this.nameEl = new Element('h2').inject(nameWrapper);
				
		this.formEl = new Element('form', {'method': 'post', 'class': 'clearfix'}).inject(this.rootEl);
			var userInfoWrapper = new Element('fieldset', {'class': 'user-info'}).inject(this.formEl);	
			var emailAddressWrapper = new Element('div', {'class': 'text email'}).inject(userInfoWrapper);
				new Element('label', {'for': 'emailAddress', 'html': 'Email Address'}).inject(emailAddressWrapper);
				this.emailFieldEl = new TextField(
					new Element('input', {
						'id': 'emailAddress',
						'class': 'email input required text',
						'type': 'text',
						'autocorrect': 'off',
						'autocapitalize': 'off',
						'name': 'emailAddress',
						'maxlength': '50'
					})
				).inject(emailAddressWrapper);
				
			var passwordWrapper = new Element('div', {'class': 'text password'}).inject(userInfoWrapper);
				new Element('label', {'for': 'password', 'html': 'Password <span>(5 characters minimum)</span>'}).inject(passwordWrapper);
				this.passwordFieldEl = new TextField(
					new Element('input', {
						'id': 'password',
						'class': 'input text',
						'type': 'password',
						'name': 'password',
						'maxlength': '20'
					})
				).inject(passwordWrapper);
			var tosWrapper = new Element('div', {'class': 'tos'}).inject(userInfoWrapper);
				var tosLabelEl = new Element('label', {'html': '<input type="checkbox" class="checkbox" name="tos"> I agree to the <a href="/terms-of-service" tabindex="-1" title="See terms of service in a new window">terms of service</a>'}).inject(tosWrapper);
			this.submitButtonEl = new Element('button', {'type': 'submit', 'id': 'create-account-button', 'class': 'submit large-button', 'text': 'Create Account'}).inject(userInfoWrapper);
		
		this.alertsEl = new Element('fieldset', {
			'class': 'alerts',
			'html':	'<label><input type="checkbox" class="checkbox" checked="checked" name="travelSaleReminder"> Sale reminders</label>\
				<p>We’ll e-mail you 15 minutes before a sale goes live. The rest will be up to you.</p>\
				<label><input type="checkbox" class="checkbox" checked="checked" name="travelUpcomingSales"> Weekly summaries</label>\
				<p>We’ll e-mail you every week with tantalizing previews of upcoming destinations.</p>'
		}).inject(this.formEl);
		
		this.formEl.adopt(
			new Element('input', {'name': 'referrerGuid', 'type': 'hidden', 'value': options.referrerGuid}),
			new Element('input', {'name': 'invitationId', 'type': 'hidden', 'value': options.invitationId}),
			new Element('input', {'name': 'promoId', 'type': 'hidden', 'value': options.promoId}),
			new Element('input', {'name': 'promokey', 'type': 'hidden', 'value': options.promokey}),
			new Element('input', {'name': 'ep', 'type': 'hidden', 'value': options.ep}),
			new Element('input', {'name': 'return', 'type': 'hidden', 'value': options.returnPath}),
			new Element('input', {'name': 'userSearchReferralId', 'type': 'hidden', 'value': options.userSearchReferralId}),
			this.hiddenIdEl = new Element('input', {'name': 'fbUserId', 'type': 'hidden', 'value': ''}),
			this.hiddenNameEl = new Element('input', {'name': 'firstName', 'type': 'hidden', 'value': ''})
		);
		
		// Events
		this.emailFieldEl.addEvents({
			blur: function (event) {
				this.validateEmail($(event.target));
			}.bind(this),
			
			change: function (event) {
				// Flag for revalidating if content is changed
				$(event.target).isValid = false;
			}.bind(this)
		});
		
		this.tosLinkEl = tosLabelEl.getElement('a');
		this.tosLinkEl.addEvent('click', function () {
			window.open('/terms-of-service', '_blank', 'menubar=no,width=620,height=700,toolbar=no,scrollbars=yes');
			return false;
		});
		
		this.tosCheckboxEl = tosLabelEl.getElement('input');
		this.tosCheckboxEl.addEvent('click', function () {
			this.tip && this.tip.hide();
		});
		
		this.rootEl.inject(attachTo);
		
		this.bindSubmitFunction();
		
	},
	
	show: function (user) {
		this.imageEl.set('src', 'https://graph.facebook.com/'+ user.id +'/picture');
		this.nameEl.set('html', user.first_name +' '+ user.last_name);
		this.emailFieldEl.set('value', user.email);
		this.emailFieldEl.isValid = true;
		this.hiddenIdEl.set('value', user.id);
		this.hiddenNameEl.set('value', user.first_name +' '+ user.last_name);
		
		this.parent();
		return this;
	}
	
});
// @TODO: Extend SecureLoginModal's login screen.
Registration.LoginScreen = new Class({
	
	Extends: Registration.BaseForm,
	
	options: {
		backButtonUrl: '#registration'
	},
	
	initialize: function (attachTo, options) {
		this.setOptions(options);
		
		this.rootEl = new Element('div', {
			'id': 'login',
			'class': 'screen'
		}).adopt([
			new Element('a', {
				'class': 'back',
				'html': '&larr; Register',
				'href': this.options.backButtonUrl
			}),
			new Element('h2', {
				'text': 'Log in to your Jetsetter Account'
			}),
			new Element('p', {
				'class': 'message',
				'text': 'Enter your Jetsetter email address to access your account, or click the back button to return to the previous screen.'
			})
		]);
		
		
		this.formEl = new Element('form', {'class': 'clearfix', 'method': 'post'}).inject(this.rootEl);
			var loginEmailWrapper = new Element('div', {'class': 'text'}).inject(this.formEl);
				new Element('label', {'for': 'loginEmailAddress', 'html': 'Email Address'}).inject(loginEmailWrapper);
				this.emailFieldEl = new TextField(
					new Element('input', {
						'id': 'loginEmailAddress',
						'class': 'text',
						'type': 'text',
						'autocorrect': 'off',
						'autocapitalize': 'off',
						'name': 'emailAddress'
					})
				).inject(loginEmailWrapper);
			this.submitButtonEl = new Element('button', {'type': 'submit', 'id': 'login-button', 'class': 'submit large-button', 'html': 'Log In Now'}).inject(this.formEl);
			new Element('input', {'type': 'hidden', 'name': 'return', 'value': this.options.returnPath}).inject(this.formEl);
				
		this.rootEl.inject(attachTo);
		
		this.bindSubmitFunction();
		
	},
	
	validateEmail: function (el) {
		el.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('You must enter your email address to access Jetsetter.');
		
		if (!el.isValid) {
			return false;
		}
		
		el.getParent().removeClass('checked');
		el.testValueWith(function (value) {
			return value.validateAsEmail();
		}).updateState('Please enter a valid email address.');
	},
	
	submitForm: function () {
		this.validateEmail(this.emailFieldEl);
		
		if (!this.emailFieldEl.isValid) {
			return false;
		}

		Jetsetter.Auth.authenticate(Object.merge(this.formEl.toQueryObject(), {
			'type': 'email',
			onSuccess: function(json){
				this.emailFieldEl.isValid = true;					
				this.fireEvent('loginComplete');
				this.emailFieldEl.updateState('');
			}.bind(this),
			onFailure: function(json){
				this.emailFieldEl.isValid = false;	
				this.enableForm();
				this.emailFieldEl.updateState(json.error.message);
			}.bind(this)
		}));
	}
	
});
// @TODO: Extend SecureLoginModal's login screen.
Registration.BwmLoginScreen = new Class({
	
	Extends: Registration.BaseForm,
	
	options: {
		backButtonUrl: '#registration'
	},
	
	initialize: function (attachTo, options) {
		this.setOptions(options);
		
		this.rootEl = new Element('div', {
			'id': 'login',
			'class': 'screen'
		}).adopt([
			new Element('h2', {
				'text': 'BuyWithMe by Gilt members, sign in here'
			}),
			new Element('p', {
				'class': 'message',
				'text': 'We\'ve made it easy for you to access Jetsetter with your BuyWithMe by Gilt account.  Simply log in below with your BuyWithMe email and password.'
			})
		]);
		
		
		this.formEl = new Element('form', {'class': 'clearfix', 'method': 'post'}).inject(this.rootEl);
			var loginEmailWrapper = new Element('div', {'class': 'text'}).inject(this.formEl);
				new Element('label', {'for': 'loginEmailAddress', 'html': 'Email Address'}).inject(loginEmailWrapper);
				this.emailFieldEl = new TextField(
					new Element('input', {
						'id': 'loginEmailAddress',
						'class': 'text',
						'type': 'text',
						'autocorrect': 'off',
						'autocapitalize': 'off',
						'name': 'emailAddress'
					})
				).inject(loginEmailWrapper);
			var loginPasswordWrapper = new Element('div', {'class': 'text'}).inject(this.formEl);
				new Element('label', {'for': 'loginPassword', 'html': 'Password'}).inject(loginPasswordWrapper);
				this.passwordFieldEl = new TextField(
					new Element('input', {
						'id': 'loginPassword',
						'class': 'text',
						'type': 'Password',
						'name': 'password'
					})
				).inject(loginPasswordWrapper);
			var loginRememberMeWrapper = new Element('div', {'class': 'remember-me'}).inject(this.formEl);
				new Element('label', {
					'html': '<input type="checkbox" name="travelSaleReminderBoth" class="checkbox notRequired" checked> Keep in touch with daily sale reminders'
				}).inject(loginRememberMeWrapper);
			this.submitButtonEl = new Element('button', {'type': 'submit', 'id': 'login-button', 'class': 'submit large-button', 'html': 'Log In Now'}).inject(this.formEl);
			new Element('a', {'class': 'forgot-password', 'href': '/login#fpw', 'html': 'Forgot your password?'}).inject(this.formEl);
			new Element('input', {'type': 'hidden', 'name': 'return', 'value': this.options.returnPath}).inject(this.formEl);
		

		new Element('input', {
			type: 'hidden',
			name: 'remember-me',
			value: 'on'
		}).inject(this.formEl);
		
		
		// Doing this instead of validating on email field blur so that
		// actions like switching back to the registration screen won't
		// trigger the validation
		this.passwordFieldEl.addEvents({
			focus: function (event) {
				this.validateEmail(this.emailFieldEl);
			}.bind(this)
		});
		
		this.rootEl.inject(attachTo);
		
		this.bindSubmitFunction();
		
	},
	
	validateEmail: function (el) {
		el.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('You must enter your email address and password to access Jetsetter.');
		
		if (!el.isValid) {
			return false;
		}
		
		el.getParent().removeClass('checked');
		el.testValueWith(function (value) {
			return value.validateAsEmail();
		}).updateState('Please enter a valid email address.');
	},
	
	submitForm: function () {
		this.validateEmail(this.emailFieldEl);
		
		// Make sure password field is not blank
		this.passwordFieldEl.testValueWith(function (value) {
			return value.length > 0;
		}).updateState('Please enter a password.');
		
		if (!this.emailFieldEl.isValid || !this.passwordFieldEl.isValid) {
			return false;
		}

		Jetsetter.Auth.authenticate(Object.merge(this.formEl.toQueryObject(), {
			'type': 'email',
			onSuccess: function(json){
				this.emailFieldEl.isValid = true;
				this.passwordFieldEl.isValid = true;				
				this.fireEvent('loginComplete');
				this.emailFieldEl.updateState('');
				this.passwordFieldEl.updateState();
			}.bind(this),
			onFailure: function(json){
				this.emailFieldEl.isValid = false;
				this.passwordFieldEl.isValid = false;	
				this.enableForm();
				this.emailFieldEl.updateState(json.error.message);
				this.passwordFieldEl.updateState();
			}.bind(this)
		}));
	}
	
});
Registration.InviteScreen = new Class({
	
	Extends: Registration.BaseForm,
	
	Implements: Social.InviteEmail,
	
	initialize: function (attachTo, guid) {
		
		// Build elements
		var emailContainerEl = new Element('div', {
			'class': 'emails'
		}).adopt(
			this.getNewEmailPair(),
			this.getNewEmailPair()
		);
		
		var addMoreButtonEl = new Element('a', {
			'type': 'button',
			'text': 'Add more'
		});
		
		var skipButtonEl = new Element('a', {
			'html': 'Skip & continue <span class="arrow">&rarr;</span>'
		});
		
		var submitButtonEl = new Element('button', {
			'id': 'send-invitations-button',
			'class': 'submit large-button',
			'type': 'submit',
			'text': 'Send Invitations'
		});
		
		var errorMessageEl = new Element('p', {
			'class': 'error'
		}).hide();
		
		var formEl = new Element('form', {
			'class': 'clearfix'
		}).adopt(
			new Element('label', {
				'text': 'Email Addresses'
			}),
			errorMessageEl,
			emailContainerEl,
			new Element('div', {
				'class': 'add-more'
			}).adopt(addMoreButtonEl),
			new Element('p', {
				'class': 'disclaimer',
				'text': ''
			}),
			new Element('div', {
				'class': 'actions'
			}).adopt(
				submitButtonEl, 
				new Element('div').adopt(skipButtonEl)
			)
		);
		
		// Make variable accessible
		this.errorMessageEl = errorMessageEl;
		this.formEl = formEl;
		this.submitButtonEl = submitButtonEl;
		this.guid = guid;
		
		
		// Append to DOM after building the elements
		this.rootEl = new Element('div', {
			'id': 'invitation',
			'class': 'screen',
			'html': '<h2>Welcome, Jetsetter! Now assemble your entourage.</h2>' +
				'<h3>Bonus: Get <strong class="credit">'+ Jetsetter.INVITER_CREDIT.formatCurrency() +'</strong> in Jetsetter credit when someone you invited makes their first purchase.</h3>'
		}).adopt(formEl).inject(attachTo);
		
		
		// Setup event handlers
		addMoreButtonEl.addEvent('click', function () {
			// Limit to 5 rows (10 email fields)
			var numOfEmailPairs = emailContainerEl.getChildren().length;
			if (numOfEmailPairs < 5) {
				this.getNewEmailPair().inject(emailContainerEl).hide().reveal({
					'duration': 'short'
				});
				
				if (numOfEmailPairs == 4) {
					addMoreButtonEl.destroy();
				}
			}
		}.bind(this));
		
		skipButtonEl.addEvent('click', function () {
			this.fireEvent('close');
		}.bind(this));
		
		this.addEvent('formDisable', function () {
			this.submitButtonEl.set('text', 'Sending Invitations…');
			this.submitButtonEl.getParent().addClass('sending');
		});
		
		this.addEvent('formEnable', function () {
			this.submitButtonEl.set('text', 'Send Invitations');
			this.submitButtonEl.getParent().removeClass('sending');
		});
		
		// Reuse or build the close button on the mini guest bar, which does the
		// same thing as "skip and continue" at the bottom of the modal
		var miniGuestBarEl = $('mini-guest-access-bar');
		if (miniGuestBarEl) {
			var closeButtonEl = Jetsetter.registrationModal.closeButton || new Element('a', {
				'class': 'action close-action'
			});
			closeButtonEl.set('text', 'Close').inject(miniGuestBarEl.getFirst());
			
			closeButtonEl.removeEvents('click');
			closeButtonEl.addEvent('click', function () {
				this.fireEvent('close');
			}.bind(this));
		}
		
		this.bindSubmitFunction();
		
	},
	
	getNewEmailPair: function () {
		return new Element('div', {
			'class': 'email-pair clearfix'
		}).adopt(
			this.getNewEmailEl().addClass('first-child'),
			this.getNewEmailEl()
		);
	},
	
	submitForm: function () {
		
		var emailFieldEls = this.getValidEmailFields();
		if (!emailFieldEls) {
			return false;
		}
		
		var req = new Request.JSON({
			'url': '/invitation',
			'data': {
				'type': 'postreginvite',
				'guid': Jetsetter.user.guid,
				'emailAddresses': emailFieldEls.get('value')
			},
			'onSuccess': function (json) {
				if (json.success) {
					// GA
					GA.trackInvites(emailFieldEls.length, 'post-reg');
					this.fireEvent('close');
				}
			}.bind(this),
			'onFailure': function () {
				var errorHandler = new ErrorHandler();
				this.showErrorMessage(errorHandler.errors[13].message);
				
				this.enableForm();
			}.bind(this)
		}).post();
		
	},
	
	setFocus: function () {}
	
});

Registration.TourScreen = new Class({
	
	Implements: Events,
	
	initialize: function (attachTo) {
		var tourSlides = new TourSlides(attachTo);
		tourSlides.addEvent('tourEnd', function () {
			this.fireEvent('tourEnd');
		}.bind(this));
		
		this.rootEl = $(tourSlides);
	},
	
	show: function () {
		this.rootEl.show();
	},
	
	hide: function () {
		this.rootEl.hide();
	},
	
	setFocus: function () {}
	
});

/**
*	@class RegistrationModal
*	@author Marvin Tam
*   
*	Contains an instance of the Registration class
*/

var RegistrationModal = new Class({
	
	Extends: Modal,
	
	options: {
		'id': 'register',
		'dismissable': false
	},
	
	initialize: function (options) {
		this.setOptions(options);
		
		// Customize modal container
		this.parent(options);
		this.title.destroy();
		
		this.registration = new Registration(this.canvas, this.options).addEvents({
			tourStart: this.addCloseButton.bind(this),
			registrationComplete: function () {
				this.fireEvent('registrationComplete');
			}.bind(this)
		});
		
		// Focus can only be set after the modal is done animating
		this.addEvent('showEnd', function () {
			this.registration.setFocus();
		}.bind(this));
		
		// Set a globally accessible static variable
		Jetsetter.registrationModal = this;
		
	},
	
	close: function () {
		this.registration.refreshPage();
	}
	
});

/**
*	@class AnonymousRegistrationModal
*	@author Marvin Tam
*   
*	RegistrationModal with special animation for anonymous browse bar
*/

var AnonymousRegistrationModal = new Class({
	
	Extends: RegistrationModal,
	
	initialize: function (options) {
		this.parent(options);
	},
	
	show: function () {
		this.fireEvent('showBegin');
		
		window.addEvent('resize:throttle', this.onResize);
		
		this.content.setStyle('top', 40);
		this.container.inject(document.body);
		
		// Set a width to the container so that it can center itself
		// NOTE: Get contentSize before this.effect below for IE8/standards mode
		var contentSize = this.content.getSize();
		this.container.setStyle('width', contentSize.x);
		
		this.effect = this.effect || new Fx.Slide(this.content, {
			duration: 'short'
		}).hide();
		
		// Override style set by Fx.Slide
		this.content.getParent().setStyle('position', '');
		
		// Show the modal and the overlay; focus the name field (which needs to happen after the animation)
		this.overlay = this.overlay || new Element('div', {
			id: 'modal-overlay'
		}).set('tween', {
			duration: 250,
			transition: Fx.Transitions.Quint.easeIn
		}).inject(document.body);
		
		
		
		this.overlay.set('opacity', 0).get('tween').start('opacity', 0.5).chain(function () {
			this.effect.slideIn().chain(function () {
				this.content.getParent().setStyle('height', 'auto');
				
				this.setPosition();
				this.fireEvent('showComplete');
			}.bind(this));
		}.bind(this));
	},
	
	setPosition: function () {
		var contentSize = this.content.getSize(),
			viewportSize = window.getSize(),
			modalY = contentSize.y + this.content.getPosition().y + 20; // 20px breathing room
		 	disablePositionFixed = (Browser.ie6 || Browser.Platform.ios || Browser.Platform.android || Browser.Platform.webos);
		
		// If modal cannot fit into viewport
		if (disablePositionFixed || modalY > viewportSize.y || viewportSize.x < 918) {
			this.content.setStyle('position', 'absolute');
			
			this._enableWindowScroll();
			new Fx.Scroll(window).set(0, this.content.getPosition().y - 40);
			
		} else {
			this.content.setStyle('position', 'fixed');
			this._disableWindowScroll();
		}
		
		this.fireEvent('positionSet');
	},
	
	hide: function () {
		this.fireEvent('hideBegin');
		this._enableWindowScroll();
		window.removeEvent('resize:throttle', this.onResize);
		
		this.overlay.get('tween').start('opacity', 0);
		this.effect.slideOut().chain(function () {
			// Actually hide the element
			this.container.dispose();
			this.fireEvent('hideComplete');
		}.bind(this));
	},
	
	setMessage: function (message) {
		this.registration.registerScreen.messageEl.set('html', message);
	}
	
});


var PostRegModal = new Class({
	
	Extends: Modal,
	
	options: {
		showInviteScreen: true,
		showTourScreen: true
	},
	
	initialize: function (options) {
		this.parent(Object.merge(options || {}, {
			id: 'register',
			dismissable: false
		}));
		
		// Enable the close button if it's the only screen left
		
		// Assuming that at least one would be enabled
		if (this.options.showInviteScreen) {
			this.inviteScreen = new Registration.InviteScreen(this.canvas).show();
			
			if (this.options.showTourScreen) {
				this.inviteScreen.addEvent('close', this.showTourScreen.bind(this));
			} else {
				this.addCloseButton();
				this.inviteScreen.addEvent('close', this.close.bind(this));
			}
			
		} else if (this.options.showTourScreen) {
			this.showTourScreen();
		}
	},
	
	showTourScreen: function () {
		if (this.inviteScreen) {
			this.inviteScreen.hide();
		}
		
		this.addCloseButton();
		var tourScreen = new Registration.TourScreen(this.canvas);
		tourScreen.addEvent('tourEnd', this.close.bind(this));
	}
	
});

PostRegModal.shouldShow = function () {
	var hashQuery = new URI().get('fragment').parseQueryString();
	
	if (hashQuery) {
		var showTour = (location.hash === '#tour' || (hashQuery.tour && hashQuery.tour.toInt()));
		var showInvite = (hashQuery.invite && hashQuery.invite.toInt());

		return (showTour || showInvite);
	} else {
		return false;
	}
};

PostRegModal.whitelist = ['splash', 'search', 'product-details', 'multisale'];

/**
*	@class FeedbackModal
*	@author Dominik Hofmann
*	The feedback modal.
*/

var FeedbackModal = new Class({

	Extends: Modal,
	
	initialize: function () {
		
		var scope = this;
		
		this.parent({
			'id': 'feedback-modal',
			'title': 'Send Feedback'
		});
		
		
		this.feedbackDefault = 'Enter your feedback here';
		this.replyDefault = 'Your email address (optional)';
		
		this.form = new Element('form', {action: '/index.php'}).inject(this.canvas);
		this.instructions = new Element('p', {text: 'Let us know what we can do to make a better product for you. Your feedback is appreciated.'}).inject(this.form);
		this.message = new Element('textarea', {'class': 'default', value: this.feedbackDefault}).inject(this.form);
		this.emailSet = new Element('fieldset').inject(this.form);
		
		new Element('label', {text: 'Your email address:'}).inject(this.emailSet);
		this.replyTo = new Element('select').inject(this.emailSet);
		
		if (Jetsetter.user.email) {
			new Element('option', {text: Jetsetter.user.email, value: Jetsetter.user.email}).inject(this.replyTo);
		}
		new Element('option', {text: 'Anonymous', value: 'anonymous'}).inject(this.replyTo);
		
		
		new Element('label', {text: 'Rate your experience with us:'}).inject(this.form);
		this.rating = new Element('select').inject(this.form);
		
		new Element('option', {text: 'Not applicable', value: 'N/A'}).inject(this.rating);
		new Element('option', {text: '5 - Excellent', value: '5/5 - Excellent'}).inject(this.rating);
		new Element('option', {text: '4 - Good', value: '4/5 - Good'}).inject(this.rating);
		new Element('option', {text: '3 - Average', value: '3/5 - Average'}).inject(this.rating);
		new Element('option', {text: '2 - Bad', value: '2/5 - Bad'}).inject(this.rating);
		new Element('option', {text: '1 - Awful', value: '1/5 - Awful'}).inject(this.rating);
		
		
		this.submit = new AJAXButton('Send Feedback', 'Sending…');
		this.submit.clickCallback = function () {
			scope.sendFeedback();
		};
		$(this.submit).inject(this.form);
		
		this.message.addEvent('focus', function () {
		
			if (this.get('value') == scope.feedbackDefault) {
		
				this.removeClass('default');
				this.set('value', '');
			
			}
			
		});
		
		this.message.addEvent('blur', function () {
		
			if (this.get('value').trim() == "") {
				
				this.addClass('default');
				this.set('value', scope.feedbackDefault);
				
			}
			
		});
		
		this.replyTo.addEvent('focus', function () {
		
			if (this.get('value') == scope.replyDefault) {
		
				this.removeClass('default');
				this.set('value', '');
			
			}
			
		});
		
		this.replyTo.addEvent('blur', function () {
		
			if (this.get('value').trim() == "") {
				
				this.addClass('default');
				this.set('value', scope.replyDefault);
				
			}
			
		});
		
	},
	
	sendFeedback: function () {

		var scope = this;

		if (scope.message.get('value').trim().length < 5 || scope.message.get('value').trim() == scope.feedbackDefault) {
			scope.submit.validate();
			alert('You must enter a message to send to your feedback.');
			return false;
		}
		
		var feedback = {
			message: scope.message.get('value'),
			rating: scope.rating.get('value'),
			reply_address: 'Anonymous'
		};
		
		if (scope.replyTo.get('value').trim() != scope.replyDefault) {
			feedback.reply_address = scope.replyTo.get('value').trim();
		}
		
		
		var req = new Request.JSON({
			url: '/feedback',
			data: {
				'input': feedback
			},
			onSuccess: function (json) {
				if (json.success) {
					scope.closeWithMessage('Thanks for your feedback. We’re always working to improve Jetsetter, so we appreciate your suggestions.', 5000);
				} else {
					scope.closeWithMessage('There was an error submitting your message. <br/>Please try again or email customer support at support@jetsetter.com', 15000, true);
				}
			}
		}).post();
		
		return false;
		
	},
	
	closeWithMessage: function (message, nTimeout, bError) {
		
		var timeout = nTimeout || 2700
		var result = bError ? 'error' : 'success';
		var revealFx = new Fx.Reveal(this.canvas, {
			'duration': 200
		});
	
		revealFx.dissolve().chain(function () {
			var messageEl = new Element('p', {'class': result, html: message}).inject(this.content);
			messageEl.tween('opacity', 0, 100);
		}.bind(this));

		this.content.addEvent('click', function () {
			this.close();
		}.bind(this));
		
		setTimeout(function () {
			this.close();
		}.bind(this), timeout);
		
	}
	
	
});

var RetailIntroModal = new Class({

	Extends: Modal,
	
	initialize: function () {
		
		this.parent({
			'id': 'retail-intro-modal'
		});
		
		var html = '\
			<div class="video">\
				<div class="intro-screen">\
					<div class="copy">\
						<h1>Introducing Jetsetter 24/7</h1>\
						<p>Now you can book Jetsetter Verified vacations at any time, year-round.</p>\
					</div>\
					<div class="play-video">\
						<button type="button">Play Video</button>\
					</div>\
				</div>\
				<div class="video-screen">\
					<div class="overlay"></div>\
					<div class="video-wrapper">\
					</div>\
					<a class="action close">Close</a>\
				</div>\
			</div>\
			<div class="details clearfix">\
				<div class="whats-new">\
					<h2>What’s New…</h2>\
					<ul class="clearfix">\
						<li>\
							<div class="image image-1"></div>\
							<h3>Jetsetter 24/7</h3>\
							<p>Now you can now book Jetsetter Verified vacations any time you want, year-round.</p>\
						</li>\
						<li>\
							<div class="image image-2"></div>\
							<h3>New Ways to Discover</h3>\
							<p>Use new tools to browse themed collections, search by destination or interest, or look for a specific hotel.</p>\
						</li>\
					</ul>\
				</div>\
				<div class="as-always">\
					<h2>As Always…</h2>\
					<ul class="clearfix">\
						<li>\
							<div class="image image-1"></div>\
							<h3>Jetsetter Verified</h3>\
							<p>Our correspondents personally experience every tour, hotel & cruise to verify that it meets our standards.</p>\
						</li>\
						<li class="last">\
							<div class="image image-2"></div>\
							<h3>Daily Flash Sales</h3>\
							<p>Every day we feature an ever-changing selection of vacations at exclusive prices.</p>\
						</li>\
					</ul>\
				</div>\
			</div>';
		
		this.canvas.set('id', 'retail-intro').set('html', html);
		this.videoScreenEl = this.canvas.getElement('.video-screen');
		
		// Use SWFObject to append the flash viewer to the dom
		var videoEl = new Swiff('http://embed.wistia.com/flash/embed_player_v1.1.swf', {
			width: 640,
			height: 360,
			params: {
				allowScriptAccess: 'always',
				allowFullScreen: 'true',
				wmode: 'opaque',
				flashvars: 'videoUrl=http://embed.wistia.com/deliveries/6b6b5b87ff0a7273c2535e9cd920988aeac4904b.bin&stillUrl=http://embed.wistia.com/deliveries/684d90b211b194696eff27365d04c6bbeb0c9715.bin&unbufferedSeek=false&controlsVisibleOnLoad=false&autoPlay=true&endVideoBehavior=reset&playButtonVisible=true&embedServiceURL=http://distillery.wistia.com/x&accountKey=wistia-production_5292&mediaID=wistia-production_268085&mediaDuration=53.52'
			}
		});
		this.videoScreenEl.getElement('.video-wrapper').adopt(videoEl);
		this.videoScreenEl.getElement('.close').addEvent('click', this.close.bind(this));
		
		// Show video
		this.canvas.getElement('.play-video button').addEvent('click', function () {
			this.videoScreenEl.show();
		}.bind(this));
		
		
		// Prevent mousedown event from bubbling up to document, where it trips out IE
		// (something to do with the Flash video here)
		if (Browser.ie) {
			this.content.addEvent('mousedown', function (event) {
				event.stop();
			});
		}
		
	}
	
});
/**
*	@class TourModal
*	@author Marvin Tam
*	
*/

var TourModal = new Class({

	Extends: Modal,

	initialize: function (options) {
		
		this.parent({
			id: 'tour-modal'
		});
		
		var tourSlides = new TourSlides(this.canvas);
		tourSlides.addEvents({
			tourEnd: this.close.bind(this)
		});
		
	}
	
});

var RegistrationPersonalizationScreen = new Class({

	Implements: Events,

	initialize: function(questionEl, altClass){
		this.buildSource();
		this.buildHtml();
		this.header = questionEl.getParent('.canvas').getElement('.tour-header');
		this.footer = questionEl.getParent('.canvas').getElement('.tour-footer');

		this.container = new Element('div', {
			'class': 'tour-screen clearfix ' + altClass,
			'html': this.html
		}).inject(questionEl);

		this.buildHeaderSource();
		this.buildFooterSource();
	},

	buildHtml: function(){
		this.template = Handlebars.compile(this.source);
		this.html = this.template(this.templateData);
	},

	buildSource: function(){
		this.source = '';
	},

	buildHeaderSource: function(){
		this.headerSource = '';
	},

	buildFooterSource: function(){
		this.footerSource = '';
	},

	show: function(){
		this.container.setStyle('display', 'block');
	},

	hide: function(){
		this.container.setStyle('display', 'none');
	},

	sendAnswer: function(options, callback){
		new UserService().answerPersonalizationQuestion({
			questionId: options.questionId,
			optionAnswers: JSON.encode(options.optionAnswers),
			onSuccess: function(data){
				callback(true);
				this.fireEvent('answerSent', options);
			}.bind(this),
			onFailure: function(){
				callback(false);
				this.fireEvent('answerSent', options);
			}.bind(this)
		})
	}



});

var RegistrationPersonalizationInterlude = new Class({
	
	Implements: Events,

	initialize: function(content, duration){
		this.duration = duration || 3000;

		this.buildSource();
		this.buildHtml();

		this.container = new Element('div', {
			'class': 'tour-interlude clearfix unselectable',
			'html': this.html
		}).inject(content);

		this.container.fade('hide');

		//for differentiation purposes
		this.interlude = true;
	},

	buildSource: function(){
		this.source = '';
	},

	buildHtml: function(){
		this.template = Handlebars.compile(this.source);
		this.html = this.template(this.templateData);
	},

	show: function(){
		this.container.fade('in');

		setTimeout(function(){
			this.container.fade('out');
			this.fireEvent('showEnd')
		}.bind(this), this.duration);
	},

	hide: function(){
		this.container.hide();
	}
});
var RegistrationPersonalizationDateScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl, data){
		this.questionData = data;
		this.buildTemplateData();

		this.parent(questionEl, 'pick-dates');
		this.rootEl = questionEl.getElement('.pick-dates');
		this.questionText = data.questionText;

		this.rootEl.getElements('.answer-wrap').each(function(elem){
			elem.addEvent('click', function(){
				this.selectAnswer(elem);
			}.bind(this));
		}.bind(this));


	},

	buildSource: function(){
		this.source = '<div class="date-wrap">\
							{{#each answers}}\
								<div class="answer-wrap {{this.class}}">\
									<span class="label">{{this.label}}</span>\
									<input type="checkbox" value="{{this.value}}" />\
								</div>\
							{{/each}}\
					    </div>';
	},

	buildTemplateData: function(){
		var numOfOptions = this.questionData.options;
		
		this.templateData = {
			answers: []
		};

		//first three are relative times not holidays so we auto include them
		for(var i = 1; i <= 3; i++) {
			var className = 'top ' + this.nameToClass(this.questionData['optionLabel' + i]);

			if(i === 3){
				className += ' last-in-row';
			}

			this.templateData.answers.push({
				label: this.questionData['optionLabel' + i],
				'class': className,
				value:	i
			});
		}

		var today = new Date(),
			curLowest,
			pivotValue;

		//find the next date that is in the future
		for(var i = 4; i <= numOfOptions; i++) {
			var diff = today.diff(new Date(this.questionData['optionValue' + i]));
			
			if(typeof curLowest === 'undefined' || (curLowest > diff && diff > 0)){
				curLowest = diff;
				pivotValue = i;
			}
		}

		//add the next 3 holidays into template
		for(var i = 0; i < 3; i++) {
			if(pivotValue > numOfOptions){
				pivotValue = 4;
			}

			var className = this.nameToClass(this.questionData['optionLabel' + pivotValue]);

			if(i === 2){
				className += ' last-in-row';
			}

			this.templateData.answers.push({
				label: this.questionData['optionLabel' + pivotValue],
				'class': className,
				value:	pivotValue
			});

			pivotValue++;
		}
	},

	selectAnswer: function(elem){
		var checkbox = elem.getElement('input');
		
		elem.toggleClass('answer-selected');

		if(elem.hasClass('answer-selected')){
			checkbox.checked = true;
		}
		else{
			checkbox.checked = false;
		}
	},

	nameToClass: function(name){
		return name.toLowerCase().replace(' ', '-');
	},

	submitAnswer: function(callback){
		var checkedEls = this.rootEl.getElements('input:checked');
			data = {
				questionId: this.questionData.surveyQuestionId,
				optionAnswers: []
			}

		checkedEls.each(function(elem){
			data.optionAnswers.push(elem.get('value'));
		});

		this.sendAnswer(data, callback);
	}

});
var RegistrationPersonalizationFacebookScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl, data){
		this.questionData = data;

		this.parent(questionEl, 'connect-fb');
		this.rootEl = questionEl.getElement('.connect-fb');
		this.questionText = 'Connect to Facebook to finalize personalization';
		this.fbImageEl = this.rootEl.getElement('img');
		this.fbCallout = this.rootEl.getElement('h3 span');

		window.addEvent('fbReady', function(){
			this.setFbState();
		}.bind(this));

		this.footer.addEvent('click:relay(.wrap #next-screen)', function(){
			_gaq.push(['_trackEvent', 'Modal', 'Tour-Facebook', 'Skipped']);
		});
	},

	buildSource: function(){
		this.source = '<div class="mask-wrap">\
							<div class="mask"></div>\
							<div class="image-wrap"><img src="" id="fb-image" /></div>\
					   </div>\
					   <div class="fb-info">\
					   		<div class="center-wrap">\
						   		<h3>Hi there, <span></span></h3>\
						   		<p>Connecting with Facebook will allow us to better understand you and give you suggestions on more relevant deals.</p>\
					   		</div>\
					   </div>';
	},

	buildHeaderSource: function(){
		this.headerSource = '<h2>Personalize your experience</h2><a class="new-close"></a>';
	},

	buildFooterSource: function(){
		this.footerSource = '<div class="facebook-footer clearfix">\
								<div class="wrap">\
									<a id="fb-cta" class="fb-cta"></a>\
									<span class="or">or</span>\
									<a id="next-screen">skip this step</a>\
								</div>\
							 </div>';
	},

	setFbState: function(){
		FB.getLoginStatus(function (response) {
			if (response.authResponse) {
				this.setFbUser();
				this.footer.addEvent('click:relay(.fb-cta)', function(e){
					e.stop();
					this.fbLogin(response.authResponse);
				}.bind(this));
			} else {
				this.footer.addEvent('click:relay(.fb-cta)', function(e){
					e.stop();
					FB.login(function (response) {
						if (response.authResponse) {
							this.fbLogin(response.authResponse);
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
						} else {
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
						}
					}.bind(this), {
						'scope': 'email,publish_stream,offline_access'
					});
				}.bind(this));
			}
		}.bind(this));

	},

	setFbUser: function(){
		FB.api('/me', function(user){
			this.fbImageEl.set('src', 'http://graph.facebook.com/' + user.id + '/picture?type=large');
			this.fbImageEl.getParent().setStyle('background', 'none');
			this.fbImageEl.show();
			this.fbCallout.set('text', user['first_name'] + '!');
		}.bind(this));

	},

	fbLogin: function(authResponse){
		Jetsetter.Auth.authenticate({
			type: 'facebook',
			onSuccess: function(json, user){
				this.sendAnswer({
					questionId: this.questionData.surveyQuestionId,
					optionAnswers: [1],
					comment: user.fbUserId
				}, function(){
					_gaq.push(['_trackEvent', 'Modal', 'Tour-facebook', 'Registered']);
					this.fireEvent('fbLoginCompleted');
				}.bind(this));
			}.bind(this),
			onFailure: function(json, user){
				_gaq.push(['_trackEvent', 'Modal', 'Tour-facebook', 'Failed']);
				this.fireEvent('fbLoginCompleted', user);
			}.bind(this)
		});
	},

	submitAnswer: function(callback){
		callback(true);
	}

});
var RegistrationPersonalizationFinalScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl, data){
		this.questionData = data;

		this.parent(questionEl, 'share-picks');
		this.rootEl = questionEl.getElement('.share-picks');
		this.questionText = 'Okay, we’ve found tons of destinations for you';
		this.slideTitle = this.rootEl.getElement('.info h5');
		this.slideSubtitle = this.rootEl.getElement('.info span');
		this.fbShare = this.rootEl.getElement('.fb-share');
	},

	buildSource: function(){
		this.source = '<h3>We’d love to give you an extra 10% off your first booking</h3>\
					   <h4>You’ve completed the personalization and earned $25 towards your first booking. Sweet! We’ve picked 4 places we think you’d enjoy. Here’s the catch–we’ll give you 10% off your booking of you can get 10 friends to “like” it.</h4>\
					   <div class="slideshow-wrap">\
					   		<div class="slideshow"></div>\
					   		<div class="controls-wrap">\
					   			<div class="gradient"></div>\
					   			<div class="controls clearfix">\
					   				<div class="arrows clearfix">\
					   					<div class="arrow arrow-left"></div>\
					   					<div class="arrow arrow-right"></div>\
					   				</div>\
					   				<div class="info">\
					   					<h5></h5>\
					   					<span></span>\
					   				</div>\
					   				<a class="fb-share"></a>\
					   			</div>\
					   		</div>\
					   </div>\
					   <div class="dots-wrap"></div>';
	},

	getSales: function(){
		var slideSource = '{{#each slides}}\
								<div data-title="{{this.title}}" data-subtitle="{{this.subtitle}}" data-url="{{this.url}}">\
									<img src="{{this.imgUrl}}" />\
								</div>\
						   {{/each}}',
			slideTemplate = Handlebars.compile(slideSource),
			slideHtml;

		var req = new Request.JSON({
			url: Jetsetter.HOST + '/user/getpersonalizedsales',
			onSuccess: function (json) {
				var templateData = {
					slides: json.data
				};

				slideHtml = slideTemplate(templateData);

				this.rootEl.getElement('.slideshow').set('html', slideHtml);

				this.slideshow = new SlideShow(this.rootEl.getElement('.slideshow'), {
					transition: 'pushLeft',
					duration: 350,
					onShow: function(slideData){
						this.switchInfo(slideData.next.element);
						this.galleryDots.select(slideData.next.index);
					}.bind(this)
				});

				this.galleryDots = new GalleryDots(this.rootEl.getElement('.dots-wrap'), {
					numOfDots: this.slideshow.slides.length,
					onChange: function (index) {
						this.slideshow.show(index);
					}.bind(this)
				});

				this.rootEl.getElement('.arrow-left').addEvent('click', function(){
					this.slideshow.show('previous')
				}.bind(this));

				this.rootEl.getElement('.arrow-right').addEvent('click', function(){
					this.slideshow.show('next')
				}.bind(this));

				this.rootEl.getElement('.fb-share').addEvent('click', function(e){
					this.sendAnswer({
						questionId: this.questionData.surveyQuestionId,
						optionAnswers: [1],
						comment: e.target.get('href')
					}, function(){
						
					}.bind(this));
				}.bind(this));

				this.switchInfo(this.slideshow.current);

			}.bind(this)
		}).send();
	},

	switchInfo: function(elem){
		this.slideTitle.set('text', elem.get('data-title'));
		this.slideSubtitle.set('text', elem.get('data-subtitle'));
		this.fbShare.set('href', 'https://www.facebook.com/sharer.php?u=' + Jetsetter.HOST + elem.get('data-url'));
	},

	submitAnswer: function(callback){
		callback(true);
	}

});
var RegistrationPersonalizationImageScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl, data){
		this.questionData = data;
		this.questionData.options = this.questionData.options;
		
		this.buildTemplateData();

		this.parent(questionEl, 'pick-destination');
		this.rootEl = questionEl.getElement('.pick-destination');
		this.questionText = data.questionText;

		
		this.rootEl.addEvent('click:relay(.answer-wrap)', function(e, elem){
			this.selectAnswer(elem);
		}.bind(this));
		
	},

	buildSource: function(){
		this.source = '{{#each answers}}\
							<div class="answer-wrap answer-{{this.value}}">\
								<img src="'+ Jetsetter.CDN_HOST +'/static/{{this.imageUrl}}" />\
								<div class="check"></div>\
								<input type="checkbox" id="answer-{{this.value}}" name="image-answer" value="{{this.value}}" />\
							</div>\
						{{/each}}';
	},

	buildHeaderSource: function(){
		this.headerSource = '<h2>Which of these interest you?</h2><a class="new-close"></a>';
	},

	buildFooterSource: function(){
		this.footerSource = '<div class="destination-footer clearfix">\
								<a id="next-screen" class="cta-button">Next step <span class="arrow">▶</span></a>\
							 </div>';
	},

	buildTemplateData: function(){
		var numOfOptions = this.questionData.options;
		
		this.templateData = {
			answers: []
		};

		for(var i = 1; i <= numOfOptions; i++) {
			this.templateData.answers.push({
				imageUrl: this.questionData['optionLabel' + i],
				value:	i
			});
		}
	},

	selectAnswer: function(elem){
		var checkbox = elem.getElement('input');
		
		elem.toggleClass('answer-selected');

		if(elem.hasClass('answer-selected')){
			checkbox.checked = true;
		}
		else{
			checkbox.checked = false;
		}
	},

	submitAnswer: function(callback){
		var checkedEls = this.rootEl.getElements('input:checked');
			data = {
				questionId: this.questionData.surveyQuestionId,
				optionAnswers: []
			}

		checkedEls.each(function(elem){
			data.optionAnswers.push(elem.get('value'));

			var imgSrc = elem.getPrevious('img').get('src').split('/');
			_gaq.push(['_trackEvent', 'Modal', 'Tour-Image', imgSrc[imgSrc.length - 1]]);
		});

		this.footer.getElement('a').set('disabled', 'disabled');

		this.sendAnswer(data, callback);
	}

});
var RegistrationPersonalizationIntroScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl){
		this.parent(questionEl, 'intro');
		this.rootEl = questionEl.getElement('.intro');
		this.questionText = 'Okay, we’ve found tons of destinations for you';
		this.formEl = this.rootEl.getElement('.invites form');
		this.emailEls = this.formEl.getElements('input');
		this.emailFields = [];
		this.emailCounter = 0;
		this.loader = this.rootEl.getElement('.invites .loader');
		this.loader.fade('hide');

		//set up fields so they are invite aware
		this.emailEls.each(function(elem){
			var emailField = new InviteEmailField(elem, {
				'tooltipType': 'top',
				'existingMemberCheck': true
			});

			this.emailFields.push(emailField);
		}.bind(this));

		this.footer.addEvent('click:relay(.wrap .cta-button)', function(e, elem){
			this.submitForm();
		}.bind(this));

		this.footer.addEvent('click:relay(.wrap #next-screen)', function(){
			_gaq.push(['_trackEvent', 'Modal', 'Tour-Invite', 'Skipped']);
		});

		this.formEl.addEvent('submit', function(e){
			e.stop();
			this.submitForm();
		}.bind(this));

		this.addEvent('sendInvites', function(){
			this.emailCounter++;

            var enteredEmails = _.compact(this.emailEls.get('value'));

			if(this.emailCounter === enteredEmails.length){
                var validEmails = _.filter(this.emailFields, function(emailField) { return emailField.get('value') != '' && emailField.get('state') == 'valid'; })
				if (validEmails.length === enteredEmails.length){
                    this.sendInvites();
                } else {
                    this.fireEvent('invitesSent', false);
                }
			}
		}.bind(this));

		this.addEvent('invitesSent', function(success){
			this.emailFields.each(function(emailField){
				emailField.removeEvents('validationComplete');

				emailField.addEvent('validationComplete', function(data){
					var state = data[emailField.get('value')];
					emailField.set('state', state).updateDisplayState();
				});
			});

			if(success){
				var emails = this.emailEls.get('value').filter(function(val){
					return val !== '';
				});
				GA.trackInvites(emails.length, 'post-reg');
				_gaq.push(['_trackEvent', 'Modal', 'Tour-Invite', 'Sent']);

				this.emailEls.set('value', '');
				this.fireEvent('invitesCompleted');
			}

			this.enableForm();
			this.emailCounter = 0;
		});

	},

	submitForm: function(){
        var enteredEmails = _.compact(this.emailEls.get('value'));

		if(enteredEmails.length === 0){
			return false;
		}

		this.emailCounter = 0;
		this.disableForm();

		this.emailFields.each(function(emailField){
			emailField.validateField();

			var inviteSent = false;

			emailField.addEvent('validationComplete', function(){
				if (emailField.get('state') !== 'valid') {
					emailField.updateDisplayState();
				}
				
				this.fireEvent('sendInvites');
				inviteSent = true;
			}.bind(this));

			setTimeout(function(){
				if(!inviteSent){
					emailField.updateDisplayState();
					this.fireEvent('sendInvites');
				}
			}.bind(this), 3000);
		}.bind(this));
	},

	enableForm: function(){
		this.footer.getElement('.wrap .cta-button').set('disabled', false);
		this.loader.fade('out');
	},

	disableForm: function(){
		this.footer.getElement('.wrap .cta-button').set('disabled', 'disabled');
		this.loader.fade(0.7);
	},

	buildSource: function(){
		this.source = '<div class="invites">\
							<div class="desc clearfix">\
								<span></span>\
								<p>Bonus: We‘ll give you <b>$25</b> in Jetsetter credit when someone you invited makes their first purchase.</p>\
							</div>\
							<h4>Email addresses</h4>\
							<form>\
								<div class="input-wrap">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
								<div class="input-wrap last">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
								<div class="input-wrap">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
								<div class="input-wrap last">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
								<div class="input-wrap">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
								<div class="input-wrap last">\
									<input type="text" placeholder="email@example.com" />\
								</div>\
							</form>\
							<div class="loader"><div></div></div>\
					   </div>';
	},

	buildHeaderSource: function(){
		this.headerSource = '<h2>Welcome, Jetsetter! Now assemble your entourage.</h2>';
	},

	buildFooterSource: function(){
		this.footerSource = '<div class="intro-footer clearfix">\
								<div class="wrap">\
									<a class="cta-button">Invite friends <span class="arrow">▶</span></a>\
									<a id="next-screen">Skip & continue</a>\
								</div>\
							 </div>';
	},

	sendInvites: function(){
		new InviteService().sendInvitations({
		    validatedEmailAddresses: _.compact(this.emailEls.get('value')),
		    method: 'typed',
		    type: 'postreginvite',
		    onSuccess: function(){
		        this.fireEvent('invitesSent', true);
		    }.bind(this),
		    onFailure: function(){
		    	this.fireEvent('invitesSent', false);
		    }.bind(this)
		});
	},

	submitAnswer: function(callback){
		callback(true);
	}

});
var RegistrationPersonalizationPriceRangeScreen = new Class({

	Extends: RegistrationPersonalizationScreen,

	initialize: function(questionEl, data){
		this.questionData = data;
		this.buildTemplateData();

		this.parent(questionEl, 'pick-price');
		this.rootEl = questionEl.getElement('.pick-price');
		this.questionText = data.questionText;
		this.rangeSliderEl = $('range-bar');
		this.leftCap = this.rangeSliderEl.getElement('.left-cap');
		this.rightCap = this.rangeSliderEl.getElement('.right-cap');
		this.values;


		this.rangeSlider = new RangeSlider(this.rangeSliderEl, {
			minKnob: this.leftCap,
			maxKnob: this.rightCap,
			rangeIndicator: this.rangeSliderEl.getElement('.extender'),
			sliderValues: {
				min: 100,
				max: 500
			},
			knobValues: {
				min: 200,
				max: 300
			},
			onInit: function (values) {
				// Update display values as the slider is initialized
				this.updateRangeTooltips(values);
			}.bind(this),
			onDrag: function (values) {
				// Update display values as the slider knobs are dragged
				this.updateRangeTooltips(values);
			}.bind(this),
			onChange: function (values) {
				this.updateRangeTooltips(values);
			}.bind(this)
		});
	},

	buildSource: function(){
		this.source = '<div class="bar-wrap" id="range-bar">\
							<div class="left-cap">\
								<div class="label"><p>From <span></span> per night</p></div>\
							</div>\
							<div class="extender"></div>\
							<div class="right-cap">\
								<div class="label"><p>To <span></span> per night</p></div>\
							</div>\
					   </div>';
	},

	buildTemplateData: function(){
		var numOfOptions = this.questionData.options;
		
		this.templateData = {
			answers: []
		};
	},

	selectAnswer: function(elem){
		var checkbox = elem.getElement('input');
		
		elem.toggleClass('answer-selected');

		if(elem.hasClass('answer-selected')){
			checkbox.checked = true;
		}
		else{
			checkbox.checked = false;
		}
	},

	nameToClass: function(name){
		return name.toLowerCase().replace(' ', '-');
	},

	updateRangeTooltips: function(values){
		this.values = values;
		this.leftCap.getElement('p span').set('text', '$' + Math.round(values.min));
		this.rightCap.getElement('p span').set('text', '$' + Math.round(values.max));
	},

	submitAnswer: function(callback){
		var data = {
				questionId: this.questionData.surveyQuestionId,
				optionAnswers: []
			}

		data.optionAnswers.push('[' + this.values.min + ', ' + this.values.max + ']');

		this.sendAnswer(data, callback);
	}

});
var RegistrationPersonalizationBoardingInterlude = new Class({
	
	Extends: RegistrationPersonalizationInterlude,

	initialize: function(content, duration){
		this.parent(content, duration);
		this.ropes = this.container.getElement('.boarding-interlude .ropes');
		this.text = this.container.getElement('.boarding-interlude p');
	},

	buildSource: function(){
		this.source = '<div class="boarding-interlude"><div class="ropes"></div><p>Now boarding.</p></div>';
	},

	show: function(){

		// use css3 transitions if applicable 
		// start rope animation before fade in
		if(Modernizr.csstransitions){
			var ropeTransition = (this.duration / 1000) * 5 + 's linear';
			this.ropes.setStyle(Modernizr.prefixed('transition').toCSS(), ropeTransition);
			this.ropes.setStyle('left', 0);
		} else {
			new Fx.Tween(this.ropes, {
				duration: this.duration * 5,
				transition: 'linear',
				property: 'left'
			}).start(0);
		}

		this.container.fade('in').get('tween').chain(function(){
			
			// use css3 transitions if applicable
			// animate text once interlude is faded in 
			if(Modernizr.csstransitions){
				var textTransition = (this.duration / 1000) / 1.5 + 's ease-out';

				this.text.setStyle(Modernizr.prefixed('transition').toCSS(), textTransition);

				this.text.setStyles({
					'opacity': 1,
				    'bottom': 199
				});
			} else {
				var textFx = new Fx.Morph(this.text, {
					transition: 'quad:out',
					duration: this.duration / 1.5
				});

				textFx.start({
				    'opacity': 1,
				    'bottom': 199
				});
			}

			setTimeout(function(){
				this.container.fade('out').get('tween').chain(function(){
					this.hide();
				}.bind(this));
				this.fireEvent('showEnd');
			}.bind(this), this.duration + 350); // give them time to read the transition
		}.bind(this));
	}
});
var RegistrationPersonalizationEndInterlude = new Class({
	
	Extends: RegistrationPersonalizationInterlude,

	initialize: function(content, duration){
		this.parent(content, duration);

		this.text = this.container.getElement('.end-interlude p');
	},

	buildSource: function(){
		this.source = '<div class="end-interlude"><p>Good choice.</p></div>';
	},

	show: function(){
		this.container.fade('in');

		var textFx = new Fx.Morph(this.text, {
				transition: 'quad:in',
				duration: this.duration / 3
			});

		textFx.start({
		    'opacity': 1,
		    'bottom': 155
		}).chain(function(){
				setTimeout(function(){
					this.text.fade('out').get('tween').chain(function(){
					this.text.set('text', 'Welcome to the club.');
					textFx.transition = 'quad:out';

					this.text.fade('in').get('tween').chain(function(){
						textFx.start({
							'opacity': 0,
		    				'bottom': 175
						});
					}.bind(this));
				}.bind(this));
			}.bind(this), 100);
		}.bind(this));

		setTimeout(function(){
			this.container.fade('out').get('tween').chain(function(){
					this.hide();
				}.bind(this));
			this.fireEvent('showEnd');
		}.bind(this), this.duration + 500);
	},

	setText: function(pluarl){
		if(pluarl){
			this.text.set('text', 'Good choices.');
		} else {
			this.text.set('text', 'Good choice.');
		}
	}
});
var RegistrationPersonalizationStartInterlude = new Class({
	
	Extends: RegistrationPersonalizationInterlude,

	initialize: function(content, duration){
		this.parent(content, duration);
		this.planes = this.container.getElement('.start-interlude .planes');
		this.text = this.container.getElement('.start-interlude .text-mask');
		this.finalWidth = this.container.getSize().x + (2 * this.planes.getSize().x);
	},

	buildSource: function(){
		this.source = '<div class="start-interlude"><div class="text-mask"><p>Great, let’s get started</p></div><div class="planes"></div></div>';
	},

	show: function(){
		this.container.fade('in').get('tween').chain(function(){
			var planeProps = {
				duration: this.duration,
				transition: 'quad:in',
				property: 'left'
			};

			var textProps = {
				duration: this.duration,
				transition: 'quad:in',
				property: 'width'
			};

			//use css3 transitions if applicable 
			if(Modernizr.csstransitions){
				var transitionString = (this.duration / 1000) / 1.2 + 's ease-in';

				this.planes.setStyle(Modernizr.prefixed('transition').toCSS(), transitionString);
				this.text.setStyle(Modernizr.prefixed('transition').toCSS(), transitionString);

				setTimeout(function(){
					this.planes.setStyle('left', this.container.getSize().x + this.planes.getSize().x);
				}.bind(this), this.duration / 15);
				this.text.setStyle('width', this.finalWidth);

			} else {
				setTimeout(function(){
					new Fx.Tween(this.planes, planeProps).start(this.container.getSize().x + this.planes.getSize().x);
				}.bind(this), this.duration / 15);
				new Fx.Tween(this.text, textProps).start(this.finalWidth);
			}

			setTimeout(function(){
				this.container.fade('out').get('tween').chain(function(){
					this.hide();
				}.bind(this));
				this.fireEvent('showEnd');
			}.bind(this), this.duration + 350); // give them time to read the transition
		}.bind(this));
	}
});
var RegistrationPersonalizationModal = new Class({
	
	Extends: Modal,

	initialize: function(options){

		this.parent(Object.merge(options || {}, {
			id: 'new-tour',
			dismissable: false
		}));

		this.canvas.addClass('unselectable');

		this.buildHtml();

		this.questionContainer = this.canvas.getElement('.question-container');

		this.header = this.canvas.getElement('.tour-header');
		this.footer = this.canvas.getElement('.tour-footer');
		this.screens = [];
		this.curScreen = 0;
		this.lastScreen = false;

		this.canvas.addEvent('click:relay(a.new-close)', function(){
			this.close();
		}.bind(this));

		async.auto({
			questions: function(callback){
				new UserService().getPersonaliationQuestions({
					onSuccess: function(data){
						callback(null, data);
					},
					onFailure: callback
				});
			}.bind(this),

			fbId: function(callback){
				if(!Jetsetter.user.hasInsecureToken()){
					return callback(null, null);
				}

				new UserService().getFbId({
					onSuccess: function(data){
						callback(null, data);
					},
					onFailure: function(){
						callback(null, null);
					}
				})
			}.bind(this)
		}, function(err, data){
			this.questionData = data.questions;
			this.loadScreens(data.fbId);
		}.bind(this));

		this.canvas.addEvent('click:relay(#next-screen)', function(){
			if(!this.lastScreen){
				this.screens[this.curScreen].submitAnswer(function(success){
					// if(success){
						this.switchScreen(this.curScreen + 1);
					// } else {
						//shake doesnt work properly for modals -- well have to think of another error state
						//new Fx.Shake(this.content).start()
					// }
				}.bind(this));
			} else {
				this.hideAndRefresh();
			}
		}.bind(this));

		// tracking for open close
		this.addEvents({
			'showEnd': function(){
				_gaq.push(['_trackEvent', 'Modal', 'Reg-Tour', 'Opened']);
			},
			'closeEnd': function(){
				_gaq.push(['_trackEvent', 'Modal', 'Reg-Tour', 'Closed']);
			}
		})
	},

	buildHtml: function(){
		var data = {},
			source =   '<div class="tour-header clearfix">\
							<h2>Section Title</h2>\
							<a class="new-close"></a>\
						</div>\
						<div class="question-container"></div>\
						<div class="tour-footer"></div>',
			template = Handlebars.compile(source);

		this.canvas.set('html', template(data));
	},

	loadScreens: function(fbId){
		// this sets up the order of the screens -- we can make this more dynamic if we want later
		var introScreen = new RegistrationPersonalizationIntroScreen(this.questionContainer);

		introScreen.addEvent('invitesCompleted', function(){
			this.switchScreen(this.curScreen + 1);
		}.bind(this));

		this.screens.push(introScreen);

		this.screens.push(new RegistrationPersonalizationStartInterlude(this.content, 2000));

		if(!fbId){
			var fbScreen = new RegistrationPersonalizationFacebookScreen(this.questionContainer, this.questionData[3]);
					
			fbScreen.addEvent('fbLoginCompleted', function(){
				this.switchScreen(this.curScreen + 1);
			}.bind(this));

			this.screens.push(fbScreen);

			this.screens.push(new RegistrationPersonalizationBoardingInterlude(this.content, 2000));
		}

		var imageScreen = new RegistrationPersonalizationImageScreen(this.questionContainer, this.questionData[0]);
		var endInterlude = new RegistrationPersonalizationEndInterlude(this.content);

		imageScreen.addEvent('answerSent', function(data){
			endInterlude.setText(data.optionAnswers.length > 1);
		});

		this.screens.push(imageScreen);

		this.screens.push(endInterlude);

		//setup slideshow and first screen
		this.slideshow = new SlideShow(this.questionContainer, {
			transition: 'none',
			duration: 350
		});

		this.setHeader(this.screens[this.curScreen].headerSource);
		this.setFooter(this.screens[this.curScreen].footerSource);
	},

	setHeader: function(headerHtml){
		var headerTemplate = Handlebars.compile(headerHtml);
		this.header.set('html', headerTemplate());
	},

	setFooter: function(footerHtml){
		var footerTemplate = Handlebars.compile(footerHtml);
		this.footer.set('html', footerTemplate());
	},

	switchScreen: function(switchTo){
		if(!this.screens[switchTo].interlude){
			this.curScreen = switchTo;
			this.slideshow.show('next');
			this.setHeader(this.screens[this.curScreen].headerSource);
			this.setFooter(this.screens[this.curScreen].footerSource);
		} else {
			this.screens[switchTo].show();

			this.screens[switchTo].addEvent('showEnd', function(){
				if(this.screens[switchTo + 1]){
					this.switchScreen(switchTo + 1);
				} else {
					this.close(true);
				}					
			}.bind(this));
		}
	},

	hideAndRefresh: function(){
		var loader = new Element('div', {
						'id': 'personalization-loader'
					}).inject(this.content, 'after').fade('hide');

		new Fx.Tween(this.content).start('opacity', 0).chain(function(){

			$('modal-overlay').setStyle('opacity', '0.8');

			loader.fade('in');
			
			setTimeout(function(){
				window.location.reload()	
			}, 1500);

		});
	}

});

RegistrationPersonalizationModal.shouldShow = function () {
	var hashQuery = new URI().get('fragment').parseQueryString();
	
	if (hashQuery) {
		var showTour = (location.hash === '#tour' || (hashQuery.tour && hashQuery.tour.toInt()));
		var showInvite = (hashQuery.invite && hashQuery.invite.toInt());

		return (showTour || showInvite);
	} else {
		return false;
	}
};

RegistrationPersonalizationModal.whitelist = ['splash', 'search', 'product-details', 'multisale'];

var SecureLoginModal = new Class({
	
	Extends: Modal,
	
	Implements: Screen.SlideShowHelpers,
	
	options: {
		/*
		onLogin: function () {},
		onCloseEnd: function () {},
		*/
		allowRegistration: false,
		defaultToRegistration: false, // Overrides allowRegistration
		dismissOnLogin: false,
		showRememberMe: true,
		loginScreenCopy: {
			title: 'Log in to your Jetsetter account',
			message: 'Enter your email address and password to continue.'
		},
		registrationScreenCopy: {
			title: 'Register with Jetsetter.',
			message: 'Registration is free and only takes a moment. Already have an account? <a href="#login-screen" data-access="public">Click here</a> to log in.'
		},
		setPasswordScreenCopy: {
			title: "Great, let's create an account.",
			message: 'Registration only takes a moment. By proceeding you agree to the <a href="' +
				Jetsetter.HOST + '/terms-of-service" target="_blank">terms and conditions</a>.'
		},
		signupSubscriberScreenCopy: {
			title: "Great, let's create an account.",
			message: 'Registration only takes a moment. By proceeding you agree to the <a href="' +
				Jetsetter.HOST + '/terms-of-service" target="_blank">terms and conditions</a>.'
		},
		passwordResetData: {
			token: '',
			tokenState: '',
			email: ''
		},
		contactInfo: {
			phoneNumber: '+1 877 573 8872',
			phoneWord: '+1-877-JSET-USA',
			email: 'support@jetsetter.com'
		},
		promoId:'',
		referrerGuid: '',
		invitationId: '',
		promo: '',
		promoKey: ''
	},
	
	initialize: function (options) {
		
		// Merging so that id gets overridden correctly
		this.parent(Object.merge({
			id: 'login-modal'
		}, options));
		
		this.rootEl = this.canvas;
		this.isResettingPassword = !!this.options.passwordResetData.token;
		
		this.setupScreens();
		
		// Screen transitions
		this.modalScreens = new SlideShow(this.rootEl, {
			duration: 1200
		}).addEvents({
			show: function (slideData) {
				this.rootEl.setStyle('overflow', 'hidden');
				
				if (slideData.next.element.get('id') == 'forgot-password-screen') {
					this.forgotPasswordScreen.emailFieldEl.set('value', this.loginScreen.emailFieldEl.get('value'));
				} else if (slideData.next.element.get('id') == 'account-locked-screen') {
					this.accountLockedScreen.emailFieldEl.set('value', this.loginScreen.emailFieldEl.get('value'));
				}

			}.bind(this),
			showComplete: function (slideData) {
				this.rootEl.setStyle('overflow', 'visible');
				this.setFocus();
			}.bind(this)
		});
		
		this.rootEl.addEvent('click:relay(a)', function (event, element) {
			var uri = new URI(element.get('href'));
			
			// Don't do anything if the URL isn't on the same page
			if (uri.get('file') === new URI().get('file')) {
				event.preventDefault();
				this.showScreenById(uri.get('fragment'));
			}
		}.bind(this));
		
		
		
		// Focus after the modal has finished animating
		this.addEvent('showEnd', this.setFocus.bind(this));
		
		if(Jetsetter.user.isLocked) {
			this.showScreenById('account-locked-screen', {
				transition: 'none'
			});
		} else if (this.isResettingPassword) {
			this.showScreenById('reset-password-screen', {
				transition: 'none'
			});
		} else if (this.options.defaultToRegistration) {
			this.showScreenById('registration-screen', {
				transition: 'none'
			});
		} else if (this.options.defaultToSetPassword) {
			this.showScreenById('set-password-screen', {
				transition: 'none'
			});
		} else if (this.options.defaultToSubscriberRegistration) {
			this.showScreenById('signup-subscriber-screen', {
				transition: 'none'
			});
		} else {
			this.showScreenById('login-screen', {
				transition: 'none'
			});
		}
	},
	
	onLoginSuccess: function () {
		if (this.options.dismissOnLogin) {
			this.close();
		}
		this.fireEvent('login');
	},
	
	setupScreens: function () {
		
		// Login screen
		var loginScreenEl = this.createLoginScreen().inject(this.rootEl);
		
		this.loginScreen = new LoginScreen(loginScreenEl, this.options).addEvents({
			login: function () {
				this.onLoginSuccess();
			}.bind(this),
			registrationComplete: function () {
				this.onLoginSuccess();
			}.bind(this)

		})
		.setTitle(this.options.loginScreenCopy.title)
		.setMessage(this.options.loginScreenCopy.message);
		
		// Registration screen
		if (this.options.defaultToRegistration || this.options.allowRegistration) {
			// Add link to the login screen
			this.loginScreen.setMessage('Not a member? <a href="#registration-screen" data-access="public">Click here</a> to create an account.');
			
			var registrationScreenEl = this.createRegistrationScreen().inject(this.rootEl);
			var registrationScreen = new RegistrationScreen(registrationScreenEl, this.options).addEvents({
				registeredEmailFound: function (email) {
					this.loginScreen.emailFieldEl.set('value', email);
					this.loginScreen.emailFieldEl.isValid = true;
				}.bind(this),
				registrationComplete: function () {
					this.onLoginSuccess();
				}.bind(this)
			})
			.setTitle(this.options.registrationScreenCopy.title)
			.setMessage(this.options.registrationScreenCopy.message);
		}
		
		// Forgot password screen
		var forgotPasswordScreenEl = this.createForgotPasswordScreen('Forgot Your Password?', 'forgot-password-screen').inject(this.rootEl);
		this.forgotPasswordScreen = new ForgotPasswordScreen(forgotPasswordScreenEl).addEvents({
			loginAttemptLimitReached: function (email) {
				this.forgotPasswordScreen.emailFieldEl.set('value', email);
				this.showScreenById('forgot-password-screen');
			}.bind(this)
		});
		
		
		// Account locked screen
		var accountLockedScreenEl = this.createForgotPasswordScreen('Your Account is Locked', 'account-locked-screen').inject(this.rootEl);
		this.accountLockedScreen = new ForgotPasswordScreen(accountLockedScreenEl).addEvents({
			loginAttemptLimitReached: function (email) {
				this.accountLockedScreen.emailFieldEl.set('value', email);
				this.showScreenById('account-locked-screen');
			}.bind(this)
		});
		
		
		if (this.isResettingPassword) {
			var resetPasswordScreenEl = this.createResetPasswordScreen().inject(this.rootEl);
			this.resetPasswordScreen = new ResetPasswordScreen(resetPasswordScreenEl).addEvents({
				passwordReset: function () {
					this.onLoginSuccess();
				}.bind(this)
			});
		}
		
		var setPasswordScreenEl = this.createSetPasswordScreen().inject(this.rootEl);
		this.setPasswordScreen = new SetPasswordScreen(setPasswordScreenEl).addEvents({
			login: function () {
				this.onLoginSuccess();
			}.bind(this)
		})
		.setTitle(this.options.setPasswordScreenCopy.title)
		.setMessage(this.options.setPasswordScreenCopy.message);

		var signupSubscriberEl = this.createSignupSubscriberScreen().inject(this.rootEl);
		this.signupSubscriberScreen = new SignupSubscriberScreen(signupSubscriberEl).addEvents({
			login: function () {
				this.onLoginSuccess();
			}.bind(this)
		})
		.setTitle(this.options.signupSubscriberScreenCopy.title)
		.setMessage(this.options.signupSubscriberScreenCopy.message);
		
	},
	
	createLoginScreen: function () {
		var html = '\
			<h2></h2>\
			<div class="message"></div>\
			<form method="post" novalidate>\
				<div class="email field checked">\
					<label for="login-email">Email Address</label><input autocapitalize="off" autocorrect="off" class="text" name="email" type="email">\
				</div>\
				<div class="password field">\
					<label for="login-email">Password</label><input class="text" name="password" type="password">\
				</div>\
				<input type="hidden" name="action" value="login">\
				<button class="large-button" id="login-button" type="submit">Log In Now</button>\
				<div class="forgot-password">\
					<a href="#forgot-password-screen" data-access="public">Forgot your password?</a>\
				</div>\
			</form>';
		
		var loginScreenEl = new Element('div', {
			'id': 'login-screen',
			'class': 'modal-screen',
			'data-slideshow': 'transition:stylizedPushRight',
			'html': html
		});
		
		if (this.options.showRememberMe) {
			new Element('div', {
				'class': 'remember-me',
				'html': '<input id="remember-me" name="remember-me" class="checkbox" checked type="checkbox"> <label for="remember-me">Remember me</label>'
			}).inject(loginScreenEl.getElement('.password'), 'after');
		}
		
		return loginScreenEl;
	},
	
	createSetPasswordScreen: function () {
		var html = '\
			<h2></h2>\
			<div class="message"></div>\
			<form method="post" novalidate>\
				<div class="email field checked">\
					<label for="login-email">Email Address</label><input autocapitalize="off" autocorrect="off" class="text" name="email" type="email">\
				</div>\
				<div class="password field">\
					<label for="login-email">Password</label><input class="text" name="password" type="password">\
				</div>\
				<button class="large-button" id="login-button" type="submit">Create Account</button>\
			</form>';
		
		var setPasswordScreenEl = new Element('div', {
			'id': 'set-password-screen',
			'class': 'modal-screen',
			'data-slideshow': 'transition:stylizedPushRight',
			'html': html
		});
		
		return setPasswordScreenEl;
	},

	createSignupSubscriberScreen: function () {
		var html = '\
			<h2></h2>\
			<div class="message"></div>\
			<form method="post" novalidate>\
				<input type="hidden" name="promoId" value="' + this.options.promoId + '" />\
				<input type="hidden" name="referrerGuid" value="' + this.options.referrerGuid + '" />\
				<input type="hidden" name="invitationId" value="' + this.options.invitationId + '" />\
				<input type="hidden" name="promoAlias" value="' + this.options.promo + '" />\
				<input type="hidden" name="promoKey" value="' + this.options.promoKey + '" />\
				<div class="email field checked">\
					<label for="login-email">Email Address</label><input autocapitalize="off" autocorrect="off" class="text" name="email" type="email" placeholder="email@example.com">\
				</div>\
				<button class="large-button" id="login-button" type="submit">Create Account</button>\
			</form>';
		
		var setPasswordScreenEl = new Element('div', {
			'id': 'signup-subscriber-screen',
			'class': 'modal-screen',
			'data-slideshow': 'transition:stylizedPushRight',
			'html': html
		});
		
		return setPasswordScreenEl;
	},
	
	createRegistrationScreen: function () {
		var html = '\
			<h2></h2>\
			<div class="message"></div>\
			<form method="post" novalidate>\
				<div class="email field">\
					<label for="login-email">Email Address</label><input autocapitalize="off" autocorrect="off" class="text" name="emailAddress" type="email">\
				</div>\
				<div class="password field">\
					<label for="login-email">Password <span>(5 characters minimum)</span></label><input class="text" name="password" type="password">\
				</div>\
				<div class="tos">\
					<input class="checkbox" id="tos" name="tos" type="checkbox">\
					<label for="tos">I agree to the <a class="tos-link" title="See terms of service in a new window" tabindex="-1" href="' +
						Jetsetter.HOST + '/terms-of-service">terms of service</a></label>\
				</div>\
				<input type="hidden" name="action" value="register">\
				<button class="large-button" id="register-button" type="submit">Create Account</button>\
			</form>';
		
		return new Element('div', {
			'id': 'registration-screen',
			'class': 'modal-screen',
			'data-slideshow': 'transition:stylizedPushLeft',
			'html': html
		});
	},
	
	createForgotPasswordScreen: function (title, id) {
		var html = '\
			<h2>' + title + '</h3>\
			<div class="message">\
				<p>Please enter your email address below and we’ll send you a link to reset your password.</p>\
			</div>\
			<form method="post" novalidate>\
				<div class="field">\
					<label for="forgot-password-email">Email Address</label>\
					<input class="email text" id="forgot-password-email" autocorrect="off" autocapitalize="off" name="email" type="email">\
				</div>\
				<input name="action" value="request-password-reset" type="hidden">\
				<button class="large-button" type="submit">Reset My Password</button>\
			</form>\
			<div class="back">\
				<a href="#login-screen" data-access="public"><span class="arrow">←</span> Back</a>\
			</div>' + this.getSupportInfoHtml();
		
		return new Element('div', {
			'id': id,
			'class': 'modal-screen',
			'data-slideshow': 'transition:stylizedPushLeft',
			'html': html
		});
	},
	
	createResetPasswordScreen: function () {
		var htmlPart = '',
			resetData = this.options.passwordResetData;
		if (resetData.tokenState == 'expired') {
			htmlPart = '\
				<div class="message">\
					<p>Sorry — this password reset link has expired.</p>\
					<p>We’ve sent a new link to <span class="email">' + resetData.email + '</span>, so please check your inbox and try again.</p>\
				</div>';
			
		} else if (resetData.tokenState == 'invalid') {
			htmlPart = '<p>Sorry — this password reset link is not valid.</p>';
		} else {
			htmlPart = '\
				<p>Please enter a new password. It must be at least 5 characters long.</p>\
				<form method="post" novalidate>\
					<div class="field">\
						<input type="password" class="text" name="new-password" placeholder="New password">\
					</div>\
					<div class="field">\
						<input type="password" class="text" placeholder="Confirm new password">\
					</div>\
					<input type="hidden" name="reset-token" value="' + resetData.token + '">\
					<input type="hidden" name="action" value="reset-password">\
					<button class="large-button" type="submit">Reset &amp; Sign In</button>\
				</form>';
		}
		
		var html = '\
			<h2>Reset Your Password</h3>' + htmlPart + this.getSupportInfoHtml();
		
		return new Element('div', {
			'id': 'reset-password-screen',
			'class': 'modal-screen',
			'data-slideshow': 'transition:none',
			'html': html
		});
	},
	
	getSupportInfoHtml: function () {
		var contactInfo = this.options.contactInfo;

		//TODO: This is a stop gap until we unify all PHP into Zend.
		//		Once everything is unified we will populate this data into the Jetsetter object
		if(Jetsetter.ENTITY_ID === 3){
			contactInfo.phoneNumber = '0800 066 4722';
			contactInfo.phoneWord = '0800 066 4722';
		}

		return '\
			<div class="hcard">\
				<div class="hcard">\
				<h3>Still having trouble?</h3>\
				<p>\
					Call <abbr class="tel" title="' + contactInfo.phoneNumber + '">' + contactInfo.phoneWord + '</abbr> or email\
					<a class="email" href="mailto:' + contactInfo.email + '" title="Contact member services via email" data-access="public">' + contactInfo.email + '</a>\
				</p>\
			</div>';
	}
	
});

var AuthModal = new Class({
	
	Extends: Modal,

	regOptions: {
		promoId: '',
		promoKey: '',
		promo: '',
		referrerGuid: '',
		invitationId: ''
	},

	options: {
		/*
		onLogin: function () {},
		onCloseEnd: function () {},
		*/
		dismissOnLogin: false
	},

	initialize: function(options){
		options = options || {};

		// Set registration options
		this.regOptions = Object.merge(this.regOptions, {
			promoId: options.promoId,
			promoKey: options.promoKey,
			promo: options.promo,
			referrerGuid: options.referrerGuid,
			invitationId: options.invitationId
		});

		this.parent(Object.merge(options, {
			id: 'auth-modal',
			instantShow: false
		}));

        this.selectStartScreen();

		this.buildHtml();

		this.headerEl = this.canvas.getElement('.auth-header');
		this.screenContainerEl = this.canvas.getElement('.auth-screen-container');
		this.footerEl = this.canvas.getElement('.auth-footer');

		this.buildStartScreen(this.currentScreen);


		// Screen switching
		this.canvas.addEvent('click:relay(.switch a)', function(e, elem){
			e.stop();

			this.switchToScreen(elem.get('data-screen-id'));
		}.bind(this));

		// Form submissions
		this.canvas.addEvent('submit:relay(form)', function(e, elem) {
	        e.stop();
	        
	        this.emailField.validateField();

	        if(this.passwordField){
	        	this.passwordField.validateField();
	        	if(this.passwordField.state !== 'valid'){
	        		return false;
	        	}
	        }

	        if(this.emailField.state === 'valid'){
	        	switch(this.currentScreen){
	        		case 'PublicReg':
	        			this.subscriberReg(elem);
	        			break;
	        		case 'SecureLogin':
	        			this.secureLogin(elem);
	        			break;
                    case 'PostBooking':
	        		case 'CreatePassword':
	        			this.createPassword(elem);
	        			break;
	        		case 'AccountLocked':
	        		case 'ForgotPassword':
	        			this.forgotPassword(elem);
	        			break;
	        	}
	        }
	    }.bind(this));

	    // Facebook reg
	    this.canvas.addEvent('click:relay(.fb-reg-btn)', function(e, elem){
	    	e.stop();

	    	this.facebookReg();
	    }.bind(this));

	    this.addEvent('screenChanged', function(id){
	    	this.currentScreen = id;

	    	this.emailField = new InviteEmailField(this.canvas.getElement('#auth-modal-email'), {
	    		'tooltipType': 'top',
	    		'existingMemberCheck': false,
	    		'setPlaceholder': Jetsetter.user.email ? false : true
	    	});

	    	var passwordEl = this.canvas.getElement('#auth-modal-password');

	    	if(passwordEl){
	    		this.passwordField = new ValidateableField(passwordEl, {
	    			setPlaceholder: false,
	    			validateWith: function(value){
	    				if(value.length === 0){
	    					return 'Password cannot be blank.'
	    				} else if(value.length < 5) {
	    					return 'Password must be at least 5 characters long.'
	    				} else {
	    					return true;
	    				}
	    			}
	    		});
	    	} else {
	    		this.passwordField = null;
	    	}

	    	// Tracking
	    	this._trackOpen(this.currentScreen);
	    }.bind(this));

	    this.addEvent('closeEnd', function(){
	    	if(this.options.onCloseEnd){
	    		this.options.onCloseEnd();
	    	}
	    }.bind(this));

		var pageName = this.currentScreen || this.options.forceScreen;
        if (pageName == 'PostBooking') {
            pageName = 'CreatePassword';
        }
		omniture.pageName = pageName;
		omniture.channel = pageName;
		omniture.prop1 = null;
		omniture.prop5 = null;
		omniture.prop6 = null;
		omniture.prop11 = null;
		omniture.events = '';
		omniture.t();
	},

    selectStartScreen: function() {
        if (this.options.forceScreen) {
            this.currentScreen = this.options.forceScreen;
            return;
        }

        if(Jetsetter.user.isLocked) {
            this.currentScreen = 'AccountLocked';
            return;
        }

        if(!Jetsetter.user.hasIdentity()){
            this.currentScreen = 'PublicReg';
            return;
        }

        if (Jetsetter.user.isSubscriber){
            this.currentScreen = 'CreatePassword';
            return;
        }

        this.currentScreen = 'SecureLogin';
    },

	buildHtml: function(){
		var source = '	{{#if dismissable}}<a class="close-modal close-btn">&#215;</a>{{/if}}\
						<div class="auth-header"></div>\
						<div class="auth-screen-container"></div>\
						<div class="auth-footer"></div>',
			template = Handlebars.compile(source);

		this.canvas.set('html', template({dismissable: this.dismissable}));
	},

	switchToScreen: function(id){
		this.headerEl.getElement('.auth-header-type').fade('out').get('tween').chain(function(){
			var newHeader = Elements.from(this.templates[id].header)[0].fade('hide');

			this.headerEl.empty();
			this.headerEl.grab(newHeader);

			newHeader.fade('in');
		}.bind(this));
		this.screenContainerEl.getElement('.auth-screen').fade('out').get('tween').chain(function(){
			var newContent = Elements.from(this.templates[id].content)[0].fade('hide');

			this.screenContainerEl.empty();
			this.screenContainerEl.grab(newContent);

			this.fireEvent('screenChanged', id);

			newContent.fade('in');
		}.bind(this));
		this.footerEl.getElement('.auth-footer-type').fade('out').get('tween').chain(function(){
			var newFooter = Elements.from(this.templates[id].footer)[0].fade('hide');

			this.footerEl.empty();
			this.footerEl.grab(newFooter);

			newFooter.fade('in');
		}.bind(this));
	},

	buildStartScreen: function(id){
		this.headerEl.set('html', this.templates[id].header);
		this.screenContainerEl.set('html', this.templates[id].content);
        this.footerEl.set('html', this.templates[id].footer);

        if (id == 'PostBooking') {
            this.content.addClass('extra-footer');
        }

		setTimeout(function(){
			this.fireEvent('screenChanged', id);
		}.bind(this), 250);
	},

	secureLogin: function(formEl){
		var formAndRegOptions = Object.merge(this.regOptions, formEl.toQueryObject());

		Jetsetter.Auth.authenticate(Object.merge(formAndRegOptions, {
			'type': 'email',
			onSuccess: function(json){
				this._onSuccess(json);
				this._trackSuccess(this.currentScreen, json.data.promoAlias, false);
			}.bind(this),
			onFailure: function(json){
				this._onFailure(json);
				this._trackFailure(this.currentScreen);
			}.bind(this)
		}));
	},

	createPassword: function(formEl){
		var formAndRegOptions = Object.merge(this.regOptions, formEl.toQueryObject());

		Jetsetter.Auth.authenticate(Object.merge(formAndRegOptions, {
			'type': 'email',
			onSuccess: function(json){
				this._onSuccess(json);
				this._trackSuccess(this.currentScreen, json.data.promoAlias, false);
			}.bind(this),
			onFailure: function(json){
				this._onFailure(json);
				this._trackFailure(this.currentScreen);
			}.bind(this)
		}));
	},

	subscriberReg: function(formEl){
		var formAndRegOptions = Object.merge(this.regOptions, formEl.toQueryObject());

		Jetsetter.Auth.authenticate(Object.merge(formAndRegOptions, {
			'type': 'email',
			onSuccess: function(json){
				this._onSuccess(json);
				this._trackSuccess(this.currentScreen, json.data.promoAlias, false);
			}.bind(this),
			onFailure: function(json){
				this._onFailure(json);
				this._trackFailure(this.currentScreen);
			}.bind(this)
		}));
	},

	facebookReg: function(){
		Jetsetter.Auth.authenticate(Object.merge(this.regOptions, {
			type: 'facebook',
			onSuccess: function(json){
				this._onSuccess(json);
				this._trackSuccess(this.currentScreen, json.data.promoAlias, true);
			}.bind(this),
			onFailure: function(json){
				this._onFailure(json);
				this._trackFailure(this.currentScreen);
			}.bind(this)
		}));
	},

	forgotPassword: function(formEl){
        new UserService().addUserPasswordReset({
            emailAddress: $('auth-modal-email').get('value'),
            onSuccess: function() {
				formEl.fade('out').get('tween').chain(function(){
					var message = Elements.from('<p id="reset-conf" class="tenor">An email with a link to reset your password has been sent to: <br/><br/> <b>'+ this.emailField.emailEl.get('value') +'</b></p>')[0].fade('hide');

					formEl.getParent().grab(message);

					message.fade('in');

					this._trackSuccess(this.currentScreen);
				}.bind(this));
            }.bind(this),
            onFailure: function(errorCode, message) {
				switch (errorCode) {
					// Invalid email address
					case 128:
						this.emailField.isValid = false;
						this.emailField.showTooltip('Please enter a valid email address');
						break;
					
					// Not a Jetsetter member
					case 401:
						this.emailField.isValid = false;
						this.emailField.showTooltip('Unrecognized email address');
						break;
					
					case 420:
						this.emailField.showTooltip('Too many attempts. Try again later.');
						break;
				}

				this._trackFailure(this.currentScreen);
            }.bind(this)
        });
	},

	_onSuccess: function(json){
		// First time reg -- redirect to tour
		if(json.data.promoAlias){
			window.location.hash = "#" + 'tour';
		}

		this.fireEvent('login', json);

		// Dismiss on login if set
		if(this.options.dismissOnLogin){
			this.close();
		}

        if(this.options.onLogin){
            this.options.onLogin(json);
        }
	},

	_onFailure: function(json){
		this.fireEvent('login-fail', json);

		if(this.emailField){
			this.emailField.showTooltip(json.error.message)
		}

		if(this.options.onFailure){
			this.options.onFailure(json);
		}
	},

	_trackOpen: function(id){
		switch(id){
			case 'PublicReg':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'PublicRegOpen']);
				break;
			case 'CreatePassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'CreatePasswordOpen']);
				break;
			case 'SecureLogin':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'SecureLoginOpen']);
				break;
			case 'ForgotPassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'ForgotPasswordOpen']);
				break;
			case 'AccountLocked':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'AccountLockedOpen']);
				break;
		}
	},

	_trackSuccess: function(id, registered, facebook){
		switch(id){
			case 'PublicReg':
				var omniString = registered ? 'auth-modal-publicreg-register' : 'auth-modal-publicreg-login',
					gaString = registered ? 'PublicRegRegister' : 'PublicRegLogin';

				if(facebook){
					omniString += 'facebook';
					gaString += 'Facebook';
				} else {
					omniString += 'email';
					gaString += 'Email'
				}

				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', gaString]);
				break;
			case 'CreatePassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'CreatePasswordLogin']);
				break;
			case 'SecureLogin':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'SecureLoginLogin']);
				break;
			case 'ForgotPassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'ForgotPasswordSent']);
				break;
			case 'AccountLocked':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'AccountLockedSent']);
				break;
		}
	},

	_trackFailure: function(id){
		switch(id){
			case 'PublicReg':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'PublicRegRegisterFail']);
				break;
			case 'CreatePassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'CreatePasswordFail']);
				break;
			case 'SecureLogin':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'SecureLoginFail']);
				break;
			case 'ForgotPassword':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'ForgotPasswordFail']);
				break;
			case 'AccountLocked':
				_gaq.push(['_trackEvent', 'Modal', 'AuthModal', 'AccountLockedFail']);
				break;
		}
	},

	templates: {
		'CreatePassword': {
			header: '	<div class="create-header auth-header-type">\
							<h1 class="tenor main-title">Great, let&#39;s create a password.</h1>\
							<h3 class="tenor main-subtitle">Registration only takes a moment.</h3>\
						</div>',
			content: '	<div class="auth-screen">\
							<form id="secure-login-register" class="center-form">\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-email">Email Address</label>\
									<input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" value="'+ Jetsetter.user.email +'" />\
								</div>\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-password">Password</label>\
									<input type="password" id="auth-modal-password" class="password" name="password" />\
								</div>\
								<input id="auth-continue" type="submit" class="orange-btn tenor" value="Create Account" />\
							</form>\
						</div>',
            footer:
                '<div class="default-footer auth-footer-type clearfix">\
                    <div class="switch">\
                        <div class="person"></div>\
                        <p class="tenor">Already registered? <a data-screen-id="SecureLogin">Login</a></p>\
                    </div>\
                    <p class="tenor terms">By signing up you agree to all Jetsetter <a href="/terms-of-service" target="_blank">terms of membership</a>.</p>\
                </div>'
		},

		'SecureLogin': {
			header: '	<div class="create-header auth-header-type">\
							<h1 class="tenor main-title">Login with your account.</h1>\
						</div>',
			content: '	<div class="auth-screen">\
							<form id="secure-login-register" class="center-form">\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-email">Email Address</label>\
									<input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" value="'+ Jetsetter.user.email +'" />\
								</div>\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-password">Password</label>\
									<input type="password" id="auth-modal-password" class="password" name="password" />\
								</div>\
								<input id="auth-continue" type="submit" class="orange-btn tenor" value="Log In" />\
							</form>\
						</div>',
			footer: '	<div class="default-footer auth-footer-type clearfix">\
							<div class="switch clearfix">\
								<div class="person"></div>\
								<p class="tenor">Forgot password? <a data-screen-id="ForgotPassword">Click here</a></p>\
							</div>\
						</div>'
		},

		'PublicReg': {
			header: '	<div class="create-header auth-header-type">\
							<h1 class="logo"></h1>\
							<h3 class="tenor main-subtitle">The world’s greatest vacations. Members-only prices.</h3>\
						</div>',
			content: '	<div class="auth-screen public-reg clearfix">\
							<div class="email-reg">\
								<p class="tenor form-header">Get access to the world’s greatest <br/> vacations. Membership is free.</p>\
								<form id="email-reg-form">\
									<input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" />\
									<input id="auth-continue" type="submit" class="orange-btn tenor" value="Enter" />\
								</form>\
							</div>\
							<div class="fb-reg">\
								<p class="tenor form-header">Connect with Facebook for a more <br/> personalized Jetsetter experience.</p>\
								<a id="fb-reg-btn" class="fb-reg-btn"></a>\
							</div>\
						</div>',
			footer: '	<div class="default-footer auth-footer-type clearfix">\
							<div class="switch">\
								<div class="person"></div>\
								<p class="tenor">Already registered? <a data-screen-id="SecureLogin">Login</a></p>\
							</div>\
							<p class="tenor terms">By signing up you agree to all Jetsetter <a href="/terms-of-service" target="_blank">terms of membership</a>.</p>\
						</div>'
		},

		'ForgotPassword': {
			header: '	<div class="create-header auth-header-type">\
							<h1 class="tenor main-title">Forgot Your Password?</h1>\
							<h3 class="tenor main-subtitle">Please enter your email address below and we’ll send you a link to reset your password.</h3>\
						</div>',
			content: '	<div class="auth-screen">\
							<form id="forgot-password" class="center-form">\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-email">Email Address</label>\
									<input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" />\
								</div>\
								<input name="action" value="request-password-reset" type="hidden">\
								<input id="auth-continue" type="submit" class="orange-btn tenor" value="Send Reset Email" />\
							</form>\
						</div>',
			footer: '	<div class="default-footer auth-footer-type clearfix">\
							<div class="switch clearfix">\
								<div class="person"></div>\
								<p class="tenor">Want to log in instead? <a data-screen-id="SecureLogin">Click here</a></p>\
							</div>\
						</div>'
		},

		'AccountLocked': {
			header: '	<div class="create-header auth-header-type">\
							<h1 class="tenor main-title">Please Reset Your Password</h1>\
							<h3 class="tenor main-subtitle">You created your SniqueAway account with Facebook.<br/>For security purposes, we ask that you reset your password.</h3>\
						</div>',
			content: '	<div class="auth-screen">\
							<form id="forgot-password" class="center-form">\
								<div class="input-wrap clearfix">\
									<label class="tenor" for="auth-modal-email">Email Address</label>\
									<input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" />\
								</div>\
								<input name="action" value="request-password-reset" type="hidden">\
								<input id="auth-continue" type="submit" class="orange-btn tenor" value="Send Reset Email" />\
							</form>\
						</div>',
			footer: '	<div class="default-footer auth-footer-type clearfix">\
						</div>'
		},

        'PostBooking': {
            header:
                '<div class="create-header auth-header-type">\
                    <h1 class="tenor main-title">Book Faster Next Time!</h1>\
                    <h3 class="tenor main-subtitle">Create Your Account</h3>\
                </div>',
            content:
                '<div class="auth-screen">\
                    <form id="secure-login-register" class="center-form">\
                        <div class="input-wrap clearfix">\
                            <label class="tenor" for="auth-modal-email">Email Address</label>\
                            <input type="text" id="auth-modal-email" class="email" name="email" placeholder="example@address.com" value="'+ Jetsetter.user.email +'" />\
                        </div>\
                        <div class="input-wrap clearfix">\
                             <label class="tenor" for="auth-modal-password">Password</label>\
                             <input type="password" id="auth-modal-password" class="password" name="password" />\
                        </div>\
                        <input id="auth-continue" type="submit" class="orange-btn tenor" value="Create Account" />\
                    </form>\
                </div>',
            footer:
                '<div class="tall-footer auth-footer-type tenor clearfix">\
                        <div class="invitation">\
                            By Creating an Account You Can:\
                        </div>\
                        <div class="reasons">\
                            <ul>\
                                <li>Access your current and past reservations</li>\
                                <li>Invite friends and earn $25 when they book</li>\
                                <li>Keep a wish list of your favorite places on Jetsetter</li>\
                            </ul>\
                        </div>\
                    </div>'

        }
	}
});
var LoginModalScreen = new Class({
	
	Implements: Events,

	initialize: function(screensEl, altClass){
		this.buildSource();
		this.buildHtml();

		this.container = new Element('div', {
			'class': 'login-screen clearfix ' + altClass,
			'html': this.html
		}).inject(screensEl);
	},

	buildHtml: function(){
		this.template = Handlebars.compile(this.source);
		this.html = this.template(this.templateData);
	},

	buildSource: function(){
		this.source = '';
	}
})
var SkinnyLoginScreen = new Class({
	
	Extends: LoginModalScreen,

	initialize: function(screensEl){
		this.buildTemplateData();
		this.parent(screensEl, 'skinny-login');

		/* Facebook Elems */
		this.parentModal = this.container.getParent('.content');
		this.fbWrap = this.container.getElement('.fb-login');
		this.fbImageEl = this.fbWrap.getElement('img');
		this.fbCallout = this.fbWrap.getElement('p.fb-callout');
		this.fbCta = this.fbWrap.getElement('.facebook-cta');
		/* Email Elems */
		this.emailWrap = this.container.getElement('.email-login');
		this.emailForm = this.emailWrap.getElement('form');
		this.emailCta = this.emailWrap.getElement('.cta-button');
		this.emailEl = this.emailWrap.getElement('input.email');
		this.emailField = new InviteEmailField(this.emailEl, {
			'tooltipType': 'top',
			'existingMemberCheck': false
		});

		this.parentModal.fade('0.5');

		this.slideshow = new SlideShow(this.container.getElement('.wrap'), {
			transition: 'fadeThroughBackground',
			onShow: function(slideData){
				switch(slideData.next.index){
					case 0:
						this.switchAction.set('text', 'Continue with email instead');
						break;
					case 1:
						this.switchAction.set('text', 'Continue with Facebook');
						break;
				}
			}.bind(this)
		});
		this.switchAction = this.container.getElement('.switch a');

		this.switchAction.addEvent('click', function(){
			this.slideshow.show('next')
		}.bind(this));

		window.addEvent('fbReady', function(){
			this.setFbState();
			this.parentModal.fade('in');
		}.bind(this));

		setTimeout(function(){
			if(!window.FB){
				this.slideshow.show('next');
				this.parentModal.fade('in');
			}
		}.bind(this),5000)

		this.emailForm.addEvent('submit', function(e){
			e.preventDefault();

			this.validateEmail();

			return false;
		}.bind(this));

		this.addEvents({
			'fbLogin': function(){
				this.fbCta.set('disabled', true);
				this.fbCta.setStyle('opacity', 0.5);
			}.bind(this),

			'emailLogin': function(){
				this.emailCta.set('disabled', true);
				this.emailCta.setStyle('opacity', 0.5);
			}.bind(this)
		});


	},

	buildSource: function(){
		this.source = '<div class="wrap">\
							<div class="fb-login">\
								<div class="profile-wrap">\
									<div class="mask"></div>\
									<div class="image"><img src="" /></div>\
								</div>\
								<p class="fb-callout">Hi there!</p>\
								<h3>Welcome to Jetsetter.</h3>\
								<a class="facebook-cta"></a>\
								<p class="personalized">Connect with Facebook for a more personalized Jetsetter experience.</p>\
							</div>\
							<div class="email-login">\
								<form>\
									<p>Get access to the world’s greatest vacations. Membership is free.</p>\
									<div class="input-wrap">\
										<input type="text" name="emailAddress" class="email" placeholder="example@address.com" />\
									</div>\
									<input type="submit" value="Enter" class="cta-button" />\
								</form>\
							</div>\
					   </div>\
					   <div class="switch">\
					   		<a>Continue with email instead</a>\
					   </div>';
	},

	buildTemplateData: function(){
		this.templateData = {};
	},

	setFbState: function(){
		FB.getLoginStatus(function (response) {
			if (response.authResponse) {
				this.setFbUser();
				this.fbCta.addEvent('click', function(){
					this.fireEvent('fbLogin');
				}.bind(this));
			} else {
				this.fbCta.addEvent('click', function(){
					FB.login(function (response) {
						if (response.authResponse) {
							this.fireEvent('fbLogin');
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Success']);
						} else {
							_gaq.push(['_trackEvent', 'Account', 'Facebook-Login', 'Decline']);
						}
					}.bind(this), {
						'scope': 'email,publish_stream,offline_access'
					});
				}.bind(this));
			}
		}.bind(this));
	},

	setFbUser: function(){
		this.fbWrap.addClass('fb-login-connected');
		FB.api('/me', function(user){
			this.fbImageEl.set('src', 'http://graph.facebook.com/' + user.id + '/picture?type=large');
			this.fbCallout.set('text', 'Hi there, ' + user['first_name'] + '!');
			this.fbWrap.removeClass('not-connected');
		}.bind(this));

	},

	validateEmail: function(){
		this.emailField.validateField();
		if (this.emailField.get('state') !== 'valid') {
			this.emailField.updateDisplayState();
			return false;
		}

		var data = this.emailForm.toQueryObject();
		
		if(data.targetUrl){
			data['return'] = data.targetUrl;
		}

		this.fireEvent('emailLogin', [data, function(json){
			if(json.success){
				window.location = data['return'] && json.data.promoAlias ? data['return'] : '/sales';
			} else {
				this.emailCta.set('disabled', false);
				this.emailCta.setStyle('opacity', 1);
			}
		}.bind(this)]);
	}

});
window.__fp_domain="jetsetter.com";window.fpAPI||(window.fpAPI={},function(){var a,b;a=document.createElement("script"); a.type="text/javascript";a.async=!0;a.src=("https:"===document.location.protocol?"https:":"http:")+"//s3.amazonaws.com/freshplum/api.js";b=document.getElementsByTagName("script")[0];b.parentNode.insertBefore(a,b);a=["log","set_attr","options","coupons_setup"];for(b=0;b<a.length;b++)fpAPI[a[b]]=function(a){return function(){fpAPI.pre||(fpAPI.pre=[]);fpAPI.pre.push([a,arguments])}}(a[b])}());
var FreshplumTracker = new Class({

	Implements: Events,

	initialize: function() {
		this.fpApi = window.fpAPI;
		this.tracker = new Tracker();
	},

	log: function(data) {
		this.fpApi.log(data);

		var currUri = new URI(window.location);
		var refUri = new URI(document.referrer);

		var oImg=document.createElement("img");
		oImg.setAttribute('src', '//webtracker.jetsetter.com/__utm.gif?freshplumQuery=' + encodeURIComponent(JSON.stringify(data)) + '&t=' + new Date().getTime());
		oImg.setAttribute('alt', '');
		oImg.setAttribute('height', '1px');
		oImg.setAttribute('width', '1px');
		document.body.appendChild(oImg);
	}
});
var LoginModal = new Class({
	
	Extends: Modal,

	initialize: function(options){
		this.parent(Object.merge({
			id: 'new-login-modal',
			dismissable: true,
			'class': 'skinny'
		}, options || {}));

		if($('login')){
			$('modal').hide();	
		}

		this.buildHtml();

		this.addEvent('showEnd', function(){
			var skinnyLogin = new SkinnyLoginScreen(this.canvas.getElement('.screen-container'));

			skinnyLogin.addEvent('fbLogin', function(){
				this.fbLogin();
			}.bind(this));

			skinnyLogin.addEvent('emailLogin', function(formData, callback){
				this.emailLogin(formData, callback);
			}.bind(this));
		}.bind(this));
	},

	buildHtml: function(){
		var data = {},
			source =   '<div class="header">\
							<h2>The worlds greatest vacations. Members-only prices.</h2>\
						</div>\
						<div class="screen-container"></div>',
			template = Handlebars.compile(source);

		this.canvas.set('html', template(data));
	},

	fbLogin: function(){
		Jetsetter.Auth.authenticate({
			type: 'facebook',
			onSuccess: function(json){
				
			}.bind(this),
			onFailure: function(json){
				this.fireEvent('loginFail', json);
			}.bind(this)
		});
	},

	emailLogin: function(formData, callback){
		Jetsetter.Auth.authenticate(Object.merge(formData, {
			type: 'email',
			onSuccess: function(json){
				callback(json);
			}.bind(this),
			onFailure: function(json){
				
			}.bind(this)
		}));
	}
});


/**
*	@class CalendarRows
*	@author Dominik Hofmann	
*	Generates a multi-dimensional array of dates for a given month and year — useful for rendering dates in a Calendar.
*	Also contains some other utility functions to aid in generating calendars.
*/

var CalendarRows = new Class({
	
	initialize: function () {
		
	},
	
	getRows: function (monthIn, yearIn, rows) {
		
		var rows = rows || 6;
		var daysInRow = rows * 7;
		
		var beginning = new Date(yearIn, monthIn, 1); // first day of active month
		var offset = (beginning.getDay() + 7) % 7; // how far from Sunday is first day of month?
		var nextMonthFirstDay = new Date(yearIn, monthIn + 1, 0).getDate();
		var lastMonthLastDay = new Date(yearIn, monthIn, 0).getDate();
		
		var row;
		var output = [];
		
		for (var i = 0; i < daysInRow; i++) {
			
			if (i % 7 == 0) {
				row = [];
				output.push(row);
			}
			
			var day = i + 1 - offset;
			var month = monthIn; // annoying date weirdness, where 0 = january
			var year = yearIn;
			var valid = true; // is the day part of the current month?
			
			if (day < 1) {
				day += lastMonthLastDay;
				valid = false;
				if (month > 0) {
					month--;
				} else {
					month = 11;
					year--;
				}
			} else if (day > nextMonthFirstDay) {
				valid = false;
				day -= nextMonthFirstDay;
				if (month < 11) {
					month++;
				} else {
					month = 0;
					year++;
				}
			}
			
			row.push({day: day, month: month, year: year, valid: valid});

		}
		
		return output;
		
	},
	
	getPrependingRow: function (monthIn, yearIn, index) {
		
		var beginning = new Date(yearIn, monthIn, 1); // first day of active month
		var offset = (beginning.getDay() + 7) % 7; // how far from Sunday is first day of month?

		var count = 7;
		var row = [];
		
		var indexOffset = index * 86400000 * 7;
		
		while (count > 0) {
			
			var d = new Date(beginning - 86400000 * (offset + count) - indexOffset);
			
			var day = d.getDate();
			var month = d.getMonth();
			var year = d.getFullYear();
			var valid = (month == monthIn);
			
			row.push({day: day, month: month, year: year, valid: valid});
			
			--count;
			
		}

		return row;
	},
	
	getAppendingRow: function (monthIn, yearIn, index) {
		
		var rows = 6 + 1 + index;
		var daysInRow = rows * 7;
		
		var beginning = new Date(yearIn, monthIn, 1); // first day of active month
		var offset = (beginning.getDay() + 7) % 7; // how far from Sunday is first day of month?
		
		beginning = new Date(beginning - (86400000 * offset) + ((42 + index * 7) * 86400000));

		var row = [];
		
		for (var i = 0; i < 7; i++) {

			var d = new Date(Number(beginning) + 86400000 * i);
			
			var day = d.getDate();
			var month = d.getMonth();
			var year = d.getFullYear();
			var valid = (month == monthIn);
			
			row.push({day: day, month: month, year: year, valid: valid});
			
		}
		
		return row;

		
	},
	
	getSurroundingMonths: function (month) {
		
		var prev = month - 1;
		var next = month + 1;
		
		if (prev < 0) prev = 11;
		if (next > 11) next = 0;
		
		return {previous: prev, next: next};
		
	},
	
	getMonthName: function (index) {
	
		var months = ["January", "February", "March", "April", "May", "June",
		"July", "August", "September", "October", "November", "December"];
		
		return months[index];
	
	}
	

});
var UpcomingCalendar = new Class({

	initialize: function () {
		
		$$('.icon-cal').each(function(elem){
			new CalTooltip(elem);
		});

		$$('.icon-email').each(function(elem){
			new EmailTooltip(elem);
		});

	}
});

var FbConnectWidget = new Class({
	
	Implements: [Events, Options],
	
	options: {
		copy: ''
	},
	
	initialize: function (attachTo, options) {
		this.attachTo = attachTo;
		this.setOptions(options);
		
		// Insert and parse fbml only if this module is initialized
		var bodyEl = attachTo.getElement('.fb-widget').set('html', '<fb:login-button show-faces="true" width="200" max-rows="2"></fb:login-button>');
		FB.XFBML.parse(bodyEl);
		
		attachTo.getElement('p').set('html', this.options.copy);
		
		FB.Event.subscribe('auth.login', function (response) {
			if (response.session) {
				this.track('connected');
				this.onConnect();
			}
		}.bind(this));
		
		this.bodyId = $(document.body).get('id');
	},
	
	show: function () {
		this.attachTo.show();
		return this;
	},
	
	hide: function () {
		this.attachTo.hide();
	},
	
	onConnect: function () {
		this.fireEvent('connect');
	},
	
	track: function (str) {
		_gaq.push(['_trackEvent', 'FBConnect', this.bodyId, str]);
	}
	
});

var FbUtils = new Class({
	
	createFriendEl: function (friend) {
		var listItemEl = new Element('li', {
			'class': 'friend'
		});
		
		if (this.options.disableConnectedMembers && this.connectedFriendIds.contains(friend.id)) {
			new Element('span', {
				'class': 'message',
				'text': 'Jetsetter member'
			}).inject(listItemEl.addClass('disabled'));
		} else if (friend.isInvited) {
			new Element('span', {
				'class': 'message',
				'text': 'Already invited'
			}).inject(listItemEl.addClass('disabled'));
		} else {
			new Element('input', {
				'class': 'invite',
				'type': 'checkbox',
				'id': 'friend' + friend.id,
				'data-fbid': friend.id
			}).inject(listItemEl);
		}
		
		listItemEl.adopt([
			new Element('label', {
				'class': 'thumb',
				'for': 'friend' + friend.id,
				'title': friend.name
			}).grab(new Element('img', {
				'class': 'thumb',
				'width': 40,
				'height': 40,
				'src': 'http://static.ak.fbcdn.net/rsrc.php/v1/yo/r/UlIqmHJn-SK.gif',
				'title': friend.name
			}))
		]).store('data', friend);
		
		// Swap out placeholder thumbnail with the actual image after it finishes loading
		var userImageEl = new Element('img', {
			'class': 'thumb',
			'width': 40,
			'height': 40,
			'src': 'http://graph.facebook.com/' + friend.id + '/picture'
		});
		userImageEl.onload = function () {
			userImageEl.replaces(listItemEl.getElement('img'));
		};
		
		return listItemEl;
	}
	
});

var FbFriendAutocomplete = new Class({
	
	Extends: Autocomplete,
	
	Implements: FbUtils,
	
	options: {
		disableConnectedMembers: false,
		startSearchingAtCharNum: 1
	},
	
	initialize: function (textFieldEl, friends, connectedFriendIds, options) {
		this.parent(textFieldEl, options);
		this.friends = friends;
		this.connectedFriendIds = connectedFriendIds;
	},
	
	getResults: function () {
		if (!this.parent()) {
			return false;
		}
		
		var query = this.getSearchQuery().toLowerCase();
		var friends = [];
		
		this.friends.some(function (friend) {
			if (friends.length < this.options.numOfResults) {
				if (friend.name.toLowerCase().contains(query)) {
					friends.push(friend);
				}
				return false;
			} else {
				return true;
			}
		}, this);
		
		this.processData(friends, false);
	},
	
	createResultEl: function (friend) {
		return this.createFriendEl(friend);
	},
	
	selectResult: function (element) {
		this.fireEvent('selectionMade', element);
		this.textFieldEl.focus();
	}
	
});

var FbFriendsWidget = new Class({
	
	Implements: [Options, FbUtils],
	
	options: {
		'wallPostContent': {
			'name': '',
			'description': '',
			'inviteUrl': '',
			'imageUrl': ''
		},
		'invitationAsyncParams': {},
		'disableConnectedMembers': false
	},
	
	initialize: function (attachTo, options) {
		this.attachTo = attachTo;
		this.setOptions(options);
		
		this.listEl = attachTo.getElement('.random-fb-friends').addEvent('click:relay(.friend)', function (event, element) {
			//this.sendInvite(element);
		}.bind(this));


		//get our header/text elems
		var text = this.attachTo.getElement('.bd h4');
		var sendAmount = Jetsetter.INVITER_CREDIT.formatCurrency();
		//set the correct header/text
		if($('product-details')){
			text.set('html', 'Tell your Facebook friends about <strong>'+ Jetsetter.property.propertyName +'</strong> with a private message.')
		}
		else{
			text.set('html', 'Invite friends and get '+ sendAmount +' when they book their first trip on Jetsetter! <span>Send a private message.</span>');
		}
		
		
		// Get a list of *all* friends
		this.friends = [];
		this.connectedFriendIds = [];
		FB.api('/me/friends', function (response) {
			var friends = response.data;
			if (!friends) {
				return false;
			}
			
			// Get list of friends that are already connected to the app
			FB.api({
				'method': 'friends.getAppUsers'
			}, function (response) {
				this.connectedFriendIds = response;
				
				// Autocomplete should show the unfiltered list of friends, because we don't
				// want users to wonder why the searched friend is missing from the results
				new FbFriendAutocomplete(attachTo.getElement('input'), friends, Array.clone(this.connectedFriendIds), {
					numOfResults: 3,
					buttonLabel: this.options.buttonLabel,
					disableConnectedMembers: this.options.disableConnectedMembers,
					onSelectionMade: function (element) {
						this.sendInvite(element);
					}.bind(this)
				});
				
				// Filter out friends that are already connected
				this.friends = friends.filter(function (friend) {
					if (this.connectedFriendIds.contains(friend.id)) {
						this.connectedFriendIds.splice(this.connectedFriendIds.indexOf(friend.id), 1);
						return false;
					} else {
						return true;
					}
				}, this);
				this.createFriendsList();
				
			}.bind(this));
			
			
		}.bind(this));
		
		// "Refresh" button
		var refreshButtonEl = attachTo.getElement('a.refresh');
		var refreshTooltip = null;
		var tooltipMessage = refreshButtonEl.get('text');
		refreshButtonEl.addEvents({
			'click': function () {
				this.track('refresh');
				this.refreshList();
			}.bind(this),
			'mouseenter': function () {
				refreshTooltip = refreshTooltip ||new Tooltip(refreshButtonEl.getParent());
				refreshTooltip.show(tooltipMessage, refreshButtonEl);
			},
			'mouseleave': function () {
				refreshTooltip.hide();
			}
		});

		var sendButton = $('init-send');
		sendButton.addEvent('click',function(){
			// For this.track()
			this.bodyId = $(document.body).get('id');
			var plt = ''
			switch(this.bodyId){
				case 'invite':
					plt = 'invite';
					break;
				case 'splash':
					plt = 'splash';
					break;
				case 'product-details':
					plt = 'pdp';
			}

			var checkedFriends = this.getCheckedFriends(),
				href = Jetsetter.user.getInviteUrl() + '?osocid=fbsend&facebook=1&plt='+ plt +'&' + Object.toQueryString({'return': location.pathname.toString()}),
				fbObject = {
					method: 'send',
					link: href,
					to: checkedFriends.toString()	
				};
			
			var root = $(document);

			if(this.bodyId == 'product-details'){
				fbObject.name = root.getElement('meta[property=og:title]').get('content');
				fbObject.description = root.getElement('meta[property=og:description]').get('content');
				fbObject.picture = root.getElement('meta[property=og:image]').get('content');
			}
			else{
				fbObject.name = 'Need a vacation?  Become a Jetsetter!';
				fbObject.description = "Get insider access to the places you want to go at prices you won't see anywhere else. Join Jetsetter Now!";
				fbObject.picture = Jetsetter.CDN_HOST + '/static/images/facebook/splashImage.jpg';
			}
			
			FB.ui(fbObject, function(response){
				this.refreshList();
			}.bind(this));
			
		}.bind(this));

		var sendNoNames = $('launch-send');

		sendNoNames.cloneEvents(sendButton);

	},
	
	show: function () {
		this.attachTo.show();
	},

	getCheckedFriends: function(){
		var checked = this.attachTo.getElements('input[type=checkbox]:checked');

		return checked.map(function(item){
			return item.get('data-fbid');
		});
	},
	
	getRandomFriends: function (num) {
		num = num || 3;
		
		if (this.friends.length <= num) {
			return this.friends;
		}
		
		var randomFriends = [];
		while (randomFriends.length < num) {
			var randomNum = Number.random(0, this.friends.length - 1);
			var randomFriend = this.friends[randomNum];
			
			var isAlreadyChosen = randomFriends.some(function (friend) {
				return (friend.id == randomFriend.id);
			});
			
			if (!isAlreadyChosen) {
				randomFriends.push(randomFriend);
			}
		}
		
		return randomFriends;
	},
	
	createFriendsList: function () {
		var friends = this.getRandomFriends(6);
		
		// @NOTE: Use for testing. 
		if (location.hash == '#invite-yourself') {
			friends = Array.append(friends, [
				{
					'id': FB.getSession().uid,
					'name': 'Yours Truly'
				}
			]);
		}
				
		friends.each(function (friend) {
			this.createFriendEl(friend).inject(this.listEl);
		}, this);
	},
	
	refreshList: function () {
		this.listEl.empty();
		this.createFriendsList();
	},
	
	sendInvite: function (element) {
		this.track('invite-click');
		
		if (element.hasClass('disabled')) {
			return false;
		}
		
		var friend = element.retrieve('data');
		
		//element.getElement('button').set('disabled', true);
		
		// Check if the invitee was previously invited
		// @NOTE: Can't really check for existing members because we don't have
		// the email address
		var req = new Request.JSON({
			url: '/invitation/addsocialinvitation',
			data: Object.merge({
				'social-type': 'facebook',
				'check': true,
				'social-id': friend.id
			}, this.options.invitationAsyncParams),
			onSuccess: function (json) {
				var isPreviouslyInvited = !!json.data;
				
				if (isPreviouslyInvited) {
					this.markFriendAsInvited(friend);
					
					element.addClass('disabled');
					new Element('span', {
						'class': 'message',
						'text': 'Already invited.'
					}).replaces(element.getElement('button'));
				} else {
					this.onCheckComplete(element);
				}
			}.bind(this)
		}).get();
		
	},
	
	setInviteUrlParams: function (inviteUrl) {
		var uri = new URI(inviteUrl);
		uri.setData({
			'facebook': '',
			'osocid': this.options.osocid,
			'plt': 'connect-widget'
		}, true);
		
		return uri.toString();
	},
	
	onCheckComplete: function (listItemEl) {
		this.showFbModal(listItemEl);
	},
	
	showFbModal: function (listItemEl, wallPostContent) {
		wallPostContent = wallPostContent || this.options.wallPostContent;
		
		// A hack to override the Facebook dialog scrolling to the top of the window
		var originalScrollY = window.getScroll().y;
		
		var friend = listItemEl.retrieve('data');
		FB.ui({
			'method': 'feed',
			'name': wallPostContent.name,
			'description': wallPostContent.description,
			'link': wallPostContent.inviteUrl,
			'to': friend.id,
			'actions':[{
				'name': 'See More',
				'link': wallPostContent.inviteUrl
			}],
			'picture': wallPostContent.imageUrl
		}, function (response) {
			if (response && response.post_id) {
				this.track('invite-sent');
				this.onPostedToWall(listItemEl);
			} else {
				//listItemEl.getElement('button').set('disabled', false);
			}
			
			window.scrollTo(0, originalScrollY);
		}.bind(this));
		
	},
	
	onPostedToWall: function (listItemEl) {
		var friend = listItemEl.retrieve('data');
		var req = new Request.JSON({
			url: '/invitation/addsocialinvitation',
			data: Object.merge({
				'social-type': 'facebook',
				'social-id': friend.id
			}, this.options.invitationAsyncParams)
		}).post();
		
		this.markFriendAsInvited(friend);
		
		if (listItemEl.getParent() === this.listEl) {
			this.replaceFriend(listItemEl);
		} else {
			this.updateFriendStatus(listItemEl);
		}
	},
	
	markFriendAsInvited: function (friend) {
		this.friends[this.friends.indexOf(friend)].isInvited = true;
	},
	
	updateFriendStatus: function (element) {
		var friend = element.retrieve('data');
		this.createFriendEl(friend).replaces(element);
	},
	
	replaceFriend: function (element) {
		var friend = element.retrieve('data');
		this.friends.splice(this.friends.indexOf(friend), 1);
		
		element.fade('out').get('tween').chain(function () {
			this.createFriendEl(this.getRandomFriends(1)[0])
				.setStyle('opacity', 0)
				.inject(element, 'after')
				.tween('opacity', 1);
				
			element.destroy();
		}.bind(this));
		
	},
	
	track: function (str) {
		_gaq.push(['_trackEvent', 'FBInvite', this.bodyId, str]);
	}
	
});

var FbInviteWidget = new Class({
	
	Extends: FbFriendsWidget,
	
	options: {
		'buttonLabel': 'Invite',
		'osocid': 'fb-invite',
		'disableConnectedMembers': true
	},
	
	initialize: function (attachTo, options) {
		this.parent(attachTo, options);
	},
	
	onCheckComplete: function (listItemEl) {
		var randomCopy = [{
				'name': 'Get out of the house',
				'description': 'Let’s be honest: Staycations are lame. You need to get out, see the world and experience cocktails on the beach in a different language. Check out Jetsetter and go on a vacation worth posting about.'
			}, {
				'name': 'Go here',
				'description': 'Yes, this is a real place on earth, and it’s a spot where you should vacation. It’s not just a tiny image on Facebook, and you should get there pronto. Check out Jetsetter to make it happen'
			}, {
				'name': 'Here’s $25 to travel',
				'description': 'Join Jetsetter for amazing travel experiences around the world at members-only prices. Invite your friends and you’ll get $25 when they book their first trip.'
			}
		].getRandom();
		
		this.showFbModal(listItemEl, {
			'name': randomCopy.name,
			'description': randomCopy.description,
			'inviteUrl': Jetsetter.user.getInviteUrl(),
			'imageUrl': Jetsetter.CDN_HOST + '/static/images/facebook/post-thumbs/' + Number.random(1, 10) + '.jpg'
		});
	}
	
});

var FbShareWidget = new Class({
	
	Extends: FbFriendsWidget,
	
	options: {
		'buttonLabel': 'Share',
		'osocid': 'fb-share'
	},
	
	initialize: function (attachTo, options) {
		this.parent(attachTo, options);
		
		this.attachTo.getElement('h3').set('html', 'Tell Your Friends');
	},
	
	onCheckComplete: function (listItemEl) {
		var property = this.options.property;
		var inviteUrl = this.options.wallPostContent.inviteUrl;
		
		FB.api('/me', function (user) {
			this.showFbModal(listItemEl, {
				'name': user.name + ' thought you might like ' + property.propertyName,
				'description': property.description,
				'inviteUrl': inviteUrl,
				'imageUrl': Jetsetter.CDN_HOST + '/static/' + property.propertyImage
				// 'imageUrl': 'http://qa.jetsetter.com/static/' + property.propertyImage
			});
		}.bind(this));
	}
	
});

var FbSendWidget = new Class({
	
	Implements: Options,

	options:{
		
	},

	initialize: function(rootEl, options){
		this.rootEl = rootEl;
		this.setOptions(options);

		var fbHref = this.options.wallPostContent ? '<fb:send href="'+ this.options.wallPostContent.inviteUrl +'"></fb:send>' : '<fb:send></fb:send>',
			sendButton = new Element('div', {
				'class': 'send-wrap',
				'html': fbHref
			}).inject(this.rootEl.getElement('.bd'));

		FB.XFBML.parse(this.rootEl);
	},

	show: function(){
		this.rootEl.show();
	}

});
var FbWidgetLoader = new Class({
	
	Implements: Options,
	
	options: {
		widgetChoice: 'invite',
		widgetOptions: null
	},
	
	initialize: function (attachTo, options) {
		this.attachTo = attachTo;
		this.setOptions(options);
		
		FB.getLoginStatus(function (response) {
			if (response.session && response.status === 'connected') {
				this.showFriendsWidget();
			} else {
				var widgetEl = attachTo.getElement('#fb-connect-widget');
				var copy = (response.status == 'notConnected') ?
					'Tell your friends about Jetsetter and share amazing travel experiences' : // Logged in but not connected
					'You are currently not logged in to Facebook, please log in to enjoy Jetsetter with your friends';  // Not logged in
				
				var fbConnectWidget = new FbConnectWidget(widgetEl, {
					'copy': copy
				}).show();
				
				fbConnectWidget.addEvent('connect', function () {
					fbConnectWidget.hide();
					this.showFriendsWidget();
				}.bind(this));
			}
		}.bind(this));
	},
	
	showFriendsWidget: function () {
		var widgetEl = this.attachTo.getElement('#fb-invite-widget');
		new FbInviteWidget(widgetEl, this.options.widgetOptions).show();
	}
	
});

var EmailTooltip = new Class({

	Extends: HoverTooltip,

	initialize: function(rootEl){

		this.rootEl = rootEl;
		
		this.parent(rootEl, {
			className: 'email-tooltip',
			tooltipContent: 'Remind me when sale starts',
			tooltipHover: false
		});

		this.rootEl.addEvent('click',function(){
			switch(this.rootEl.hasClass('icon-email-clicked')){
				case true:
					//already clicked - lets cancel
					//this.rootEl.removeClass('icon-email-clicked');
					document.location = '/account/emailpreferences';
					break;
				case false:
					//not clicked - lets remind them
					this.sendReq();

					break;
			}

		}.bind(this));

	},

	sendReq: function(){
		new UserService().addUserSaleNotification({
			saleNotificationTypeId: 1,
			saleId: this.rootEl.get('data-id'),
			onSuccess: function () {
				this.rootEl.addClass('icon-email-clicked');
				this.setContent('Notification will be sent on <strong>' + this.rootEl.get('data-startdate') + '</strong>.');
			}.bind(this),
			onFailure: function(err, message) {
				alert(message);
			}.bind(this)
		});
	}
});


var CalTooltip = new Class({

	Extends: HoverTooltip,

	initialize: function (rootEl) {
		this.rootEl = rootEl;

		this.parent(rootEl, {
			className: 'add-to-cal clearfix',
			tooltipContent: this.buildHtml()
		});
	},

	buildHtml: function () {
		//to make google work the dates need to be in the correct format
		var data = {
			alias: this.rootEl.get('data-alias'),
			title: this.rootEl.get('data-title'),
			startDate: this.rootEl.get('data-startdate'),
			endDate: this.rootEl.get('data-enddate'),
			link: Jetsetter.HOST + this.rootEl.get('data-alias'),
			googleStart: this.rootEl.get('data-googleStart'),
			googleEnd: this.rootEl.get('data-googleEnd')
		},
		source = '<div id="cal-test" class="cal-reminder-tooltip clearfix">\
				<h4>Add to Calendar</h4>\
				<ul class="clearfix">\
					<li class="outlook">\
						<a href="/calendar/create-event?alias={{alias}}&title={{title}}&startDate={{startDate}}&endDate={{endDate}}"><span class="icon"></span> <span>Outlook</span></a>\
					</li>\
					<li class="ical last">\
						<a href="/calendar/create-event?alias={{alias}}&title={{title}}&startDate={{startDate}}&endDate={{endDate}}"><span class="icon"></span> <span>iCal</span></a>\
					</li>\
					<li class="google last-row">\
						<a href="https://www.google.com/calendar/event?action=TEMPLATE&text={{title}}+on+Jetsetter&dates={{googleStart}}/{{googleEnd}}&details=Jetsetter+presents+{{title}}:+{{link}}?ep=ugoogle"><span class="icon"></span> <span>Google</span></a>\
					</li>\
					<li class="yahoo last-row last">\
						<a href="http://calendar.yahoo.com/?v=60&VIEW=d&TITLE={{title}}+on+Jetsetter&ST={{googleStart}}$ET={{googleEnd}}&DUR={$DURATION}&URL={{link}}&DESC=Jetsetter+presents+{{title}}:+{{link}}?ep=uyahoo"><span class="icon"></span> <span>Yahoo</span></a>\
					</li>\
				</ul>\
			</div>',
		template = Handlebars.compile(source);

		return template(data);
	}

});
var ReminderTooltips = new Class({

	initialize: function(options){
		

		$(document.body).addEvent('mouseover:relay(span.icon-mail)',function(e, elem){
			new EmailTooltip(elem,{
				'className': 'email-reminder-tooltip'
			});
		});


	}
});
